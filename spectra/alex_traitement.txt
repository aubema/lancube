 1/1:

import sys; print('Python %s on %s' % (sys.version, sys.platform))
sys.path.extend(['/Users/admin/PycharmProjects/untitled1'])
 2/1: runfile('/Users/admin/.spyder-py3/temp.py', wdir='/Users/admin/.spyder-py3')
 2/2: runfile('/Users/admin/.spyder-py3/temp.py', wdir='/Users/admin/.spyder-py3')
 2/3: runfile('/Users/admin/.spyder-py3/temp.py', wdir='/Users/admin/.spyder-py3')
 2/4: runfile('/Users/admin/.spyder-py3/temp.py', wdir='/Users/admin/.spyder-py3')
 2/5: runfile('/Users/admin/.spyder-py3/temp.py', wdir='/Users/admin/.spyder-py3')
 2/6: runfile('/Users/admin/.spyder-py3/temp.py', wdir='/Users/admin/.spyder-py3')
 2/7: runfile('/Users/admin/.spyder-py3/temp.py', wdir='/Users/admin/.spyder-py3')
 2/8: runfile('/Users/admin/.spyder-py3/temp.py', wdir='/Users/admin/.spyder-py3')
 2/9: runfile('/Users/admin/.spyder-py3/temp.py', wdir='/Users/admin/.spyder-py3')
2/10: runfile('/Users/admin/.spyder-py3/temp.py', wdir='/Users/admin/.spyder-py3')
2/11: runfile('/Users/admin/.spyder-py3/temp.py', wdir='/Users/admin/.spyder-py3')
 3/1: runfile('/Users/admin/radiation', wdir='/Users/admin')
 3/2: debugfile('/Users/admin/radiation', wdir='/Users/admin')
 4/1: runfile('/Users/admin/radiation', wdir='/Users/admin')
 4/2: runfile('/Users/admin/radiation', wdir='/Users/admin')
 4/3: runfile('/Users/admin/radiation', wdir='/Users/admin')
 4/4: runfile('/Users/admin/radiation', wdir='/Users/admin')
 5/1: ?
 5/2: pip
 5/3: python pip
 6/1: runfile('/Users/admin/rad plateau', wdir='/Users/admin')
 6/2: runfile('/Users/admin/rad plateau log', wdir='/Users/admin')
 6/3: runfile('/Users/admin/rad plateau log', wdir='/Users/admin')
 6/4: runfile('/Users/admin/rad plateau log', wdir='/Users/admin')
 6/5: runfile('/Users/admin/rad plateau log', wdir='/Users/admin')
 6/6: runfile('/Users/admin/rad plateau log', wdir='/Users/admin')
 6/7: runfile('/Users/admin/rad plateau log', wdir='/Users/admin')
 6/8: runfile('/Users/admin/rad plateau log', wdir='/Users/admin')
 6/9: runfile('/Users/admin/rad plateau log', wdir='/Users/admin')
6/10: runfile('/Users/admin/rad plateau log', wdir='/Users/admin')
6/11: runfile('/Users/admin/rad plateau log', wdir='/Users/admin')
6/12: runfile('/Users/admin/rad plateau log', wdir='/Users/admin')
6/13: runfile('/Users/admin/rad plateau log', wdir='/Users/admin')
6/14: runfile('/Users/admin/rad plateau log', wdir='/Users/admin')
6/15: runfile('/Users/admin/rad plateau log', wdir='/Users/admin')
6/16: runfile('/Users/admin/rad plateau log', wdir='/Users/admin')
6/17: runfile('/Users/admin/rad plateau log', wdir='/Users/admin')
6/18: runfile('/Users/admin/rad plateau log', wdir='/Users/admin')
 7/1: runfile('/Users/admin/dev3 quantique', wdir='/Users/admin')
 7/2: runfile('/Users/admin/dev3 quantique', wdir='/Users/admin')
 7/3: runfile('/Users/admin/dev3 quantique', wdir='/Users/admin')
 7/4: runfile('/Users/admin/dev3 quantique', wdir='/Users/admin')
 7/5: runfile('/Users/admin/dev3 quantique', wdir='/Users/admin')
 9/1: runfile('/Users/admin/dev3 quantique', wdir='/Users/admin')
 9/2: runfile('/Users/admin/dev3 quantique', wdir='/Users/admin')
 9/3: runfile('/Users/admin/dev3 quantique', wdir='/Users/admin')
 9/4: runfile('/Users/admin/dev3 quantique', wdir='/Users/admin')
 9/5: runfile('/Users/admin/dev3 quantique', wdir='/Users/admin')
 9/6: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
 9/7: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
 9/8: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
 9/9: runfile('/Users/admin/dev3 quantique', wdir='/Users/admin')
9/10: runfile('/Users/admin/dev3 quantique', wdir='/Users/admin')
9/11: runfile('/Users/admin/dev3 quantique', wdir='/Users/admin')
9/12: runfile('/Users/admin/dev3 quantique', wdir='/Users/admin')
9/13: runfile('/Users/admin/dev3 quantique', wdir='/Users/admin')
9/14: runfile('/Users/admin/dev3 quantique', wdir='/Users/admin')
9/15: runfile('/Users/admin/dev3 quantique', wdir='/Users/admin')
9/16: runfile('/Users/admin/dev3 quantique', wdir='/Users/admin')
9/17: runfile('/Users/admin/dev3 quantique', wdir='/Users/admin')
10/1: runfile('/Users/admin/dev3 quantique', wdir='/Users/admin')
10/2: runfile('/Users/admin/dev3 quantique', wdir='/Users/admin')
10/3: runfile('/Users/admin/dev3 quantique', wdir='/Users/admin')
10/4: runfile('/Users/admin/dev3 quantique', wdir='/Users/admin')
10/5: runfile('/Users/admin/dev3 quantique', wdir='/Users/admin')
10/6: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
10/7: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
10/8: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
10/9: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
10/10: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
10/11: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
10/12: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
10/13: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
10/14: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
10/15: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
10/16: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
10/17: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
10/18: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
10/19: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
10/20: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
10/21: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
10/22: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
10/23: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
10/24: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
10/25: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
10/26: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/1: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/2: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/3: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/4: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/5: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/6: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/7: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/8: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/9: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/10: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/11: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/12: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/13: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/14: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/15: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/16: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/17: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/18: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/19: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/20: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/21: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/22: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/23: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/24: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/25: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/26: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/27: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/28: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/29: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/30: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/31: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/32: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/33: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/34: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/35: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
11/36: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
15/1: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
15/2: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
16/1: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
16/2: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
16/3: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
16/4: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
16/5: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
16/6: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
16/7: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
16/8: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
16/9: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
16/10: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
16/11: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
16/12: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
16/13: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
17/1: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
17/2: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
17/3: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
17/4: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
17/5: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
17/6: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
17/7: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
17/8: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
17/9: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
17/10: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
17/11: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
17/12: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
17/13: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
17/14: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
17/15: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
17/16: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
17/17: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
17/18: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
17/19: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
17/20: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
17/21: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
17/22: runfile('/Users/admin/stats distribution z', wdir='/Users/admin')
17/23: runfile('/Users/admin/untitled0.py', wdir='/Users/admin')
17/24: runfile('/Users/admin/untitled12.py', wdir='/Users/admin')
17/25: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/26: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/27: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/28: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/29: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/30: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/31: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/32: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/33: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/34: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/35: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/36: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/37: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/38: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/39: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/40: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/41: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/42: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/43: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/44: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/45: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/46: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/47: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/48: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/49: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/50: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/51: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/52: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/53: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/54: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/55: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/56: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/57: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/58: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/59: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/60: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/61: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/62: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/63: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/64: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/65: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/66: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/67: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/68: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/69: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/70: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/71: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/72: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/73: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/74: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/75: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
17/76: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
18/1: runfile('/Users/admin/Documents/Arduino/macos shell command_serial com.py', wdir='/Users/admin/Documents/Arduino')
18/2: runfile('/Users/admin/Documents/Arduino/macos shell command_serial com.py', wdir='/Users/admin/Documents/Arduino')
18/3: runfile('/Users/admin/Documents/Arduino/macos shell command_serial com.py', wdir='/Users/admin/Documents/Arduino')
18/4: runfile('/Users/admin/Documents/Arduino/macos shell command_serial com.py', wdir='/Users/admin/Documents/Arduino')
18/5: runfile('/Users/admin/Documents/Arduino/macos shell command_serial com.py', wdir='/Users/admin/Documents/Arduino')
18/6: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/7: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/8: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/9: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/10: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/11: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/12: echo --help
18/13: echo
18/14: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/15: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/16: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/17: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/18: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/19: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/20: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/21: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/22: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/23: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/24: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/25: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/26: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/27: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/28: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/29: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/30: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/31: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/32: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/33: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/34: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/35: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/36: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/37: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/38: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/39: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/40: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/41: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/42: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/43: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/44: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/45: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/46: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/47: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/48: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/49: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/50: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/51: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/52: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/53: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/54: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/55: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/56: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/57: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/58: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/59: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/60: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/61: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/62: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/63: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/64: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/65: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/66: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/67: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/68: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/69: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/70: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/71: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/72: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/73: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/74: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/75: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/76: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/77: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/78: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/79: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/80: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/81: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/82: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/83: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/84: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/85: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/86: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/87: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/88: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/89: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/90: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/91: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
18/92: runfile('/Users/admin/Documents/Arduino/macos command test', wdir='/Users/admin/Documents/Arduino')
19/1: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
19/2: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
19/3: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
19/4: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
19/5: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
19/6: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
19/7: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
19/8: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
19/9: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
19/10: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
19/11: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
19/12: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
19/13: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
19/14: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
19/15: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
19/16: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
19/17: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
19/18: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
19/19: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/1: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/2: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/3: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/4: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/5: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/6: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/7: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/8: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/9: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/10: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/11: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/12: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/13: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
20/14: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
20/15: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/16: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
20/17: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
20/18: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/19: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/20: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/21: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/22: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/23: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/24: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/25: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/26: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/27: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/28: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/29: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/30: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/31: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/32: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/33: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/34: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/35: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/36: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/37: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/38: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/39: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/40: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/41: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/42: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
20/43: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
21/1: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
22/1: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
23/1: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
24/1: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
27/1: ls
27/2: bash
27/3: ls -l
27/4: ls
27/5: cd
27/6: cd Documents/
27/7: ls
27/8: cd Arduino/
27/9: ls
27/10: live_graph_as_example
27/11: python live_graph_as_example
27/12: python live_graph_as_example.py
27/13: python2 live_graph_as_example.py
27/14: python3 live_graph_as_example.py
27/15: python3 live_graph_as_example
27/16: python2 live_graph_as_example
27/17: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
27/18: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
27/19: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
27/20: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
27/21: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
27/22: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
27/23: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
27/24: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
27/25: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/1: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/2: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/3: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/4: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/5: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/6: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/7: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/8: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/9: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/10: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/11: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/12: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/13: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/14: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/15: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/16: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/17: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/18: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/19: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/20: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/21: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/22: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/23: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/24: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/25: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/26: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/27: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/28: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/29: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/30: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/31: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/32: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/33: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/34: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/35: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/36: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/37: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/38: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/39: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/40: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/41: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/42: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/43: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/44: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/45: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/46: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/47: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/48: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/49: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/50: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/51: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/52: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/53: runfile('/Users/admin/Documents/Arduino/live matplotlib', wdir='/Users/admin/Documents/Arduino')
28/54: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
28/55: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
28/56: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
28/57: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
28/58: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
28/59: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
28/60: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
28/61: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
28/62: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
28/63: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
28/64: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
28/65: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
28/66: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
28/67: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
28/68: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
28/69: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
28/70: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
28/71: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
28/72: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
28/73: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
29/1: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
29/2: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
29/3: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
29/4: runfile('/Users/admin/Documents/Arduino/hello world', wdir='/Users/admin/Documents/Arduino')
30/1: import subprocess
30/2: data = subprocess.Popen("ls", stdout = PIPE)
30/3: data = subprocess.Popen("ls", stdout = subprocess.PIPE)
30/4: print (data)
30/5: data
30/6: data
30/7: data
30/8: data = subprocess.Popen("/Users/ls", stdout = output)
30/9: output = str()
30/10: data = subprocess.Popen("/Users/ls", stdout = output)
34/1: test
36/1: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
36/2: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
36/3: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
36/4: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
36/5: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
36/6: runfile('/Users/admin/Documents/physique/ete 2017/quantique 2/code quantique muon', wdir='/Users/admin/Documents/physique/ete 2017/quantique 2')
37/1: runfile('/Users/admin/Documents/Arduino/hello world', wdir='/Users/admin/Documents/Arduino')
37/2: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
37/3: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
37/4: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
37/5: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
37/6: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
37/7: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
37/8: runfile('/Users/admin/Documents/Arduino/list example', wdir='/Users/admin/Documents/Arduino')
37/9: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/10: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/11: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/12: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/13: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/14: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/15:
x = linspace(0, 100, 100)
y = sin(x)

# write data to file
data = open("arduino_output123.txt", "w+")
for i in len(x):
    print (i)
37/16:
x = linspace(0, 100, 100)
y = sin(x)

# write data to file
data = open("arduino_output123.txt", "w+")
37/17:
x = linspace(0, 100, 100)
y = sin(x)

# write data to file
data = open("arduino_output123.txt", "w+")
print ("hi")
37/18: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/19: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/20: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/21: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/22: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/23: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/24: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/25:
x = linspace(0, 100, 100)
y = sin(x)

print (x[i])
37/26:
ta
x = linspace(0, 100, 100)
y = sin(x)

print (x(i))
37/27:
x = linspace(0, 100, 100)
y = sin(x)

print (x(i))
37/28:
x = linspace(0, 100, 100)
y = sin(x)

print (x[i], x[i+1])
37/29: print (x[i], x[i+2])
37/30: print (x[i], ",", x[i+2])
37/31: data.write(x[i], ",", y[i])
37/32: data.write(x[i] + "," + y[i])
37/33: data.write(str(x[i]) + "," + str(y[i]))
37/34:
data = open("arduino_output123.txt", "w+")
for i in range(len(x)):
    print (i)
    data.write(str(x[i]) + "," + str(y[i]))
37/35: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/36: print (data.read())
37/37:
data = open("arduino_output123.txt", "w+")
for i in range(len(x)):
    print (i)
    data.write(str(x[i]) + "," + str(y[i]))


data.close()
data.open()
print (data.read())
37/38: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/39:
data.close()
print (data)
37/40: print (data)
37/41: print (data.read())
37/42: print data.read()
37/43:
data = open("arduino_output123.txt", "r")
print (data.read())
37/44:
data = open("arduino_output123.txt", "w+")
for i in range(len(x)):
    print (i)
    data.write(str(x[i]) + "," + str(y[i]) + "\n")


#data.close()
data = open("arduino_output123.txt", "r")
print (data.read())
37/45: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/46: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/47: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/48: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/49: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/50: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/51: print (graph_data)
37/52: print (graph_data)
37/53:
graph_data = open("arduino_output123.txt","r").read()
print (graph_data)
37/54: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/55: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/56: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/57: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/58: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/59:
graph_data = open("arduino_output123.txt","r").read()
lines = graph_data.split("\n")
xs = []
ys = []
for line in lines:
    if len(line) > 1:
        x, y = line.split(",")
        xs.append(x)
        ys.append(y)

ax1.clear()
ax1.plot(xs, ys)
37/60:
data = open("arduino_output123.txt", "w+")

for i in range(len(x)):
    data.write(str(x[i]) + "," + str(y[i]) + "\n")


data.close()
37/61:
graph_data = open("arduino_output123.txt","r").read()
lines = graph_data.split("\n")
xs = []
ys = []
for line in lines:
    if len(line) > 1:
        x, y = line.split(",")
        xs.append(x)
        ys.append(y)

ax1.clear()
ax1.plot(xs, ys)
37/62: plt.show()
37/63: plt.show()
37/64:
style.use('fivethirtyeight')
fig = plt.figure()
ax1 = fig.add_subplot(1,1,1)

#animate graph for live    
#ani = animation.FuncAnimation(fig, animate, interval=1000)
plt.show()
37/65: ani = animation.FuncAnimation(fig, animate, interval=1000)
37/66:
ani = animation.FuncAnimation(fig, animate, interval=1000)
plt.show()
37/67:
style.use('fivethirtyeight')
fig = plt.figure()
ax1 = fig.add_subplot(1,1,1)

#animate graph for live    
ani = animation.FuncAnimation(fig, animate, interval=1000)
plt.show()
37/68: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/69: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/70: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/71: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/72: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/73: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/74: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/75: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/76: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/77: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/78: ls
37/79: bash
37/80: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/81: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/82: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/83: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/84: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/85: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/86: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/87: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/88: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/89: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/90:
plt.axis(min(x), max(x), min(y), max(y))
plt.ion()

for i in range(10):
        plt.scatter(i, y)
        plt.pause(0.05)


while True:
        plt.pause(0.05)
37/91:
plt.axis(min(x), max(x), min(y), max(y))
plt.ion()

for i in range(10):
        plt.scatter(i, y)
        plt.pause(0.05)


while True:
        plt.pause(0.05)
37/92: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/93: runfile('/Users/admin/Documents/Arduino/plot_list', wdir='/Users/admin/Documents/Arduino')
37/94: runfile('/Users/admin/Documents/Arduino/plot_list', wdir='/Users/admin/Documents/Arduino')
37/95: runfile('/Users/admin/Documents/Arduino/plot_list', wdir='/Users/admin/Documents/Arduino')
37/96: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/97: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/98: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/99: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/100: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/101: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/102: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/103: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/104: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/105: print (x.append(1))
37/106: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/107: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/108: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/109: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/110: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/111:
angle_start = float(input("angle start:\n"))
angle_stop = float(input("angle stop:\n"))
angle_step = int(input("angle step:\n"))

#make data
x = arange(angle_start, angle_stop, angle_step)
y = 2*x

print (x)
37/112: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/113: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/114: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/115: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/116: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/117: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/118: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/119: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/120: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/121:
x = arange(angle_start, angle_stop, angle_step)
y = 2*x

x.append(1)

print (x)
37/122:
x = arange(angle_start, angle_stop, angle_step)
y = 2*x

x.append(1)

print (x)
37/123:
x = list(arange(angle_start, angle_stop, angle_step))
y = 2*x

x.append(1)

print (x)
37/124: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/125:
x = list(arange(angle_start, angle_stop, angle_step))
y = 2*x

x.append(1)
y.append(1)

print (x, y)
37/126:
x = list(arange(angle_start, angle_stop, angle_step))
y = 2*x

x.append(1)
y.append(1)

print (x, "\n", y)
37/127:
x = list(arange(angle_start, angle_stop, angle_step))
y = []
y.append(2*x)

x.append(1)
y.append(1)

print (x, "\n", y)
37/128:
x = arange(angle_start, angle_stop, angle_step)
y = 2*i
#
#x.append(1)
#y.append(1)

print (x, "\n", y)
37/129:
x = arange(angle_start, angle_stop, angle_step)
y = 2*x
#
#x.append(1)
#y.append(1)

print (x, "\n", y)
37/130: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/131:
x = arange(angle_start, angle_stop, angle_step)
y = 2*x

x = list(x)
y = list(y)

x.append(1)
y.append(1)

print (x, "\n", y)
37/132: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/133: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/134: runfile('/Users/admin/Documents/Arduino/slideshow_plt.pause', wdir='/Users/admin/Documents/Arduino')
37/135: runfile('/Users/admin/Documents/Arduino/slideshow_test', wdir='/Users/admin/Documents/Arduino')
37/136: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/137: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/138: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/139: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/140: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/141: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/142: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/143: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/144: runfile('/Users/admin/Documents/Arduino/plot_list_live_update', wdir='/Users/admin/Documents/Arduino')
37/145: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/146: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/147: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/148: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/149: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/150:
file_name = "arduino_output123.txt"

#make data
x = [linspace(angle_start, angle_stop, (angle_stop-angle_start+1)/angle_step)]
y = 2*x

for i in range(len(x)):
    x[i] = float (x[i])
    y[i] = float (y[i])


print (x, y)
37/151: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/152:
file_name = "arduino_output123.txt"

#make data
x = linspace(angle_start, angle_stop, (angle_stop-angle_start+1)/angle_step).tolist()
y = 2*x

print (x, y)
37/153: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/154:
x = linspace(angle_start, angle_stop, (angle_stop-angle_start+1)/angle_step).tolist()
y = []
y = 2*x

print (x, y)
37/155:
x = linspace(angle_start, angle_stop, (angle_stop-angle_start+1)/angle_step).tolist()
y = list.append(2*x)

print (x, y)
37/156:
x = arange(angle_start, angle_stop, angle_step)
y = 2*x

x = list(x)
y = list(y)

print (x, "\n", y)
37/157:
x = arange(angle_start, angle_stop, angle_step)
y = 2*x

x = list(x)
y = list(y)

print (x, "\n", y)
37/158: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/159: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/160:
x = arange(angle_start, angle_stop, angle_step)
y = 2*x

x = list(x)
y = list(y)

for i in range(len(x)):
    print (x[i], ",", y[i], ",")
37/161:
x = arange(angle_start, angle_stop, angle_step)
y = 2*x

x = list(x)
y = list(y)

for i in range(len(x)):
    print (x[i], ",", y[i], "\n")
37/162:
x = list(x)
y = list(y)

for i in range(len(x)):
    print (x[i], ",", y[i])
37/163: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/164: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/165: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/166: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/167: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/168: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/169: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/170: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/171: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/172: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/173: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/174: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/175: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/176: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/177: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/178: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/179: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/180: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/181: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/182: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/183: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/184: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/185: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/186: runfile('/Users/admin/Documents/Arduino/live_graph_as_example', wdir='/Users/admin/Documents/Arduino')
37/187: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/188: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/189: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/190: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/191: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/192: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/193: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/194: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/195: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/196: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/197: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/198: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/199: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/200: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/201: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/202: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/203: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/204: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/205: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/206: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/207: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/208: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/209:
x, y = Make_Data() 
print (x, y)
37/210:
x, y = Make_Data() 
print (x, y)
37/211:
x, y = Make_Data() 
print (x, y)
37/212: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/213: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/214: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/215: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/216: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
37/217: runfile('/Users/admin/Documents/Arduino/tkinter_graph_example', wdir='/Users/admin/Documents/Arduino')
37/218: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
37/219:
app = SeaofBTCapp()
ani = animation.FuncAnimation(f, animate, interval=1000)
app.mainloop()
37/220: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
41/1: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
41/2: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
41/3: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
41/4: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
41/5: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
41/6: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
41/7: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
41/8: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
41/9: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
41/10: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
41/11: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
41/12: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
41/13: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
42/1: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
42/2: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
42/3: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
42/4: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
42/5: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
42/6: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
42/7: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
42/8: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
42/9: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
42/10:
cmd = "airport", "-I", "|", "grep", "RSSI:"
data = open(file_name, "w+")
data.write(subprocess.Popen(cmd, ))
print (data.read())
42/11:
cmd = "airport ", "-I", " | ", "grep", "\"RSSI\"":
data = open(file_name, "w+")
data.write(subprocess.Popen(cmd, stdout=subprocess.PIPE))
print (data.read())
42/12:
cmd = "airport ", "-I", " | ", "grep ", "\"RSSI\"":
data = open(file_name, "w+")
data.write(subprocess.Popen(cmd, stdout=subprocess.PIPE))
print (data.read())
42/13:
cmd = "airport ", "-I", " | ", "grep ", '"RSSI"':
data = open(file_name, "w+")
data.write(subprocess.Popen(cmd, stdout=subprocess.PIPE))
print (data.read())
42/14:
cmd = "airport ", "-I", " | ", "grep ", '"RSSI:"'
data = open(file_name, "w+")
data.write(subprocess.Popen(cmd, stdout=subprocess.PIPE))
print (data.read())
42/15: p = Popen(['open', '-a', 'Terminal', '-n'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)
42/16:
p = subprocess.Popen(['open', '-a', 'Terminal', '-n'], stdout=subprocess.PIPE, subprocess.stdin=PIPE, subprocess.stderr=STDOUT)

output = p.communicate(input='ls')
print(output)
42/17:
p = subprocess.Popen(['open', '-a', 'Terminal', '-n'], stdout=subprocess.PIPE, subprocess.stdin=subprocess.PIPE, stderr=subprocess.STDOUT)

output = p.communicate(input='ls')
print(output)
42/18:
p = subprocess.Popen(['open', '-a', 'Terminal', '-n'], stdout=subprocess.PIPE, subprocess.stdin=subprocess.PIPE, stderr=STDOUT)

output = p.communicate(input='ls')
print(output)
42/19:
p = subprocess.Popen(['open', '-a', 'Terminal', '-n'], stdout=subprocess.PIPE, subprocess.stdin=subprocess.PIPE)

output = p.communicate(input='ls')
print(output)
42/20:
p = subprocess.Popen(['open', '-a', 'Terminal', '-n'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)

output = p.communicate(input='ls')
print(output)
42/21:
from subprocess import *
p = subprocess.Popen(['open', '-a', 'Terminal', '-n'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)

output = p.communicate(input='ls')
print(output)
42/22: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
42/23: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
42/24:
cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport ", "-I", " | ", "grep ", '"RSSI:"'
data = open("test_tkinter_2frames.txt", "w+")
data.write(Popen(cmd, stdin=PIPE, stdout=PIPE))
print (data.read())
42/25:
cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", " | ", "grep ", '"RSSI:"'
data = open("test_tkinter_2frames.txt", "w+")
data.write(Popen(cmd, stdin=PIPE, stdout=PIPE))
print (data.read())
42/26: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
42/27:
cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", " | ", "grep ", '"CtlRSSI:"'
data = open("test_tkinter_2frames.txt", "w+")
data.write(str(Popen([cmd], stdin=PIPE, stdout=PIPE)))
print (data.read())
42/28:
cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", " | ", "grep ", '"CtlRSSI:"'
data = open("test_tkinter_2frames.txt", "w+")
data.write(str(Popen(cmd, stdin=PIPE, stdout=PIPE)))
print (data.read())
42/29:
cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", " | ", "grep ", '"CtlRSSI:"'
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, stdin=PIPE, stdout=PIPE)
data.write(command.stdout)
print (data.read())
42/30:
cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", " | ", "grep ", '"CtlRSSI:"'
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, stdin=PIPE, stdout=PIPE)
data.write(str(command.stdout))
print (data.read())
42/31:
cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", " | ", "grep ", '"CtlRSSI:"'
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, stdin=PIPE, stdout=PIPE)
data.write(str(command.stdout))
data.read()
42/32:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", " | ", "grep ", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, stdin=PIPE, stdout=PIPE)
data.write(str(command.stdout))
data.read()
42/33:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", " | ", "grep ", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, stdin=PIPE, stdout=PIPE)
data.write(str(command.stdout))
data.readlines()
42/34:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", " | ", "grep ", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, stdin=PIPE, stdout=PIPE)
data.write(str(command.stdout))
print(data.readlines())
42/35:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", " | ", "grep ", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, stdout=PIPE)
data.write(str(command.stdout))
print(data.readlines())
42/36:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", " | ", "grep ", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "rw")
command = Popen(cmd, stdout=PIPE)
data.write(str(command.stdout))
print(data.readlines())
42/37:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", " | ", "grep ", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "r")
command = Popen(cmd, stdout=PIPE)
data.write(str(command.stdout))
print(data.readlines())
42/38:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", " | ", "grep ", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "r+")
command = Popen(cmd, stdout=PIPE)
data.write(str(command.stdout))
print(data.readlines())
42/39:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", " | ", "grep ", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, stdout=PIPE)
data.write(str(command.stdout))
print(data.readlines())
42/40:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", " | ", "grep ", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, stdout=PIPE)
data.write(str(command.stdout))
print(data.readlines())
42/41:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", " | ", "grep ", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, stdout=PIPE)
data.write(str(command.stdout))
print(data.readlines())
42/42:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", " | ", "grep ", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, stdout=PIPE)
data.write(str(command.stdout))
print(data.readlines())
42/43:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", " | ", "grep ", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, stdout=PIPE)
data.write(str(command.stdout))
print(data.readlines())
42/44:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", " | ", "grep ", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, stdout=PIPE)
data.write(str(command.stdout))
print(data.readlines())
42/45:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, stdout=PIPE)
data.write(str(command.stdout))
data_output = data.read()
print (data_output)
42/46: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
42/47:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, stdout=PIPE)
data.write(str(command())
data_output = data.read()
print (data_output)
42/48:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, stdout=PIPE)
data.write(str(command.PIPE())
data_output = data.read()
print (data_output)
42/49:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, stdout=PIPE)
data.write(str(command.communicate())
data_output = data.read()
print (data_output)
42/50:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, stdout=PIPE)
#data.write(str(command.communicate())
print (command.communicate())
42/51:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, shell=True, stdout=PIPE)
#data.write(str(command.communicate())
print (command.communicate())
42/52:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, shell=True, stdout=PIPE)
data.write(str(command.communicate())
print (command.communicate())
42/53:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, shell=True, stdout=PIPE)
data.write(str(command.communicate())
print ("test")
42/54: print ("test")
42/55:
data.write(str(command.communicate())
print ("test")
42/56:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, shell=True, stdout=PIPE)
data.write(str(command.communicate())
42/57:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, shell=True, stdout=PIPE)
data.write(str(command.communicate())

print ("test")
42/58:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, shell=True, stdout=PIPE)
data.write(str(command.communicate())

print("test")
42/59:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, shell=True, stdout=PIPE)
data.write(str(command.communicate())
print ("test")
42/60: print ("test")
42/61: data.write(str(command.communicate())
42/62:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, shell=True, stdout=PIPE)
data.write(str(command.communicate()))
print ("test")

#
42/63: print (command.communicate())
42/64:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, shell=True, stdout=PIPE)
data.write(str(command.communicate()))
print (command.communicate())
42/65:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
data = open("test_tkinter_2frames.txt", "w+")
command = Popen(cmd, shell=True, stdout=PIPE)
data.write(str(command.communicate()))
print (str(command.communicate()))
42/66:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
command = Popen(cmd, shell=True, stdout=PIPE)
data = open("test_tkinter_2frames.txt", "w+")
data.write(str(command.communicate()))
print (str(command.communicate()))
42/67:
data = open("test_tkinter_2frames.txt", "w+")
data.write("test")
42/68:
data = open("test_tkinter_2frames.txt", "w+")
data.write("test")
42/69:
data = open("test_tkinter_2frames.txt", "w+")
data.write("test2")
42/70:
data = open("test_tkinter_2frames.txt", "w+")
data.write("t")
42/71:
data = open("test_tkinter_2frames.txt", "w+")
data.write("")
42/72:
data = open("test_tkinter_2frames.txt", "w+")
data.write()
42/73:
data = open("test_tkinter_2frames.txt", "w+")
data.write("test")
42/74:
data = open("test_tkinter_2frames.txt", "w+")
data.write("test")
42/75:
data = open("test_tkinter_2frames.txt", "r+")
data.write("test")
42/76:
data = open("test_tkinter_2frames.txt", "r+")
data.write("test")
42/77:
data = open("test_tkinter_2frames.txt", "w")
data.write("test")
42/78: runfile('/Users/admin/Documents/Arduino/tkinter_2frames_app', wdir='/Users/admin/Documents/Arduino')
42/79:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
command = Popen(cmd, shell=True, stdout=PIPE)
data = open("test_tkinter_2frames.txt", "a")
data.write("test")
data.write(str(command.communicate()))
print (str(command.communicate()))
42/80:
data = open("test_tkinter_2frames.txt", "a")
data.write("test")
42/81:
data = open("test_tkinter_2frames.txt", "a")
data.write("test")
42/82:
data = open("test_tkinter_2frames.txt", "a")
data.write("test")
42/83:
data = open("test_tkinter_2frames.txt", "a")
data.write("test")
42/84:
data = open("test_tkinter_2frames.txt", "a+")
data.write("test")
42/85:
data = open("test_tkinter_2frames.txt", "a+")
data.write("test")
42/86:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
command = Popen(cmd, shell=True, stdout=PIPE)
data = open("test_tkinter_2frames.txt", "a+")
data.write(str(command.communicate()))
42/87: print (str(command.communicate()))
42/88:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
command = Popen(cmd, shell=True, stdout=PIPE)
data = open("test_tkinter_2frames.txt", "a+")
data.write(str(command.communicate()))
print (str(command.communicate()))
42/89:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
command = Popen(cmd, shell=True, stdout=PIPE)
data = open("test_tkinter_2frames.txt", "a+")
value = str(command.communicate())
data.write(value)
print (value)
42/90:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
print (cmd)
42/91:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
print (cmd)
command = Popen(cmd, shell=True, stdout=PIPE)
42/92:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
print (cmd)
command = Popen(cmd, shell=True, stdout=PIPE)
data = open("test_tkinter_2frames.txt", "a+")
value = str(command.communicate())
data.write(value)
print (value)
42/93:
cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep 'CtlRSSI'"
#cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']

print (cmd)
42/94:
cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep 'CtlRSSI'"
#cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']

print (cmd)
42/95:
cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep 'CtlRSSI'"
#cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
command = Popen(cmd, shell=True, stdout=PIPE)
data = open("test_tkinter_2frames.txt", "a+")
value = str(command.communicate())
data.write(value)
print (value)
42/96:
cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep 'CtlRSSI'"
#cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
command = Popen(cmd, shell=True, stdout=PIPE)
data = open("test_tkinter_2frames.txt", "a+")
value = str(command.communicate())
data.write(value)
print (value)
42/97:
cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep 'CtlRSSI'"
#cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
command = Popen(cmd, shell=True, stdout=PIPE)
data = open("test_tkinter_2frames.txt", "a+")
value = str(command.communicate())
data.write(value)
print (value)
42/98:
cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep 'CtlRSSI'"
#cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
command = Popen(cmd, shell=True, stdout=PIPE)
data = open("test_tkinter_2frames.txt", "a+")
value = str(command.communicate())
data.write(value)
print (value)
42/99:
cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep 'CtlRSSI'"
#cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
command = Popen(cmd, shell=True, stdout=PIPE)
data = open("test_tkinter_2frames.txt", "a+")
value = str(command.communicate())
data.write(value)
print (value)
42/100:
cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep 'CtlRSSI'"
#cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
command = Popen(cmd, shell=True, stdout=PIPE)
data = open("test_tkinter_2frames.txt", "a+")
value = str(command.communicate())
data.write(value)
print (value)
42/101: data.close()
42/102:
cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep 'CtlRSSI'"
#cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
command = Popen(cmd, shell=True, stdout=PIPE)
data = open("test_tkinter_2frames.txt", "a+")
value = str(command.communicate())
data.write(value)
print (value)
data.close()
42/103:
cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep 'CtlRSSI'"
#cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
command = Popen(cmd, shell=True, stdout=PIPE)
data = open("test_tkinter_2frames.txt", "a+")
value = str(command.communicate())[20,23]
data.write(value)
print (value)
data.close()
42/104:
cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep 'CtlRSSI'"
#cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
command = Popen(cmd, shell=True, stdout=PIPE)
data = open("test_tkinter_2frames.txt", "a+")
value = str(command.communicate())[20:23]
data.write(value)
print (value)
data.close()
42/105:
cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep 'CtlRSSI'"
#cmd = ["/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport", "-I", "|", "grep", '"CtlRSSI:"']
command = Popen(cmd, shell=True, stdout=PIPE)
data = open("test_tkinter_2frames.txt", "a+")
value = str(command.communicate())[20:23]
data.write(value)
print (value)
data.close()
42/106:
cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep 'CtlRSSI'"
command = Popen(cmd, shell=True, stdout=PIPE)
data = open("test_tkinter_2frames.txt", "a+")
value = str(command.communicate())[20:23]
data.write(value)
print (value)
data.close()
42/107:
cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep 'CtlRSSI'"
command = Popen(cmd, shell=True, stdout=PIPE)
data = open("test_tkinter_2frames.txt", "a+")
value = str(command.communicate())[20:23]
data.write(value)
print (value)
data.close()
42/108:
cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep 'CtlRSSI'"
command = Popen(cmd, shell=True, stdout=PIPE)
data = open("test_tkinter_2frames.txt", "a+")
value = str(command.communicate())[20:23], "\n"
data.write(value)
print (value)
data.close()
42/109:
cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep 'CtlRSSI'"
command = Popen(cmd, shell=True, stdout=PIPE)
data = open("test_tkinter_2frames.txt", "a+")
value = str(command.communicate())[20:23] + "\n"
data.write(value)
print (value)
data.close()
42/110:
cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep 'CtlRSSI'"
command = Popen(cmd, shell=True, stdout=PIPE)
data = open("test_tkinter_2frames.txt", "a+")
value = str(command.communicate())[20:23] + "\n"
data.write(value)
print (value)
data.close()
42/111:
def Write_Power(file_name):
    #test code for sample file

#    data = open(file_name, "w+")
#    for i in range(len(x)):
#        data.write(str(x[i]) + "," + str(y[i]) + "\n")
#        
#    data.close()
    
    cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep 'CtlRSSI'"
    command = Popen(cmd, shell=True, stdout=PIPE)
    data = open("test_tkinter_2frames.txt", "a+")
    value = str(command.communicate())[20:23] + "\n"
    data.write(value)
    print (value)
    data.close()
42/112:
def Write_Power(file_name):
    #test code for sample file

#    data = open(file_name, "w+")
#    for i in range(len(x)):
#        data.write(str(x[i]) + "," + str(y[i]) + "\n")
#        
#    data.close()
    
    cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep 'CtlRSSI'"
    command = Popen(cmd, shell=True, stdout=PIPE)
    data = open("test_tkinter_2frames.txt", "a+")
    value = str(command.communicate())[20:23] + "\n"
    data.write(value)
    print (value)
    data.close()
42/113: Write_Power(file_name)     #change file values
42/114: Write_Power(file_name)     #change file values
42/115: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
42/116: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
42/117: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
42/118: Write_Power(file_name)     #change file values
42/119: Write_Power(file_name)     #change file values
42/120: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
42/121:
data = Popen(file_name, "a+")
for i in range(angle_stop-angle_start):
    angle = angle_start+i
    data.write(str(angle)) 
    
    Write_Power(file_name)     #change file values
42/122:
data = Popen(file_name, "a+")
for i in range(angle_stop-angle_start):
    angle = angle_start+i
    data.write(angle) 
    
    Write_Power(file_name)     #change file values
42/123: print (angle_stop-angle_start)
42/124: print (angle_stop-angle_start/angle_step)
42/125: angle_step = float(input("angle step:\n"))
42/126: print (angle_stop-angle_start/angle_step)
42/127: angle_step = float(input("angle step:\n"))
42/128: print (angle_stop-angle_start/angle_step)
42/129: print ((angle_stop-angle_start)/angle_step)
42/130:
data = Popen(file_name, "a+")
print ((angle_stop-angle_start)/angle_step)
for i in range(angle_stop-angle_start):
    angle = angle_start+i
    data.write(str(angle))
    data.write(",")
    Write_Power(file_name)     #change file values
42/131: file_name = input("file name:\n")
42/132: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
42/133:
data = open(file_name, "a+")
print ((angle_stop-angle_start)/angle_step)
for i in range(angle_stop-angle_start):
    angle = angle_start+i
    data.write(str(angle))
    data.write(",")
    Write_Power(file_name)     #change file values
42/134:
data = open(file_name, "a+")
print ((angle_stop-angle_start)/angle_step)
for i in range(int(angle_stop-angle_start)):
    angle = angle_start+i
    data.write(str(angle))
    data.write(",")
    Write_Power(file_name)     #change file values
42/135:
data = open(file_name, "a+")
print ((angle_stop-angle_start)/angle_step)
for i in range(int(angle_stop-angle_start)):
    angle = angle_start+i
    data.write(str(angle))
    data.write(",")
    Write_Power(file_name)     #change file values
    time.sleep(500)
42/136:
data = open(file_name, "a+")
print ((angle_stop-angle_start)/angle_step)
for i in range(int(angle_stop-angle_start)):
    angle = angle_start+i
    data.write(str(angle))
    data.write(",")
    Write_Power(file_name)     #change file values
    time.sleep(0.5)
42/137: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
42/138: runfile('/Users/admin/Documents/Arduino/qtquick_first_window', wdir='/Users/admin/Documents/Arduino')
44/1: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/first_qt.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
44/2: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/first_qt.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
44/3: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/ui_test', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
44/4: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/ui_test', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
44/5: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/ui_test', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
46/1: runfile('/Users/admin/Documents/Arduino/basic_plotting_pyqtgraph', wdir='/Users/admin/Documents/Arduino')
46/2: runfile('/Users/admin/Documents/Arduino/basic_plotting_pyqtgraph', wdir='/Users/admin/Documents/Arduino')
46/3: runfile('/Users/admin/Documents/Arduino/basic_plotting_pyqtgraph', wdir='/Users/admin/Documents/Arduino')
46/4: runfile('/Users/admin/Documents/Arduino/basic_plotting_pyqtgraph', wdir='/Users/admin/Documents/Arduino')
47/1: runfile('/Users/admin/Documents/Arduino/basic_plotting_pyqtgraph', wdir='/Users/admin/Documents/Arduino')
48/1: runfile('/Users/admin/Documents/Arduino/basic_plotting_pyqtgraph', wdir='/Users/admin/Documents/Arduino')
48/2: runfile('/Users/admin/Documents/Arduino/basic_plotting_pyqtgraph', wdir='/Users/admin/Documents/Arduino')
48/3: runfile('/Users/admin/Documents/Arduino/basic_plotting_pyqtgraph', wdir='/Users/admin/Documents/Arduino')
49/1: runfile('/Users/admin/Documents/Arduino/basic_plotting_pyqtgraph', wdir='/Users/admin/Documents/Arduino')
50/1: runfile('/Users/admin/Documents/Arduino/basic_plotting_pyqtgraph', wdir='/Users/admin/Documents/Arduino')
50/2: runfile('/Users/admin/Documents/Arduino/basic_plotting_pyqtgraph', wdir='/Users/admin/Documents/Arduino')
50/3:
data = np.random.normal(size=(100,500))
print (data)
50/4:
data = np.random.normal(size=(100,500))
print (data.split("]"))
50/5:
data = np.random.normal(size=(100,500))
print (str(data))
50/6:
for i in range (len(data)):    
    print (str(data[i]))
50/7: runfile('/Users/admin/Documents/Arduino/basic_plotting_pyqtgraph', wdir='/Users/admin/Documents/Arduino')
51/1: runfile('/Users/admin/Documents/Arduino/basic_plotting_pyqtgraph', wdir='/Users/admin/Documents/Arduino')
51/2: runfile('/Users/admin/Documents/Arduino/basic_plotting_pyqtgraph', wdir='/Users/admin/Documents/Arduino')
51/3: runfile('/Users/admin/Documents/Arduino/basic_plotting_pyqtgraph', wdir='/Users/admin/Documents/Arduino')
52/1: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/first_qt.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
52/2: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/first_qt.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
52/3: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/first_qt.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
53/1: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/first_qt.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
53/2: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/designerExample.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
54/1: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/designerExample.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
54/2: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/designerExample.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
54/3: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/designerExample.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
55/1: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/designerExample.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
55/2: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/designerExample.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
56/1: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/designerExample.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
56/2: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/designerExample.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
57/1: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/designerExample.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
57/2: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/designerExample.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
58/1: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/designerExample.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
58/2: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/designerExample.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
59/1: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/designerExample.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
60/1: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/designerExample.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
60/2: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/designerExample.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
61/1: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/designerExample.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
62/1: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/designerExample.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
62/2: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/designerExample.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
63/1: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/designerExample.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
63/2: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/designerExample.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
64/1: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/designerExample.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
64/2: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/designerExample1.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
65/1: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/designerExample1.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
65/2: runfile('/Users/admin/Documents/Arduino/pyqt5_projects/first_qt.py', wdir='/Users/admin/Documents/Arduino/pyqt5_projects')
66/1:
def Write_Power(file_name):
    #test code for sample file

#    data = open(file_name, "w+")
#    for i in range(len(x)):
#        data.write(str(x[i]) + "," + str(y[i]) + "\n")
#        
#    data.close()
    
    cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep 'CtlRSSI'"
    command = Popen(cmd, shell=True, stdout=PIPE)
    data = open(file_name, "a+")
    value = str(command.communicate())[20:23] + "\n"
    data.write(value)
    print (value)
    data.close()
66/2:
def Write_Power(file_name):
    #test code for sample file

#    data = open(file_name, "w+")
#    for i in range(len(x)):
#        data.write(str(x[i]) + "," + str(y[i]) + "\n")
#        
#    data.close()
    
    cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep 'CtlRSSI'"
    command = Popen(cmd, shell=True, stdout=PIPE)
    data = open(file_name, "a+")
    value = str(command.communicate())[20:23] + "\n"
    data.write(value)
    print (value)
    data.close()
66/3:
def Write_Power(file_name):
    #test code for sample file

#    data = open(file_name, "w+")
#    for i in range(len(x)):
#        data.write(str(x[i]) + "," + str(y[i]) + "\n")
#        
#    data.close()
    
    cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep 'CtlRSSI'"
    command = Popen(cmd, shell=True, stdout=PIPE)
    data = open(file_name, "a+")
    value = str(command.communicate())[20:23] + "\n")
    data.write(value)
    print (value)
    data.close()
66/4:
def Write_Power(file_name):
    #test code for sample file

#    data = open(file_name, "w+")
#    for i in range(len(x)):
#        data.write(str(x[i]) + "," + str(y[i]) + "\n")
#        
#    data.close()
    
    cmd = "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep 'CtlRSSI'"
    command = Popen(cmd, shell=True, stdout=PIPE)
    data = open(file_name, "a+")
    value = (str(command.communicate())[20:23] + "\n")
    data.write(value)
    print (value)
    data.close()
66/5: print ("Computed step number: ", (angle_stop-angle_start)/angle_step)
66/6: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
66/7: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
66/8: file_name = file_name + ".txt"
66/9:
file_name = input("file name (.txt):\n")
file_name = file_name + ".txt"
print (file_name)
66/10:
file_name = input("file name (.txt):\n")
file_name = file_name + ".txt"
print (file_name)
66/11: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
66/12: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
66/13: ax1.set_xlim(min(xs), max(xs))
66/14:
xs = []
ys = []
for line in lines:
    if len(line) > 1:
        x, y = line.split(",")
        xs.append(float(x))
        ys.append(float(y))


ax1.clear()
ax1.set_xlim(min(xs), max(xs))
66/15:
global file_name, plot_type
graph_data = open(file_name,"r").read()
lines = graph_data.split("\n")
xs = []
ys = []
for line in lines:
    if len(line) > 1:
        x, y = line.split(",")
        xs.append(float(x))
        ys.append(float(y))


ax1.clear()
ax1.set_xlim(min(xs), max(xs))
ax1.set_ylim(min(ys), max(ys))
ax1.scatter(xs, ys)
66/16: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
66/17: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
66/18: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
66/19: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
66/20: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
66/21: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
66/22: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
66/23: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
66/24: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
66/25: runfile('/Users/admin/Documents/Arduino/FARFIELD_DOCTOR', wdir='/Users/admin/Documents/Arduino')
66/26:
ser.write(-1)
time = 20
for t in range(time):
    ser.read(2)                     #read 2 bytes of data
    while ser.read() != 10:
        ser.read()
66/27:
ser.write(10)
time = 20
for t in range(time):
    ser.read(2)                     #read 2 bytes of data
    while ser.read() != 10:
        ser.read()
66/28:
serial_port = "/dev/cu.usbmodem1411"         
ser = serial.Serial(serial_port, 9600)  # open serial port, CHANGE ADDRESS TO FILE!!
print (serial.__version__)
ser.read(ser.inWaiting())
66/29:
serial_port = "/dev/cu.usbmodem1411"         
ser = serial.Serial(serial_port, 9600)  # open serial port, CHANGE ADDRESS TO FILE!!
print (serial.__version__)
ser.read(ser.inWaiting())
66/30:
serial_port = "/dev/cu.usbmodem1411"         
ser = serial.Serial(serial_port, 9600)  # open serial port, CHANGE ADDRESS TO FILE!!
print (serial.__version__)
ser.read(ser.inWaiting())
66/31:
serial_port = "/dev/cu.usbmodem1411"         
ser = serial.Serial(serial_port, 9600)  # open serial port, CHANGE ADDRESS TO FILE!!
print (serial.__version__)
ser.read(ser.inWaiting())
66/32:
serial_port = "/dev/cu.usbmodem1411"         
ser = serial.Serial(serial_port, 9600)  # open serial port, CHANGE ADDRESS TO FILE!!
print (serial.__version__)
ser.read(ser.inWaiting())
66/33:
ser.write(10)
time = 20
for t in range(time):
    ser.read(2)                     #read 2 bytes of data
    while ser.read() != 10:
        ser.read()
        t +=1
        time.delay(1)

print ("connection established!")
66/34:
ser.write(10)
wait_time = 20
for t in range(wait_time):
    ser.read(2)                     #read 2 bytes of data
    while ser.read() != 10:
        ser.read()
        t +=1
        time.delay(1)

print ("connection established!")
66/35:
print ("connection established!")
time.delay(2)
66/36:
print ("connection established!")
time.sleep(2)
66/37:
wait_time = 20
for t in range(wait_time):
    ser.read(2)                     #read 2 bytes of data
    while ser.read() != 10:
        ser.read()
        t +=1
66/38: runfile('/Users/admin/anaconda3/lib/python3.6/site-packages/serial/serialposix.py', wdir='/Users/admin/anaconda3/lib/python3.6/site-packages/serial')
66/39: ser.write(10)
66/40: ser.write(10)
66/41: ser.write(10)
66/42: ser.write("10")
66/43: ser.write('10')
66/44: ser.write(10)
66/45: ser.write(1)
66/46: ser.write("1")
66/47: ser.write(b"1")
66/48: ser.write(b"1")
66/49: ser.write(b"1")
66/50: ser.write(b"100")
66/51: ser.write(b"2")
66/52: ser.write(b"128")
66/53: ser.write(b"1")
66/54: ser.write(b"360")
66/55: ser.write(b"720")
66/56: ser.write(b"30")
66/57: ser.write(b"1")
66/58: ser.write(b"1")
66/59:
serial_port = "/dev/cu.usbmodem1411"         
ser = serial.Serial(serial_port, 9600)  # open serial port, CHANGE ADDRESS TO FILE!!
66/60: ser.write(b"1")
66/61: ser.write(b"1")
66/62: ser.write(b"1")
66/63: ser.write(b"50")
66/64: ser.write(b"150")
66/65: ser.write(b"10")
66/66: ser.write(b"1")
66/67: ser.write(b"60")
66/68: ser.write(b"70")
66/69: ser.write(b"80")
66/70: ser.write(b"1")
66/71:
ser.write(b"1")
ser.read(ser.in_waiting())
66/72: ser.read(ser.inWaiting())
66/73:
ser.write(b"1")
ser.read(ser.inWaiting())
66/74:
ser.write(b"1")
time.sleep(0.5)
ser.read(ser.inWaiting())
66/75:
ser.write(b"1")
time.sleep(1)
ser.read(ser.inWaiting())
68/1: print "En11_11_exciton: ", En1n1_11_exciton, ", ", En1n1_11_exciton*eVtoangstrom/eVtoJoule, "angstrom"
68/2: runfile('/Users/admin/Downloads/photolum.py', wdir='/Users/admin/Downloads')
68/3: runfile('/Users/admin/Downloads/photolum.py', wdir='/Users/admin/Downloads')
68/4: runfile('/Users/admin/Downloads/photolum.py', wdir='/Users/admin/Downloads')
68/5: runfile('/Users/admin/Downloads/photolum.py', wdir='/Users/admin/Downloads')
68/6: runfile('/Users/admin/Downloads/photolum.py', wdir='/Users/admin/Downloads')
68/7: runfile('/Users/admin/Downloads/photolum.py', wdir='/Users/admin/Downloads')
68/8: runfile('/Users/admin/Downloads/photolum.py', wdir='/Users/admin/Downloads')
68/9: runfile('/Users/admin/Downloads/photolum.py', wdir='/Users/admin/Downloads')
68/10: runfile('/Users/admin/Downloads/photolum.py', wdir='/Users/admin/Downloads')
68/11: runfile('/Users/admin/Downloads/photolum.py', wdir='/Users/admin/Downloads')
68/12: runfile('/Users/admin/Downloads/photolum.py', wdir='/Users/admin/Downloads')
68/13: runfile('/Users/admin/Downloads/photolum.py', wdir='/Users/admin/Downloads')
68/14: runfile('/Users/admin/Downloads/photolum.py', wdir='/Users/admin/Downloads')
68/15: runfile('/Users/admin/Downloads/photolum.py', wdir='/Users/admin/Downloads')
68/16: runfile('/Users/admin/Downloads/photolum.py', wdir='/Users/admin/Downloads')
69/1: runfile('/Users/admin/Downloads/photolum.py', wdir='/Users/admin/Downloads')
69/2: runfile('/Users/admin/Downloads/photolum.py', wdir='/Users/admin/Downloads')
69/3: runfile('/Users/admin/Downloads/photolum.py', wdir='/Users/admin/Downloads')
69/4: runfile('/Users/admin/Downloads/photolum.py', wdir='/Users/admin/Downloads')
69/5: runfile('/Users/admin/Downloads/photolum.py', wdir='/Users/admin/Downloads')
70/1: runfile('/Users/admin/Downloads/photolum.py', wdir='/Users/admin/Downloads')
76/1:
"""
Created on Wed Apr  4 17:46:11 2018

@author: admin
"""

import rawpy

file_path = "_MG_1014.CR2"

with rawpy.imread(file_path) as raw:
    image_raw = raw.raw_image()
    print ("x")

print (image_raw, "x")
76/2:
"""
Created on Wed Apr  4 17:46:11 2018

@author: admin
"""

import rawpy

file_path = "_MG_1014.CR2"

with rawpy.imread(file_path) as raw:
    image_raw = raw.raw_image()
    print ("x")

print (image_raw, "x")
77/1: ls
77/2: cd Documents/
77/3: ls
77/4: cd physique/
77/5: ls
77/6: cd hiver\ 2018
77/7: ls
77/8: cd illumina/
77/9: ls
77/10: rawpy_read_raw_image.py
77/11: rawpy_read_raw_image.py
77/12: import numpy
80/1: print ("X")
80/2: print ("x")
80/3: print ("x")
80/4: print ("x")
81/1: run test
81/2: test.py
81/3: run test.py
81/4: ls
81/5: cd Documents/physique/hiver\ 2018h
81/6: cd Documents/physique/hiver\ 2018
81/7: ls
81/8: ls
81/9: cd Illumina
81/10: ls
81/11: run test
82/1: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/test', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/2: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/test', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/3: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/4: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/5: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/6: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/7: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/8: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/9: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/10: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/11: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/12: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/13: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/14: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/15: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/16: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/17: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/18: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/test', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/19: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/20: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/21: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/22: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/23: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/24: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/25: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/26: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/27: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/28: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/29: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/30: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/31: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/32: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/33: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/34: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/35: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/36: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/37: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/38: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/39: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/40: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/41: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/42: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/43: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/44: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/45: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/46: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/47: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/48: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/49: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/50: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
82/51: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/rawpy_read_raw_image.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
83/1: from matplotlib import pyplot as plt
84/1: runfile('/Users/admin/Documents/physique/hiver 2018/coincidences_bell', wdir='/Users/admin/Documents/physique/hiver 2018')
84/2: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/3: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/4: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/5: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/6: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/7: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/8: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/9: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/10: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/11: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/12: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/13: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/14: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/15: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/16: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/17: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/18: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/19: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/20: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/21: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/22: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/23: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/24: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/25: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/26: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/27: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/28: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/29: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/30: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/31: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/32: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/33: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/34: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/35: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/36: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/37: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/38: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/39: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/40: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/41: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/42: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/43: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/44: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/45: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/46: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/47:
"""
Created on Sun Apr 15 08:06:09 2018

@author: admin
"""
from matplotlib import pyplot as plt
import numpy as np
from scipy.optimize import curve_fit

data0 = np.genfromtxt("Delta_A=0.txt")
x0 = data0[:,1]
y0 = data0[:,4]

data45 = np.genfromtxt("Delta_A=45.txt")
x45 = data45[:,1]
y45 = data45[:,4]

data90 = np.genfromtxt("Delta_A=90.txt")
x90 = data90[:,1]
y90 = data90[:,4]

#fit values and functions
def cos2(x, a, gamma):
    return a * np.cos**2(gamma-x)


#function least square calling
popt0, pcov = curve_fit(cos2, x0, y0)
84/48:
"""
Created on Sun Apr 15 08:06:09 2018

@author: admin
"""
from matplotlib import pyplot as plt
import numpy as np
from scipy.optimize import curve_fit

data0 = np.genfromtxt("Delta_A=0.txt")
x0 = data0[:,1]
y0 = data0[:,4]

data45 = np.genfromtxt("Delta_A=45.txt")
x45 = data45[:,1]
y45 = data45[:,4]

data90 = np.genfromtxt("Delta_A=90.txt")
x90 = data90[:,1]
y90 = data90[:,4]

#fit values and functions
def cos2(x, a, gamma):
    return a * (np.cos(gamma-x))**2


#function least square calling
popt0, pcov = curve_fit(cos2, x0, y0)
84/49: print (popt0)
84/50:
"""
Created on Sun Apr 15 08:06:09 2018

@author: admin
"""
from matplotlib import pyplot as plt
import numpy as np
from scipy.optimize import curve_fit

data0 = np.genfromtxt("Delta_A=0.txt")
x0 = data0[:,1]
y0 = data0[:,4]

data45 = np.genfromtxt("Delta_A=45.txt")
x45 = data45[:,1]
y45 = data45[:,4]

data90 = np.genfromtxt("Delta_A=90.txt")
x90 = data90[:,1]
y90 = data90[:,4]

#fit values and functions
def cos2_0(x, a, b):
    return a * (np.cos(0-x))**2 + b


#function least square calling
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (popt0)
plt.plot(x0, y0, x0, cos2_0(x0, popt0[0], popt0[1]))
plt.show()
84/51:
"""
Created on Sun Apr 15 08:06:09 2018

@author: admin
"""
from matplotlib import pyplot as plt
import numpy as np
from scipy.optimize import curve_fit

data0 = np.genfromtxt("Delta_A=0.txt")
x0 = data0[:,1]
y0 = data0[:,4]

data45 = np.genfromtxt("Delta_A=45.txt")
x45 = data45[:,1]
y45 = data45[:,4]

data90 = np.genfromtxt("Delta_A=90.txt")
x90 = data90[:,1]
y90 = data90[:,4]

#fit values and functions
def cos2_0(x, a, b):
    return a * (np.cos(0-x))**2 + b


#function least square calling
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (popt0)
plt.plot(x0, y0, "ro", x0, cos2_0(x0, popt0[0], popt0[1]))
plt.show()
84/52:
"""
Created on Sun Apr 15 08:06:09 2018

@author: admin
"""
from matplotlib import pyplot as plt
import numpy as np
from scipy.optimize import curve_fit

data0 = np.genfromtxt("Delta_A=0.txt")
x0 = data0[:,1]
y0 = data0[:,4]

data45 = np.genfromtxt("Delta_A=45.txt")
x45 = data45[:,1]
y45 = data45[:,4]

data90 = np.genfromtxt("Delta_A=90.txt")
x90 = data90[:,1]
y90 = data90[:,4]

#fit values and functions
def cos2_0(x, a, b):
    return a * (np.cos(0-x))**2 + b


#function least square calling
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (popt0)
plt.plot(x0, y0, "r.", x0, cos2_0(x0, popt0[0], popt0[1]))
plt.show()
84/53: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/54:
print (popt0)
plt.plot(x0, y0, "r.", x0, cos2_0(x0, popt0[0]))
plt.show()
84/55:
x0array = np.arange(0, 360, 1)
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (popt0)
plt.plot(x0, y0, "r.", x0array, cos2_0(x0, popt0[0]))
plt.show()
84/56:
"""
Created on Sun Apr 15 08:06:09 2018

@author: admin
"""
from matplotlib import pyplot as plt
import numpy as np
from scipy.optimize import curve_fit

data0 = np.genfromtxt("Delta_A=0.txt")
x0 = data0[:,1]
y0 = data0[:,4]

data45 = np.genfromtxt("Delta_A=45.txt")
x45 = data45[:,1]
y45 = data45[:,4]

data90 = np.genfromtxt("Delta_A=90.txt")
x90 = data90[:,1]
y90 = data90[:,4]

#fit values and functions
def cos2_0(x, a):
    return a * (np.cos(0-x))**2


#function least square calling
x0array = np.arange(0, 360, 1)
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (popt0)
plt.plot(x0, y0, "r.", x0array, cos2_0(x0, popt0[0]))
plt.show()
84/57:
x0array = np.arange(0, 360, 1)
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (popt0)
plt.plot(x0, y0, "r.", x0array, cos2_0(x0array, popt0[0]))
plt.show()
84/58:
x0array = np.linspace(0, 360, 100)
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (popt0)
plt.plot(x0, y0, "r.", x0array, cos2_0(x0array, popt0[0]))
plt.show()
84/59:
x0array = np.linspace(0, 360, 200)
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (popt0)
plt.plot(x0, y0, "r.", x0array, cos2_0(x0array, popt0[0]))
plt.show()
84/60:
x0array = np.linspace(0, 360, len(x0))
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (popt0)
plt.plot(x0, y0, "r.", x0array, cos2_0(x0array, popt0[0]))
plt.show()
84/61:
x0array = np.linspace(0, 360, 100)
popt0, pcov0 = curve_fit(cos2_0, x0/(2*np.pi), y0)

print (popt0)
plt.plot(x0, y0, "r.", x0array, cos2_0(x0array, popt0[0]))
plt.show()
84/62:
x0array = np.linspace(0, 360, 100)/(2*np.pi)
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (popt0)
plt.plot(x0, y0, "r.", x0array, cos2_0(x0array, popt0[0]))
plt.show()
84/63:
x0array = np.linspace(0, 360, 100)
x0array = 2*np.pi/x0array
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (popt0)
plt.plot(x0, y0, "r.", x0array, cos2_0(x0array, popt0[0]))
plt.show()
84/64: print (x0array)
84/65:
x0array = np.linspace(0., 360., 100)
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (x0array)
84/66:
x0array = np.linspace(0., 360., 100)
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (x0array)

print (popt0)
plt.plot(x0, y0, "r.", x0array, cos2_0(x0array, popt0[0]))
plt.show()
84/67:
x0array = np.linspace(0., 360., 200)
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (x0array)

print (popt0)
plt.plot(x0, y0, "r.", x0array, cos2_0(x0array, popt0[0]))
plt.show()
84/68:
x0array = np.linspace(0., 360., len(x0))
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (x0array)

print (popt0)
plt.plot(x0, y0, "r.", x0array, cos2_0(x0array, popt0[0]))
plt.show()
84/69:
x0array = np.linspace(0., 360., 360/len(x0))
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (x0array)

print (popt0)
plt.plot(x0, y0, "r.", x0array, cos2_0(x0array, popt0[0]))
plt.show()
84/70:
def cos2_0(x, a):
    return a * (np.cos(90-x))**2


#function least square cos^2 fit
x0array = np.linspace(0., 360., 360/len(x0))
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (popt0)
plt.plot(x0, y0, "r.", x0array, cos2_0(x0array, popt0[0]))
plt.show()
84/71:
def cos2_0(x, a):
    return a * (np.cos(45-x))**2


#function least square cos^2 fit
x0array = np.linspace(0., 360., 360/len(x0))
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (popt0)
plt.plot(x0, y0, "r.", x0array, cos2_0(x0array, popt0[0]))
plt.show()
84/72:
x0array = np.linspace(0., 360., len(x0)/360)
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (popt0)
plt.plot(x0, y0, "r.", x0array, cos2_0(x0array, popt0[0], popt0[1]))
plt.show()
84/73: print (len(x0))
84/74:
x0array = np.linspace(0., 360., 25)
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (popt0)
plt.plot(x0, y0, "r.", x0array, cos2_0(x0array, popt0[0], popt0[1]))
plt.show()
84/75:
x0array = np.linspace(0., 360., 25)
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (popt0)
plt.plot(x0, y0, "r.", x0array, cos2_0(x0array, popt0[0], popt0[1]))
plt.show()
84/76:
def cos2_0(x, a, b):
    return a * (np.cos(0-x))**2 +b


#function least square cos^2 fit
x0array = np.linspace(0., 360., 25)
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (popt0)
plt.plot(x0, y0, "r.", x0array, cos2_0(x0array, popt0[0], popt0[1]))
plt.show()
84/77:
plt.plot(x0array, cos2_0(x0array, 386, 6034))
plt.show()
84/78:
x0array = np.linspace(0., 360., 250)
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (popt0)
plt.plot(x0, y0, "r.", x0array, cos2_0(x0array, popt0[0], popt0[1]))
plt.show()

plt.plot(x0array, cos2_0(x0array, 386, 6034))
plt.show()
84/79:
plt.plot(x0array, cos2_0(x0array, 386, 6034))
plt.show()
84/80:
plt.plot(x0array, np.cos(x0array))
plt.show()
84/81:
x0array = np.arange(0., 360., 1)
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (popt0)
plt.plot(x0, y0, "r.", x0array, cos2_0(x0array, popt0[0], popt0[1]))
plt.show()

plt.plot(x0array, np.cos(x0array))
plt.show()
84/82:
plt.plot(x0array, np.cos(x0array))
plt.show()
84/83:
x0array = np.arange(0., 360., 100)
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (popt0)
plt.plot(x0, y0, "r.", x0array, cos2_0(x0array, popt0[0], popt0[1]))
plt.show()

plt.plot(x0array, np.cos(x0array))
plt.show()
84/84:
x0array = np.arange(0., 360.)
print (x0array)
84/85: print (x0array, np.cos(360))
84/86: print (x0array, np.cos(np.pi))
84/87: print (x0array, np.cos(np.pi*2))
84/88:
def cos2_0(x, a, b):
    return a * (np.cos(0-(2*np.pi/x)))**2 +b


#function least square cos^2 fit
x0array = np.arange(0., 360.)
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

plt.plot(x0array, cos2_0(x0array, popt0[0], popt0[1]))
plt.show()
84/89:
def cos2_0(x, a):
    return a * (np.cos(0-(2*np.pi/x)))**2


#function least square cos^2 fit
x0array = np.arange(0., 360.)
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

plt.plot(x0array, cos2_0(x0array, popt0[0])
plt.show()
84/90:
def cos2_0(x, a):
    return a * (np.cos(0-(2*np.pi/x)))**2


#function least square cos^2 fit
x0array = np.arange(0., 360.)
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

plt.plot(x0array, cos2_0(x0array, popt0[0]))
plt.show()
84/91:
def cos2_0(x):
    return (np.cos(0-(2*np.pi/x)))**2


#function least square cos^2 fit
x0array = np.arange(0., 360.)
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

plt.plot(x0array, cos2_0(x0array))
plt.show()
84/92:
def cos2_0(x):
    return (np.cos(0-(2*np.pi/x)))**2


#function least square cos^2 fit
x0array = np.arange(0., 360.)
#popt0, pcov0 = curve_fit(cos2_0, x0, y0)

plt.plot(x0array, cos2_0(x0array))
plt.show()
84/93:
def cos2_0(x):
    return (np.cos((2*np.pi/x)))**2


#function least square cos^2 fit
x0array = np.arange(0., 360.)
#popt0, pcov0 = curve_fit(cos2_0, x0, y0)

plt.plot(x0array, cos2_0(x0array))
plt.show()
84/94:
def cos2_0(x):
    return (np.cos((2*np.pi/360*x)))**2


#function least square cos^2 fit
x0array = np.arange(0., 360.)
#popt0, pcov0 = curve_fit(cos2_0, x0, y0)

plt.plot(x0array, cos2_0(x0array))
plt.show()
84/95:
def cos2_0(x, a, b):
    return a * (np.cos((2*np.pi/360*x)))**2 + b


#function least square cos^2 fit
x0array = np.arange(0., 360.)
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

plt.plot(x0array, cos2_0(x0array, popt0[0], popt0[1]))
plt.show()
84/96:
def cos2_0(x, a, b):
    return a * (np.cos((2*np.pi/360*x)))**2 + b


#function least square cos^2 fit
x0array = np.arange(0., 360.)
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (popt0)
plt.plot(x0, y0, "r.", x0array, cos2_0(x0array, popt0[0], popt0[1]))
plt.show()
84/97:
def cos2_0(x, a, b):
    return a * (np.cos(0-(2*np.pi/360*x)))**2 + b


#function least square cos^2 fit
x0array = np.arange(0., 360.)
popt0, pcov0 = curve_fit(cos2_0, x0, y0)

print (popt0)
plt.plot(x0, y0, "r.", x0array, cos2_0(x0array, popt0[0], popt0[1]))
plt.show()
84/98: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/99: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/100: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/101: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/102: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/103: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/104: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/105: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/106: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/107: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/108: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/109: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/110: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/111: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/112: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/113: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/114: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/115: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/116: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/117: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/118: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/119: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/120: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/121: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/122: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/123: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/124: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/125: plt.style.available
84/126: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/127: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/128: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/129: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/130: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/131: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/132: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/133: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/134: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/135: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/136: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/137: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/138: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/139: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/140: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/141: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/142: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/143: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/144: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/145: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/146: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/147: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/148: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/149: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/150: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/151: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/152: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/153: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/154: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/155:
"""
Created on Sun Apr 15 08:06:09 2018

@author: admin
"""
from matplotlib import pyplot as plt
from matplotlib import rcParams
rcParams['font.family'] = 'sans-serif'
rcParams['font.sans-serif'] = ['Tahoma']
import numpy as np
from scipy.optimize import curve_fit

data0 = np.genfromtxt("Delta_A=0.txt")
x0 = data0[:,1]         #len(x0) = 25
y0 = data0[:,4]

data45 = np.genfromtxt("Delta_A=45.txt")
x45 = data45[:,1]
y45 = data45[:,4]

data90 = np.genfromtxt("Delta_A=90.txt")
x90 = data90[:,1]
y90 = data90[:,4]

#fit functions
def cos2_0(x, a, b):
    return a * (np.cos(0-(2*np.pi/360*x)))**2 + b


def cos2_45(x, a, b):
    return a * (np.cos(2*np.pi/360*45-(2*np.pi/360*x)))**2 + b


def cos2_90(x, a, b):
    return a * (np.cos(2*np.pi/360*90-(2*np.pi/360*x)))**2 + b


#function least square cos^2 fit
x0array = np.arange(0., 360.)
popt0, pcov0 = curve_fit(cos2_0, x0, y0)
popt45, pcov45 = curve_fit(cos2_45, x45, y45)
popt90, pcov90 = curve_fit(cos2_90, x90, y90)

plt.plot(x0, y0, "r.", label="$\gamma$=0")
plt.plot(x0array, cos2_0(x0array, popt0[0], popt0[1]))
plt.plot(x45-45, y45, "g.", label="$\gamma$=45")
plt.plot(x0array, cos2_0(x0array, popt45[0], popt45[1]))
plt.plot(x90-90, y90, "b.", label="$\gamma$=90")
plt.plot(x0array, cos2_0(x0array, popt90[0], popt90[1]))

plt.xlabel(r"$\vert\gamma-\delta\vert (^\circ)$")
plt.ylabel("Coïncidences (comptes)")
plt.legend(framealpha=1, loc=0, bbox_to_anchor=(0.615,0.3))
plt.xticks(np.arange(0, 390, 45))
plt.xlim(0, 360)
plt.style.use('bmh')
plt.show()
84/156: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/157: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/158: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/159: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/160:
"""
Created on Sun Apr 15 08:06:09 2018

@author: admin
"""
from matplotlib import pyplot as plt
from matplotlib import rcParams
rcParams['font.family'] = 'sans-serif'
rcParams['font.sans-serif'] = ['Tahoma']
import numpy as np
from scipy.optimize import curve_fit

data0 = np.genfromtxt("Delta_A=0.txt")
x0 = data0[:,1]         #len(x0) = 25
y0 = data0[:,4]

data45 = np.genfromtxt("Delta_A=45.txt")
x45 = data45[:,1]
y45 = data45[:,4]

data90 = np.genfromtxt("Delta_A=90.txt")
x90 = data90[:,1]
y90 = data90[:,4]

#fit functions
def cos2_0(x, a, b):
    return a * (np.cos(0-(2*np.pi/360*x)))**2 + b


def cos2_45(x, a, b):
    return a * (np.cos(2*np.pi/360*45-(2*np.pi/360*x)))**2 + b


def cos2_90(x, a, b):
    return a * (np.cos(2*np.pi/360*90-(2*np.pi/360*x)))**2 + b


#function least square cos^2 fit
x0array = np.arange(0., 360.)
popt0, pcov0 = curve_fit(cos2_0, x0, y0)
popt45, pcov45 = curve_fit(cos2_45, x45, y45)
popt90, pcov90 = curve_fit(cos2_90, x90, y90)

plt.plot(x0, y0, "r.", label="$\gamma$=0")
plt.plot(x0array, cos2_0(x0array, popt0[0], popt0[1]))
plt.plot(x45-45, y45, "g.", label="$\gamma$=45")
plt.plot(x0array, cos2_0(x0array, popt45[0], popt45[1]))
plt.plot(x90-90, y90, "b.", label="$\gamma$=90")
plt.plot(x0array, cos2_0(x0array, popt90[0], popt90[1]))

plt.xlabel(r"$\vert\gamma-\delta\vert (^\circ)$")
plt.ylabel("Coïncidences (comptes)")
plt.legend(framealpha=1, loc=0, bbox_to_anchor=(0.615,0.3))
plt.xticks(np.arange(0, 390, 45))
plt.xlim(0, 360)
plt.style.use('classic')
plt.show()
84/161: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/162: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/163: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/164: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/165: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/166: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/167: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/168: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/169: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/170: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/171: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/172: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/173: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/174: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/175: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/176: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/177: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/178: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/179: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/180: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/181: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/182: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/183: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/184: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/185: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/186: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/187:
"""
Created on Sun Apr 15 13:59:58 2018

@author: admin
"""

import numpy as np
import matplotlib.pyplot as plt

###Spectral sensitivity taken from https://www.dxomark.com/Cameras/Canon/EOS-550D---Measurements with CIE-D50 illuminant (matching daylight source),
#graph to interpolate values to get spectral equivalent with illumina output.
#Values are RGB in order, for each spectrum.

#wavelength for sRGB
color_band = [651, 510, 410]

red = [0.49, 0.45, 0.06]
green = [0.07, 0.73, 0.2]
blue = [0.02, 0.25, 0.73]

RGB_relative = [0.39, 1, 0.73]

wavelength = np.arange(300, 900, 10)

plt.plot(color_band, red, "r.")
plt.plot(color_band, green, "g.")
plt.plot(color_band, blue, "b.")
plt.xaxis(min(wavelength), max(wavelength))
plt.axvline(x=651, linewidth=100, ymin=0, ymax=1)
plt.show()
84/188: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/189: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/190: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/191: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/192: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/193: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/194: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/195: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/196: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/197: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/198: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/199: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/200: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/201: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/202: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/203: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/204: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/205: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/206: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/207: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/208: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/209: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/210: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/211: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/212: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/213: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/214: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/215: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/216: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/217: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/218: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/219: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/220: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/221: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/222: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/223: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/224: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/225: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/226: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/227: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/228: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/229: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/spectral_sensitivity_dxomark.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
84/230: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/231: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/232: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
84/233: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
85/1: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
85/2: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
85/3: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
85/4: print (y90[0])
85/5: print (x90[0])
85/6: print (x45[0])
85/7: print (x45[5])
85/8: print (x45[7])
85/9: print (x45[6])
85/10: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
85/11: print (y90[0])
85/12: print (y45[6])
85/13: print (y45[12])
85/14: print (x45[12])
85/15: print (x45[0])
85/16: print (x45[3])
85/17: print (x90[6])
85/18: print (x90[0])
85/19: print (y90[0]-y45[3])
85/20: print (y45)
85/21: print (y90)
85/22:
plt.plot(x45, y45, x90, y90)
plt.show()
85/23:
plt.plot(x0, y0, x45, y45, x90, y90)
plt.show()
85/24: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
85/25:
plt.plot(x0, y0, x45, y45, x90, y90)
plt.show()
85/26: runfile('/Users/admin/Documents/physique/hiver 2018/inegalites_bell/coincidences_bell.py', wdir='/Users/admin/Documents/physique/hiver 2018/inegalites_bell')
85/27: print ("minima: ", min(y0), min(y45), min(y90))
85/28: print (np.average(yAB))
86/1: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/pyexiftool.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
86/2: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/pyexiftool.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
86/3: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/pyexiftool.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
86/4: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/pyexiftool.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
86/5: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/pyexiftool.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
86/6: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/pyexiftool.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
86/7: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/pyexiftool.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
86/8: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/pyexiftool.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
86/9: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/pyexiftool.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
86/10: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/pyexiftool.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
86/11: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/pyexiftool.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
86/12: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/pyexiftool.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
86/13: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/pyexiftool.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina')
87/1: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/final/illumina_dslr_conversion.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina/final')
87/2: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/final/illumina_dslr_conversion.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina/final')
87/3: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/final/illumina_dslr_conversion.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina/final')
87/4: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/final/illumina_dslr_conversion.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina/final')
87/5: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/final/illumina_dslr_conversion.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina/final')
87/6: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/final/illumina_dslr_conversion.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina/final')
87/7: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/final/illumina_dslr_conversion.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina/final')
87/8: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/final/illumina_dslr_conversion.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina/final')
87/9: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/final/illumina_dslr_conversion.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina/final')
87/10: print (len(bayer_visible[0]), len(bayer_visible[0][0]))
87/11: print (len(bayer_visible), len(bayer_visible[0]))
87/12: print (bayer_visible[0][0])
87/13: print (bayer_visible[0][1])
87/14: print (bayer_visible[2220][1000])
87/15: print (bayer_visible[2500][4000])
87/16: print (matrix_offset)
87/17:
matrix_offset = (len(bayer_visible[0])-len(bayer_visible))/2
print (matrix_offset)
87/18: print (matrix_offset)
87/19:
matrix_offset = (len(bayer_visible[0])-len(bayer_visible))/2-0.5
print (matrix_offset)
87/20: print (len(bayer_visible_square), len(bayer_visible_square[0]))
87/21:
bayer_visible_square = []
matrix_offset = (len(bayer_visible[0])-len(bayer_visible))/2-0.5
print (matrix_offset)
for i in range(len(bayer_visible)):
    for j in range(len(bayer_visible)):
        bayer_visible_square[i] = bayer_visible[i][j+matrix_offset]


print (len(bayer_visible_square), len(bayer_visible_square[0]))
87/22:
bayer_visible_square = []
matrix_offset = int((len(bayer_visible[0])-len(bayer_visible))/2-0.5)
print (matrix_offset)
for i in range(len(bayer_visible)):
    for j in range(len(bayer_visible)):
        bayer_visible_square[i] = bayer_visible[i][j+matrix_offset]


print (len(bayer_visible_square), len(bayer_visible_square[0]))
87/23: print (bayer_visible)
87/24: print (len(bayer_visible))
87/25: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/final/illumina_dslr_conversion.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina/final')
87/26:
def Square_Matrix(input_matrix):
    bayer_visible_square = []
    matrix_offset = int((len(input_matrix[0])-len(input_matrix))/2-0.5)
    input_matrix.shape()
    for i in range(len(input_matrix)):
        for j in range(len(input_matrix)):
            bayer_visible_square[i] = bayer_visible[i][j+matrix_offset]
    return bayer_visible_square

#########


bayer_visible_square = Square_Matrix(bayer_visible)
print (len(bayer_visible_square), len(bayer_visible_square[0]))
87/27: bayer_visible.shape()
87/28: bayer_visible.shape
87/29: print (bayer_visible_square.shape)
87/30:
def Square_Matrix(input_matrix):
    bayer_visible_square = []
    matrix_offset = int((len(input_matrix[0])-len(input_matrix))/2-0.5)
    input_matrix.shape
    for i in range(len(input_matrix)):
        for j in range(len(input_matrix)):
            bayer_visible_square[i] = bayer_visible[i][j+matrix_offset]
    return bayer_visible_square

#########


bayer_visible_square = Square_Matrix(bayer_visible)
print (bayer_visible_square.shape)
87/31:
def Square_Matrix(input_matrix):
    bayer_visible_square = []
    matrix_offset = int((len(input_matrix[0])-len(input_matrix))/2-0.5)
    input_matrix.shape
    for i in range(len(input_matrix)):
        for j in range(len(input_matrix)):
            bayer_visible_square[i].append(bayer_visible[i][j+matrix_offset])
    return bayer_visible_square

#########


bayer_visible_square = Square_Matrix(bayer_visible)
print (bayer_visible_square.shape)
87/32:
def Square_Matrix(input_matrix):
    bayer_visible_square = []
    matrix_offset = int((len(input_matrix[0])-len(input_matrix))/2-0.5)
    input_matrix.shape
    for i in range(len(input_matrix)):
        for j in range(len(input_matrix)):
            bayer_visible_square[i].append(input_matrix[i][j+matrix_offset])
    return bayer_visible_square

#########


bayer_visible_square = Square_Matrix(bayer_visible)
print (bayer_visible_square.shape)
87/33:
def Square_Matrix(input_matrix):
    bayer_visible_square = []
    matrix_offset = int((len(input_matrix[0])-len(input_matrix))/2-0.5)
    input_matrix.shape
    for i in range(len(input_matrix)):
        for j in range(len(input_matrix)):
            bayer_visible_square[i].append(input_matrix[i][j])
    return bayer_visible_square

#########


bayer_visible_square = Square_Matrix(bayer_visible)
print (bayer_visible_square.shape)
87/34:
def Square_Matrix(input_matrix):
    bayer_visible_square = [][]
    matrix_offset = int((len(input_matrix[0])-len(input_matrix))/2-0.5)
    input_matrix.shape
    for i in range(len(input_matrix)):
        for j in range(len(input_matrix)):
            bayer_visible_square[i].append(input_matrix[i][j])
    return bayer_visible_square

#########


bayer_visible_square = Square_Matrix(bayer_visible)
print (bayer_visible_square.shape)
87/35:
def Square_Matrix(input_matrix):
    bayer_visible_square = np.zeros(input_matrix.shape)
    matrix_offset = int((len(input_matrix[0])-len(input_matrix))/2-0.5)
    input_matrix.shape
    for i in range(len(input_matrix)):
        for j in range(len(input_matrix)):
            bayer_visible_square[i].append(input_matrix[i][j])
    return bayer_visible_square

#########


bayer_visible_square = Square_Matrix(bayer_visible)
print (bayer_visible_square.shape)
87/36:
"""
Created on Mon Mar 12 09:46:59 2018

@author: Utilisateur
"""

#!/usr/bin/env python

import rawpy
import imageio
import numpy as np

filepath = "_MG_1063.CR2"
raw = rawpy.imread(filepath)
#bayer = raw.raw_image # with border

#extract raw data to matrix mXn (height X width, 3465 X 5202, 18mpixels)
bayer_visible = raw.raw_image_visible # just visible area


#########
#function redimension to nXn instead of mXn (to get a square matrix)
def Square_Matrix(input_matrix):
    bayer_visible_square = np.zeros(input_matrix.shape)
    matrix_offset = int((len(input_matrix[0])-len(input_matrix))/2-0.5)
    input_matrix.shape
    for i in range(len(input_matrix)):
        for j in range(len(input_matrix)):
            bayer_visible_square[i].append(input_matrix[i][j])
    return bayer_visible_square

#########


bayer_visible_square = Square_Matrix(bayer_visible)
print (bayer_visible_square.shape)
87/37:
def Square_Matrix(input_matrix):
    bayer_visible_square = np.zeros(input_matrix.shape)
    matrix_offset = int((len(input_matrix[0])-len(input_matrix))/2-0.5)
    input_matrix.shape
    for i in range(len(input_matrix)):
        for j in range(len(input_matrix)):
            bayer_visible_square[i] = input_matrix[i][j]
    return bayer_visible_square

#########


bayer_visible_square = Square_Matrix(bayer_visible)
print (bayer_visible_square.shape)
87/38: runfile('/Users/admin/Documents/physique/hiver 2018/illumina/final/illumina_dslr_conversion.py', wdir='/Users/admin/Documents/physique/hiver 2018/illumina/final')
87/39:
def Square_Matrix(input_matrix):
    matrix_offset = int((len(input_matrix[0])-len(input_matrix))/2-0.5)
    bayer_visible_square = np.zeros((input_matrix.shape[0], input_matrix.shape[0]+matrix_offset))
    input_matrix.shape
    for i in range(input_matrix.shape[0]):
        for j in range(input_matrix.shape[0]):
            bayer_visible_square[i] = input_matrix[i][j]
    return bayer_visible_square

#########


bayer_visible_square = Square_Matrix(bayer_visible)
print (bayer_visible_square.shape)
87/40:
def Square_Matrix(input_matrix):
    matrix_offset = int((len(input_matrix[0])-len(input_matrix))/2-0.5)
    bayer_visible_square = np.zeros((input_matrix.shape[0], input_matrix.shape[0]+matrix_offset+0.5*2))
    input_matrix.shape
    for i in range(input_matrix.shape[0]):
        for j in range(input_matrix.shape[0]):
            bayer_visible_square[i] = input_matrix[i][j+matrix_offset]
    return bayer_visible_square

#########


bayer_visible_square = Square_Matrix(bayer_visible)
print (bayer_visible_square.shape)
87/41:
def Square_Matrix(input_matrix):
    matrix_offset = int((len(input_matrix[0])-len(input_matrix))/2-0.5)
    bayer_visible_square = np.zeros((input_matrix.shape[0], int(input_matrix.shape[0]+matrix_offset+0.5*2)))
    input_matrix.shape
    for i in range(input_matrix.shape[0]):
        for j in range(input_matrix.shape[0]):
            bayer_visible_square[i] = input_matrix[i][j+matrix_offset]
    return bayer_visible_square

#########


bayer_visible_square = Square_Matrix(bayer_visible)
print (bayer_visible_square.shape)
87/42:
def Square_Matrix(input_matrix):
    matrix_offset = int((len(input_matrix[0])-len(input_matrix))/2-0.5)
    bayer_visible_square = np.zeros(input_matrix.shape[0], input_matrix.shape[0])
    input_matrix.shape
    for i in range(input_matrix.shape[0]):
        for j in range(input_matrix.shape[0]):
            bayer_visible_square[i] = input_matrix[i][j+matrix_offset]
    return bayer_visible_square

#########


bayer_visible_square = Square_Matrix(bayer_visible)
print (bayer_visible_square.shape)
87/43:
def Square_Matrix(input_matrix):
    matrix_offset = int((len(input_matrix[0])-len(input_matrix))/2-0.5)
    bayer_visible_square = np.zeros((input_matrix.shape[0], input_matrix.shape[0]))
    input_matrix.shape
    for i in range(input_matrix.shape[0]):
        for j in range(input_matrix.shape[0]):
            bayer_visible_square[i] = input_matrix[i][j+matrix_offset]
    return bayer_visible_square

#########


bayer_visible_square = Square_Matrix(bayer_visible)
print (bayer_visible_square.shape)
87/44:
plt.scatter(bayer_visible_square[:,0], bayer_visible_square[:,1])
plt.show()
87/45: import pyplot as plt
87/46: import matplotlib.pyplot as plt
87/47:
plt.scatter(bayer_visible_square[:,0], bayer_visible_square[:,1])
plt.show()
87/48:
xyz = np.random.random(3,4)
print (xyz)
87/49:
xyz = np.random.random((3,4))
print (xyz)
87/50: print (type(xyz))
87/51: print (type(bayer_visible_square))
87/52: bayer_visible_square.shape
87/53:
def Histogram(input_matrix):
    plt.imshow(input_matrix)

#########

Histogram(bayer_visible_square)
87/54: Histogram(bayer_visible)
87/55: Histogram(bayer_visible)
87/56:
def Histogram(input_matrix):
    plt.matshow(input_matrix)

#########

Histogram(bayer_visible)
87/57:
def Histogram(input_matrix):
    plt.matshow(input_matrix)
    plt.colorbar()

#########

Histogram(bayer_visible)
87/58: print (max(bayer_visible))
87/59: print (max(bayer_visible.all()))
87/60: print (max(bayer_visible[1500])
87/61: print (max(bayer_visible[1500]))
87/62:
def Histogram(input_matrix):
    plt.matshow(input_matrix)
    imgplot.set_cmap('nipy_spectral')
    plt.colorbar()

#########

Histogram(bayer_visible)
87/63:
def Histogram(input_matrix):
    imgplot = plt.matshow(input_matrix)
    imgplot.set_cmap('nipy_spectral')
    plt.colorbar()

#########

Histogram(bayer_visible)
87/64:
def Histogram(input_matrix):
    imgplot = plt.imshow(input_matrix)
    imgplot.set_cmap('nipy_spectral')
    plt.colorbar()

#########

Histogram(bayer_visible)
87/65:
def Histogram(input_matrix):
    imgplot = plt.imshow(input_matrix)
    imgplot.set_cmap('nipy_spectral')
    plt.colorbar()

#########

Histogram(bayer_visible_square)
87/66:
def Histogram(input_matrix):
    imgplot = plt.imshow(input_matrix)
    imgplot.set_cmap('nipy_spectral')
    plt.colorbar()

#########

Histogram(bayer_visible_square)
87/67:
def Histogram(input_matrix):
    imgplot = plt.imshow(input_matrix)

#    imgplot.set_cmap('nipy_spectral')
    plt.colorbar()
#########

Histogram(bayer_visible)
87/68:
def Histogram(input_matrix):
    imgplot = plt.imshow(input_matrix, clim=(2000, 3000)) #clim selects interval for color

#    imgplot.set_cmap('nipy_spectral')
    plt.colorbar()
#########

Histogram(bayer_visible)
87/69:
def Histogram(input_matrix):
    imgplot = plt.imshow(input_matrix, clim=(2000, 2500)) #clim selects interval for color

#    imgplot.set_cmap('nipy_spectral')
    plt.colorbar()
#########

Histogram(bayer_visible)
87/70:
def Histogram(input_matrix):
    imgplot = plt.imshow(input_matrix, clim=(2000, 2500), interpolation="bicubic") #clim selects interval for color

#    imgplot.set_cmap('nipy_spectral')
    plt.colorbar()
#########

Histogram(bayer_visible)
87/71:
def Square_Matrix(input_matrix):
    matrix_len_remove = input_matrix[1]-input_matrix[0]/2-0.5
    bayer_visible_square = input_matrix[0:input_matrix[0], matrix_len_remove:input_matrix[1]-matrix_len_remove]
    return bayer_visible_square

#########

#########
#2D histogram for data viewing in amplitude
def Histogram(input_matrix):
    imgplot = plt.imshow(input_matrix, clim=(2000, 2500), interpolation="bicubic") #clim selects interval for color

#    imgplot.set_cmap('nipy_spectral')
    plt.colorbar()
#########

Histogram(Square_Matrix(bayer_visible))
87/72:
def Square_Matrix(input_matrix):
    matrix_len_remove = int(input_matrix[1]-input_matrix[0]/2-0.5)
    bayer_visible_square = input_matrix[0:input_matrix[0], matrix_len_remove:input_matrix[1]-matrix_len_remove]
    return bayer_visible_square

#########

#########
#2D histogram for data viewing in amplitude
def Histogram(input_matrix):
    imgplot = plt.imshow(input_matrix, clim=(2000, 2500), interpolation="bicubic") #clim selects interval for color

#    imgplot.set_cmap('nipy_spectral')
    plt.colorbar()
#########

Histogram(Square_Matrix(bayer_visible))
87/73:
def Square_Matrix(input_matrix):
    matrix_len_remove = int(input_matrix[1]-input_matrix[0]/2-0.5)
    print (matrix_len_remove)
    bayer_visible_square = input_matrix[0:input_matrix[0], matrix_len_remove:input_matrix[1]-matrix_len_remove]
    return bayer_visible_square

#########

#########
#2D histogram for data viewing in amplitude
def Histogram(input_matrix):
    imgplot = plt.imshow(input_matrix, clim=(2000, 2500), interpolation="bicubic") #clim selects interval for color

#    imgplot.set_cmap('nipy_spectral')
    plt.colorbar()
#########

Histogram(Square_Matrix(bayer_visible))
87/74: print (matrix_len_remove)
87/75:
matrix_len_remove = int(input_matrix[1]-input_matrix[0]/2-0.5)
print (matrix_len_remove)
87/76:
def Square_Matrix(input_matrix):
    matrix_len_remove = int(input_matrix[1]-input_matrix[0]/2-0.5)
    print (matrix_len_remove)
87/77:
def Square_Matrix(input_matrix):
    matrix_len_remove = int(input_matrix[1]-input_matrix[0]/2-0.5)
    print (matrix_len_remove)
    bayer_visible_square = input_matrix[0:input_matrix.shape[0], matrix_len_remove:input_matrix.shape[1]-matrix_len_remove]
    return bayer_visible_square

#########

#########
#2D histogram for data viewing in amplitude
def Histogram(input_matrix):
    imgplot = plt.imshow(input_matrix, clim=(2000, 2500), interpolation="bicubic") #clim selects interval for color

#    imgplot.set_cmap('nipy_spectral')
    plt.colorbar()
#########

Histogram(Square_Matrix(bayer_visible))
87/78:
def Square_Matrix(input_matrix):
    matrix_len_remove = int(input_matrix[1]-input_matrix[0]/2-0.5)
    print (matrix_len_remove)
    bayer_visible_square = input_matrix[0:input_matrix.shape[0], matrix_len_remove:input_matrix.shape[1]-matrix_len_remove]
    return bayer_visible_square

#########

#########
#2D histogram for data viewing in amplitude
def Histogram(input_matrix):
    plt.imshow(input_matrix, clim=(2000, 2500), interpolation="bicubic") #clim selects interval for color

#    imgplot.set_cmap('nipy_spectral')
    plt.colorbar()
#########

Histogram(Square_Matrix(bayer_visible))
87/79:
def Square_Matrix(input_matrix):
    matrix_len_remove = int(input_matrix.shape[1]-input_matrix.shape[0]/2-0.5)
    print (matrix_len_remove)
    bayer_visible_square = input_matrix[0:input_matrix.shape[0], matrix_len_remove:input_matrix.shape[1]-matrix_len_remove]
    return bayer_visible_square

#########

#########
#2D histogram for data viewing in amplitude
def Histogram(input_matrix):
    plt.imshow(input_matrix, clim=(2000, 2500), interpolation="bicubic") #clim selects interval for color

#    imgplot.set_cmap('nipy_spectral')
    plt.colorbar()
#########

Histogram(Square_Matrix(bayer_visible))
87/80:
def Square_Matrix(input_matrix):
    matrix_len_remove = int((input_matrix.shape[1]-input_matrix.shape[0])/2-0.5)
    print (matrix_len_remove)
    bayer_visible_square = input_matrix[0:input_matrix.shape[0], matrix_len_remove:input_matrix.shape[1]-matrix_len_remove]
    return bayer_visible_square

#########

#########
#2D histogram for data viewing in amplitude
def Histogram(input_matrix):
    plt.imshow(input_matrix, clim=(2000, 2500), interpolation="bicubic") #clim selects interval for color

#    imgplot.set_cmap('nipy_spectral')
    plt.colorbar()
#########

Histogram(Square_Matrix(bayer_visible))
87/81:
def Square_Matrix(input_matrix):
    matrix_len_remove = int((input_matrix.shape[1]-input_matrix.shape[0])/2-0.5)
    print (matrix_len_remove)
    bayer_visible_square = input_matrix[0:input_matrix.shape[0], matrix_len_remove:input_matrix.shape[1]-matrix_len_remove]
    return bayer_visible_square

#########

#########
#2D histogram for data viewing in amplitude
def Histogram(input_matrix):
    plt.imshow(input_matrix, clim=(2000, 2300), interpolation="bicubic") #clim selects interval for color

#    imgplot.set_cmap('nipy_spectral')
    plt.colorbar()
#########

Histogram(Square_Matrix(bayer_visible))
87/82:
def Square_Matrix(input_matrix):
    matrix_len_remove = int((input_matrix.shape[1]-input_matrix.shape[0])/2+100)
    print (matrix_len_remove)
    bayer_visible_square = input_matrix[0:input_matrix.shape[0], matrix_len_remove:input_matrix.shape[1]-matrix_len_remove]
    return bayer_visible_square

#########

#########
#2D histogram for data viewing in amplitude
def Histogram(input_matrix):
    plt.imshow(input_matrix, clim=(2000, 2300), interpolation="bicubic") #clim selects interval for color

#    imgplot.set_cmap('nipy_spectral')
    plt.colorbar()
#########

Histogram(Square_Matrix(bayer_visible))
87/83:
def Square_Matrix(input_matrix):
    matrix_len_remove = int((input_matrix.shape[1]-input_matrix.shape[0])/2-100)
    print (matrix_len_remove)
    bayer_visible_square = input_matrix[0:input_matrix.shape[0], matrix_len_remove:input_matrix.shape[1]-matrix_len_remove]
    return bayer_visible_square

#########

#########
#2D histogram for data viewing in amplitude
def Histogram(input_matrix):
    plt.imshow(input_matrix, clim=(2000, 2300), interpolation="bicubic") #clim selects interval for color

#    imgplot.set_cmap('nipy_spectral')
    plt.colorbar()
#########

Histogram(Square_Matrix(bayer_visible))
87/84:
bayer_visible_90rot = np.rot90(bayer_visible)
#########
#function redimension to nXn instead of mXn (to get a square matrix)
def Square_Matrix(input_matrix):
    matrix_len_remove = int((input_matrix.shape[1]-input_matrix.shape[0])/2-100)
    print (matrix_len_remove)
    bayer_visible_square = input_matrix[0:input_matrix.shape[0], matrix_len_remove:input_matrix.shape[1]-matrix_len_remove]
    return bayer_visible_square

#########

#########
#2D histogram for data viewing in amplitude
def Histogram(input_matrix):
    plt.imshow(input_matrix, clim=(2000, 2300), interpolation="bicubic") #clim selects interval for color

#    imgplot.set_cmap('nipy_spectral')
    plt.colorbar()
#########

Histogram(Square_Matrix(bayer_visible))
87/85: Histogram(Square_Matrix(bayer_visible_90rot))
87/86:
bayer_visible_90rot = np.rot90(bayer_visible, 1, (1,0))
#########
#function redimension to nXn instead of mXn (to get a square matrix)
def Square_Matrix(input_matrix):
    matrix_len_remove = int((input_matrix.shape[1]-input_matrix.shape[0])/2-100)
    print (matrix_len_remove)
    bayer_visible_square = input_matrix[0:input_matrix.shape[0], matrix_len_remove:input_matrix.shape[1]-matrix_len_remove]
    return bayer_visible_square

#########

#########
#2D histogram for data viewing in amplitude
def Histogram(input_matrix):
    plt.imshow(input_matrix, clim=(2000, 2300), interpolation="bicubic") #clim selects interval for color

#    imgplot.set_cmap('nipy_spectral')
    plt.colorbar()
#########

Histogram(Square_Matrix(bayer_visible_90rot))
87/87: Histogram(Square_Matrix(bayer_visible))
87/88:
def Square_Matrix(input_matrix):
    matrix_len_remove = int((input_matrix.shape[1]-input_matrix.shape[0])/2-100)
    print (matrix_len_remove)
    bayer_visible_square = input_matrix[0:input_matrix.shape[0], matrix_len_remove:input_matrix.shape[1]-matrix_len_remove]
    return bayer_visible_square

#########

#########
#2D histogram for data viewing in amplitude
def Histogram(input_matrix):
    plt.imshow(input_matrix, clim=(2000, 2300), interpolation="bicubic") #clim selects interval for color

#    imgplot.set_cmap('nipy_spectral')
    plt.colorbar()
#########

#rotate 90 deg matrix for accurate north position
bayer_visible_square = Square_Matrix(bayer_visible)
bayer_visible_90rot = np.rot90(bayer_visible_square, 1, (1,0))

Histogram(bayer_visible_square)
87/89:
def Square_Matrix(input_matrix):
    matrix_len_remove = int((input_matrix.shape[1]-input_matrix.shape[0])/2-100)
    print (matrix_len_remove)
    bayer_visible_square = input_matrix[0:input_matrix.shape[0], matrix_len_remove:input_matrix.shape[1]-matrix_len_remove]
    return bayer_visible_square

#########

#########
#2D histogram for data viewing in amplitude
def Histogram(input_matrix):
    plt.imshow(input_matrix, clim=(2000, 2300), interpolation="bicubic") #clim selects interval for color

#    imgplot.set_cmap('nipy_spectral')
    plt.colorbar()
#########

#rotate 90 deg matrix for accurate north position
bayer_visible_square = Square_Matrix(bayer_visible)
bayer_visible_90rot = np.rot90(bayer_visible_square, 1, (1,0))

Histogram(bayer_visible_square_90rot)
87/90: Histogram(bayer_visible_90rot)
87/91:
import rawpy
import imageio
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import colors



filepath = "_MG_1063.CR2"
raw = rawpy.imread(filepath)
87/92:
import rawpy
import imageio
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import colors


filepath = "_MG_1063.CR2"
raw = rawpy.imread(filepath)
87/93:
import rawpy
import imageio
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import colors


filepath = "_MG_1063.CR2"
raw = rawpy.imread(filepath)
87/94:
bayer_visible = raw.raw_image_visible # just visible area

#########
#function redimension to nXn instead of mXn (to get a square matrix)
def Square_Matrix(input_matrix):
    matrix_len_remove = int((input_matrix.shape[1]-input_matrix.shape[0])/2-100)
    print (matrix_len_remove)
    bayer_visible_square = input_matrix[0:input_matrix.shape[0], matrix_len_remove:input_matrix.shape[1]-matrix_len_remove]
    return bayer_visible_square

#########

#########
#2D histogram for data viewing in amplitude
def Histogram(input_matrix, maglim):
    plt.imshow(input_matrix, clim=(0, maglim), interpolation="quadric", cmap="inferno") #clim selects interval for color

#    imgplot.set_cmap('nipy_spectral')
    plt.colorbar(spacing='uniform')
#########

#########
#Flip right half of picture for integrating sphere corrections (remove stopper from image)
def Half_Copy(input_matrix):
    half_matrix = input_matrix[0:input_matrix.shape[0], int(input_matrix.shape[1]/2):input_matrix.shape[1]]
    flipped_matrix = np.fliplr(half_matrix)
    total_matrix = np.hstack((flipped_matrix, half_matrix))
    return total_matrix


#rotate 90 deg matrix for accurate north position
bayer_visible_square = Square_Matrix(bayer_visible)
bayer_visible_90rot = np.rot90(bayer_visible_square, -1)
87/95: Histogram(bayer_visible_90rot, 2300)
87/96:
file_dark_frame = '_MG_1157.CR2'
raw_dark_frame = rawpy.imread(file_dark_frame)
bayer_dark_frame = raw_dark_frame.raw_image_visible 
bayer_dark_frame_square = Square_Matrix(bayer_dark_frame)
bayer_dark_frame_square_90rot = np.rot90(bayer_dark_frame_square, -1)
87/97:
file_dark_frame = '_MG_1157.CR2'
raw_dark_frame = rawpy.imread(file_dark_frame)
87/98:
file_vignetting = '_MG_1154.CR2'
raw_vignetting = rawpy.imread(file_vignetting)
87/99:
filepath = "_MG_1063.CR2"
raw = rawpy.imread(filepath)
88/1: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
88/2: a=1j
88/3: print a
88/4: print (a)
88/5: print (a**2)
88/6: print (a.real)
88/7: print (a.imag)
88/8: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
88/9: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/1: x = pl.arange(0,15e9, 1e7)
89/2: import pylab as pl
89/3: x = pl.arange(0,15e9, 1e7)
89/4: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/5: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/6: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/7: x = pl.arange(0,15e9, 1e7)
89/8: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/9: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/10: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/11: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/12: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/13: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/14: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/15: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/16: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/17: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/18: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/19: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/20: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/21: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/22: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/23: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/24: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/25: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/26: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/27: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/28: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/29: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/30: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/31: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/32: a = 1+1j
89/33: print (np.abs(a))
89/34: print (a)
89/35: print (np.sqrt(2))
89/36: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/37: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/38: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/39: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/40: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/41: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/42: runfile('/Users/admin/Documents/quantum_noise/python/s11_sim_tunnel130ohm', wdir='/Users/admin/Documents/quantum_noise/python')
89/43:
r_vs_f_file = open("Rvsf_j8_0.txt", "r")
r_vs_f = []

lines = r_vs_f_file.read().split("\n") # "\r\n" if needed

for line in lines[]:
    if line != "" or if line != "#": # add other needed checks to skip titles
        cols = line.split(",")
        print cols
89/44:
r_vs_f_file = open("Rvsf_j8_0.txt", "r")
r_vs_f = []

lines = r_vs_f_file.read().split("\n") # "\r\n" if needed

for line in lines:
    if line != "" or if line != "#": # add other needed checks to skip titles
        cols = line.split(",")
        print cols
89/45:
r_vs_f_file = open("Rvsf_j8_0.txt", "r")
r_vs_f = []

lines = r_vs_f_file.read().split("\n") # "\r\n" if needed

for line in lines:
    if line != "" or line != "#": # add other needed checks to skip titles
        cols = line.split(",")
        print cols
89/46:
r_vs_f_file = open("Rvsf_j8_0.txt", "r")
r_vs_f = []

lines = r_vs_f_file.read().split("\n") # "\r\n" if needed

for line in lines:
    if line != "" or line != "#": # add other needed checks to skip titles
        cols = line.split(",")
        print (cols)
89/47:
r_vs_f_file = open("Rvsf_j8_0.txt", "r")
r_vs_f = []

lines = r_vs_f_file.read().split("\n") # "\r\n" if needed

for line in lines:
    if line != "" or line != "#": # add other needed checks to skip titles
        cols = line.split("   ")
        print (cols)
89/48:
r_vs_f_file = open("Rvsf_j8_0.txt", "r")
r_vs_f = []

lines = r_vs_f_file.read().split("\n") # "\r\n" if needed

for line in lines:
    if line != "" or line != "#": # add other needed checks to skip titles
        cols = line.split("  ")
        print (cols)
89/49:
r_vs_f_file = open("Rvsf_j8_0.txt", "r")
r_vs_f = []

lines = r_vs_f_file.read().split("\n") # "\r\n" if needed

for line in lines:
    if line != "" or line != "#": # add other needed checks to skip titles
        cols = line.split("     ")
        print (cols)
89/50: data = [i.strip('\n').split('\t') for i in open('Rvsf_j8_0.txt')]
89/51: data = data[30::]
89/52: plt.plot(data[0], data[1])
89/53: print (data[0])
89/54: plt.plot(data[::0], data[::1])
89/55: plt.plot(data[:,0], data[:,1])
89/56: plt.plot(data[:;0], data[:;1])
89/57: plt.plot(data[:0], data[:1])
89/58: data = np.asarray(data)
89/59: plt.plot(data[0], data[1])
89/60: print (data[0])
89/61: plt.plot(data[][0], data[][1])
89/62: plt.plot(data[:0], data[:1])
89/63: plt.plot(data[:,0], data[:,1])
89/64: print (data[:,0])
89/65: print (data[:,1])
89/66:
data = np.asarray(data)


plt.plot(data[:,0], data[:,1])
89/67: plt.plot(data[:,0], data[:,1])
89/68: plt.plot(data[:,0], data[:,1])
89/69: data0 = data[:,0]
89/70: data1 = data[:,1]
89/71: plt.plot(data0, data1)
89/72:
data0 = float(data[:,0])
data1 = float(data[:,1])
89/73: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/test', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/74:
for item in data0:
    item = float(item)
89/75: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/test', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/76:
for item in data1:
    item = float(item)
89/77: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/test', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/78:
data = [i.split('\t').strip('\n') for i in open('Rvsf_j8_0.txt')]

print (data)
89/79:
data = [i.strip('\n').split('\t') for i in open('Rvsf_j8_0.txt')]

print (data)
89/80: path = 'Rvsf_j8_0.txt'
89/81: data = loadtxt(path, delimiter="\t")
89/82: plt.plot(data[0], data[1])
89/83: print (data[0])
89/84: plt.plot(data[:,0], data[:,1])
89/85: plt.plot(data[:,0], data[:,1], data[:,0], data[:,2])
89/86:
for item in gamma:
    return_loss.append(10*np.log10(np.abs(item)))
89/87: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/88:
path = 'Rvsf_j8_0.txt'
data = np.loadtxt(path, delimiter="\t")

gamma = []
return_loss = []

for item in data[:,0]:
    gamma.append(Gamma(z0, Impedance_junction(z_j, capa_j, item)))


for item in gamma:
    return_loss.append(10*np.log10(np.abs(item)))
89/89: print (data.type)
89/90: print (data.type())
89/91: print (type(data))
89/92:
for item in data[:,0]:
    np.append(gamma, Gamma(z0, Impedance_junction(z_j, capa_j, item)))
89/93:
for item in data[:,0]:
    gamma = np.append(gamma, Gamma(z0, Impedance_junction(z_j, capa_j, item)))
89/94:
path = 'Rvsf_j8_0.txt'
data = np.loadtxt(path, delimiter="\t")

return_loss = []

for item in data[:,0]:
    gamma = np.append(gamma, Gamma(z0, Impedance_junction(z_j, capa_j, item)))
89/95:
for item in data[:,0]:
    gamma = np.append(gamma, Gamma(z0, Impedance_junction(z_j, capa_j, item)))
89/96:
for item in data[:,0]:
    gamma = np.insert(gamma, Gamma(z0, Impedance_junction(z_j, capa_j, item)))
89/97:
for item in data[:,0]:
    gamma.append(Gamma(z0, Impedance_junction(z_j, capa_j, item)))


gamma = np.asarray(gamma)
89/98:
gamma = []
return_loss = []

for item in data[:,0]:
    gamma.append(Gamma(z0, Impedance_junction(z_j, capa_j, item)))


gamma = np.asarray(gamma)
89/99:
gamma = []
return_loss = []

for item in data[:,0]:
    gamma.append(Gamma(z0, Impedance_junction(z_j, capa_j, item)))


gamma = np.asarray(gamma)
89/100: plt.plot(data[:,0], data[:,1], data[:,0], np.real(gamma))
89/101: plt.plot(data[:,0], data[:,2], data[:,0], np.imag(gamma))
89/102: plt.plot(data[:,0], data[:,1], data[:,0], np.real(gamma))
89/103: plt.plot(data[:,0], data[:,1], data[:,0], np.real(gamma))
89/104: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/105: print (complex(1,1))
89/106: z0 = complex(50, 0)     #line impedance, ohm
89/107:
z0 = complex(50, 0)     #line impedance, ohm
r_j = 130   #junction impedance, ohm
f_cutoff = 9e12     #cutoff frequency, hertz
capa_j = 1/(2*np.pi*f_cutoff*r_j)   #junction capacitance, farads


def Impedance_junction(r_j, capa_j, f):
    return r_j/complex(1, r_j*capa_j*2*np.pi*f)


def Gamma(z0, z_j):
    return (z_j-z0)/(z_j+z0)


def Vswr (gamma):
    return (1+np.absolute(gamma)/(1-np.absolute(gamma)))



path = 'Rvsf_j8_0.txt'
data = np.loadtxt(path, delimiter="\t")

gamma = []
return_loss = []

for item in data[:,0]:
    gamma.append(Gamma(z0, Impedance_junction(r_j, capa_j, item)))


gamma = np.asarray(gamma)

for item in gamma:
    return_loss.append(10*np.log10(np.abs(item)))


#Plot real parts of reflection coef.
plt.plot(data[:,0], data[:,1], data[:,0], np.real(gamma))

#Plot real parts of reflection coef.
plt.plot(data[:,0], data[:,2], data[:,0], np.imag(gamma))
89/108: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/109: plt.plot(data[:,0], data[:,1], data[:,0], np.real(gamma))
89/110: plt.plot(data[:,0], data[:,2], data[:,0], np.imag(gamma))
89/111: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/112: r_j = 200   #junction impedance, ohm
89/113: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/114: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/115: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/116: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/117: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/118: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/119: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/120: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/121: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/122: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/123: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/124: plt.plot(data[:,0], data[:,1], data[:,0], np.real(gamma))
89/125: plt.plot(data[:,0], data[:,2], data[:,0], np.imag(gamma))
89/126: plt.plot(data[:,0], data[:,2], data[:,0], np.imag(gamma))
89/127: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/128: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/129: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/130: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/131: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/132: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/133: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/134:
return_loss_data = []

for item in data[:,0]:
    gamma.append(Gamma(z0, Impedance_junction(r_j, capa_j, item)))


gamma = np.asarray(gamma)

for item in gamma:
    return_loss.append(20*np.log10(np.abs(item)))


for i in range (len(data[:,0])):
    complex_data = complex(data[i,1], data[i,2])
    return_loss_data.append(20*np.log10(np.abs(complex_data)))
89/135: debug
89/136:
gamma = []
return_loss = []
return_loss_data = []

for item in data[:,0]:
    gamma.append(Gamma(z0, Impedance_junction(r_j, capa_j, item)))


gamma = np.asarray(gamma)

for item in gamma:
    return_loss.append(20*np.log10(np.abs(item)))


for i in range (len(data[:,0])):
    complex_data = complex(data[i,1], data[i,2])
    return_loss_data.append(20*np.log10(np.abs(complex_data)))



return_loss = np.asarray(return_loss)
89/137: plt.plot(data[:,0], return_loss)
89/138: plt.plot(data[:,0], return_loss, data[:,0], return_loss_data)
89/139: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/140: plt.plot(data[:,0], return_loss, data[:,0], return_loss_data)
89/141: plt.plot(data[:,0], return_loss, data[:,0], return_loss_data)
89/142: plt.plot(data[:,0], return_loss, data[:,0], return_loss_data)
89/143: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/144: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/145: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/146: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/147: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/148: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/149: plt.plot(data[:,0], return_loss, data[:,0], return_loss_data)
89/150: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/151: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/152: print cmath.phase(complex_data[0;1])
89/153: print (phase(complex_data[0;1]))
89/154: print (phase(complex_data[0:1]))
89/155: print (cmath.phase(complex_data[0:1]))
89/156: print (np.phase(complex_data[0:1]))
89/157: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/158: print (cm.phase(complex_data[0:1]))
89/159: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/160: complex_data = complex(data[:1],data[:2])
89/161: print (data[:1])
89/162: print (data[1:])
89/163: print (data[-1:])
89/164: print (data[-2:])
89/165: print (data[::1])
89/166: print (data[:,1])
89/167: print (data[:,0])
89/168: print (data[:,2])
89/169: complex_data = complex(data[:,1],data[:,2])
89/170: complex_data = np.array(complex(data[:,1],data[:,2]), dtype=complex)
89/171: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
89/172: complex_data = np.vectorize(complex(data[:,1],data[:,2]))
89/173: complex_data_test = np.vectorize(complex(data[:,1],data[:,2]))
89/174: complex_data = np.vectorize(complex)(data[:,1],data[:,2]))
89/175: complex_data = data[:,1] + 1j*data[:,2]))
89/176: complex_data = data[:,1] + 1j*data[:,2]
89/177: return_loss = 20*np.log10(np.abs(complex_data)
89/178: return_loss = 20*np.log10(np.abs(complex_data))
89/179: return_loss = 20*np.log10(np.abs(gamma))
89/180: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
92/1: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
92/2: phase_data = cm.phase(complex_data[:])
92/3: complex_data = np.array(data[:,1] + 1j*data[:,2])
92/4: phase_data = cm.phase(complex_data)
92/5: complex_data = np.asarray(data[:,1] + 1j*data[:,2])
92/6: phase_data = cm.phase(complex_data)
92/7: print (dtype(complex_data))
92/8: print (complex_data.dtype)
92/9: phase_data = complex_data*2
92/10: phase_data = math.atan2(complex_data.imag, complex_data.real)
92/11: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/python/s11_sim_tunnel130ohm.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/python')
92/12: phase_data = math.atan2(complex_data.imag[:], complex_data.real[:])
92/13: print (complex_data.imag)
92/14: print (complex_data.real)
92/15: print (complex_data.imag)
92/16: print (math.atan2(complex_data.imag, complex_data.real))
92/17: complex_data = data[:,1] + 1j*data[:,2]
92/18: print (math.atan2(complex_data.imag, complex_data.real))
92/19: phase_data = np.angle(complex_data)
92/20: plt.plot(data[:,0], data[:,1], data[:,0], np.real(gamma), data[:,0], np.real(complex_data))
92/21: plt.plot(data[:,0], data[:,1], data[:,0], np.real(gamma))
92/22: plt.plot(data[:,0], return_loss)
92/23: return_loss_data = 20*np.log10(np.abs(complex_data))
92/24: plt.plot(data[:,0], return_loss, data[:,0], return_loss_data)
92/25: plt.plot(data[:,0], return_loss, data[:,0], return_loss_data)
92/26:
average_interval = 40

derivative = []
for i in range (average_interval):
    dphi = phase_data[i]-phase_data[i-1]
    df = data[i,0]-data[i-1,0]
    derivative.append(dphi/df)


phase_offset = np.average(derivative)
96/1: plot(randn(100))
98/1: plot(randn(100))
101/1: %pylab
103/1: plot(randn(100))
105/1:
from pylab import *
import sys
import scipy as sp
sys.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
import data_process.utils as utils
%matplotlib inline

from pyHegel.commands import readfile
from pyHegel import fitting as fit
from pyHegel import fit_functions as func


def logMag(cmplx):
    return 10*log10(abs(cmplx)**2)
class scattering:
    def __init__(self,data):
        self.freq=data[0]
        self.S33=data[1]+1j*data[2]
        self.S44=data[3]+1j*data[4]
        self.S34=data[5]+1j*data[6]
        self.S43=data[7]+1j*data[8]
105/2:
from pylab import *
import scipy as sp
sys.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
import data_process.utils as utils
%matplotlib inline

from pyHegel.commands import readfile
from pyHegel import fitting as fit
from pyHegel import fit_functions as func


def logMag(cmplx):
    return 10*log10(abs(cmplx)**2)
class scattering:
    def __init__(self,data):
        self.freq=data[0]
        self.S33=data[1]+1j*data[2]
        self.S44=data[3]+1j*data[4]
        self.S34=data[5]+1j*data[6]
        self.S43=data[7]+1j*data[8]
105/3:
from pylab import *
import scipy as sp
sys.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
import data_process.utils as utils
%matplotlib inline

from pyHegel.commands import readfile
from pyHegel import fitting as fit
from pyHegel import fit_functions as func


def logMag(cmplx):
    return 10*log10(abs(cmplx)**2)
class scattering:
    def __init__(self,data):
        self.freq=data[0]
        self.S33=data[1]+1j*data[2]
        self.S44=data[3]+1j*data[4]
        self.S34=data[5]+1j*data[6]
        self.S43=data[7]+1j*data[8]
105/4:
from pylab import *
import sys
import scipy as sp
sys.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
import data_process.utils as utils
%matplotlib inline

from pyHegel.commands import readfile
from pyHegel import fitting as fit
from pyHegel import fit_functions as func


def logMag(cmplx):
    return 10*log10(abs(cmplx)**2)
class scattering:
    def __init__(self,data):
        self.freq=data[0]
        self.S33=data[1]+1j*data[2]
        self.S44=data[3]+1j*data[4]
        self.S34=data[5]+1j*data[6]
        self.S43=data[7]+1j*data[8]
105/5:
from pylab import *
import sys
import scipy as sp
sys.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
%matplotlib inline

from pyHegel.commands import readfile
from pyHegel import fitting as fit
from pyHegel import fit_functions as func


def logMag(cmplx):
    return 10*log10(abs(cmplx)**2)
class scattering:
    def __init__(self,data):
        self.freq=data[0]
        self.S33=data[1]+1j*data[2]
        self.S44=data[3]+1j*data[4]
        self.S34=data[5]+1j*data[6]
        self.S43=data[7]+1j*data[8]
106/1: from pyHegel import fitting
107/1: import pyHegel
108/1:
from pylab import *
import sys
import scipy as sp
sys.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
import data_process.utils as utils
%matplotlib inline

from pyHegel.commands import readfile
from pyHegel import fitting as fit
from pyHegel import fit_functions as func


def logMag(cmplx):
    return 10*log10(abs(cmplx)**2)
class scattering:
    def __init__(self,data):
        self.freq=data[0]
        self.S33=data[1]+1j*data[2]
        self.S44=data[3]+1j*data[4]
        self.S34=data[5]+1j*data[6]
        self.S43=data[7]+1j*data[8]
108/2:
from pylab import *
import sys
import scipy as sp
sys.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
%matplotlib inline

from pyHegel.commands import readfile
from pyHegel import fitting as fit
from pyHegel import fit_functions as func


def logMag(cmplx):
    return 10*log10(abs(cmplx)**2)
class scattering:
    def __init__(self,data):
        self.freq=data[0]
        self.S33=data[1]+1j*data[2]
        self.S44=data[3]+1j*data[4]
        self.S34=data[5]+1j*data[6]
        self.S43=data[7]+1j*data[8]
108/3:
path='S:/Projets/S3cyclostationnaire/Data/20180510/'
dataX2fwd=readfile(path + 'X2vsV_0Fwd.txt')
dataX2rev=readfile(path + 'X2vsV_0Rev.txt')
dataY2fwd=readfile(path + 'Y2vsV_0Fwd.txt')
dataY2rev=readfile(path + 'Y2vsV_0Rev.txt')

print shape(dataX2fwd)

dataX2=dataX2fwd
dataY2=dataY2fwd
dataX2[1]=(dataX2fwd[1]+dataX2rev[1])/2
dataY2[1]=(dataY2fwd[1]+dataY2rev[1])/2
110/1: help_pyHegel
110/2: fit.functions
110/3: fit_functions
110/4: fit_functions?
110/5: readfile?
110/6: pyHegel?
110/7: fit
110/8: fit?
110/9: fitting
110/10: fitting?
110/11: pyHegel
110/12: from pyHegel import
110/13: from pyHegel import fit_functions
110/14: fit_functions?
110/15: from pyHegel import fit_functions as func
110/16: func?
110/17: func.noiseI?
110/18: func.noisefitI?
108/4:
from pylab import *
import sys
import scipy as sp
sys.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
%matplotlib inline

from pyHegel.commands import readfile
from pyHegel import fitting as fit
from pyHegel import fit_functions as func


def logMag(cmplx):
    return 10*log10(abs(cmplx)**2)
class scattering:
    def __init__(self,data):
        self.freq=data[0]
        self.S33=data[1]+1j*data[2]
        self.S44=data[3]+1j*data[4]
        self.S34=data[5]+1j*data[6]
        self.S43=data[7]+1j*data[8]
108/5:
from pylab import *
import sys
import scipy as sp
sys.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
%matplotlib inline

from pyHegel.commands import readfile
from pyHegel import fitting as fit
from pyHegel import fit_functions as func


def logMag(cmplx):
    return 10*log10(abs(cmplx)**2)
class scattering:
    def __init__(self,data):
        self.freq=data[0]
        self.S33=data[1]+1j*data[2]
        self.S44=data[3]+1j*data[4]
        self.S34=data[5]+1j*data[6]
        self.S43=data[7]+1j*data[8]
108/6:
path='S:/Projets/S3cyclostationnaire/Data/20180510/'
dataX2fwd=readfile(path + 'X2vsV_0Fwd.txt')
dataX2rev=readfile(path + 'X2vsV_0Rev.txt')
dataY2fwd=readfile(path + 'Y2vsV_0Fwd.txt')
dataY2rev=readfile(path + 'Y2vsV_0Rev.txt')

print shape(dataX2fwd)

dataX2=dataX2fwd
dataY2=dataY2fwd
dataX2[1]=(dataX2fwd[1]+dataX2rev[1])/2
dataY2[1]=(dataY2fwd[1]+dataY2rev[1])/2
108/7:
path='/Volumes/ReuletLabBig/Projets/S3cyclostationnaire/Data/20180510/'
dataX2fwd=readfile(path + 'X2vsV_0Fwd.txt')
dataX2rev=readfile(path + 'X2vsV_0Rev.txt')
dataY2fwd=readfile(path + 'Y2vsV_0Fwd.txt')
dataY2rev=readfile(path + 'Y2vsV_0Rev.txt')

print shape(dataX2fwd)

dataX2=dataX2fwd
dataY2=dataY2fwd
dataX2[1]=(dataX2fwd[1]+dataX2rev[1])/2
dataY2[1]=(dataY2fwd[1]+dataY2rev[1])/2
108/8:
from pylab import *
import sys
import scipy as sp
sys.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
%matplotlib inline

from pyHegel.commands import readfile
from pyHegel import fitting as fit
from pyHegel import fit_functions as func


def logMag(cmplx):
    return 10*log10(abs(cmplx)**2)
108/9:
path='/Volumes/ReuletLabBig/Projets/S3cyclostationnaire/Data/20180510/'
dataX2fwd=readfile(path + 'X2vsV_0Fwd.txt')
dataX2rev=readfile(path + 'X2vsV_0Rev.txt')
dataY2fwd=readfile(path + 'Y2vsV_0Fwd.txt')
dataY2rev=readfile(path + 'Y2vsV_0Rev.txt')

print shape(dataX2fwd)

dataX2=dataX2fwd
dataY2=dataY2fwd
dataX2[1]=(dataX2fwd[1]+dataX2rev[1])/2
dataY2[1]=(dataY2fwd[1]+dataY2rev[1])/2
108/10:
path='/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Data/20180510/'
dataX2fwd=readfile(path + 'X2vsV_0Fwd.txt')
dataX2rev=readfile(path + 'X2vsV_0Rev.txt')
dataY2fwd=readfile(path + 'Y2vsV_0Fwd.txt')
dataY2rev=readfile(path + 'Y2vsV_0Rev.txt')

print shape(dataX2fwd)

dataX2=dataX2fwd
dataY2=dataY2fwd
dataX2[1]=(dataX2fwd[1]+dataX2rev[1])/2
dataY2[1]=(dataY2fwd[1]+dataY2rev[1])/2
111/1:
from pylab import *
import sys
import scipy as sp
sys.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
%matplotlib inline

from pyHegel.commands import readfile
from pyHegel import fitting as fit
from pyHegel import fit_functions as func


def logMag(cmplx):
    return 10*log10(abs(cmplx)**2)
111/2:
from pylab import *
import sys
import scipy as sp
sys.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
%matplotlib inline

from pyHegel.commands import readfile
from pyHegel import fitting as fit
from pyHegel import fit_functions as func


def logMag(cmplx):
    return 10*log10(abs(cmplx)**2)
111/3:
path='/ReuletRechercheBig/Projets/S3cyclostationnaire/Data/20180510/'
dataX2fwd=readfile(path + 'X2vsV_0Fwd.txt')
dataX2rev=readfile(path + 'X2vsV_0Rev.txt')
dataY2fwd=readfile(path + 'Y2vsV_0Fwd.txt')
dataY2rev=readfile(path + 'Y2vsV_0Rev.txt')

print shape(dataX2fwd)

dataX2=dataX2fwd
dataY2=dataY2fwd
dataX2[1]=(dataX2fwd[1]+dataX2rev[1])/2
dataY2[1]=(dataY2fwd[1]+dataY2rev[1])/2
111/4:
path='/ReuletRechercheBig/Projets/S3cyclostationnaire/Data/20180510/'
dataX2fwd=readfile(path + 'X2vsV_0Fwd.txt')
dataX2rev=readfile(path + 'X2vsV_0Rev.txt')
dataY2fwd=readfile(path + 'Y2vsV_0Fwd.txt')
dataY2rev=readfile(path + 'Y2vsV_0Rev.txt')

print shape(dataX2fwd)

dataX2=dataX2fwd
dataY2=dataY2fwd
dataX2rev=dataX2rev[::-1]
dataY2rev=dataY2rev[::-1]
dataX2[1]=(dataX2fwd[1]+dataX2rev[1])/2
dataY2[1]=(dataY2fwd[1]+dataY2rev[1])/2
111/5:
path='Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Data/20180510/'
dataX2fwd=readfile(path + 'X2vsV_0Fwd.txt')
dataX2rev=readfile(path + 'X2vsV_0Rev.txt')
dataY2fwd=readfile(path + 'Y2vsV_0Fwd.txt')
dataY2rev=readfile(path + 'Y2vsV_0Rev.txt')

print shape(dataX2fwd)

dataX2=dataX2fwd
dataY2=dataY2fwd
dataX2rev=dataX2rev[::-1]
dataY2rev=dataY2rev[::-1]
dataX2[1]=(dataX2fwd[1]+dataX2rev[1])/2
dataY2[1]=(dataY2fwd[1]+dataY2rev[1])/2
111/6:
path='/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Data/20180510/'
dataX2fwd=readfile(path + 'X2vsV_0Fwd.txt')
dataX2rev=readfile(path + 'X2vsV_0Rev.txt')
dataY2fwd=readfile(path + 'Y2vsV_0Fwd.txt')
dataY2rev=readfile(path + 'Y2vsV_0Rev.txt')

print shape(dataX2fwd)

dataX2=dataX2fwd
dataY2=dataY2fwd
dataX2rev=dataX2rev[::-1]
dataY2rev=dataY2rev[::-1]
dataX2[1]=(dataX2fwd[1]+dataX2rev[1])/2
dataY2[1]=(dataY2fwd[1]+dataY2rev[1])/2
111/7:
def coth(a,I,V,T):
    return A*e*I*np.coth(e*V/(2*kboltz*T))

print 


fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataX2[0], dataX2[1])
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataY2[0], dataY2[1])
111/8:
print (dataX2[1]-dataX2fwd[1])
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataX2[0], dataX2[1])
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataY2[0], dataY2[1])
111/9:
print (dataX2rev)
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataX2[0], dataX2[1])
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataY2[0], dataY2[1])
111/10:
print (dataX2fwd)
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataX2[0], dataX2[1])
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataY2[0], dataY2[1])
111/11:
path='/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Data/20180510/'
dataX2fwd=readfile(path + 'X2vsV_0Fwd.txt')
dataX2rev=readfile(path + 'X2vsV_0Rev.txt')
dataY2fwd=readfile(path + 'Y2vsV_0Fwd.txt')
dataY2rev=readfile(path + 'Y2vsV_0Rev.txt')

print shape(dataX2fwd)

dataX2=dataX2fwd
dataY2=dataY2fwd
dataX2rev=dataX2rev[1][:-1]
dataY2rev=dataY2rev[::-1]
dataX2[1]=(dataX2fwd[1]+dataX2rev[1])/2
dataY2[1]=(dataY2fwd[1]+dataY2rev[1])/2
111/12:
print (dataX2rev)
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataX2[0], dataX2[1])
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataY2[0], dataY2[1])
111/13:
path='/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Data/20180510/'
dataX2fwd=readfile(path + 'X2vsV_0Fwd.txt')
dataX2rev=readfile(path + 'X2vsV_0Rev.txt')
dataY2fwd=readfile(path + 'Y2vsV_0Fwd.txt')
dataY2rev=readfile(path + 'Y2vsV_0Rev.txt')

print shape(dataX2fwd)

dataX2=dataX2fwd
dataY2=dataY2fwd
dataX2rev[1]=dataX2rev[1][:-1]
dataY2rev=dataY2rev[::-1]
dataX2[1]=(dataX2fwd[1]+dataX2rev[1])/2
dataY2[1]=(dataY2fwd[1]+dataY2rev[1])/2
111/14:
path='/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Data/20180510/'
dataX2fwd=readfile(path + 'X2vsV_0Fwd.txt')
dataX2rev=readfile(path + 'X2vsV_0Rev.txt')
dataY2fwd=readfile(path + 'Y2vsV_0Fwd.txt')
dataY2rev=readfile(path + 'Y2vsV_0Rev.txt')

print shape(dataX2fwd)

dataX2=dataX2fwd
dataY2=dataY2fwd
dataX2rev=np.flipud(dataX2rev)
dataX2[1]=(dataX2fwd[1]+dataX2rev[1])/2
dataY2[1]=(dataY2fwd[1]+dataY2rev[1])/2
111/15:
path='/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Data/20180510/'
dataX2fwd=readfile(path + 'X2vsV_0Fwd.txt')
dataX2rev=readfile(path + 'X2vsV_0Rev.txt')
dataY2fwd=readfile(path + 'Y2vsV_0Fwd.txt')
dataY2rev=readfile(path + 'Y2vsV_0Rev.txt')

print shape(dataX2fwd)

dataX2=dataX2fwd
dataY2=dataY2fwd
dataX2rev=np.flipud(dataX2rev)
dataX2[1]=(dataX2fwd[1]+dataX2rev[1])/2
dataY2[1]=(dataY2fwd[1]+dataY2rev[1])/2
111/16:
print (dataX2rev)
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataX2[0], dataX2[1])
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataY2[0], dataY2[1])
111/17:
path='/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Data/20180510/'
dataX2fwd=readfile(path + 'X2vsV_0Fwd.txt')
dataX2rev=readfile(path + 'X2vsV_0Rev.txt')
dataY2fwd=readfile(path + 'Y2vsV_0Fwd.txt')
dataY2rev=readfile(path + 'Y2vsV_0Rev.txt')

print shape(dataX2fwd)

dataX2=dataX2fwd
dataY2=dataY2fwd
dataX2rev=np.fliplr(dataX2rev)
dataX2[1]=(dataX2fwd[1]+dataX2rev[1])/2
dataY2[1]=(dataY2fwd[1]+dataY2rev[1])/2
111/18:
print (dataX2rev)
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataX2[0], dataX2[1])
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataY2[0], dataY2[1])
111/19:
path='/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Data/20180510/'
dataX2fwd=readfile(path + 'X2vsV_0Fwd.txt')
dataX2rev=readfile(path + 'X2vsV_0Rev.txt')
dataY2fwd=readfile(path + 'Y2vsV_0Fwd.txt')
dataY2rev=readfile(path + 'Y2vsV_0Rev.txt')

print shape(dataX2fwd)

dataX2=dataX2fwd
dataY2=dataY2fwd
dataX2rev=np.fliplr(dataX2rev)
dataY2rev=np.fliplr(dataY2rev)
dataX2[1]=(dataX2fwd[1]+dataX2rev[1])/2
dataY2[1]=(dataY2fwd[1]+dataY2rev[1])/2
111/20:
print (dataX2rev)
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataX2[0], dataX2[1])
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataY2[0], dataY2[1])
111/21:
print (dataX2[1]-dataX2rev[1])
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataX2[0], dataX2[1])
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataY2[0], dataY2[1])
111/22:
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataX2[0], dataX2[1], dataX2[0], dataX2fwd[1])
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataY2[0], dataY2[1])
111/23:
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataX2[0], dataX2[1], dataX2[0], dataX2fwd[1])
ax.axis([-1,1,0.0003, 0.0008])
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataY2[0], dataY2[1])
111/24:
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataX2[0], dataX2[1], dataX2[0], dataX2rev[1])
ax.axis([-1,1,0.0003, 0.0008])
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataY2[0], dataY2[1])
115/1: print "x"
115/2: pyHegel
115/3: import pyHegel
115/4: x = 15
115/5: runfile('/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Notebooks/20180510/X2Y2vsV_charles.py', wdir='/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Notebooks/20180510')
115/6: runfile('/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Notebooks/20180510/X2Y2vsV_charles.py', wdir='/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Notebooks/20180510')
115/7: runfile('/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Notebooks/20180510/X2Y2vsV_charles.py', wdir='/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Notebooks/20180510')
115/8: runfile('/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Notebooks/20180510/X2Y2vsV_charles.py', wdir='/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Notebooks/20180510')
115/9: runfile('/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Notebooks/20180510/X2Y2vsV_charles.py', wdir='/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Notebooks/20180510')
115/10: runfile('/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Notebooks/20180510/X2Y2vsV_charles.py', wdir='/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Notebooks/20180510')
115/11: runfile('/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Notebooks/20180510/X2Y2vsV_charles.py', wdir='/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Notebooks/20180510')
115/12:
from pylab import *
import sys
import scipy as sp
115/13: sys.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
115/14: from pyHegel.commands import readfile
115/15: runfile('/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Notebooks/20180510/X2Y2vsV_charles.py', wdir='/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Notebooks/20180510')
115/16: runfile('/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Notebooks/20180510/X2Y2vsV_charles.py', wdir='/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Notebooks/20180510')
115/17: import pyHegel.instruments
115/18: runfile('/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Notebooks/20180510/X2Y2vsV_charles.py', wdir='/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Notebooks/20180510')
115/19: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
115/20: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
115/21: pwd
115/22: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
115/23: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
115/24: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
115/25: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
115/26: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
115/27: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
115/28: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
115/29: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
115/30: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
115/31: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
115/32: pyHegel.commands.readfile
115/33: import pyHegel.commands.readfile
115/34: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
115/35: pyHegel.instruments
115/36: pyHegel.instruments?
115/37: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
115/38: import pyHegel.commands
115/39: #from pyHegel import fitting as fit
115/40: import pyHegel.commands
115/41: import pyHegel.instruments
115/42: import pyHegel.instruments
115/43: import pyHegel.commands
115/44: import pyHegel.commands
115/45: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
115/46: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
115/47: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
115/48: debug
115/49: import pyHegel.instruments as inst
115/50: dataX2fwd=inst.readfile(path + 'X2vsV_0Fwd.txt')
115/51: from pyHegel.commands import readfile
115/52: dataX2fwd=readfile(path + 'X2vsV_0Fwd.txt')
115/53: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
115/54: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
115/55: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
115/56: plot(a=arange(0,10,1),2*a)
115/57: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
115/58: plot(a=arange(0,10,1),a)
115/59: a=arange(0,10,1)
115/60: plot(a, 2*a)
115/61: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
115/62: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
115/63: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
115/64: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
118/1: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
111/25:
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataX2[0], dataX2[1], dataX2[0], dataX2rev[1])
ax.axis([-1,1,0.0003, 0.0008])
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataY2[0], dataY2[1])
111/26:
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataX2[0], dataX2[1], dataX2[0], dataX2rev[1])
fig, ax = plt.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataY2[0], dataY2[1])
118/2: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
118/3: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
118/4: plt.plot(dataX2[0], dataX2[1], dataX2[0], dataX2rev[1])
118/5: pl.plot(dataX2[0], dataX2[1], dataX2[0], dataX2rev[1])
118/6: pl.plot(dataX2[0], dataX2[1], dataX2[0], dataX2rev[1], dataX2[0], dataX2fwd[1])
118/7: pl.plot(dataX2[0], dataX2[1], dataX2[0], dataX2fwd[1])
118/8: pl.plot(dataX2[0], dataX2[1], dataX2[0], dataX2rev[1])
118/9: dataX2.shape
118/10: dataX2.shape[0]
118/11: dataX2.shape[1]
118/12: dataX2[0:]
118/13: dataX2[1:]
118/14: dataX2[2:]
118/15: dataX2[2]
118/16: dataX2[1]
118/17: dataX2[0]
118/18: datafwd[0]
118/19: pl.plot(dataY2[0], dataY2[1], dataY2[0], dataY2rev[1])
118/20: pl.plot(dataY2[0], dataY2[1], dataY2[0], dataY2fwd[1])
118/21: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
118/22: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
118/23: pl.plot(dataX2[0], dataX2[1], dataX2[0], dataX2rev[1])
118/24: pl.plot(dataX2[0], dataX2[1], dataX2[0], dataX2fwd[1])
118/25: pl.plot(dataX2[0], dataX2[1], dataX2[0], dataX2fwd[1], dataX2[0], dataX2rev[1])
118/26: pl.plot(dataY2[0], dataY2[1], dataY2[0], dataY2fwd[1], dataY2[0], dataY2rev[1])
118/27: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
118/28:
path='/Volumes/ReuletRechercheBig/Projets/S3cyclostationnaire/Data/20180510/'
dataX2fwd=readfile(path + 'X2vsV_0Fwd.txt')
dataX2rev=readfile(path + 'X2vsV_0Rev.txt')
dataY2fwd=readfile(path + 'Y2vsV_0Fwd.txt')
dataY2rev=readfile(path + 'Y2vsV_0Rev.txt')
118/29: dataX2=dataX2rev
118/30: dataX2rev=pl.fliplr(dataX2rev)
118/31: dataX2rev=pl.fliplr(dataX2rev)
118/32: dataX2rev=pl.fliplr(dataX2rev)
118/33: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
118/34: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
118/35: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
118/36: pl.plot(dataY2[0], dataY2[1], dataY2[0], dataY2fwd[1], dataY2[0], dataY2rev[1])
118/37: from pyHegel import fit_functions as func
118/38: from pyHegel import fitting as fit
118/39: print dataX2[1]-dataX2fwd[1]
118/40: print dataX2[1]-dataX2rev[1]
118/41: print dataX2[1]-dataX2[1]
118/42: print dataY2[1]-dataY2rev[1]
118/43: print dataY2[1]-dataY2fwd[1]
118/44: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
118/45: I=pl.linspace(-5e-5, 5e-5, 101)
118/46: ax.plot(dataY2[0], dataY2[1])
118/47:
fig, ax = pl.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataX2[0], dataX2[1], dataX2[0], dataX2rev[1])
fig, ax = pl.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataY2[0], dataY2[1])
118/48:
fig, ax = pl.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataX2[0], dataX2[1], dataX2[0], dataX2rev[1])
ax.axis(-5e-5, 5e-5)
118/49: ax.axis([-5e-5, 5e-5])
118/50: ax.axis([-5e-5 5e-5])
118/51: func.noisefitI?
118/52: func.noisefitV?
118/53: func.noisePower
118/54: func.noisePower?
118/55: func.noisefitI?
118/56: fit
118/57: fit?
118/58: fit.fitplot?
118/59: dataX2rev=pl.fliplr(dataX2rev)   #attention, pas runner la ligne seule
118/60: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
118/61: fit.fitplot(func.noisefitI(I, 2, 1, 0, R=50.), dataX2[0], dataX2[1],
118/62: fit.fitplot(func.noisefitI(I, 2, 1, 0, R=50.), dataX2[0], dataX2[1])
118/63: fit.fitplot(func.noisefitI(I, 2, 1, 0, R=50.), dataX2[0], dataX2[1], 0)
118/64: fit.fitcurve(func.noisefitI(I, 2, 1, 0, R=50.), dataX2[0], dataX2[1], 0)
118/65: fit.fitcurve?
118/66: func.noiseI?
118/67: func.noisefitI?
118/68: fit.fitcurve(func.noisefitI, dataX2[0]/10000, dataX2[1], [dataX2[0]/10000, 0, 1, 2, R=50.0])
118/69: fit.fitcurve(func.noisefitI, dataX2[0]/10000, dataX2[1], [dataX2[0]/10000, 0, 1, 2])
118/70: fit.fitcurve(func.noisefitI, dataX2[0]/10000, dataX2[1],[I, 0, 1, 2])
118/71: print kbt
118/72: print kb
118/73: kb
118/74: fit.fitcurve(func.noisefitI, dataX2[0]/10000, dataX2[1],[1, 0, 1, 2])
118/75: a = fit.fitcurve(func.noisefitI, dataX2[0]/10000, dataX2[1],[1, 0, 1, 2])
118/76: print a
118/77: print a.shape
118/78: print a.type
118/79: print type(a)
118/80: fit.fitcurve(func.noisefitI, dataX2[0]/10000, dataX2[1],[0, 1, 2])
118/81: a = fit.fitcurve(func.noisefitI, dataX2[0]/10000, dataX2[1],[0, 1, 2])
118/82: print a
118/83: print a.type
118/84: print type(a)
118/85: a.shape
118/86: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
118/87: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
118/88: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
118/89: dataX2fit = fit.fitcurve(func.noisefitI, dataX2[0]/10000, dataX2[1], [1, 0, 1])[0]
118/90: dataX2fit = fit.fitcurve(func.noisefitI, dataX2[0], dataX2[1], [1, 0, 1])[0]
118/91: func.noisefitI
118/92: dataX2fit = fit.fitcurve(func.noisefitI, dataX2[0], dataX2[1], [1, 1, 1])[0]
118/93: a = pl.rot90(dataX2)
118/94: a = dataX2[:,0]
118/95: a = dataX2[0,:]
118/96: a = dataX2[1,:]
118/97: a = dataX2[1]
118/98: a = dataX2[0]
118/99: dataX2fit = fit.fitcurve(func.noisefitI, dataX2[0], dataX2[1], [1, 0, 1])
118/100: dataX2fit = fit.fitcurve(func.noisefitI, pl.rot90(dataX2[0]), dataX2[1], [1, 0, 1])
118/101: dataX2fit = fit.fitcurve(func.noisefitI, pl.rot90(dataX2[0], [0,1]), dataX2[1], [1, 0, 1])
118/102: dataX2fit = fit.fitcurve(func.noisefitI, pl.rot90(dataX2[0], [1,0]), dataX2[1], [1, 0, 1])
118/103: dataX2fit = fit.fitcurve(func.noisefitI, pl.rot90(dataX2[0], axes=(0,1)), dataX2[1], [1, 0, 1])
118/104: dataX2fit = fit.fitcurve(func.noisefitI, pl.rot90(dataX2[0], axes=(1,0)), dataX2[1], [1, 0, 1])
118/105:
fig, ax = pl.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataX2[0], dataX2[1], dataX2[0], dataX2rev[1])
fig, ax = pl.subplots(1, 1, figsize=(18,6),dpi=72)
ax.plot(dataY2[0], dataY2[1])
118/106: dataX2fit = fit.fitplot(func.noisefitI, dataX2[0], dataX2[1], [3, 1, 2.5])
118/107: dataX2fit = fit.fitplot(func.noisefitI, dataX2[0], dataX2[1], [3, 1, 8.5], noadjust=[0])
118/108: dataX2fit = fit.fitplot(func.noisefitI, dataX2[0], dataX2[1], [4, 1, 8.5], noadjust=[0])
118/109: dataX2fit = fit.fitplot(func.noisefitI, dataX2[0], dataX2[1], [5, 1, 8.5], noadjust=[0])
118/110: dataX2fit = fit.fitplot(func.noisefitI, dataX2[0], dataX2[1], [2, 1, 8.5], noadjust=[0])
118/111: dataX2fit = fit.fitplot(func.noisefitI, dataX2[0], dataX2[1], [2, 1, 8.5, R=116], noadjust=[0])
118/112: dataX2fit = fit.fitplot(func.noisefitI, dataX2[0], dataX2[1], [2, 1, 8.5, 116], noadjust=[0])
118/113: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
118/114: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
118/115: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
122/1:
path = 'S:/Projets/S3cyclostationnaire/notebooks/20180514/'
dataX2 = load(path+'XYvsV_1_2Dhisto.npz')
dataY2 = load(path+'XYvsV_2_2Dhisto.npz')

fig, ax = plt.subplots(1,2, figsize=(18,4),dpi=160)
ax[0].plot(,,'--k')
122/2:
path = 'S:/Projets/S3cyclostationnaire/notebooks/20180514/'
dataX2 = load(path+'XYvsV_1_2Dhisto.npz')
dataY2 = load(path+'XYvsV_2_2Dhisto.npz')

fig, ax = plt.subplots(1,2, figsize=(18,4),dpi=160)
#ax[0].plot(,,'--k')
122/3:
from pylab import *
from numpy import load
import sys
import scipy as sp
sys.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
import data_process.utils as utils
%matplotlib inline
from pyHegel.commands import readfile
122/4:
path = 'S:/Projets/S3cyclostationnaire/notebooks/20180514/'
dataX2 = load(path+'XYvsV_1_2Dhisto.npz')
dataY2 = load(path+'XYvsV_2_2Dhisto.npz')

fig, ax = plt.subplots(1,2, figsize=(18,4),dpi=160)
#ax[0].plot(,,'--k')
122/5:
path = 'S:/Projets/S3cyclostationnaire/Notebooks/20180514/'
dataX2 = load(path+'XYvsV_1_2Dhisto.npz')
dataY2 = load(path+'XYvsV_2_2Dhisto.npz')

fig, ax = plt.subplots(1,2, figsize=(18,4),dpi=160)
#ax[0].plot(,,'--k')
122/6:
path = 'smb://reuletds/ReuletRechercheBig/Projets/S3cyclostationnaire/Notebooks/20180514/'
dataX2 = load(path+'XYvsV_1_2Dhisto.npz')
dataY2 = load(path+'XYvsV_2_2Dhisto.npz')

fig, ax = plt.subplots(1,2, figsize=(18,4),dpi=160)
#ax[0].plot(,,'--k')
118/116: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire')
118/117: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire')
118/118: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire')
118/119: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire')
118/120: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire')
118/121: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire')
118/122: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
118/123: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
118/124: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
118/125: print (dataX2.shape)
118/126: print (shape(dataX2))
118/127: readfile
118/128: pyHegel
118/129: python pyHegel
118/130: print dataX2
118/131: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
118/132: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
118/133: pyH
118/134: pyHegel
123/1: load?
125/1: spyder
126/1: pyHegel
126/2: python pyHegel
126/3: import pyHegel
126/4: readfile
126/5: from pyHegel import readfile
126/6: from pyHegel import read_file
128/1: %loadpy?
128/2: loadpy?
128/3: loadpy?
128/4: load?
128/5: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/6:
dataX2 = np.load('XYvsV_1_2Dhisto.npz')
dataY2 = np.load('XYvsV_2_2Dhisto.npz')
128/7: print type(dataX2)
128/8: print type(dataX2('a'))
128/9:
with load('XYvsV_1_2Dhisto.npz') as data:
    a = data['a']
128/10:
with np.load('XYvsV_1_2Dhisto.npz') as data:
    a = data['a']
128/11:
with np.load('XYvsV_1_2Dhisto.npz') as data:
    a = data['*']
128/12:
with np.load('XYvsV_1_2Dhisto.npz') as data:
    a = data['']
128/13:
with np.load('XYvsV_1_2Dhisto.npz') as data:
    print (data[:])
128/14:
with np.load('XYvsV_1_2Dhisto.npz') as data:
    print (data[::])
128/15:
with np.load('XYvsV_1_2Dhisto.npz') as data:
    print (data[])
128/16:
with np.load('XYvsV_1_2Dhisto.npz') as data:
    print (data)
128/17:
data1 = np.load('XYvsV_1_2Dhisto.npz')
data2 = np.load('XYvsV_2_2Dhisto.npz')

data1On=data1['syncON']
data1Off=data1['syncOFF']

data2On=data2['syncON']
data2Off=data2['syncOFF']
128/18: np.show(data2on)
128/19: np.imshow(data2on)
128/20: plt.imshow(data2on)
128/21: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/22: plt.imshow(data2on[0])
128/23: data2on_moyenne=data2on.mean([1,0,0])
128/24: data2on_moyenne=data2on.mean(1)
128/25: data2on_moyenne=data2on.mean(0)
128/26: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/27: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/28: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/29: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/30: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/31: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/32: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/33: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/34: data2off_moyenne=data2off.mean(0)
128/35:
fig, ax = plt.subplots(1,2, figsize=(18,4),dpi=160)
fig1 = ax[0].imshow(data2on[0])
fig2 = ax[1].imshow(data2on_moyenne)
fig3 = ax[2].imshow(data2off[0])
fig4 = ax[3].imshow(data2off_moyenne)
fig1.colorbar()
128/36:
fig3 = ax[2].imshow(data2off[0])
fig4 = ax[3].imshow(data2off_moyenne)
128/37: fig, ax = plt.subplots(1,4, figsize=(18,4),dpi=160)
128/38:
fig, ax = plt.subplots(1,4, figsize=(18,4),dpi=160)
fig1 = ax[0].imshow(data2on[0])
fig2 = ax[1].imshow(data2on_moyenne)
fig3 = ax[2].imshow(data2off[0])
fig4 = ax[3].imshow(data2off_moyenne)
fig1.colorbar()
128/39:
data2on_moyenne=data2on.mean(2)
data2off_moyenne=data2off.mean(2)
128/40: data2off_moyenne=data2off.mean(0)
128/41: data2on_moyenne=data2on.mean(0)
128/42:
fig, ax = plt.subplots(1,4, figsize=(18,4),dpi=160)
fig1 = ax[0].imshow(data2on[0])
fig2 = ax[1].imshow(data2on_moyenne)
fig3 = ax[2].imshow(data2off[0])
fig4 = ax[3].imshow(data2off_moyenne)
fig1.colorbar()
128/43: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/44: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/45: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/46: XvsV = data1on[:,512]
128/47: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/48: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/49: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/50: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/51: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/52: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/53: 71.7e-6/((2*1.38e-23*4*126))
128/54: 71.7e-6/((2*1.38e-23*4*126))*1e-9
128/55: 71.7e-6/((2*1.38e-23*4*126))*1e-12
128/56: _*1e-8
128/57: 71.7e-6/((2*1.38e-23*4*126))*1e-8
128/58: sqrt(_)
128/59: np.sqrt(71.7e-6/((2*1.38e-23*4*126))*1e-8)
128/60: 10*log10(_)
128/61: 10*np.log10(_)
128/62:
sys.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
import data_process.utils as utils
128/63: import os
128/64:
os.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
import data_process.utils as utils
128/65:
def SiiPhAss(I,R,T,dI):
    t=linspace(0,1,500,endpoint=False)
    It=I[:,None]+dI*cos(2*pi*t[None,:])
    St=Sii(It,R,T)
    return sum(St,axis=-1)/500
128/66: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/67:
def SiiPhAss(I,T,A,Toffset,R,dI):
    t=linspace(0,1,500,endpoint=False)
    It=I[:,None]+dI*cos(2*pi*t[None,:])
    St=Sii(It,R,T)
    return (sum(St,axis=-1)/500+2*1.38e-23*Toffset/50)*A
128/68: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/69: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/70: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/71: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/72: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/73: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/74: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/75: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/76: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/77: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/78: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/79: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/80: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/81: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/82: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/83: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/84: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/85: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/86: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/87: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/88: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/89: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/90: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/91: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/92: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/93: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/94: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/95: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/96: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/97: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/98: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
128/99: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/100: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/101: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/102: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/103: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/104: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/105: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/106: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/107: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/108: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/109: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/110: shape(data2off)
128/111: import utils2
128/112: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/113: import utils2
128/114: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/115: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/116: Idc=np.linspace(-6e-5,6e-5)
128/117: plot(Idc,X2)
128/118: plt.plot(Idc,X2)
128/119: plt.plot(Idc,X2on)
128/120: Idc=np.linspace(-6e-5,6e-5,21)
128/121: plt.plot(Idc,X2on)
128/122: plt.plot(Idc,X2on)
128/123: plt.plot(Idc,Y2on)
128/124: plt.plot(Idc,XYon)
128/125: figure()
128/126: plt.figure()
128/127: plt.plot(Idc,XYon)
128/128: plt.plot(Idc,XYon/np.sqrt(X2on))
128/129: plt.plot(Idc,XYon/np.sqrt(X2on*Y2on))
128/130: plt.plot(Idc,np.arcsin(4*XYon/np.sqrt(X2on*Y2on))/pi)
128/131: plt.plot(Idc,np.arcsin(4*XYon/np.sqrt(X2on*Y2on))/pi)
128/132: 0.23*180
128/133: 0.023*180
128/134: plt.plot(Idc,np.arcsin(XYon/np.sqrt(X2on*Y2on))/pi)
128/135: plt.plot(Idc,np.arcsin(XYon/np.sqrt(X2on*Y2on))/pi)
128/136: 0.006*180
128/137: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514/lecture_histogrammes.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180514')
128/138: figure()
128/139: plt.figure()
128/140: plt.plot(Idc,X3on)
128/141: plt.plot(X2on**2,X3on)
128/142: plt.plot(X2on**2,X3on)
128/143: plt.plot(X2on**2,X3on,'o')
128/144:
def func(x,a,b):
    return a*x+b
128/145: pyHegel.fitting.fitplot(func,X2on**2,X3on,[1,1])
128/146: 162./50/(-180e-3)**2
128/147: 10*log10(100*1000)
128/148: pyHegel.fitting.fitplot(func,Y2on**2,Y3on,[1,1])
128/149: 162./50/(-124e-3)**2
128/150: 10*log10(210*1000)
128/151:
v=np.linspace(-0.35,0.35,1024)
X2on,Y2on,XYon=utils2.Cn_2D(data1on,2,vx=v,vy=v)
X2off,Y2off,XYoff=utils2.Cn_2D(data1off,2,vx=v,vy=v)
128/152:
fig, ax = pl.subplots(1, 2, figsize=(18,6),dpi=72)
ax[0].plot(Idc, dataY2[1])
ax[0].plot(Idc, S2_fit)
ax[1].plot(Idc, np.gradient(dataY2[1])/np.gradient(Idc))
ax[1].plot(Idc, dS2_fit)
128/153: runfile('/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508/X2Y2vsV_charles.py', wdir='/Users/admin/Documents/physique/ete_2018/quantum_noise/S3_cyclostationnaire/20180508')
133/1:
from pylab import *
%matplotlib inline
from pyHegel.util import readfile
from pyHegel.fitting import fitcurve
from IPython.display import Image
from IPython.display import display, Math
from matplotlib.colors import LinearSegmentedColormap
sys.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
import data_process.utils as utils
sys.path.insert(0, "D:\Code\pyHegel" )
from pyHegel.commands import readfile
from scipy import constants as C
from scipy.special import jv as bessel
import pyHegel.fitting as fit
from mpl_toolkits.mplot3d import Axes3D
134/1:
from pylab import *
%matplotlib inline
from pyHegel.util import readfile
from pyHegel.fitting import fitcurve
from IPython.display import Image
from IPython.display import display, Math
from matplotlib.colors import LinearSegmentedColormap
sys.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
import data_process.utils as utils
sys.path.insert(0, "D:\Code\pyHegel" )
from pyHegel.commands import readfile
from scipy import constants as C
from scipy.special import jv as bessel
import pyHegel.fitting as fit
from mpl_toolkits.mplot3d import Axes3D
135/1:
from pylab import *
%matplotlib inline
from pyHegel.util import readfile
from pyHegel.fitting import fitcurve
from IPython.display import Image
from IPython.display import display, Math
from matplotlib.colors import LinearSegmentedColormap
sys.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
135/2:
from pylab import *
%matplotlib inline
from pyHegel.util import readfile
from pyHegel.fitting import fitcurve
from IPython.display import Image
from IPython.display import display, Math
from matplotlib.colors import LinearSegmentedColormap
sys.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
from pyHegel.commands import readfile
from scipy import constants as C
from scipy.special import jv as bessel
import pyHegel.fitting as fit
135/3: print C.e
135/4: print c.e
135/5:
from pylab import *
%matplotlib inline
from pyHegel.util import readfile
from pyHegel.fitting import fitcurve
from IPython.display import Image
from IPython.display import display, Math
from matplotlib.colors import LinearSegmentedColormap
sys.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
from pyHegel.commands import readfile
from scipy import constants as c
from scipy.special import jv as bessel
import pyHegel.fitting as fit
135/6: print c.e
135/7:
x=linspace(0,1000,1000)
const=x/x+10e-5
bruit=const+rand()
plot(x, const, x, bruit)
135/8:
x=linspace(0,1000,1000)
const=x/x.+10e-5
bruit=const+rand()
plot(x, const, x, bruit)
135/9:
x=linspace(0,1000,1000)
const=x/x+10e-5
bruit=const+rand()
plot(x, const, x, bruit)
135/10:
x=linspace(0,1000,1000)
const=(x/x+1)*10e-5
bruit=const+randn()
plot(x, const, x, bruit)
135/11:
x=linspace(0,1000,1000)
const=(x/x+1)*10e-5
bruit=const+randn()
plot(x, const, x, bruit)
figure()
plot(x,bruit)
135/12: print randn()
135/13: x=randn(1,10)
135/14:
x=randn(1,10)
print x
135/15:
x=1+randn(1,10)
print x
135/16:
x=1+randn(1,10)
print x
plot(linspace(0,9,10),x)
135/17:
x=1+randn(0,10)
print x
plot(linspace(0,9,10),x)
135/18:
x=1+randn(10)
print x
plot(linspace(0,9,10),x)
135/19:
x=linspace(0,1000,1000)
const=(x/x+1)*10e-5
bruit=const+randn(1000)
plot(x, const, x, bruit)
figure()
plot(x,bruit)
135/20:
x=linspace(0,1000,100)
const=(x/x+1)*10e-5
bruit=const+randn(100)
plot(x, const, x, bruit)
figure()
plot(x,bruit)
135/21:
x=linspace(0,1000,60)
const=(x/x+1)*10e-5
bruit=const+randn(60)
plot(x, const, x, bruit)
figure()
plot(x,bruit)
135/22:
x=linspace(0,1000,60)
const=(x/x+1)*10e-5
bruit=const+randn(60)/2
plot(x, const, x, bruit)
figure()
plot(x,bruit)
135/23:
x=linspace(0,1000,60)
const=(x/x+1)*10e-5
bruit=const+random(60)/2
plot(x, const, x, bruit)
135/24:
x=linspace(0,1000,60)
const=(x/x+1)*10e-5
bruit=const+random*10e-5/2
plot(x, const, x, bruit)
135/25:
x=linspace(0,1000,60)
const=(x/x+1)*10e-5
bruit=const+random()*10e-5/2
plot(x, const, x, bruit)
135/26:
x=linspace(0,1000,60)
const=(x/x+1)*10e-5
bruit=(const+random()*10e-5)/2
plot(x, const, x, bruit)
135/27:
x=linspace(0,1000,60)
const=(x/x+1)*10e-5
bruit=const+random(60)*10e-5
plot(x, const, x, bruit)
135/28:
x=linspace(0,1000,60)
const=(x/x+1)*10e-5
bruit=const+random(60)*20e-5
plot(x, const, x, bruit)
135/29:
x=linspace(0,1000,60)
const=(x/x+1)
bruit=const+random()
plot(x, const, x, bruit)
135/30:
x=linspace(0,1000,60)
const=(x/x+1)
bruit=const+random()
plot(x, const,'r', x, bruit,'b')
135/31:
x=linspace(0,1000,60)
const=(x/x+1)
bruit=const+random()/10
plot(x, const,'r', x, bruit,'b')
135/32: print random(10)
135/33:
x=linspace(0,1000,60)
const=(x/x+1)
bruit=const+(random()-0.5)/10
plot(x, const,'r', x, bruit,'b')
135/34:
x=linspace(0,1000,60)
const=(x/x+1)
bruit=const+(random()-0.5)/10.
plot(x, const,'r', x, bruit,'b')
135/35:
from pylab import *
from__future__import division
%matplotlib inline
from pyHegel.util import readfile
from pyHegel.fitting import fitcurve
from IPython.display import Image
from IPython.display import display, Math
from matplotlib.colors import LinearSegmentedColormap
sys.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
from pyHegel.commands import readfile
from scipy import constants as c
from scipy.special import jv as bessel
import pyHegel.fitting as fit
135/36:
from pylab import *
from __future__ import division
%matplotlib inline
from pyHegel.util import readfile
from pyHegel.fitting import fitcurve
from IPython.display import Image
from IPython.display import display, Math
from matplotlib.colors import LinearSegmentedColormap
sys.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
from pyHegel.commands import readfile
from scipy import constants as c
from scipy.special import jv as bessel
import pyHegel.fitting as fit
135/37:
x=linspace(0,1000,60)
const=(x/x+1)
bruit=const+(random()-0.5)/10.
plot(x, const,'r', x, bruit,'b')
135/38:
x=linspace(0,1000,60)
const=(x/x+1)
bruit=const+(randn())/1
plot(x, const,'r', x, bruit,'b')
135/39:
x=linspace(0,1000,60)
const=(x/x+1)
bruit=const+(randn(60))/1
plot(x, const,'r', x, bruit,'b')
135/40:
x=linspace(0,1000,60)
const=(x/x+1)
bruit=const+(randn(60))/3
plot(x, const,'r', x, bruit,'b')
135/41:
x=linspace(0,1000,60)
const=(x/x+1)
bruit=const+(randn(60))/5
plot(x, const,'r', x, bruit,'b')
135/42:
x=linspace(0,1000,60)
const=(x/x+1)
bruit=const+(randn(60))/50
plot(x, const,'r', x, bruit,'b')
135/43:
print x=random(3)
print
135/44:
x=random(3)
print type(x), shape(x), x
135/45:
x=random(3)
print x
print x/3
print type(x), shape(x), x
135/46:
x=random(3)
print 1+x
print 1+x/3
print type(x), shape(x), x
135/47:
x=random(3)
print 1+x
print 1+x/30
print type(x), shape(x), x
135/48:
x=linspace(1,1000,60)
const=(x/x+1)
bruit=const+(randn(60))/50
plot(x, const,'r', x, bruit,'b')
135/49:
x=linspace(1,1000,60)
const=(x/x+1)
bruit=const+(randn(60))/5
plot(x, const,'r', x, bruit,'b')
135/50:
x=linspace(1,1000,60)
const=(x/x+1)
bruit=const+(randn(60)/5)
plot(x, const,'r', x, bruit,'b')
135/51:
x=linspace(1,1000,60)
const=(x/x+1)
bruit=const+(randn(60)/50)
plot(x, const,'r', x, bruit,'b')
135/52:
x=linspace(1,1000,60)
const=(x/x+1)
bruit=const+(randn(60))
print bruit[1]
bruit=const+(randn(60))/10
print bruit
plot(x, const,'r', x, bruit,'b')
135/53:
x=linspace(1,1000,60)
const=(x/x+1)
bruit=const+(randn(60))/10
plot(x, const,'r', x, bruit,'b')
135/54:
x=linspace(1,1000,60)
const=(x/x+1)
bruit=const+(rand(60))/10
plot(x, const,'r', x, bruit,'b')
135/55:
x=linspace(1,1000,30)
const=(x/x+1)
bruit=const+(randn(30))/10
plot(x, const,'r', x, bruit,'b')
135/56:
x=linspace(1,1000,30)
const=(x/x+1)
bruit=const+(normal(30))/10
plot(x, const,'r', x, bruit,'b')
135/57:
x=linspace(1,1000,30)
const=(x/x+1)
bruit=(normal(1,0.5))
plot(x, const,'r', x, bruit,'b')
135/58:
x=linspace(1,1000,30)
const=(x/x+1)
bruit=normal(1,0.5, [1,30])
plot(x, const,'r', x, bruit,'b')
135/59:
x=linspace(1,1000,30)
const=(x/x+1)
bruit=normal(1,0.5, [30])
plot(x, const,'r', x, bruit,'b')
135/60:
x=linspace(1,1000,30)
const=(x/x+1)
bruit=normal(2,0.5, [30])
plot(x, const,'r', x, bruit,'b')
135/61:
x=linspace(1,1000,30)
const=(x/x+1)
bruit=normal(2,0.25, [30])
plot(x, const,'r', x, bruit,'b')
135/62:
x=linspace(1,1000,30)
const=(x/x+1)
bruit=normal(1,0.25, [30])
plot(x, const,'r', x, bruit,'b')
135/63:
x=linspace(1,1000,30)
const=(x/x)
bruit=normal(1,0.25, [30])
plot(x, const,'r', x, bruit,'b')
135/64:
x=linspace(1,1000,30)/1000
const=(x/x)
bruit=normal(1,0.25, [30])
plot(x, const,'r', x, bruit,'b')
set(xlim=)
135/65:
x=linspace(1,1000,30)/1000
const=(x/x)
bruit=normal(1,0.25, [30])
plot(x, const,'r', x, bruit,'b')
set(ylim=[0,2])
135/66:
x=linspace(1,1000,30)/1000
const=(x/x)
bruit=normal(1,0.25, [30])
plot(x, const,'r', x, bruit,'b')
axis(ylim=[0,2])
135/67:
x=linspace(1,1000,30)/1000
const=(x/x)
bruit=normal(1,0.25, [30])
plot(x, const,'r', x, bruit,'b')
axis(ylim=[0,3])
135/68:
x=linspace(1,1000,30)/1000
const=(x/x)
bruit=normal(1,0.25, [30])
plot(x, const,'r', x, bruit,'b')
axis(ylim=[0,5])
135/69:
x=linspace(1,1000,30)/1000
const=(x/x)
bruit=normal(1,0.25, [30])

fig,ax=subplots(1,2,figsize=([18,6],[18,3]),dpi=200)
plot(x, const,'r', x, bruit,'b')
axis(ylim=[0,])
135/70:
x=linspace(1,1000,30)/1000
const=(x/x)
bruit=normal(1,0.25, [30])

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=200)
plot(x, const,'r', x, bruit,'b')
axis(ylim=[0,])
135/71:
x=linspace(1,1000,30)/1000
const=(x/x)
bruit=normal(1,0.25, [30])

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
plot(x, const,'r', x, bruit,'b')
axis(ylim=[0,])
135/72:
x=linspace(1,1000,30)/1000
const=(x/x)
bruit=normal(1,0.25, [30])

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
plot(x, const,'r', x, bruit,'b')
axis(ylim=[0,2])
135/73:
x=linspace(1,1000,30)/1000
const=(x/x)
bruit=normal(1,0.25, [30])

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,2)
135/74:
n=100

x=linspace(1,1000,n)/1000
const=(x/x)
bruit=normal(1,0.25, [30])

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,2)
ax[1].histogram(bruit)
135/75:
n=100

x=linspace(1,1000,n)/1000
const=(x/x)
bruit=normal(1,0.25,30)

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,2)
ax[1].histogram(bruit)
135/76:
n=100

x=linspace(1,1000,n)/1000
const=(x/x)
bruit=normal(1,0.25,n)

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,2)
ax[1].histogram(bruit)
135/77:
n=100

x=linspace(1,1000,n)/1000
const=(x/x)
bruit=normal(1,0.25,n)

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3)
ax[1].histogram(bruit)
135/78:
n=100

x=linspace(1,1000,n)/1000
const=(x/x)
bruit=normal(1,0.25,n)

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3e-5)
ax[1].histogram(bruit)
135/79:
n=100

x=linspace(1,1000,n)/1000
const=(x/x)
bruit=normal(1,0.25,n)

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3e-5)
ax[1].hist(bruit)
135/80:
n=100

x=linspace(1,1000,n)/1000
const=(x/x)
bruit=normal(1,0.25,n)

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3e-5)
ax[1].hist(bruit,orientation="horizontal")
135/81:
n=1000

x=linspace(1,1000,n)/1000
const=(x/x)
bruit=normal(1,0.25,n)

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3e-5)
ax[1].hist(bruit,orientation="horizontal")
135/82:
n=1000

x=linspace(1,1000,n)/1000
const=(x/x)
bruit=normal(1,0.25,n)

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3e-5)
ax[1].hist(bruit,bins=100,orientation="horizontal")
135/83:
n=1000

x=linspace(1,1000,n)/1000
const=(x/x);
bruit=normal(1,0.25,n);

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3e-5)
ax[1].hist(bruit,bins=100,orientation="horizontal")
135/84:
n=1000

x=linspace(1,1000,n)/1000
const=(x/x)
bruit=normal(1,0.25,n)

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3e-5)
ax[1].hist(bruit,bins=100,orientation="horizontal")
135/85:
n=1000

x=linspace(1,1000,n)/1000
const=(x/x)
bruit=normal(1,0.25,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3e-5)
ax[1].hist(bruit,bins=100,orientation="horizontal")
135/86:
n=1000

x=linspace(1e-5,2e-5,n)/1000
const=(x/x)
bruit=normal(1,0.25,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3e-5)
ax[1].hist(bruit,bins=100,orientation="horizontal")
135/87:
n=1000

x=linspace(1e-5,2e-5,n)/1000
const=(x/x)
bruit=normal(1e-5,0.25,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3e-5)
ax[1].hist(bruit,bins=100,orientation="horizontal")
135/88:
n=1000

x=linspace(1e-5,2e-5,n)/1000
const=(x/x)
bruit=normal(1e-5,0.25e-5,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3e-5)
ax[1].hist(bruit,bins=100,orientation="horizontal")
135/89:
n=1000

x=linspace(1e-5,2e-5,n)/1000
const=(x/x)
bruit=normal(1e-5,0.25e-5,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3e-5)
ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=100,orientation="horizontal")
135/90:
n=1000

x=linspace(1e-5,2e-5,n)/1000
const=(x/x)
bruit=normal(1+1e-5,0.25e-5,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3e-5)
ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=100,orientation="horizontal")
135/91:
n=1000

x=linspace(1e-5,2e-5,n)
const=(x/x)
bruit=normal(1e-5,0.25e-5,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3e-5)
ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=100,orientation="horizontal")
135/92:
n=1000

x=linspace(1,10,n)
const=(x/x)
bruit=normal(1e-5,0.25e-5,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3e-5)
ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=100,orientation="horizontal")
135/93:
n=1000

x=linspace(1,10,n)
const=(x/x)
bruit=normal(1e-5,0.25e-5,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3e-5)
ax[0].set_xlabel('Temps (s)')
ax[1].set_xlabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=100,orientation="horizontal")
ax[1].set_ylabel('Courant (A)')
ax[1].set_xlabel('Évènements(x1)')
135/94:
n=1000

x=linspace(1,10,n)
const=(x/x)
bruit=normal(1e-5,0.25e-5,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3e-5)
ax[0].set_xlabel('Temps (s)')
ax[1].set_xlabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=100,orientation="horizontal")
ax[1].set_ylabel('Courant (A)')
ax[1].set_xlabel('Évènements(x1)')

subplots_adjust(wspace=0.2)
135/95:
n=1000

x=linspace(1,10,n)
const=(x/x)
bruit=normal(1e-5,0.25e-5,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3e-5)
ax[0].set_xlabel('Temps (s)')
ax[1].set_xlabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=100,orientation="horizontal")
ax[1].set_ylabel('Courant (A)')
ax[1].set_xlabel('Évènements(x1)')

subplots_adjust(wspace=0.4)
135/96:
n=1000

x=linspace(1,10,n)
const=(x/x)
bruit=normal(1e-5,0.25e-5,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3e-5)
ax[0].set_xlabel('Temps (s)')
ax[1].set_xlabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=100,orientation="horizontal")
ax[1].set_ylabel('Courant (A)')
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.4)
135/97:
n=1000

x=linspace(1,10,n)
const=(x/x)
bruit=normal(1e-5,0.25e-5,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3e-5)
ax[0].set_xlabel('Temps (s)')
ax[1].set_xlabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=100,orientation="horizontal")
ax[1].set_ylabel('Courant (A)')
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.35)
135/98:
n=1000

x=linspace(1,10,n)
const=(x/x)
bruit=normal(1e-5,0.25e-5,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3e-5)
ax[0].set_xlabel('Temps (s)')
ax[1].set_xlabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=100,orientation="horizontal")
ax[1].set_ylabel('Courant (A)')
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/99:
n=1000

x=linspace(1,10,n)
const=(x/x)
bruit=normal(1e-5,0.25e-5,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3e-5)
ax[0].set_xlabel('Temps (s)')
ax[1].set_xlabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_ylabel('Courant (A)')
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/100:
n=1000

x=linspace(1,10,n)
const=(x/x)
bruit=normal(1e-5,0.25e-5,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3e-5)
ax[0].set_xlabel('Temps (s)')
ax[].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/101:
n=1000

x=linspace(1,10,n)
const=(x/x)
bruit=normal(1e-5,0.25e-5,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3e-5)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/102:
n=1000

x=linspace(1,10,n)
const=(x/x)
bruit=normal(1e-5,0.25e-5,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,3e-5)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,1,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/103:
n=1000

x=linspace(1,10,n)
const=(x/x)
bruit=normal(1e-5,0.25e-5,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,1)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/104:
n=1000

x=linspace(1,10,n)
const=(x/x)
bruit=normal(1e-5,0.25e-5,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,2)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/105:
n=1000

x=linspace(1,10,n)
const=(x/x)
bruit=normal(1e-5,0.25e-5,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(1,2)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/106:
n=1000

x=[1,linspace(0,10,n)]
const=(x/x)
bruit=normal(1e-5,0.25e-5,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,2)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/107:
n=1000

x=array[1,linspace(0,10,n)]
const=(x/x)
bruit=normal(1e-5,0.25e-5,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,2)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/108:
n=1000

x=array([1,linspace(0,10,n)])
const=(x/x)
bruit=normal(1e-5,0.25e-5,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,2)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/109:
n=1000

x=linspace(0,10,n)
const=(x/x)
bruit=normal(1e-5,0.25e-5,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,2)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/110:
n=1000

x=linspace(1,10,n)
const=(x/x)
bruit=normal(1e-5,0.25e-5,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,2)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/111:
n=1000

x=linspace(1,10,n)
const=1+append(x/x)
bruit=normal(1e-5,0.25e-5,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,2)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/112:
n=1000

x=linspace(1,10,n)
const=(x/x)
bruit=normal(1e-5,0.25e-5,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,2)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/113:
n=1000

x=linspace(1,10,n)
const=(x/x)
bruit=normal(1e-1,0.25e-1,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,2)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/114:
n=500

x=linspace(1,10,n)
const=(x/x)
bruit=normal(1e-1,0.5e-1,n)/2+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,2)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/115:
n=500

x=linspace(1,10,n)
const=(x/x)
bruit=normal(1,0.5e-1,n)+const

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,2)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/116:
n=500

x=linspace(1,10,n)
const=(x/x)
bruit=normal(1,0.5e-1,n)

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,2)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/117:
n=500
div=1e-3


x=linspace(1,10,n)
const=(x/x)/div
bruit=normal(div,0.5e-4,n)

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,2)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/118:
n=500
div=1e-3


x=linspace(1,10,n)
const=(x/x)/div
bruit=normal(div,0.5e-4,n)

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r', x, bruit,'b')
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/119:
n=500
div=1e-3


x=linspace(1,10,n)
const=(x/x)/div
bruit=normal(div,0.5e-4,n)

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r',
ax[0].plot(x, bruit,'b',linewidth=1)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/120:
n=500
div=1e-3


x=linspace(1,10,n)
const=(x/x)/div
bruit=normal(div,0.5e-4,n)

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r',)
ax[0].plot(x, bruit,'b',linewidth=1)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/121:
n=500
div=1e-3


x=linspace(1,10,n)
const=(x/x)*div
bruit=normal(div,0.5e-4,n)

fig,ax=subplots(1,2,gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/122:
n=500
div=1e-3


x=linspace(1,10,n)
const=(x/x)*div
bruit=normal(div,0.5e-4,n)

fig,ax=subplots(1,2,figsize=(18,6),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/123:
n=500
div=1e-3


x=linspace(0,10,n)
const=zeros(n)
const[0]=div
for i in range n:const[i]=(x[i]/x[i])*div
bruit=normal(div,0.5e-4,n)

fig,ax=subplots(1,2,figsize=(18,6),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/124:
n=500
div=1e-3


x=linspace(0,10,n)
const=zeros(n)
const[0]=div
for i in range n: const[i]=(x[i]/x[i])*div
bruit=normal(div,0.5e-4,n)

fig,ax=subplots(1,2,figsize=(18,6),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/125:
n=500
div=1e-3


x=linspace(0,10,n)
const=zeros(n)
const[0]=div
for i in range n:
    const[i]=(x[i]/x[i])*div
bruit=normal(div,0.5e-4,n)

fig,ax=subplots(1,2,figsize=(18,6),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/126:
n=500
div=1e-3


x=linspace(0,10,n)
const=zeros(n)
const[0]=div
for i in range (n): const[i]=(x[i]/x[i])*div
bruit=normal(div,0.5e-4,n)

fig,ax=subplots(1,2,figsize=(18,6),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/127:
n=500
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,0.5e-4,n)

fig,ax=subplots(1,2,figsize=(18,6),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/128:
n=500
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,0.5e-4,n)

fig,ax=subplots(1,2,figsize=(18,6),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/129:
n=500
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,0.5e-4,n)

fig,ax=subplots(1,2,figsize=(18,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/130:
n=500
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,1e-4,n)

fig,ax=subplots(1,2,figsize=(18,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[1].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/131:
n=500
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,1e-4,n)

fig,ax=subplots(1,2,figsize=(18,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,3e-5,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/132:
n=500
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,1e-4,n)

fig,ax=subplots(1,2,figsize=(18,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,div*2,1000),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/133:
n=500
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,1e-4,n)

fig,ax=subplots(1,2,figsize=(18,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/134:
n=200
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,1e-4,n)

fig,ax=subplots(1,2,figsize=(18,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/135:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,1e-4,n)

fig,ax=subplots(1,2,figsize=(18,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.30)
135/136:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,1e-4,n)

fig,ax=subplots(1,2,figsize=(18,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.1)
135/137:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,1e-4,n)

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.1)
135/138:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.1)
135/139:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')

subplots_adjust(wspace=0.1)
135/140:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')
ax[1].xaxis.set_visible('False')

subplots_adjust(wspace=0.1)
135/141:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')
ax[1].yaxis.set_visible('False')

subplots_adjust(wspace=0.1)
135/142:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')
ax[1].yaxis.set_visible(False)

subplots_adjust(wspace=0.1)
135/143:
n=1500

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
135/144:
n=1500

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300))
135/145:
n=1500

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300))
135/146:
n=1500

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
135/147:
n=1500

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
135/148:
n=1500

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,1000));
135/149:
n=3500

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,1000));
135/150:
n=13500

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,1000));
135/151:
n=500

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,1000));
135/152:
n=500
x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)
fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,1000));
135/153:
n=200
x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)
fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,1000));
135/154:
n=200
x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)
fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
135/155:
n=200
x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,10e-4,n)
fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
135/156:
n=200
x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,10e-4,5*n)
fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
135/157:
n=200
x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,1e-4,5*n)
fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
135/158:
n=200
x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,5*n)
fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
135/159:
n=200
x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,5*n)

def gaussian(x,s,mu):
    return 1/(sqrt(2*pi)*s)*exp(-(x-mu)**2/(2*s**2))

fit_gaussian=fitcurve(gaussian,x,bruit,[div,3e-4])
fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
135/160:
n=200
x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(sqrt(2*pi)*s)*exp(-(x-mu)**2/(2*s**2))

fit_gaussian=fitcurve(gaussian,x,bruit,[div,3e-4])
fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
135/161:
n=1000
x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(sqrt(2*pi)*s)*exp(-(x-mu)**2/(2*s**2))

fit_gaussian=fitcurve(gaussian,x,bruit,[div,3e-4])
fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
135/162:
n=1000
x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(sqrt(2*pi)*s)*exp(-(x-mu)**2/(2*s**2))

fit_gaussian=fitcurve(gaussian,linspace(0,2e-3,n),bruit,[div,3e-4])
fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot()
135/163:
n=1000
x=linspace(0,10,n)
courants=linspace(0,2e-3,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(sqrt(2*pi)*s)*exp(-(x-mu)**2/(2*s**2))

fit_gaussian=fitcurve(gaussian,courants,bruit,[div,3e-4])
fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,bruit)
135/164:
n=1000
x=linspace(0,10,n)
courants=linspace(0,2e-3,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(sqrt(2*pi)*s)*exp(-(x-mu)**2/(2*s**2))

fit_gaussian=fitcurve(gaussian,courants,bruit,[div,3e-4])
fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(coefs[0][0],coefs[0][1]))
135/165:
n=1000
x=linspace(0,10,n)
courants=linspace(0,2e-3,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(sqrt(2*pi)*s)*exp(-(x-mu)**2/(2*s**2))

fit_gaussian=fitcurve(gaussian,courants,bruit,[div,3e-4])
fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,coefs[0][0],coefs[0][1]))
135/166:
n=1000
x=linspace(0,10,n)
courants=linspace(0,2e-3,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(sqrt(2*pi)*s)*exp(-(x-mu)**2/(2*s**2))

fit_gaussian=fitcurve(gaussian,courants,bruit,[div,3e-4])
fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,fit_gaussian[0][0],fit_gaussian[0][1]))
135/167:
n=1000
x=linspace(0,10,n)
courants=linspace(0,2e-3,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(sqrt(2*pi)*s)*exp(-(x-mu)**2/(2*s**2))

fit_gaussian=fitcurve(gaussian,courants,bruit,[div,3e-4])
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,fit_gaussian[0][0],fit_gaussian[0][1]))
135/168:
n=1000
x=linspace(0,10,n)
courants=linspace(0,2e-3,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(sqrt(2*pi)*s)*exp(-(x-mu)**2/(2*s**2))

fit_gaussian=fitcurve(gaussian,courants,bruit,[div,3e-4])
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,fit_gaussian[0][0],fit_gaussian[0][1]))


ax[1].plot(courants, gaussian(courants,fit_gaussian[0][0],fit_gaussian[0][1]))
135/169:
n=1000
x=linspace(0,10,n)
courants=linspace(0,2e-3,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(sqrt(2*pi)*s)*exp(-(x-mu)**2/(2*s**2))

fit_gaussian=fitcurve(gaussian,courants,bruit,[div,3e-4])
print fit_gaussian
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,fit_gaussian[0][0],fit_gaussian[0][1]))


ax[1].plot(courants, gaussian(courants,fit_gaussian[0][0],fit_gaussian[0][1]))
135/170:
n=1000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(sqrt(2*pi)*s)*exp(-(x-mu)**2/(2*s**2))

fit_gaussian=fitcurve(gaussian,courants,bruit,[div,3e-4])
print fit_gaussian
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,fit_gaussian[0][0],fit_gaussian[0][1]))


ax[1].plot(courants, gaussian(courants,fit_gaussian[0][0],fit_gaussian[0][1]))
137/1: import pyHegel
137/2: from pyHegel import *
137/3: fit_functions.py
137/4: cd
137/5: ls
137/6: import pyHegel
137/7: cd Documents/
137/8: ls
137/9: cd physique/
137/10: ls
137/11: import pyHegel
137/12: fit_func
137/13: fitting
137/14: fitcurve
137/15: pyHegel
137/16: readfile()
135/171:
n=1000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(sqrt(2*pi)*s)*exp(-(x-mu)**2/(2*s**2))

mu, s = stats.norm.fit(bruit)

print fit_gaussian
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,s,mu))


ax[1].plot(courants, s,mu))
135/172:
n=1000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(sqrt(2*pi)*s)*exp(-(x-mu)**2/(2*s**2))

mu, s = stats.norm.fit(bruit)

print fit_gaussian
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,s,mu))


ax[1].plot(courants, s,mu)
135/173:
n=1000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(sqrt(2*pi)*s)*exp(-(x-mu)**2/(2*s**2))

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,s,mu))


ax[1].plot(courants, s,mu)
135/174:
n=1000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(sqrt(2*pi)*s)*exp(-(x-mu)**2/(2*s**2))

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,s,mu))


ax[1].plot(courants, s,mu)
135/175:
n=1000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(sqrt(2*pi)*s)*exp(-(x-mu)**2/(2*s**2))

#mu, s = stats.norm.fit(bruit)

#print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
#ax[0].plot(courants,gaussian(courants,s,mu))


#ax[1].plot(courants, s,mu)
135/176:
n=1000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(sqrt(2*pi)*s)*exp(-(x-mu)**2/(2*s**2))

mu, s = stats.norm.fit(bruit)

#print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
#ax[0].plot(courants,gaussian(courants,s,mu))


#ax[1].plot(courants, s,mu)
135/177: stats.norm
135/178:
from pylab import *
from scipy import stats  
from __future__ import division
%matplotlib inline
from pyHegel.util import readfile
from pyHegel.fitting import fitcurve
from IPython.display import Image
from IPython.display import display, Math
from matplotlib.colors import LinearSegmentedColormap
sys.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
from pyHegel.commands import readfile
from scipy import constants as c
from scipy.special import jv as bessel
import pyHegel.fitting as fit
135/179:
n=1000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(sqrt(2*pi)*s)*exp(-(x-mu)**2/(2*s**2))

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
#ax[0].plot(courants,gaussian(courants,s,mu))


#ax[1].plot(courants, s,mu)
135/180:
n=1000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(sqrt(2*pi)*s)*exp(-(x-mu)**2/(2*s**2))

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,s,mu))


ax[1].plot(courants, s,mu)
135/181:
n=1000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(sqrt(2*pi)*s)*exp(-(x-mu)**2/(2*s**2))

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,s,mu))


#ax[1].plot(courants, s,mu)
135/182:
n=1000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return s/(sqrt(2*pi))*exp(-(x-mu)**2/(2*s**2))

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,s,mu))


#ax[1].plot(courants, s,mu)
135/183:
n=1000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(sqrt(2*pi))*exp(-(x-mu)**2/(2*s**2))

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,s,mu))


#ax[1].plot(courants, s,mu)
135/184:
n=1000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(s*sqrt(2*pi))*exp(-(x-mu)**2/(2*s**2))

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,s,mu))


#ax[1].plot(courants, s,mu)
135/185:
n=1000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1e-3/(s*sqrt(2*pi))*exp(-(x-mu)**2/(2*s**2))

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,s,mu))


#ax[1].plot(courants, s,mu)
135/186:
n=1000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1e-2/(s*sqrt(2*pi))*exp(-(x-mu)**2/(2*s**2))

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,s,mu))


#ax[1].plot(courants, s,mu)
135/187:
n=1000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1e-2.5/(s*sqrt(2*pi))*exp(-(x-mu)**2/(2*s**2))

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,s,mu))


#ax[1].plot(courants, s,mu)
135/188:
n=1000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(s*sqrt(2*pi))*exp(-(x-mu)**2/(2*s**2))

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,s,mu))


#ax[1].plot(courants, s,mu)
135/189:
n=1000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(s*sqrt(2*pi))*exp(-(x-mu)**2/(2*s**2))

mu, s = stats.norm.fit(bruit)

print sqrt(9)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,s,mu))


#ax[1].plot(courants, s,mu)
135/190:
n=1000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,s,mu))


#ax[1].plot(courants, s,mu)
135/191:
n=300
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,s,mu))


#ax[1].plot(courants, s,mu)
135/192:
n=3000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,s,mu))


#ax[1].plot(courants, s,mu)
135/193:
n=30000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,s,mu))


#ax[1].plot(courants, s,mu)
135/194:
n=300000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,s,mu))


#ax[1].plot(courants, s,mu)
135/195:
n=30000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,s,mu))


#ax[1].plot(courants, s,mu)
135/196:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,s,mu))


#ax[1].plot(courants, s,mu)
135/197:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*max(x)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,s,mu))


#ax[1].plot(courants, s,mu)
135/198:
n=100000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*max(x)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,s,mu))


#ax[1].plot(courants, s,mu)
135/199:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*sum(x)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,s,mu))


#ax[1].plot(courants, s,mu)
135/200:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/sum(x)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,s,mu))


#ax[1].plot(courants, s,mu)
135/201:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/sum(x)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,stats.norm.pdf(courants,mu,s))


#ax[1].plot(courants, s,mu)
135/202:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/sum(x)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,stats.norm.pdf(courants,mu,s/2))


#ax[1].plot(courants, s,mu)
135/203:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/sum(x)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,stats.norm.pdf(courants,mu,s*2))


#ax[1].plot(courants, s,mu)
135/204:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/sum(x)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,stats.norm.pdf(courants,mu,s))


#ax[1].plot(courants, s,mu)
135/205:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/maxé(x)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,stats.norm.pdf(courants,mu,s))


#ax[1].plot(courants, s,mu)
135/206:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,s,mu):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/max(x)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,stats.norm.pdf(courants,mu,s))


#ax[1].plot(courants, s,mu)
135/207:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/max(x)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,mu,s))


#ax[1].plot(courants, s,mu)
135/208:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*max(x)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,mu,s))


#ax[1].plot(courants, s,mu)
135/209:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*max(x)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,stats.norm.ppf(courants,mu,s))


#ax[1].plot(courants, s,mu)
135/210:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*max(x)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,stats.norm.ppf(courants,mu,s))


ax[1].plot(courants, stats.norm.ppf(s,mu))
135/211:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*max(x)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,stats.norm.ppf(courants,mu,s))


ax[1].plot(courants, stats.norm.ppf(x, s,mu))
135/212:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*max(x)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,stats.norm.ppf(courants,mu,s))


ax[1].plot(courants, stats.norm.pdf(x, s,mu))
135/213:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*sum(bruit)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,stats.norm.ppf(courants,mu,s))


ax[1].plot(courants, stats.norm.pdf(x, s,mu))
135/214:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*sum(bruit)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,mu,s))


ax[1].plot(courants, stats.norm.pdf(x, s,mu))
135/215:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*sum(bruit)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,mu,s))
135/216:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*sum(bruit)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
print hist_values
ax[0].plot(courants,gaussian(courants,mu,s))
135/217:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*sum(hv)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,mu,s,hv))
135/218:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*sum(hv)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,mu,s,hist_values))
135/219:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*sum(hv)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300))
ax[0].plot(courants,gaussian(courants,mu,s,hist_values))
135/220:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*sum(hv)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300))
print sum(hist_values)
ax[0].plot(courants,gaussian(courants,mu,s,hist_values))
135/221:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*sum(hv)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300))
print sum(hist_values)
#ax[0].plot(courants,gaussian(courants,mu,s,hist_values))
135/222:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*sum(hv)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
#hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300))
print sum(hist_values)
#ax[0].plot(courants,gaussian(courants,mu,s,hist_values))
135/223:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*sum(hv)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
print sum(hist_values)
#ax[0].plot(courants,gaussian(courants,mu,s,hist_values))
135/224:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*sum(hv)

#mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
print sum(hist_values)
#ax[0].plot(courants,gaussian(courants,mu,s,hist_values))
135/225:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*sum(hv)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
#hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
print sum(hist_values)
#ax[0].plot(courants,gaussian(courants,mu,s,hist_values))
135/226:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*sum(hv)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
#hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
#print sum(hist_values)
#ax[0].plot(courants,gaussian(courants,mu,s,hist_values))
135/227:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*sum(hv)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
#hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
print sum(hist_values)
#ax[0].plot(courants,gaussian(courants,mu,s,hist_values))
135/228:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*sum(hv)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
#hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
#ax[0].plot(courants,gaussian(courants,mu,s,hist_values))
135/229:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*sum(hv)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
#ax[0].plot(courants,gaussian(courants,mu,s,hist_values))
135/230:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*sum(hv)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
print hist_values
#ax[0].plot(courants,gaussian(courants,mu,s,hist_values))
135/231:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*sum(hv)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
print hist_values, sum(hist_values)
#ax[0].plot(courants,gaussian(courants,mu,s,hist_values))
135/232:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*sum(hv)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
print shape(hist_values), sum(hist_values[0])
#ax[0].plot(courants,gaussian(courants,mu,s,hist_values))
135/233:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*sum(hv)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
print shape(hist_values), sum(hist_values[0])
ax[0].plot(courants,gaussian(courants,mu,s,hist_values[0]))
135/234:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*sum(hv)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
print shape(hist_values), sum(hist_values[0])
ax[0].plot(courants,gaussian(courants,mu,s,hist_values[0]))
135/235:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/sum(hv)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
print shape(hist_values), sum(hist_values[0])
ax[0].plot(courants,gaussian(courants,mu,s,hist_values[0]))
135/236:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/sum(hv)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
print shape(hist_values), hist_values, sum(hist_values[0])
ax[0].plot(courants,gaussian(courants,mu,s,hist_values[0]))
135/237:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*sum(hv)/max(hv)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
print shape(hist_values), hist_values, sum(hist_values[0])
ax[0].plot(courants,gaussian(courants,mu,s,hist_values[0]))
135/238:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*max(hv)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
print shape(hist_values), hist_values, sum(hist_values[0])
ax[0].plot(courants,gaussian(courants,mu,s,hist_values[0]))
135/239:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)*sum(hv)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
print shape(hist_values), hist_values, sum(hist_values[0])
ax[0].plot(courants,gaussian(courants,mu,s,hist_values[0]))
135/240:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
print shape(hist_values), hist_values, sum(hist_values[0])
ax[0].plot(courants,gaussian(courants,mu,s,hist_values[0]))
135/241:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/10

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
print shape(hist_values), hist_values, sum(hist_values[0])
ax[0].plot(courants,gaussian(courants,mu,s,hist_values[0]))
135/242:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/10

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,mu,s,hist_values[0]))
135/243:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/11

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,mu,s,hist_values[0]))
135/244:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/15

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,mu,s,hist_values[0]))
135/245:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/17

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,mu,s,hist_values[0]))
135/246:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/17

mu, s = stats.norm.fit(bruit)

print mu,s


fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
hist_values=ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')
ax[1].yaxis.set_visible(False)
ax[1].plot(courants,gaussian(courants,mu,s,hist_values[0]))

subplots_adjust(wspace=0.1)
135/247:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/17

mu, s = stats.norm.fit(bruit)

print mu,s


fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
hist_values=ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')
ax[1].yaxis.set_visible(False)
ax[1].plot(courants,gaussian(courants,mu,s,hist_values[0]))

subplots_adjust(wspace=0.1)
135/248:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/17

mu, s = stats.norm.fit(bruit)

print mu,s


fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
hist_values=ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')
ax[1].yaxis.set_visible(False)
ax[1].plot(courants,gaussian(courants,mu,s,hist_values[0]), orientation="horizontal")

subplots_adjust(wspace=0.1)
135/249:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/17

mu, s = stats.norm.fit(bruit)

print mu,s

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
hist_values=ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')
ax[1].yaxis.set_visible(False)
ax[1].plot(courants,gaussian(courants,mu,s,hist_values[0]))

subplots_adjust(wspace=0.1)
135/250:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/17

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300));
ax[0].plot(courants,gaussian(courants,mu,s,hist_values[0]))
135/251:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/17

mu, s = stats.norm.fit(bruit)

print mu,s

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

#ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
hist_values=ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')
ax[1].yaxis.set_visible(False)
ax[1].plot(courants,gaussian(courants,mu,s,hist_values[0]))

subplots_adjust(wspace=0.1)
135/252:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/17

mu, s = stats.norm.fit(bruit)

print mu,s

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

#ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
hist_values=ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')
ax[1].yaxis.set_visible(False)
#ax[1].plot(courants,gaussian(courants,mu,s,hist_values[0]))

subplots_adjust(wspace=0.1)
135/253:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/17

mu, s = stats.norm.fit(bruit)

print mu,s

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
hist_values=ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')
ax[1].yaxis.set_visible(False)
#ax[1].plot(courants,gaussian(courants,mu,s,hist_values[0]))

subplots_adjust(wspace=0.1)
135/254:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/17

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal");
ax[0].plot(courants,gaussian(courants,mu,s,hist_values[0]))
135/255:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/17

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal");
ax[0].plot(courants,gaussian(courants,mu,s,hist_values[0]),orientation="horizontal")
135/256:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/17

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal");
ax[0].plot(gaussian(courants,mu,s,hist_values[0]),courants)
135/257:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/17

mu, s = stats.norm.fit(bruit)

print mu,s

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
hist_values=ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')
ax[1].yaxis.set_visible(False)
ax[1].plot(gaussian(courants,mu,s,hist_values[0]),courants)

subplots_adjust(wspace=0.1)
135/258:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/30

mu, s = stats.norm.fit(bruit)

print mu,s

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
hist_values=ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')
ax[1].yaxis.set_visible(False)
ax[1].plot(gaussian(courants,mu,s,hist_values[0]),courants)

subplots_adjust(wspace=0.1)
135/259:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/300

mu, s = stats.norm.fit(bruit)

print mu,s

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
hist_values=ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')
ax[1].yaxis.set_visible(False)
ax[1].plot(gaussian(courants,mu,s,hist_values[0]),courants)

subplots_adjust(wspace=0.1)
135/260:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/300

mu, s = stats.norm.fit(bruit)

print mu,s

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
hist_values=ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')
ax[1].yaxis.set_visible(False)
ax[1].plot(gaussian(courants,mu,s,hist_values[0]),courants, 'o')

subplots_adjust(wspace=0.1)
135/261:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/300

mu, s = stats.norm.fit(bruit)

print mu,s

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
hist_values=ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')
ax[1].yaxis.set_visible(False)
ax[1].plot(gaussian(courants,mu,s,hist_values[0]),courants, 'g')

subplots_adjust(wspace=0.1)
135/262:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/300

mu, s = stats.norm.fit(bruit)

print mu,s

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

textax0='$I(t)=I_0+\delta I$'
ax[0].text(0.5, 0.2, textax0, transform=ax.transAxes, fontsize=14,
        verticalalignment='bottom', bbox=props)

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
hist_values=ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')
ax[1].yaxis.set_visible(False)
ax[1].plot(gaussian(courants,mu,s,hist_values[0]),courants, 'g')

textax1='Loi normale:\n exp(-\frac{(\frac{x-\mu}{\sigma})^2}{2}$$'
ax[1].text(0.5, 0.2, textax1, transform=ax.transAxes, fontsize=14,
        verticalalignment='bottom', bbox=props)

subplots_adjust(wspace=0.1)
135/263:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/300

mu, s = stats.norm.fit(bruit)

print mu,s

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

textax0='$I(t)=I_0+\delta I$'
ax[0].text(0.5, 0.2, textax0, transform=ax.transAxes, fontsize=14,
        verticalalignment='bottom', bbox=props)

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
hist_values=ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')
ax[1].yaxis.set_visible(False)
ax[1].plot(gaussian(courants,mu,s,hist_values[0]),courants, 'g')

textax1='Loi normale:\n exp(-\frac{(\frac{x-\mu}{\sigma})^2}{2}$$'
ax[1].text(0.5, 0.5, textax1, transform=ax.transAxes, fontsize=14,
        verticalalignment='bottom', bbox=props)

subplots_adjust(wspace=0.1)
135/264:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/300

mu, s = stats.norm.fit(bruit)

print mu,s

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

textax0='$I(t)=I_0+\delta I$'
ax[0].text(0.5, 0.2, textax0, transform=ax.transAxes, fontsize=14,
        verticalalignment='bottom', bbox=props)

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
hist_values=ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')
ax[1].yaxis.set_visible(False)
ax[1].plot(gaussian(courants,mu,s,hist_values[0]),courants, 'g')

textax1='Loi normale:\n exp(-\frac{(\frac{x-\mu}{\sigma})^2}{2}$$'
#ax[1].text(0.5, 0.5, textax1, transform=ax.transAxes, fontsize=14,
        verticalalignment='bottom', bbox=props)

subplots_adjust(wspace=0.1)
135/265:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/300

mu, s = stats.norm.fit(bruit)

print mu,s

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

textax0='$I(t)=I_0+\delta I$'
ax[0].text(0.5, 0.2, textax0, transform=ax.transAxes, fontsize=14,
        verticalalignment='bottom', bbox=props)

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
hist_values=ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')
ax[1].yaxis.set_visible(False)
ax[1].plot(gaussian(courants,mu,s,hist_values[0]),courants, 'g')

textax1='Loi normale:\n exp(-\frac{(\frac{x-\mu}{\sigma})^2}{2}$$'
#ax[1].text(0.5, 0.5, textax1, transform=ax.transAxes, fontsize=14,
        #verticalalignment='bottom', bbox=props)

subplots_adjust(wspace=0.1)
135/266:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/300

mu, s = stats.norm.fit(bruit)

print mu,s

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

textax0='$I(t)=I_0+\delta I$'
#ax[0].text(0.5, 0.2, textax0, transform=ax.transAxes, fontsize=14,
        #verticalalignment='bottom', bbox=props)

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
hist_values=ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')
ax[1].yaxis.set_visible(False)
ax[1].plot(gaussian(courants,mu,s,hist_values[0]),courants, 'g')

textax1='Loi normale:\n exp(-\frac{(\frac{x-\mu}{\sigma})^2}{2}$$'
#ax[1].text(0.5, 0.5, textax1, transform=ax.transAxes, fontsize=14,
        #verticalalignment='bottom', bbox=props)

subplots_adjust(wspace=0.1)
135/267:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/17

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal");
ax[0].plot(gaussian(courants,mu,s,hist_values[0]),courants)
textax1='Loi normale:\n exp(-\frac{(\frac{x-\mu}{\sigma})^2}{2}$$'
ax[0].text(0.5, 0.5, textax1, transform=ax.transAxes, fontsize=14,
        verticalalignment='bottom', bbox=props)
135/268:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/300

mu, s = stats.norm.fit(bruit)

print mu,s

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

textax0='$I(t)=I_0+\delta I$'
#ax[0].text(0.5, 0.2, textax0, transform=ax.transAxes, fontsize=14,
        #verticalalignment='bottom', bbox=props)

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
hist_values=ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')
ax[1].yaxis.set_visible(False)
ax[1].plot(gaussian(courants,mu,s,hist_values[0]),courants, 'g')

textax1='Loi normale:\n exp(-\frac{(\frac{x-\mu}{\sigma})^2}{2}$$'
ax[1].figtext(0.5, 0.5, textax1, transform=ax.transAxes, fontsize=14,
        verticalalignment='bottom', bbox=props)

subplots_adjust(wspace=0.1)
135/269:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/300

mu, s = stats.norm.fit(bruit)

print mu,s

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

textax0='$I(t)=I_0+\delta I$'
#ax[0].text(0.5, 0.2, textax0, transform=ax.transAxes, fontsize=14,
        #verticalalignment='bottom', bbox=props)

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
hist_values=ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')
ax[1].yaxis.set_visible(False)
ax[1].plot(gaussian(courants,mu,s,hist_values[0]),courants, 'g')

textax1='Loi normale:\n $exp(-\frac{(\frac{x-\mu}{\sigma})^2}{2}$'
ax[1].figtext(0.5, 0.5, textax1, transform=ax.transAxes, fontsize=14,
        verticalalignment='bottom', bbox=props)

subplots_adjust(wspace=0.1)
135/270:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/300

mu, s = stats.norm.fit(bruit)

print mu,s

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

textax0='$I(t)=I_0+\delta I$'
#ax[0].text(0.5, 0.2, textax0, transform=ax.transAxes, fontsize=14,
        #verticalalignment='bottom', bbox=props)

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
hist_values=ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')
ax[1].yaxis.set_visible(False)
ax[1].plot(gaussian(courants,mu,s,hist_values[0]),courants, 'g')

textax1='Loi normale:\n $exp(-\frac{(\frac{x-\mu}{\sigma})^2}{2}$'
ax[1].figtext(0.5, 0.5, textax1)

subplots_adjust(wspace=0.1)
135/271:
xs=linspace(0,100,100)
y=2*x
135/272:
xs=linspace(0,100,100)
ys=2*x
fig,ax=subplots(1,2)
ax[0].plot(xs,ys)
ax[0].text(0.5,0.5,'test')
135/273:
xs=linspace(0,100,100)
ys=2*x
fig,ax=subplots(1,2)
ax[0].plot(xs,ys)
#ax[0].text(0.5,0.5,'test')
135/274:
xs=linspace(0,100,100)
ys=2*x
fig,ax=subplots(1,2)
#ax[0].plot(xs,ys)
#ax[0].text(0.5,0.5,'test')
135/275:
xs=linspace(0,100,100)
ys=2*x
fig,ax=subplots(1,2)
ax[0].plot(xs,ys)
#ax[0].text(0.5,0.5,'test')
135/276: plot(xs,ys)
138/1:
from pylab import *
from scipy import stats  
from __future__ import division
%matplotlib inline
from pyHegel.util import readfile
from pyHegel.fitting import fitcurve
sys.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
from pyHegel.commands import readfile
from scipy import constants as c
import pyHegel.fitting as fit
138/2:
from pylab import *
from scipy import stats  
from __future__ import division
%matplotlib inline
from pyHegel.util import readfile
from pyHegel.fitting import fitcurve
sys.path.insert(0, "S:\Projets\S3cyclostationnaire\Code\python" )
from pyHegel.commands import readfile
from scipy import constants as c
import pyHegel.fitting as fit
138/3: plot(xs,ys)
138/4:
n=350
div=1e-3


x=linspace(0,10,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/300

mu, s = stats.norm.fit(bruit)

print mu,s

fig,ax=subplots(1,2,figsize=(9,3),gridspec_kw = {'width_ratios':[3, 1]},dpi=300)
ax[0].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
ax[0].plot(x, const,'r')
ax[0].plot(x, bruit,'b',linewidth=0.5)
ax[0].set_xlim(0,10)
ax[0].set_ylim(0,2*div)
ax[0].set_xlabel('Temps (s)')
ax[0].set_ylabel('Courant (A)')

textax0='$I(t)=I_0+\delta I$'
#ax[0].text(0.5, 0.2, textax0, transform=ax.transAxes, fontsize=14,
        #verticalalignment='bottom', bbox=props)

ax[1].ticklabel_format(axis='y', style='sci', scilimits=(0,2))
hist_values=ax[1].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal")
ax[1].set_xlabel(u'Événements(x1)')
ax[1].yaxis.set_visible(False)
ax[1].plot(gaussian(courants,mu,s,hist_values[0]),courants, 'g')

textax1='Loi normale:\n $exp(-\frac{(\frac{x-\mu}{\sigma})^2}{2}$'
ax[1].figtext(0.5, 0.5, textax1)

subplots_adjust(wspace=0.1)
138/5:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/17

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal");
ax[0].plot(gaussian(courants,mu,s,hist_values[0]),courants)
textax1='Loi normale:\n exp(-\frac{(\frac{x-\mu}{\sigma})^2}{2}$$'
ax[0].text(0.5, 0.5, textax1, transform=ax.transAxes, fontsize=14,
        verticalalignment='bottom', bbox=props)
138/6:
xs=linspace(0,100,100)
ys=2*x
fig,ax=subplots(1,2)
ax[0].plot(xs,ys)
#ax[0].text(0.5,0.5,'test')
138/7:
xs=linspace(0,100,100)
ys=2*xs
fig,ax=subplots(1,2)
ax[0].plot(xs,ys)
#ax[0].text(0.5,0.5,'test')
138/8:
xs=linspace(0,100,100)
ys=2*xs
fig,ax=subplots(1,2)
ax[0].plot(xs,ys)
ax[0].text(0.5,0.5,'test')
138/9:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/17

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal");
ax[0].plot(gaussian(courants,mu,s,hist_values[0]),courants)
textax1='Loi normale:\n exp(-\frac{(\frac{x-\mu}{\sigma})^2}{2}$$'
ax[0].text(0.5, 0.5, textax1, transform=ax.transAxes, fontsize=14,
        verticalalignment='bottom', bbox=props)
138/10:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/17

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal");
ax[0].plot(gaussian(courants,mu,s,hist_values[0]),courants)
textax1='Loi normale:\n exp(-\frac{(\frac{x-\mu}{\sigma})^2}{2}$$'
ax[0].text(0.5, 0.5, textax1, fontsize=14,
        verticalalignment='bottom', bbox=props)
138/11:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/17

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal");
ax[0].plot(gaussian(courants,mu,s,hist_values[0]),courants)
textax1='Loi normale:\n exp(-\frac{(\frac{x-\mu}{\sigma})^2}{2}$$'
ax[0].text(0.5, 0.5, textax1, fontsize=14,
        verticalalignment='bottom')
138/12:
n=10000
x=linspace(0,10,n)
courants=linspace(0,div*2,n)
const=ones(n)*div
bruit=normal(div,3e-4,n)

def gaussian(x,mu,s,hv):
    return 1/(s*sqrt(2*pi))*exp(-((x-mu)/s)**2/2)/17

mu, s = stats.norm.fit(bruit)

print mu,s
fig,ax=subplots(1,2,figsize=(9,3),dpi=300)
ax[0].ticklabel_format(axis='both', style='sci', scilimits=(0,2))
hist_values=ax[0].hist(bruit,bins=linspace(0,div*2,300),orientation="horizontal");
ax[0].plot(gaussian(courants,mu,s,hist_values[0]),courants)
textax1='Loi normale:\n exp(-\frac{(\frac{x-\mu}{\sigma})^2}{2}$$'
ax[0].figtext(0.5, 0.5, textax1, fontsize=14,
        verticalalignment='bottom')
139/1: import pylab
139/2:
x=linspace(0,10,1)
y=linspace(0,100,1)
plot(x,y)
139/3: from pylab import *
139/4:
x=linspace(0,10,1)
y=linspace(0,100,1)
plot(x,y)
139/5:
x=linspace(0,10,1)
y=linspace(0,100,1)
iplot(x,y)
139/6:
from pylab import *
%matplotlib notebook
139/7:
x=linspace(0,10,1)
y=linspace(0,100,1)
plot(x,y)
139/8:
x=linspace(0,10,100)
y=linspace(0,100,100)
plot(x,y)
139/9:
from pylab import *
%matplotlib inline
139/10: from pylab import *
139/11: %matplotlib inline
139/12:
x=linspace(0,10,100)
y=linspace(0,100,100)
plot(x,y)
139/13:
x=linspace(0,10,100)
y=linspace(0,100,100)
plot(x,y, dpi=150)
139/14:
x=linspace(0,10,100)
y=linspace(0,100,100)

fig=subplot(1,1)
fig.plot(x,y)
139/15:
x=linspace(0,10,100)
y=linspace(0,100,100)

fig=subplot(2,1)
fig.plot(x,y)
139/16:
x=linspace(0,10,100)
y=linspace(0,100,100)

fig=subplot(2,1,1)
fig.plot(x,y)
139/17:
x=linspace(0,10,100)
y=linspace(0,100,100)

fig=subplot(2,1,1)
fig[0].plot(x,y)
139/18:
x=linspace(0,10,100)
y=linspace(0,100,100)

fig=subplot(2,1,1)
fig.plot(x,y)
139/19:
x=linspace(0,10,100)
y=linspace(0,100,100)

fig=subplot(2,1,1)
fig.plot(x,y)
fig.plot(x,2*y)
139/20:
x=linspace(0,10,100)
y=linspace(0,100,100)

fig=subplot(2,1,2)
fig.plot(x,y)
fig.plot(x,2*y)
139/21:
x=linspace(0,10,100)
y=linspace(0,100,100)

fig=subplot(2,2,2)
fig.plot(x,y)
fig.plot(x,2*y)
139/22:
x=linspace(0,10,100)
y=linspace(0,100,100)

fig=subplots(2,2,2)
fig.plot(x,y)
fig.plot(x,2*y)
139/23:
x=linspace(0,10,100)
y=linspace(0,100,100)

fig=subplots(1,1,1)
fig.plot(x,y)
fig.plot(x,2*y)
139/24:
x=linspace(0,10,100)
y=linspace(0,100,100)

fig=subplots(1,1)
fig.plot(x,y)
fig.plot(x,2*y)
139/25:
x=linspace(0,10,100)
y=linspace(0,100,100)

fig=subplots(2,1)
fig.plot(x,y)
fig.plot(x,2*y)
139/26:
x=linspace(0,10,100)
y=linspace(0,100,100)

fig=subplots(2,1)
fig[0].plot(x,y)
fig.plot(x,2*y)
139/27:
x=linspace(0,10,100)
y=linspace(0,100,100)

fig, ax=subplots(2,1)
ax.plot(x,y)
fig.plot(x,2*y)
139/28:
x=linspace(0,10,100)
y=linspace(0,100,100)

fig, ax=subplots(2,1)
ax[0].plot(x,y)
fig.plot(x,2*y)
139/29:
x=linspace(0,10,100)
y=linspace(0,100,100)

fig, ax=subplots(2,1)
ax1.plot(x,y)
fig.plot(x,2*y)
139/30:
x=linspace(0,10,100)
y=linspace(0,100,100)

fig, ax=subplots(2,1)
ax0.plot(x,y)
fig.plot(x,2*y)
139/31:
x=linspace(0,10,100)
y=linspace(0,100,100)

fig, ax=subplots(2,1)
ax.plot(x,y)
fig.plot(x,2*y)
139/32:
x=linspace(0,10,100)
y=linspace(0,100,100)

fig, ax=subplots(2,1)
print (ax.type)
ax.plot(x,y)
fig.plot(x,2*y)
139/33:
x=linspace(0,10,100)
y=linspace(0,100,100)

fig, ax=subplots(2,1)
ax[0].plot(x,y)
fig.plot(x,2*y)
139/34:
x=linspace(0,10,100)
y=linspace(0,100,100)

fig, ax=subplots(2,1)
ax[0].plot(x,y)
ax[1].plot(x,2*y)
139/35:
x=linspace(0,10,100)
y=linspace(0,100,100)

fig, (ax0,ax1)=subplots(2,1)
ax[0].plot(x,y)
ax[1].plot(x,2*y)
139/36:
x=linspace(0,10,100)
y=linspace(0,100,100)

fig, (ax0,ax1)=subplots(2,1)
ax0.plot(x,y)
ax[1].plot(x,2*y)
139/37:
x=linspace(0,10,100)
y=linspace(0,100,100)

fig, (ax0,ax1)=subplots(2,1)
ax0.plot(x,y)
ax1.plot(x,2*y)
142/1: sqm3=readfile('003_2019-05-23.txt')
142/2:
f=open('003_2019-05-23.txt','r+')
sqm3=f.read()
f.close()
142/3: print sqm3
142/4: print (sqm3)
142/5: print (sqm3[0])
142/6: print (sqm3[1])
142/7: print (sqm3[2])
142/8: print (sqm3[3])
142/9: print (sqm3[4])
142/10: print (sqm3[5])
142/11:
f=open('003_2019-05-23.txt','r+')

lines = [line for line inf.readlines()]

f.close()
142/12:
f=open('003_2019-05-23.txt','r+')

lines = [line for line in f.readlines()]

f.close()
142/13: print (type(lines))
142/14: print (lines)
142/15:
f=open('003_2019-05-23.txt','r+')

sqm3=loadtxt(f)

f.close()
142/16:
f=open('003_2019-05-23.txt','r+')

sqm3=pylab.loadtxt(f)

f.close()
142/17:
from pylab import *
from numpy import *
142/18:
f=open('003_2019-05-23.txt','r+')

sqm3=loadtxt(f)

f.close()
142/19:
f=open('003_2019-05-23.txt','r+')

sqm3=loadtxt(f, usecols=(6,7,8,9,10))

f.close()
142/20: print (sqm3)
142/21: print (sqm3, type(sqm3))
142/22: fig,ax=subplots(1,1,dpi=200,figsize=8,3)
142/23: fig,ax=subplots(1,1,dpi=200,figsize=8)
142/24: fig,ax=subplot(1,1,dpi=200,figsize=8)
142/25: fig,ax=subplot(1,1,figsize=8)
142/26: fig,ax=subplot(1,1,size=8)
142/27: fig,ax=subplot(1,1)
142/28: fig,ax=subplot()
142/29: fig=subplot()
142/30: fig=subplots()
142/31:
fig=subplots()
fig.plot(sqm3[0])
142/32: plot(sqm3[0])
142/33:
print (sqm3, type(sqm3))
print (sqm3[0])
142/34:
print (sqm3, type(sqm3))
print (sqm3[1])
142/35:
print (sqm3, type(sqm3))
print (sqm3[1:0]
142/36:
print (sqm3, type(sqm3))
print (sqm3[1:0])
142/37:
print (sqm3, type(sqm3))
print (sqm3[1:1])
142/38:
print (sqm3, type(sqm3))
print (sqm3[0:1])
142/39:
print (sqm3, type(sqm3))
print (sqm3[0:3])
142/40:
print (sqm3, type(sqm3))
print (sqm3[0:][3])
142/41:
print (sqm3, type(sqm3))
print (sqm3[0][3])
142/42:
f=open('003_2019-05-23.txt','r+')

sqm3=loadtxt(f, usecols=(7,8,9,10,11))

f.close()
142/43:
print (sqm3, type(sqm3))
print (sqm3[0][3])
142/44:
print (sqm3, type(sqm3))
print (sqm3[0,1)
142/45:
print (sqm3, type(sqm3))
print (sqm3[0,1])
142/46:
print (sqm3, type(sqm3))
print (sqm3[:,0])
142/47: plot(sqm3[:,0],sqm3[:,1])
142/48: %matplotlib inline
142/49: plot(sqm3[:,0],sqm3[:,1])
142/50: plot(sqm3[:,0])
142/51:
print (sqm3, type(sqm3))
print (sqm3[:,0])
print (sqm3[:,3])
142/52:
f=open('003_2019-05-23.txt','r+')

sqm3=loadtxt(f)

f.close()
142/53:
f=open('003_2019-05-23.txt','r+')

sqm3=loadtxt(f, usecols=(7,8,9,10,11))

f.close()
142/54:
x=linspace(0,100,len(sqm3[:,0]))

plot(x,sqm3[:,0],x,sqm3[:,1]x,sqm3[:,2]x,sqm3[:,3]x,sqm3[:,4])
142/55:
x=linspace(0,100,len(sqm3[:,0]))

plot(x,sqm3[:,0],x,sqm3[:,1],x,sqm3[:,2],x,sqm3[:,3],x,sqm3[:,4])
142/56:
x=linspace(0,100,len(sqm3[:,0]))

fig,ax=subplots(2,1)
plot(x,sqm3[:,0],x,sqm3[:,1],x,sqm3[:,2],x,sqm3[:,3],x,sqm3[:,4])
142/57:
x=linspace(0,100,len(sqm3[:,0]))

fig,ax=subplots(1,1)
plot(x,sqm3[:,0],x,sqm3[:,1],x,sqm3[:,2],x,sqm3[:,3],x,sqm3[:,4])
142/58:
x=linspace(0,100,len(sqm3[:,0]))

fig,ax=subplots(1,1)
ax.plot(x,sqm3[:,0],x,sqm3[:,1],x,sqm3[:,2],x,sqm3[:,3],x,sqm3[:,4])
142/59:
x=linspace(0,100,len(sqm3[:,0]))

fig,ax=subplots(1,1)
ax.plot(x,sqm3[:,0],x,sqm3[:,1],x,sqm3[:,2],x,sqm3[:,3],x,sqm3[:,4])
ax.legend()
142/60:
x=linspace(0,100,len(sqm3[:,0]))

fig,ax=subplots(1,1)
ax.plot(x,sqm3[:,0],label='clear')
ax.plot(x,sqm3[:,1],label='R')
ax.plot(x,sqm3[:,2],label='G')
ax.plot(x,sqm3[:,3],label='B')
ax.plot(x,sqm3[:,4],label='Y')
ax.legend()
142/61:
x=linspace(0,100,len(sqm3[:,0]))

fig,ax=subplots(1,1)
ax.plot(x,sqm3[:,0],label='clear',color='k')
ax.plot(x,sqm3[:,1],label='R')
ax.plot(x,sqm3[:,2],label='G')
ax.plot(x,sqm3[:,3],label='B')
ax.plot(x,sqm3[:,4],label='Y')
ax.legend()
142/62:
x=linspace(0,100,len(sqm3[:,0]))

fig,ax=subplots(1,1)
ax.plot(x,sqm3[:,0],label='clear',color='k')
ax.plot(x,sqm3[:,1],label='R',color='r')
ax.plot(x,sqm3[:,2],label='G',color='g')
ax.plot(x,sqm3[:,3],label='B',color='b')
ax.plot(x,sqm3[:,4],label='Y',color='y')
ax.legend()
142/63:
x=linspace(8.26,29.4,len(sqm3[:,0]))

fig,ax=subplots(1,1)
ax.plot(x,sqm3[:,0],label='clear',color='k')
ax.plot(x,sqm3[:,1],label='R',color='r')
ax.plot(x,sqm3[:,2],label='G',color='g')
ax.plot(x,sqm3[:,3],label='B',color='b')
ax.plot(x,sqm3[:,4],label='Y',color='y')
ax.legend()
142/64:
x=linspace(8.26,29.4,len(sqm3[:,0]))

fig,ax=subplots(1,1)
ax.plot(x,-sqm3[:,0],label='clear',color='k')
ax.plot(x,-sqm3[:,1],label='R',color='r')
ax.plot(x,-sqm3[:,2],label='G',color='g')
ax.plot(x,-sqm3[:,3],label='B',color='b')
ax.plot(x,-sqm3[:,4],label='Y',color='y')
ax.legend()
142/65:
f=open('003_2019-05-23.txt','r+')
sqm3=loadtxt(f, usecols=(7,8,9,10,11))
f.close()

f=open('004_2019-05-23.txt','r+')
sqm4=loadtxt(f, usecols=(7,8,9,10,11))
f.close()

f=open('005_2019-05-23.txt','r+')
sqm5=loadtxt(f, usecols=(7,8,9,10,11))
f.close()
142/66:
def plot_mag(data):
    x=linspace(8.26,29.4,len(sqm3[:,0]))

    fig,ax=subplots(1,1)
    ax.plot(x,-sqm3[:,0],label='clear',color='k')
    ax.plot(x,-sqm3[:,1],label='R',color='r')
    ax.plot(x,-sqm3[:,2],label='G',color='g')
    ax.plot(x,-sqm3[:,3],label='B',color='b')
    ax.plot(x,-sqm3[:,4],label='Y',color='y')
    ax.legend()
    
    return
142/67: plot_mag(sqm3)
142/68:
plot_mag(sqm3)
plot_mag(sqm4)
142/69:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
142/70:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag([sqm3,sqm4,sqm5])
142/71:
f=open('003_2019-05-23.txt','r+')
sqm3=loadtxt(f, usecols=(7,8,9,10,11))
f.close()

f=open('004_2019-05-23.txt','r+')
sqm4=loadtxt(f, usecols=(7,8,9,10,11))
f.close()

f=open('005_2019-05-23.txt','r+')
sqm5=loadtxt(f, usecols=(7,8,9,10,11))
f.close()
142/72:
def plot_mag(data):
    x=linspace(8.26,29.4,len(sqm3[:,0]))

    fig,ax=subplots(1,1)
    ax.plot(x,-sqm3[:,0],label='clear',color='k')
    ax.plot(x,-sqm3[:,1],label='R',color='r')
    ax.plot(x,-sqm3[:,2],label='G',color='g')
    ax.plot(x,-sqm3[:,3],label='B',color='b')
    ax.plot(x,-sqm3[:,4],label='Y',color='y')
    ax.legend()
    
    return
142/73:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag([sqm3,sqm4,sqm5])
142/74:
def plot_mag(data):
    x=linspace(8.26,29.4,len(sqm3[:,0]))

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,0],label='clear',color='k')
    ax.plot(x,-data[:,1],label='R',color='r')
    ax.plot(x,-data[:,2],label='G',color='g')
    ax.plot(x,-data[:,3],label='B',color='b')
    ax.plot(x,-data[:,4],label='Y',color='y')
    ax.legend()
    
    return
142/75:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag([sqm3,sqm4,sqm5])
142/76:
def plot_mag(data):
    x=linspace(8.26,29.4,len(data[:,0]))

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,0],label='clear',color='k')
    ax.plot(x,-data[:,1],label='R',color='r')
    ax.plot(x,-data[:,2],label='G',color='g')
    ax.plot(x,-data[:,3],label='B',color='b')
    ax.plot(x,-data[:,4],label='Y',color='y')
    ax.legend()
    
    return
142/77:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag([sqm3,sqm4,sqm5])
142/78:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag((sqm3,sqm4,sqm5))
142/79:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag((sqm3-sqm4))
142/80:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag((sqm3[:-1]-sqm4))
142/81:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag((sqm3[1:]-sqm4))
142/82:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag((sqm3[1:]-sqm5))
142/83:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag((sqm3-sqm5[3:]))
142/84:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag((sqm3-sqm5[2:]))
142/85:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag((sqm3-sqm5[1:-1]))
142/86:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag((sqm3-sqm5[:-2]))
142/87:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag((sqm3-sqm5[:-2]))
plot_mag(sqm4-sqm5[:-1])
142/88:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag((sqm3-sqm5[:-2]))
plot_mag(sqm4-sqm5[:-3])
142/89:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag((sqm3-sqm5[:-2]))
plot_mag(sqm4-sqm5[1:-2])
142/90:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag((sqm3-sqm5[:-2]))
plot_mag(sqm4-sqm5[2:-1])
142/91:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag((sqm3-sqm5[:-2]))
plot_mag(sqm4-sqm5[3:])
142/92:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag((sqm3-sqm5[:-2]))
plot_mag(sqm4-sqm5[1:-2])
142/93:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag((sqm3-sqm5[:-2]))
plot_mag(sqm4-sqm5[:-1])
142/94:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag((sqm3-sqm5[:-2]))
plot_mag(sqm4-sqm5[:-2])
142/95:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag((sqm3-sqm5[:-2]))
plot_mag(sqm4-sqm5[:-3])
142/96: %pylab
142/97:
file=open('003_2019-05-23.txt','r+')
sqm3=loadtxt(f, usecols=(7,8,9,10,11))
file.close()

file=open('004_2019-05-23.txt','r+')
sqm4=loadtxt(file, usecols=(7,8,9,10,11))
file.close()

file=open('005_2019-05-23.txt','r+')
sqm5=loadtxt(file, usecols=(7,8,9,10,11))
file.close()
142/98:
file=open('003_2019-05-23.txt','r+')
sqm3=loadtxt(file, usecols=(7,8,9,10,11))
file.close()

file=open('004_2019-05-23.txt','r+')
sqm4=loadtxt(file, usecols=(7,8,9,10,11))
file.close()

file=open('005_2019-05-23.txt','r+')
sqm5=loadtxt(file, usecols=(7,8,9,10,11))
file.close()
142/99:
def plot_mag(data):
    x=linspace(8.26,29.4,len(data[:,0]))

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,0],label='clear',color='k')
    ax.plot(x,-data[:,1],label='R',color='r')
    ax.plot(x,-data[:,2],label='G',color='g')
    ax.plot(x,-data[:,3],label='B',color='b')
    ax.plot(x,-data[:,4],label='Y',color='y')
    ax.legend()
    
    return
142/100:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag((sqm3-sqm5[:-2]))
plot_mag(sqm4-sqm5[:-3])
142/101: %matplotlib notebook
142/102:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag((sqm3-sqm5[:-2]))
plot_mag(sqm4-sqm5[:-3])
142/103:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag((sqm3-sqm5[:-2]))
plot_mag(sqm4-sqm5[:-3])
142/104: %matplotlib notebook
142/105: %matplotlib qt
142/106:
from pylab import *
from numpy import *
142/107: %matplotlib qt
143/1:
from pylab import *
from numpy import *
143/2: %matplotlib qt
143/3: %matplotlib notebook
143/4:
%matplotlib notebook
from pylab import *
from numpy import *
143/5:
%matplotlib inline
from pylab import *
from numpy import *
143/6:
%matplotlib inline
from pylab import *
from numpy import *
143/7:
file=open('003_2019-05-23.txt','r+')
sqm3=loadtxt(file, usecols=(7,8,9,10,11))
file.close()

file=open('004_2019-05-23.txt','r+')
sqm4=loadtxt(file, usecols=(7,8,9,10,11))
file.close()

file=open('005_2019-05-23.txt','r+')
sqm5=loadtxt(file, usecols=(7,8,9,10,11))
file.close()
143/8:
def plot_mag(data):
    x=linspace(8.26,29.4,len(data[:,0]))

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,0],label='clear',color='k')
    ax.plot(x,-data[:,1],label='R',color='r')
    ax.plot(x,-data[:,2],label='G',color='g')
    ax.plot(x,-data[:,3],label='B',color='b')
    ax.plot(x,-data[:,4],label='Y',color='y')
    ax.legend()
    
    return
143/9:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag((sqm3-sqm5[:-2]))
plot_mag(sqm4-sqm5[:-3])
143/10:
%matplotlib notebook
from pylab import *
from numpy import *
143/11:
file=open('003_2019-05-23.txt','r+')
sqm3=loadtxt(file, usecols=(7,8,9,10,11))
file.close()

file=open('004_2019-05-23.txt','r+')
sqm4=loadtxt(file, usecols=(7,8,9,10,11))
file.close()

file=open('005_2019-05-23.txt','r+')
sqm5=loadtxt(file, usecols=(7,8,9,10,11))
file.close()
143/12:
def plot_mag(data):
    x=linspace(8.26,29.4,len(data[:,0]))

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,0],label='clear',color='k')
    ax.plot(x,-data[:,1],label='R',color='r')
    ax.plot(x,-data[:,2],label='G',color='g')
    ax.plot(x,-data[:,3],label='B',color='b')
    ax.plot(x,-data[:,4],label='Y',color='y')
    ax.legend()
    
    return
143/13:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag((sqm3-sqm5[:-2]))
plot_mag(sqm4-sqm5[:-3])
144/1:
%matplotlib notebook
from pylab import *
from numpy import *
144/2:
file=open('003_2019-05-25.txt','r+')
sqm3=loadtxt(file, usecols=(7,8,9,10,11))
file.close()

file=open('004_2019-05-25.txt','r+')
sqm4=loadtxt(file, usecols=(7,8,9,10,11))
file.close()

file=open('005_2019-05-25.txt','r+')
sqm5=loadtxt(file, usecols=(7,8,9,10,11))
file.close()
144/3:
def plot_mag(data):
    x=linspace(8.26,29.4,len(data[:,0]))

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,0],label='clear',color='k')
    ax.plot(x,-data[:,1],label='R',color='r')
    ax.plot(x,-data[:,2],label='G',color='g')
    ax.plot(x,-data[:,3],label='B',color='b')
    ax.plot(x,-data[:,4],label='Y',color='y')
    ax.legend()
    
    return
144/4:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag((sqm3-sqm5[:-2]))
plot_mag(sqm4-sqm5[:-3])
144/5: %matplotlib inline
144/6:
from pylab import *
from matplotlib import *
144/7:
file=open('003_2019-05-25.txt','r+')
sqm3=loadtxt(file, usecols=(7,8,9,10,11))
file.close()

file=open('004_2019-05-25.txt','r+')
sqm4=loadtxt(file, usecols=(7,8,9,10,11))
file.close()

file=open('005_2019-05-25.txt','r+')
sqm5=loadtxt(file, usecols=(7,8,9,10,11))
file.close()
144/8:
def plot_mag(data):
    x=linspace(8.26,29.4,len(data[:,0]))

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,0],label='clear',color='k')
    ax.plot(x,-data[:,1],label='R',color='r')
    ax.plot(x,-data[:,2],label='G',color='g')
    ax.plot(x,-data[:,3],label='B',color='b')
    ax.plot(x,-data[:,4],label='Y',color='y')
    ax.legend()
    
    return
144/9:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
plot_mag((sqm3-sqm5[:-2]))
plot_mag(sqm4-sqm5[:-3])
144/10:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
# plot_mag((sqm3-sqm5[:-2]))
# plot_mag(sqm4-sqm5[:-3])
144/11:
file=open('003_2019-05-25.txt','r+')
sqm3=loadtxt(file, usecols=(7,8,9,10,11))
sqm3date=loadtxt(file,usecols=1)
file.close()

file=open('004_2019-05-25.txt','r+')
sqm4=loadtxt(file, usecols=(7,8,9,10,11))
sqm4date=loadtxt(file,usecols=1)
file.close()

file=open('005_2019-05-25.txt','r+')
sqm5=loadtxt(file, usecols=(7,8,9,10,11))
sqm5date=loadtxt(file,usecols=1)
file.close()

file=open('001_2019-05-25.txt','r+')
sqm1=loadtxt(file, usecols=(7,8,9,10,11))
sqm1date=loadtxt(file,usecols=1)
file.close()
144/12:
file=open('003_2019-05-25.txt','r+')
sqm3=loadtxt(file, usecols=(7,8,9,10,11))
sqm3date=loadtxt(file,usecols=0)
file.close()

file=open('004_2019-05-25.txt','r+')
sqm4=loadtxt(file, usecols=(7,8,9,10,11))
sqm4date=loadtxt(file,usecols=0)
file.close()

file=open('005_2019-05-25.txt','r+')
sqm5=loadtxt(file, usecols=(7,8,9,10,11))
sqm5date=loadtxt(file,usecols=0)
file.close()

file=open('001_2019-05-25.txt','r+')
sqm1=loadtxt(file, usecols=(7,8,9,10,11))
sqm1date=loadtxt(file,usecols=0)
file.close()
144/13:
file=open('003_2019-05-25.txt','r+')
sqm3=loadtxt(file, usecols=(7,8,9,10,11))
sqm3date=loadtxt(file,usecols=0)
file.close()

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/14:
file=open('003_2019-05-25.txt','r+')
sqm3=loadtxt(file, usecols=(7,8,9,10,11))
file.close()

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/15:
file=open('003_2019-05-25.txt','r+')
sqm3=loadtxt(file)
file.close()

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/16:
from pylab import *
from matplotlib import *
import panda
144/17:
from pylab import *
from matplotlib import *
import panda
144/18:
from pylab import *
from matplotlib import *
144/19:
file=open('003_2019-05-25.txt','r+')
sqm3=genfromtxt(file)
file.close()

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/20:

sqm3=genfromtxt('003_2019-05-25.txt','r+')
file.close()

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/21:

sqm3=genfromtxt('003_2019-05-25.txt')
file.close()

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/22: print sqm3
144/23: print (sqm3)
144/24:

sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))
file.close()

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/25: print (sqm3)
144/26:

#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))
delimiter=" ", dtype="|U5", autostrip=True

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/27:

#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt',delimiter=" ", dtype="|U5", autostrip=True)

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/28: print (sqm3)
144/29: print (sqm3[0])
144/30: print (array(sqm3[0]))
144/31:
print (array(sqm3[0]))
print type(sqm3)
144/32:
print (array(sqm3[0]))
print (type(sqm3))
144/33:
print (sqm3[0][0])
print (type(sqm3))
144/34:
print (sqm3[0][1])
print (type(sqm3))
144/35:
print (sqm3[0][2])
print (type(sqm3))
144/36:
print (sqm3[0][3])
print (type(sqm3))
144/37:
print (sqm3[0][4])
print (type(sqm3))
144/38:

#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt', dtype="|U5", autostrip=True)

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/39:
print (sqm3[0][4])
print (type(sqm3))
144/40:
print (sqm3[0][0])
print (type(sqm3))
144/41:

#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt', autostrip=True)

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/42:
print (sqm3[0][0])
print (type(sqm3))
144/43:

#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt', dtype="|U5", autostrip=True)

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/44:
print (sqm3[0][0])
print (type(sqm3))
144/45:

#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt', dtype="|U5")

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/46:
print (sqm3[0][0])
print (type(sqm3))
144/47:

#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt', dtype="|U5", autostrip=False)

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/48:
print (sqm3[0][0])
print (type(sqm3))
144/49:

#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt', dtype="|U10", autostrip=False)

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/50:
print (sqm3[0][0])
print (type(sqm3))
144/51:
print (sqm3[0][1])
print (type(sqm3))
144/52:
print (sqm3[0][2])
print (type(sqm3))
144/53:
print (sqm3[0][3])
print (type(sqm3))
144/54:
print (sqm3[0])
print (type(sqm3))
144/55:

#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt', dtype="|U12", autostrip=False)

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/56:
print (sqm3[0])
print (type(sqm3))
144/57:

#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt', dtype="|U", autostrip=False)

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/58:
print (sqm3[0])
print (type(sqm3))
144/59:

#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt', dtype="|U12", autostrip=False)

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/60:
print (sqm3[0])
print (type(sqm3))
144/61:

#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt', dtype="|Utf8", autostrip=False)

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/62:

#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt', dtype="Utf8", autostrip=False)

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/63:

#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt', dtype="U", autostrip=False)

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/64:
print (sqm3[0])
print (type(sqm3))
144/65:
print (sqm3[0])
print (sqm3[0]+sqm3[1])
144/66:
print (sqm3[0][7])
print (sqm3[0][7]+sqm3[1][7])
144/67:
print (sqm3[0][7])
print (2*sqm3[0][7]+sqm3[1][7])
144/68:
print (sqm3[0])
print (2*sqm3[0][7]+sqm3[1][7])
144/69:
datatype='str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt', dtype=datatype, autostrip=False)

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/70:
print (sqm3[0])
print (2*sqm3[0][7]+sqm3[1][7])
144/71:
datatype='str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt', dtype=datatype)

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/72:
print (sqm3[0])
print (2*sqm3[0][7]+sqm3[1][7])
144/73:
datatype='U,U,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt', dtype=datatype)

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/74:
print (sqm3[0])
print (2*sqm3[0][7]+sqm3[1][7])
144/75:
datatype='U8,U8,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt', dtype=datatype)

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/76:
print (sqm3[0])
print (2*sqm3[0][7]+sqm3[1][7])
144/77:
datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt', dtype=datatype)

# file=open('004_2019-05-25.txt','r+')
# sqm4=loadtxt(file, usecols=(7,8,9,10,11))
# sqm4date=loadtxt(file,usecols=0)
# file.close()

# file=open('005_2019-05-25.txt','r+')
# sqm5=loadtxt(file, usecols=(7,8,9,10,11))
# sqm5date=loadtxt(file,usecols=0)
# file.close()

# file=open('001_2019-05-25.txt','r+')
# sqm1=loadtxt(file, usecols=(7,8,9,10,11))
# sqm1date=loadtxt(file,usecols=0)
# file.close()
144/78:
print (sqm3[0])
print (2*sqm3[0][7]+sqm3[1][7])
144/79:
print (sqm3[0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/80:
datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-26.txt', dtype=datatype)
sqm4=genfromtxt('004_2019-05-26.txt', dtype=datatype)
sqm4=genfromtxt('005_2019-05-26.txt', dtype=datatype)
144/81:
datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('004_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('005_2019-05-25.txt', dtype=datatype)
144/82:
print (sqm3[0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/83:
def plot_mag(data):
    x=linspace(8.26,29.4,len(data[:,0]))

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,0],label='clear',color='k')
    ax.plot(x,-data[:,1],label='R',color='r')
    ax.plot(x,-data[:,2],label='G',color='g')
    ax.plot(x,-data[:,3],label='B',color='b')
    ax.plot(x,-data[:,4],label='Y',color='y')
    ax.legend()
    
    return
144/84:
print (sqm3[:,0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/85:
print (sqm3[:][0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/86:
print (sqm3[5,:])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/87:
print (sqm3[5])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/88:
print (sqm3[5][1])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/89:
print (sqm3[:][1])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/90:
print (sqm3[0][:])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/91:
print (sqm3[0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/92:
print (sqm3[:][0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/93:
print (sqm3)
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/94:
print (sqm3[0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/95:
print (sqm3[1])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/96:
print (sqm3[0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/97:
print (sqm3[:])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/98:
print (sqm3[:][3])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/99:
print (sqm3[:,3)
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/100:
print (sqm3[:,3])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/101:
print (shape(sqm3))
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/102:
datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt', dtype=datatype,delimiter=' ')
sqm4=genfromtxt('004_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('005_2019-05-25.txt', dtype=datatype)
144/103:
print (shape(sqm3))
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/104:
datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('004_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('005_2019-05-25.txt', dtype=datatype)
144/105:
print (shape(sqm3[0]))
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/106:
print (type(sqm3[0]))
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/107:
datatype=U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float
#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('004_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('005_2019-05-25.txt', dtype=datatype)
144/108:
datatype='str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('004_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('005_2019-05-25.txt', dtype=datatype)
144/109:
print (type(sqm3[0]))
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/110:
datatype='string,string,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('004_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('005_2019-05-25.txt', dtype=datatype)
144/111:
datatype='str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('004_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('005_2019-05-25.txt', dtype=datatype)
144/112:
datatype='str,uint8,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=genfromtxt('003_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('004_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('005_2019-05-25.txt', dtype=datatype)
144/113:
print (type(sqm3[0]))
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/114:
print (type(sqm3))
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/115:
print (shape(sqm3))
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/116:
print (len(sqm3))
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/117:
print (sqm3)
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/118:
datatype='str,uint8,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=loadtxt('003_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('004_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('005_2019-05-25.txt', dtype=datatype)
144/119:
datatype='str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=loadtxt('003_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('004_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('005_2019-05-25.txt', dtype=datatype)
144/120:
print (sqm3)
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/121:
datatype='U12,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=loadtxt('003_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('004_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('005_2019-05-25.txt', dtype=datatype)
144/122:
print (sqm3)
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/123:
datatype='U12,U12,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=loadtxt('003_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('004_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('005_2019-05-25.txt', dtype=datatype)
144/124:
datatype='U12,U10,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=loadtxt('003_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('004_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('005_2019-05-25.txt', dtype=datatype)
144/125:
datatype='U12,U1,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=loadtxt('003_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('004_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('005_2019-05-25.txt', dtype=datatype)
144/126:
datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=loadtxt('003_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('004_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('005_2019-05-25.txt', dtype=datatype)
144/127:
print (sqm3)
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/128:
print (shape(sqm3))
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/129:
print (sqm4)
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/130:
print (shape(sqm4))
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/131:
print (type(sqm4))
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/132:
print (type(sqm4[0]))
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/133:
print (type(sqm4[3]))
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/134:
print (type(sqm4[9]))
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/135:
datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=loadtxt('003_2019-05-25.txt', dtype=datatype, unpack=True)
sqm4=genfromtxt('004_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('005_2019-05-25.txt', dtype=datatype)
144/136:
print (type(sqm4[9]))
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/137:
print (type(sqm3[9]))
print (sqm4[])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/138:
print (type(sqm3[9]))
print (sqm3[0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/139:
print (type(sqm3[9,0]))
print (sqm3[0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/140:
print (type(sqm3[9][0]))
print (sqm3[0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/141:
print (sqm3[9][0])
print (sqm3[0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/142:
print (shape(sqm3))
print (sqm3[0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/143:
def plot_mag(data):
    x=linspace(8.26,29.4,len(data[:,0]))

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,0],label='clear',color='k')
    ax.plot(x,-data[:,1],label='R',color='r')
    ax.plot(x,-data[:,2],label='G',color='g')
    ax.plot(x,-data[:,3],label='B',color='b')
    ax.plot(x,-data[:,4],label='Y',color='y')
    ax.legend()
    
    return
144/144:
plot_mag(sqm3)
plot_mag(sqm4)
plot_mag(sqm5)
# plot_mag((sqm3-sqm5[:-2]))
# plot_mag(sqm4-sqm5[:-3])
144/145:
plot_mag(sqm3)
#plot_mag(sqm4)
#plot_mag(sqm5)
# plot_mag((sqm3-sqm5[:-2]))
# plot_mag(sqm4-sqm5[:-3])
144/146:
def plot_mag(data):
    x=linspace(8.26,29.4,len(data[:,0]))

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:][0],label='clear',color='k')
    ax.plot(x,-data[:,1],label='R',color='r')
    ax.plot(x,-data[:,2],label='G',color='g')
    ax.plot(x,-data[:,3],label='B',color='b')
    ax.plot(x,-data[:,4],label='Y',color='y')
    ax.legend()
    
    return
144/147:
def plot_mag(data):
    x=linspace(8.26,29.4,len(data[:][0]))

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:][0],label='clear',color='k')
    ax.plot(x,-data[:,1],label='R',color='r')
    ax.plot(x,-data[:,2],label='G',color='g')
    ax.plot(x,-data[:,3],label='B',color='b')
    ax.plot(x,-data[:,4],label='Y',color='y')
    ax.legend()
    
    return
144/148:
plot_mag(sqm3)
#plot_mag(sqm4)
#plot_mag(sqm5)
# plot_mag((sqm3-sqm5[:-2]))
# plot_mag(sqm4-sqm5[:-3])
144/149:
print (shape(sqm3))
print (sqm3[:][0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/150:
print (shape(sqm3))
print (sqm3[:][0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/151:
print (shape(sqm3))
print (sqm3[0][:])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/152:
print (shape(sqm3))
print (sqm3[0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/153:
print (shape(sqm3))
print (sqm3[1])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/154:
print (shape(sqm3))
print (sqm3[3])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/155:
print (shape(sqm3))
print (sqm3[5])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/156:
print (shape(sqm3))
print (sqm3[4])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/157:
def plot_mag(data):
    x=linspace(8.26,29.4,len(data[:][0]))

    fig,ax=subplots(1,1)
    ax.plot(x,-data[5],label='clear',color='k')
    ax.plot(x,-data[6],label='R',color='r')
    ax.plot(x,-data[7],label='G',color='g')
    ax.plot(x,-data[8],label='B',color='b')
    ax.plot(x,-data[9],label='Y',color='y')
    ax.legend()
    
    return
144/158:
plot_mag(sqm3)
#plot_mag(sqm4)
#plot_mag(sqm5)
# plot_mag((sqm3-sqm5[:-2]))
# plot_mag(sqm4-sqm5[:-3])
144/159:
print (shape(sqm3))
print (sqm3[0,:])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/160:
print (type(shape(sqm3))
print (sqm3[0,:])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/161:
print (type(shape(sqm3)))
print (sqm3[0,:])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/162:
datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=array(loadtxt('003_2019-05-25.txt', dtype=datatype, unpack=True))
sqm4=genfromtxt('004_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('005_2019-05-25.txt', dtype=datatype)
144/163:
print (type(shape(sqm3)))
print (sqm3[0,:])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/164:
print (type(sqm3))
print (sqm3[0,:])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/165:
datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=loadtxt('003_2019-05-25.txt', dtype=datatype, unpack=True)
sqm4=genfromtxt('004_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('005_2019-05-25.txt', dtype=datatype)
144/166:
print (type(sqm3))
print (sqm3[0,:])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/167:
datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
#sqm3=genfromtxt('003_2019-05-25.txt',dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'))

sqm3=array(loadtxt('003_2019-05-25.txt', dtype=datatype, unpack=True))
sqm4=genfromtxt('004_2019-05-25.txt', dtype=datatype)
sqm4=genfromtxt('005_2019-05-25.txt', dtype=datatype)
144/168:
print (type(sqm3))
print (sqm3[0,:])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/169:
print (type(sqm3))
print (sqm3[0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/170:
print (type(sqm3))
print (sqm3[:,0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/171:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    return data
144/172: sqm3=load_data('003_2019-05-25')
144/173: sqm3=load_data('003_2019-05-23')
144/174: sqm3=load_data('003_2019-05-23.txt')
144/175:
print (type(sqm3))
print (sqm3[:,0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/176:
print (type(sqm3[0]))
print (sqm3[:,0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/177:
print (type(sqm3[0][0]))
print (sqm3[:,0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/178:
print (type(sqm3[0][2]))
print (sqm3[:,0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/179:
print (type(sqm3[0][3]))
print (sqm3[:,0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/180:
print (type(sqm3[0][10]))
print (sqm3[:,0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/181:
print (type(sqm3[0][10]))
print (sqm3[0,10])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/182:
print (type(sqm3[0,10]))
print (sqm3[0,10])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/183:
print (type(sqm3[0,9]))
print (sqm3[0,10])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/184:
print (type(sqm3[9,0]))
print (sqm3[0,10])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/185:
print (type(sqm3[9,0]))
print (sqm3[10,0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/186:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True).reshape(-1,1))
    return data
144/187: sqm3=load_data('003_2019-05-23.txt')
144/188:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data.reshape(-1,1)
    return data
144/189: sqm3=load_data('003_2019-05-23.txt')
144/190:
print (type(sqm3[9,0]))
print (sqm3[10,0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/191:
print (type(sqm3[9,0]))
print (sqm3[0,1])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/192:
print (type(sqm3[9,0]))
print (sqm3[0,2])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/193:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data.reshape(1,-1)
    return data
144/194: sqm3=load_data('003_2019-05-23.txt')
144/195:
print (type(sqm3[9,0]))
print (sqm3[0,2])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/196:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=data[:,none]
    return data
144/197: sqm3=load_data('003_2019-05-23.txt')
144/198:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=data[:,NONE]
    return data
144/199: sqm3=load_data('003_2019-05-23.txt')
144/200:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=data[:,None]
    return data
144/201: sqm3=load_data('003_2019-05-23.txt')
144/202:
print (type(sqm3[9,0]))
print (sqm3[0,2])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/203:
print (type(sqm3[9,0]))
print (sqm3[0,0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/204:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))[:,None]
    return data
144/205: sqm3=load_data('003_2019-05-23.txt')
144/206:
print (type(sqm3[9,0]))
print (sqm3[0,0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/207:
print (type(sqm3[9,0]))
print (sqm3[0,1])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/208:
print (shape(sqm3[9,0]))
print (sqm3[0,1])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/209:
print (shape(sqm3))
print (sqm3[0,1])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/210:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))[:]
    return data
144/211: sqm3=load_data('003_2019-05-23.txt')
144/212:
print (shape(sqm3))
print (sqm3[0,1])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/213:
print (shape(sqm3))
print (sqm3[0,2])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/214:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))[None,:]
    return data
144/215: sqm3=load_data('003_2019-05-23.txt')
144/216:
print (shape(sqm3))
print (sqm3[0,2])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/217:
print (shape(sqm3))
print (sqm3[0,1])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/218:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    return data
144/219: sqm3=load_data('003_2019-05-23.txt')
144/220:
print (shape(sqm3))
print (sqm3[0,])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/221:
print (shape(sqm3))
print (sqm3[0,1])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/222:
print (shape(sqm3))
print (sqm3[0,2])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/223:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data.transpose
    return data
144/224: sqm3=load_data('003_2019-05-23.txt')
144/225:
print (shape(sqm3))
print (sqm3[0,2])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/226:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data.transpose()
    return data
144/227: sqm3=load_data('003_2019-05-23.txt')
144/228:
print (shape(sqm3))
print (sqm3[0,2])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/229:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True)).reshape(0,1)
    return data
144/230: sqm3=load_data('003_2019-05-23.txt')
144/231:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data.reshape((0,1))
    return data
144/232: sqm3=load_data('003_2019-05-23.txt')
144/233:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data.reshape((1,1))
    return data
144/234: sqm3=load_data('003_2019-05-23.txt')
144/235:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data.reshape((-1,1))
    return data
144/236: sqm3=load_data('003_2019-05-23.txt')
144/237:
print (shape(sqm3))
print (sqm3[0,2])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/238:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data.reshape((1,-1))
    return data
144/239: sqm3=load_data('003_2019-05-23.txt')
144/240:
print (shape(sqm3))
print (sqm3[0,2])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/241:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data.reshape((1,0))
    return data
144/242: sqm3=load_data('003_2019-05-23.txt')
144/243:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data.reshape((1,-1))
    return data
144/244:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data.swapaxes()
    return data
144/245: sqm3=load_data('003_2019-05-23.txt')
144/246:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data.swapaxes(0,1)
    return data
144/247: sqm3=load_data('003_2019-05-23.txt')
144/248:
print (shape(sqm3))
print (sqm3[0,2])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/249:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data.swapaxes(1,0)
    return data
144/250: sqm3=load_data('003_2019-05-23.txt')
144/251:
print (shape(sqm3))
print (sqm3[0,2])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/252:
print (shape(sqm3))
print (sqm3[0,1])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/253:
print (shape(sqm3))
print (sqm3[1,0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/254:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data.swapaxes(0,1)
    return data
144/255: sqm3=load_data('003_2019-05-23.txt')
144/256:
print (shape(sqm3))
print (sqm3[1,0])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/257:
print (shape(sqm3))
print (sqm3[0,1])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/258:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data
144/259: sqm3=load_data('003_2019-05-23.txt')
144/260:
print (shape(sqm3))
print (sqm3[0,1])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/261:
print (shape(sqm3))
print (sqm3[0,2])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/262:
print (shape(sqm3))
print (sqm3[0,5])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/263:
print (shape(sqm3))
print (sqm3[0,4])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/264:
print (shape(sqm3))
print (sqm3[0,5])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/265:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    acq_time=[1,:]
    clear_filter=data[7,:]
    red_filter=data[8,:]
    green_filter=data[9,:]
    blue_filter=data[10,:]
    yellow_filter=data[11,:]
    return data, acq_time, clear_filter, red_filter, green_filter, blue_filter, yellow_filter
144/266:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    acq_time=data[1,:]
    clear_filter=data[7,:]
    red_filter=data[8,:]
    green_filter=data[9,:]
    blue_filter=data[10,:]
    yellow_filter=data[11,:]
    return data, acq_time, clear_filter, red_filter, green_filter, blue_filter, yellow_filter
144/267: sqm3=load_data('003_2019-05-23.txt')
144/268:
print (shape(sqm3))
print (sqm3[0,5])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/269:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    acq_time=data[1,:]
    clear_filter=data[7,:]
    red_filter=data[8,:]
    green_filter=data[9,:]
    blue_filter=data[10,:]
    yellow_filter=data[11,:]
    return data, acq_time, clear_filter, red_filter, green_filter, blue_filter, yellow_filter
144/270:
def load_sqm(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    acq_time=data[1,:]
    clear_filter=data[7,:]
    red_filter=data[8,:]
    green_filter=data[9,:]
    blue_filter=data[10,:]
    yellow_filter=data[11,:]
    return data, acq_time, clear_filter, red_filter, green_filter, blue_filter, yellow_filter
144/271: sqm3=load_data('003_2019-05-23.txt')
144/272:
print (shape(sqm3))
print (sqm3[0,5])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/273:
def load_sqm(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data
144/274: sqm3=load_data('003_2019-05-23.txt')
144/275:
print (shape(sqm3))
print (sqm3[0,5])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/276:
def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data
144/277: sqm3=load_data('003_2019-05-23.txt')
144/278:
print (shape(sqm3))
print (sqm3[0,5])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/279:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data
144/280: sqm3=load_data('003_2019-05-23.txt')
144/281:
print (shape(sqm3))
print (sqm3[0,5])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/282:
plot_mag(sqm3)
#plot_mag(sqm4)
#plot_mag(sqm5)
# plot_mag((sqm3-sqm5[:-2]))
# plot_mag(sqm4-sqm5[:-3])
144/283:
def plot_mag(data):
    x=linspace(8.26,29.4,len(data[:][0]))

    fig,ax=subplots(1,1)
    ax.plot(x,-data[5],label='clear',color='k')
    ax.plot(x,-data[6],label='R',color='r')
    ax.plot(x,-data[7],label='G',color='g')
    ax.plot(x,-data[8],label='B',color='b')
    ax.plot(x,-data[9],label='Y',color='y')
    ax.legend()
    
    return
144/284:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
    x=linspace(8.26,29.4,len(data[:][0]))

    fig,ax=subplots(1,1)
    ax.plot(x,-data[5],label='clear',color='k')
    ax.plot(x,-data[6],label='R',color='r')
    ax.plot(x,-data[7],label='G',color='g')
    ax.plot(x,-data[8],label='B',color='b')
    ax.plot(x,-data[9],label='Y',color='y')
    ax.legend()
    
    return
144/285: sqm3=load_data('003_2019-05-23.txt')
144/286:
print (shape(sqm3))
print (sqm3[0,5])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/287:
plot_mag(sqm3)
#plot_mag(sqm4)
#plot_mag(sqm5)
# plot_mag((sqm3-sqm5[:-2]))
# plot_mag(sqm4-sqm5[:-3])
144/288:
print (shape(sqm3))
print (sqm3[0,6])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/289:
print (shape(sqm3))
print (sqm3[0,7])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/290:
print (shape(sqm3))
print (sqm3[0,8])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/291:
plot_mag(sqm3[0,7])
#plot_mag(sqm4)
#plot_mag(sqm5)
# plot_mag((sqm3-sqm5[:-2]))
# plot_mag(sqm4-sqm5[:-3])
144/292:
plot_mag(sqm3[:,7])
#plot_mag(sqm4)
#plot_mag(sqm5)
# plot_mag((sqm3-sqm5[:-2]))
# plot_mag(sqm4-sqm5[:-3])
144/293:
plot_mag(sqm3[:,1],sqm3[:,7])
#plot_mag(sqm4)
#plot_mag(sqm5)
# plot_mag((sqm3-sqm5[:-2]))
# plot_mag(sqm4-sqm5[:-3])
144/294:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,1]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    
    return
144/295: sqm3=load_data('003_2019-05-23.txt')
144/296:
print (shape(sqm3))
print (sqm3[0,8])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/297:
plot_mag(sqm3[:,1],sqm3[:,7])
#plot_mag(sqm4)
#plot_mag(sqm5)
# plot_mag((sqm3-sqm5[:-2]))
# plot_mag(sqm4-sqm5[:-3])
144/298:
plot_mag(sqm3[:,7])
#plot_mag(sqm4)
#plot_mag(sqm5)
# plot_mag((sqm3-sqm5[:-2]))
# plot_mag(sqm4-sqm5[:-3])
144/299:
plot_mag(sqm3)
#plot_mag(sqm4)
#plot_mag(sqm5)
# plot_mag((sqm3-sqm5[:-2]))
# plot_mag(sqm4-sqm5[:-3])
144/300: plot_mag(sqm3)
144/301:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    
    return
144/302: sqm3=load_data('003_2019-05-23.txt')
144/303:
print (shape(sqm3))
print (sqm3[0,8])
print (sqm3[0][7],sqm3[1][7],sqm3[0][7]+sqm3[1][7])
144/304: plot_mag(sqm3)
144/305:
from pylab import *
from matplotlib import *
import datetime as dt
144/306: shape(sqm3)
144/307:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1]))
    
    return
144/308:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/309: sqm3=load_data('003_2019-05-23.txt')
144/310: dt.
144/311: plot_mag(sqm3)
144/312: plot_mag(sqm3)
144/313:
from pylab import *
from matplotlib import *
import datetime as dt
144/314: dt.datetime(sqm[:,0])
144/315: dt.datetime(sqm3[:,0])
144/316: dt.datetime(sqm3[0,1])
144/317: dt.time(sqm3[0,1])
144/318: dt.time(int(sqm3[0,1]))
144/319: type(sqm3[0,1])
144/320:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='U12,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/321: sqm3=load_data('003_2019-05-23.txt')
144/322:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/323: sqm3=load_data('003_2019-05-23.txt')
144/324: print (dt.time)
144/325: dt.time
144/326: dt.time()
144/327: time.clock()
144/328: time.clock()
144/329: plot(sqm3[:,1],sqm3[:,7])
144/330: plot(sqm3[:,1],sqm3[:,7],'.')
144/331: plot(sqm3[:,1],sqm3[:,7],'--')
144/332: plot(sqm3[:,1],sqm3[:-20,7],'--')
144/333: plot(sqm3[:,1],sqm3[:20,7],'--')
144/334: plot(sqm3[:-20,1],sqm3[:-20,7],'--')
144/335: plot(sqm3[:1,1],sqm3[:1,7],'--')
144/336: plot(sqm3[1:,1],sqm3[1:,7],'--')
144/337: plot(sqm3[10:,1],sqm3[10:,7],'--')
144/338: plot(sqm3[:10,1],sqm3[:10,7],'--')
144/339: plot(sqm3[:10,1],sqm3[:10,7],'--').autofmt_xdate()
144/340:
fig=subplot
fig.plot(sqm3[:10,1],sqm3[:10,7],'--')
autofmt_xdate()
144/341:
fig,ax=subplot
ax.plot(sqm3[:10,1],sqm3[:10,7],'--')
autofmt_xdate()
144/342:
fig=subplot
plot(sqm3[:10,1],sqm3[:10,7],'--')
autofmt_xdate()
144/343:
fig=subplot
plot(sqm3[:10,1],sqm3[:10,7],'--')
fig.autofmt_xdate()
144/344:
fig=subplots(0,1)
plot(sqm3[:10,1],sqm3[:10,7],'--')
fig.autofmt_xdate()
144/345: plt.plot(sqm3[:10,1],sqm3[:10,7],'--')
144/346:
fig=figure()
fig.plot(sqm3[:10,1],sqm3[:10,7],'--')
144/347:
plot(sqm3[:10,1],sqm3[:10,7],'--')
xticks(rotation=90)
144/348:
plot(sqm3[:100,1],sqm3[:100,7],'--')
xticks(rotation=90)
144/349:
plot(sqm3[:,1],sqm3[:,7],'--')
xticks(rotation=90)
144/350: sqm3[:,1]
144/351:
plot(sqm3[:,1],sqm3[:,7],'--')
xticks(rotation=90)
set_xtickslabel(sqm3[:,1])
144/352:
plot(sqm3[:,1],sqm3[:,7],'--')
xticks(rotation=90)
set_xticklabels(sqm3[:,1])
144/353:
plot(sqm3[:,1],sqm3[:,7],'--')
xticks(rotation=90)
set_xticklabel(sqm3[:,1])
144/354:
plot(sqm3[:,1],sqm3[:,7],'--')
xticks(sqm3[:,1],rotation=90)
144/355:
plot(sqm3[:,1],sqm3[:,7],'--')

xs=linspace(0,len(sqm3[:,1]))
xticks(sqm3[xs,1],rotation=90)
144/356:
plot(sqm3[:,1],sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]))
xticks(sqm3[xs,1],rotation=90)
144/357:
plot(sqm3[:,1],sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
xticks(sqm3[xs,1],rotation=90)
144/358: len(sqm3[:,1])
144/359:
plot(sqm3[:,1],sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
xticks(sqm3[xs,1],rotation=90)
144/360:
len(sqm3[:,1])
print xs
144/361:
len(sqm3[:,1])
xs
144/362: xs
144/363: sqm3[:,1]
144/364:
fig,ax=subplots(1,1)

plot(sqm3[:,1],sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
xticks(sqm3[xs,1],rotation=90)
144/365:
fig,ax=subplots(1,1)

ax.plot(sqm3[:,1],sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
ax.set_xticklabels(sqm3[xs,1],rotation=90)
144/366: xs
144/367: len(sqm3[:,1])
144/368:
fig,ax=subplots(1,1)

ax.plot(len(sqm3[:,1]),sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
ax.set_xticklabels(sqm3[xs,1],rotation=90)
144/369:
fig,ax=subplots(1,1)

ax.plot(arange(len(sqm3[:,1])),sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
ax.set_xticklabels(sqm3[xs,1],rotation=90)
144/370: sqm3[:,1]
144/371:
fig,ax=subplots(1,1)

ax.plot(arange(len(sqm3[:,1])),-sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
ax.set_xticklabels(sqm3[xs,1],rotation=90)
144/372: type(sqm3[0,1])
144/373: type(sqm3[0,2])
144/374: type(sqm3[0,3])
144/375: type(sqm3[0,7])
144/376: (sqm3[0,7])
144/377:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    #datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/378: sqm3=load_data('003_2019-05-23.txt')
144/379:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/380: sqm3=load_data('003_2019-05-23.txt')
144/381: (sqm3[0,7])
144/382:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/383: sqm3=load_data('003_2019-05-23.txt')
144/384: (sqm3[0,7])
144/385: type(sqm3[0,7])
144/386:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/387: sqm3=load_data('003_2019-05-23.txt')
144/388:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype))
    #data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/389: sqm3=load_data('003_2019-05-23.txt')
144/390: type(sqm3[0,7])
144/391: type(sqm3[0])
144/392:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/393: sqm3=load_data('003_2019-05-23.txt')
144/394: type(sqm3[0])
144/395: type(sqm3[0,7])
144/396: shape(sqm3[0,7])
144/397: shape(sqm3)
144/398:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3:16]=float(data[:,3:16])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/399: sqm3=load_data('003_2019-05-23.txt')
144/400:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3:16]=array(data[:,3:16])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/401: sqm3=load_data('003_2019-05-23.txt')
144/402: shape(sqm3)
144/403: stype(sqm3)
144/404: type(sqm3)
144/405: type(sqm3[:,7])
144/406:
type(sqm3[:,7])
sqm3[:,7]
144/407:
type(sqm3[0,7])
sqm3[0,7]
144/408:
print (type(sqm3[0,7]))
sqm3[0,7]
144/409:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='|U8,|U8,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3:16]=array(data[:,3:16])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/410: sqm3=load_data('003_2019-05-23.txt')
144/411: type(sqm3[0,7])
144/412:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=(|U8,|U8,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3:16]=array(data[:,3:16])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/413:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=[|U8,|U8,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3:16]=array(data[:,3:16])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/414:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=[U8,U8,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3:16]=array(data[:,3:16])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/415: sqm3=load_data('003_2019-05-23.txt')
144/416:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3:16]=array(data[:,3:16])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/417: sqm3=load_data('003_2019-05-23.txt')
144/418:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=[|U16,|U16,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3:16]=array(data[:,3:16])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/419:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=[string,string,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3:16]=array(data[:,3:16])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/420: sqm3=load_data('003_2019-05-23.txt')
144/421:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3:16]=array(data[:,3:16])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/422: sqm3=load_data('003_2019-05-23.txt')
144/423:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3:16]=array(data[:,3:16])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/424: sqm3=load_data('003_2019-05-23.txt')
144/425: type(sqm3[0,7])
144/426:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3:16]=array(data[:,3:16])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/427: sqm3=load_data('003_2019-05-23.txt')
144/428:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=[float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3:16]=array(data[:,3:16])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/429: sqm3=load_data('003_2019-05-23.txt')
144/430:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=[|S11,|S10,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3:16]=array(data[:,3:16])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/431:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='|S11,|S10,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3:16]=array(data[:,3:16])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/432: sqm3=load_data('003_2019-05-23.txt')
144/433: type(sqm3[0,7])
144/434: type(sqm3[0,2])
144/435: type(sqm3[0,1])
144/436:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3:16]=array(data[:,3:16])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/437: sqm3=load_data('003_2019-05-23.txt')
144/438:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3:16]=array(data[:,3:16])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/439: sqm3=load_data('003_2019-05-23.txt')
144/440:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=[S11,S10,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3:16]=array(data[:,3:16])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/441: sqm3=load_data('003_2019-05-23.txt')
144/442:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=['S11','S10',float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3:16]=array(data[:,3:16])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/443: sqm3=load_data('003_2019-05-23.txt')
144/444:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=['S11','S10','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float',]
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3:16]=array(data[:,3:16])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/445: sqm3=load_data('003_2019-05-23.txt')
144/446:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=['S11','S10','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float']
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3:16]=array(data[:,3:16])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/447: sqm3=load_data('003_2019-05-23.txt')
144/448:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=['S11','S11','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float']
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3:16]=array(data[:,3:16])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/449: sqm3=load_data('003_2019-05-23.txt')
144/450:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=['S11','S11','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float']
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/451: sqm3=load_data('003_2019-05-23.txt')
144/452:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=('S11','S11','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float')
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/453: sqm3=load_data('003_2019-05-23.txt')
144/454:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='S11','S11','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/455: sqm3=load_data('003_2019-05-23.txt')
144/456: type(datatype)
144/457: print datatype
144/458: print (datatype)
144/459: sqm3=load_data('003_2019-05-23.txt')
144/460:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='S11','S11','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/461: print (datatype)
144/462: sqm3=load_data('003_2019-05-23.txt')
144/463: print (datatype)
144/464:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='S11','S11','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float'
    data=array(genfromtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/465: print (datatype)
144/466: sqm3=load_data('003_2019-05-23.txt')
144/467:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='S11','S11','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float'
    data=array(genfromtxt(filename, dtype=datatype, unpack=True))
    #data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/468: print (datatype)
144/469: sqm3=load_data('003_2019-05-23.txt')
144/470: type(sqm3[0,7])
144/471: sqm3
144/472: shape(sqm3)
144/473:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='S11','S11','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float'
    data=array(genfromtxt(filename, dtype=None, unpack=True))
    #data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/474: print (datatype)
144/475: sqm3=load_data('003_2019-05-23.txt')
144/476: shape(sqm3)
144/477:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='S11','S11','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float'
    data=array(genfromtxt(filename, delimiter=' ',dtype=None, unpack=True))
    #data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/478: print (datatype)
144/479: sqm3=load_data('003_2019-05-23.txt')
144/480: shape(sqm3)
144/481:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=('S11','S11','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float')
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/482: print (datatype)
144/483: sqm3=load_data('003_2019-05-23.txt')
144/484:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=('S11','S11','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float')
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data, datatype

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/485: sqm3,sqm3_type=load_data('003_2019-05-23.txt')
144/486:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=('S11','S11','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float')
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/487: print (datatype
144/488: datatype
144/489:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=('|S11','|S11','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float')
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/490: datatype
144/491: sqm3,sqm3_type=load_data('003_2019-05-23.txt')
144/492: sqm3=load_data('003_2019-05-23.txt')
144/493:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=(S11,S11,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/494: datatype
144/495: sqm3=load_data('003_2019-05-23.txt')
144/496:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=(str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/497: datatype
144/498: sqm3=load_data('003_2019-05-23.txt')
144/499:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/500: datatype
144/501: sqm3=load_data('003_2019-05-23.txt')
144/502: datatype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
144/503:
datatype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
datatype
144/504:
datatype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
type(datatype)
144/505:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
    data=array(genfromtxt(filename, dtype=None, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/506: datatype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
144/507: sqm3=load_data('003_2019-05-23.txt')
144/508:
sqm3=load_data('003_2019-05-23.txt')
shape(sqm3)
144/509:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
    data=array(genfromtxt(filename, dtype=None, unpack=True))
    #data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/510: datatype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
144/511:
sqm3=load_data('003_2019-05-23.txt')
shape(sqm3)
144/512:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
    data=array(loadtxt(filename, dtype=formats:datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/513:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
    data=array(loadtxt(filename, dtype='formats':datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/514:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
    data=array(loadtxt(filename, dtype='formats': datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/515:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
    data=array(loadtxt(filename, dtype={'formats': datatype}, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/516: datatype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
144/517:
sqm3=load_data('003_2019-05-23.txt')
shape(sqm3)
144/518:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=['|S11','|S11',float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/519: datatype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
144/520:
sqm3=load_data('003_2019-05-23.txt')
shape(sqm3)
144/521:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=('|S11','|S11',float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/522: datatype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
144/523:
sqm3=load_data('003_2019-05-23.txt')
shape(sqm3)
144/524:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='|S11','|S11',float,float,float,float,float,float,float,float,float,float,float,float,float,float,float
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/525: datatype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
144/526:
sqm3=load_data('003_2019-05-23.txt')
shape(sqm3)
144/527:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='|S11','|S11',float,float,float,float,float,float,float,float,float,float,float,float,float,float,float
    data=(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/528: datatype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
144/529:
sqm3=load_data('003_2019-05-23.txt')
shape(sqm3)
144/530:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='|S11','|S11',float,float,float,float,float,float,float,float,float,float,float,float,float,float,float
    data=(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/531: datatype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
144/532:
sqm3=load_data('003_2019-05-23.txt')
shape(sqm3)
145/1:
from pylab import *
from matplotlib import *
145/2:
text_str='1 2 3 4'

data=loadtxt(text_str, unpack=True)
144/533:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='|S11,|S11,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/534: datatype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
144/535:
sqm3=load_data('003_2019-05-23.txt')
shape(sqm3)
144/536: shape(sqm3)
144/537:
fig,ax=subplots(1,1)

ax.plot(arange(len(sqm3[:,1])),-sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
ax.set_xticklabels(sqm3[xs,1],rotation=90)
144/538:
fig,ax=subplots(1,1)

ax.plot(arange(len(sqm3[:,1])),sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
ax.set_xticklabels(sqm3[xs,1],rotation=90)
144/539: sqm3[0,0]
144/540: type(sqm3[0,0])
144/541: type(sqm3[0,7])
144/542: type(sqm3[7,0])
144/543:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='|S4,|S11,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/544:
sqm3=load_data('003_2019-05-23.txt')
shape(sqm3)
144/545: type(sqm3[7,0])
144/546:
fig,ax=subplots(1,1)

ax.plot(arange(len(sqm3[:,1])),sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
ax.set_xticklabels(sqm3[xs,1],rotation=90)
144/547: sqm3[7,0]
144/548: sqm3[10,0]
144/549:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='|S11,|S11,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/550:
sqm3=load_data('003_2019-05-23.txt')
shape(sqm3)
144/551: sqm3[,0]
144/552: sqm3[17,0]
144/553: sqm3[0,17]
144/554: sqm3[0,16]
144/555: sqm3[0,10]
144/556:
fig,ax=subplots(1,1)

ax.plot(arange(len(sqm3[:,1])),-sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
ax.set_xticklabels(sqm3[xs,1],rotation=90)
144/557:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='|S11,|S11,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/558:
sqm3=load_data('003_2019-05-23.txt')
shape(sqm3)
144/559: sqm3[0,10]
144/560:
fig,ax=subplots(1,1)

ax.plot(arange(len(sqm3[:,1])),sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
ax.set_xticklabels(sqm3[xs,1],rotation=90)
144/561:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype='U11,U10,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/562:
sqm3=load_data('003_2019-05-23.txt')
shape(sqm3)
144/563: sqm3[0,10]
144/564:
fig,ax=subplots(1,1)

ax.plot(arange(len(sqm3[:,1])),sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
ax.set_xticklabels(sqm3[xs,1],rotation=90)
144/565: type(sqm3[0,10])
144/566:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=['U11,U10,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float']
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/567:
sqm3=load_data('003_2019-05-23.txt')
shape(sqm3)
144/568: type(sqm3[0,10])
144/569:
fig,ax=subplots(1,1)

ax.plot(arange(len(sqm3[:,1])),sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
ax.set_xticklabels(sqm3[xs,1],rotation=90)
144/570:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=['U11','U10','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float']
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/571:
sqm3=load_data('003_2019-05-23.txt')
shape(sqm3)
144/572:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=['U15','U15','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float']
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/573:
sqm3=load_data('003_2019-05-23.txt')
shape(sqm3)
144/574:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=['str','str','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float']
    data=array(loadtxt(filename, dtype=datatype, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/575:
sqm3=load_data('003_2019-05-23.txt')
shape(sqm3)
144/576:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=['str','str','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float']
    data=array(loadtxt(filename, dtype=str, unpack=True))
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/577:
sqm3=load_data('003_2019-05-23.txt')
shape(sqm3)
144/578: type(sqm3[0,10])
144/579:
fig,ax=subplots(1,1)

ax.plot(arange(len(sqm3[:,1])),sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
ax.set_xticklabels(sqm3[xs,1],rotation=90)
144/580:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=['str','str','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float']
    data=array(loadtxt(filename, dtype=str, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3]=float(data[:,3])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/581:
sqm3=load_data('003_2019-05-23.txt')
shape(sqm3)
144/582:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=['str','str','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float']
    data=array(loadtxt(filename, dtype=str, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3]=pylab.float(data[:,3])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/583:
sqm3=load_data('003_2019-05-23.txt')
shape(sqm3)
144/584:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=['str','str','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float']
    data=array(loadtxt(filename, dtype=str, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3]=numpyfloat(data[:,3])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/585:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=['str','str','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float']
    data=array(loadtxt(filename, dtype=str, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3]=numpy.float(data[:,3])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/586:
sqm3=load_data('003_2019-05-23.txt')
shape(sqm3)
144/587:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=['str','str','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float']
    data=array(loadtxt(filename, dtype=str, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3]=asarray(data[:,3])
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/588:
sqm3=load_data('003_2019-05-23.txt')
shape(sqm3)
144/589: type(sqm3[0,10])
144/590:
fig,ax=subplots(1,1)

ax.plot(arange(len(sqm3[:,1])),sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
ax.set_xticklabels(sqm3[xs,1],rotation=90)
144/591:
fig,ax=subplots(1,1)

ax.plot(arange(len(sqm3[:,1])),sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
ax.set_xticklabels(sqm3[xs,1],rotation=90)
ax.set_yticklabels(sqm3[xs,7])
144/592:
fig,ax=subplots(1,1)

ax.plot(arange(len(sqm3[:,1])),sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
ax.set_xticklabels(0,20,rotation=90)
ax.set_yticklabels(sqm3[xs,7])
144/593:
fig,ax=subplots(1,1)

ax.plot(arange(len(sqm3[:,1])),sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
ax.set_xticklabels(linspace(0,20,10),rotation=90)
ax.set_yticklabels(sqm3[xs,7])
144/594:
fig,ax=subplots(1,1)

ax.plot(arange(len(sqm3[:,1])),sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
ax.set_xticklabels(xs,rotation=90)
ax.set_yticklabels(linspace(0,20,10))
144/595:
fig,ax=subplots(1,1)

ax.plot(arange(len(sqm3[:,1])),sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
ax.set_xticklabels(sqm3[xs,1],rotation=90)
ax.set_yticklabels(linspace(0,20,10))
144/596:
sqm3=load_data('005_2019-05-27.txt')
shape(sqm3)
144/597: type(sqm3[0,10])
144/598:
fig,ax=subplots(1,1)

ax.plot(arange(len(sqm3[:,1])),sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
ax.set_xticklabels(sqm3[xs,1],rotation=90)
ax.set_yticklabels(linspace(0,20,10))
144/599:
fig,ax=subplots(1,1)

ax.plot(arange(len(sqm3[:,1])),sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
ax.set_xticklabels(sqm3[xs,1],rotation=90)
ax.set_yticklabels(linspace(0,60,10))
144/600:
fig,ax=subplots(1,1)

ax.plot(arange(len(sqm3[:,1])),sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
#ax.set_xticklabels(sqm3[xs,1],rotation=90)
ax.set_yticklabels(linspace(0,,10))
144/601:
fig,ax=subplots(1,1)

ax.plot(arange(len(sqm3[:,1])),sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
#ax.set_xticklabels(sqm3[xs,1],rotation=90)
#ax.set_yticklabels(linspace(0,,10))
144/602: sqm3
144/603:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=['str','str','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float']
    data=array(loadtxt(filename, dtype=str, unpack=True))
    data=swapaxes(data,0,1)
    data[:,3].astype('float64')
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/604:
sqm3=load_data('005_2019-05-27.txt')
shape(sqm3)
144/605: sqm3
144/606:
sqm3=load_data('005_2019-05-27.txt')
shape(sqm3)
type (sqm3)
type (sqm3[0,7])
144/607:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3))
print (type (sqm3[0,7]))
144/608:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=['str','str','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float']
    data=loadtxt(filename, dtype=str, unpack=True)
    data=swapaxes(data,0,1)
    data[:,3].astype('float64')
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/609:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3))
print (type (sqm3[0,7]))
144/610:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=['str','str','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float']
    data=loadtxt(filename, dtype=str, unpack=True)
    data=swapaxes(data,0,1)
    data[:,3]=data[:,3].astype('float64')
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/611:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3))
print (type (sqm3[0,7]))
144/612: sqm3
144/613:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=['str','str','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float']
    data=loadtxt(filename, dtype=str, unpack=True)
    data=swapaxes(data,0,1)
    data[:,3]=data[:,3].astype('float64')
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/614:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3))
print (type (sqm3[0,7]))
144/615:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3[:,7]))
print (type (sqm3[0,7]))
144/616:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3[3,7]))
print (type (sqm3[0,7]))
144/617:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype={'str','str','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float'}
    data=loadtxt(filename, dtype=str, unpack=True)
    data=swapaxes(data,0,1)
    data[:,3]=data[:,3].astype('float64')
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/618:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3[0,7]))
144/619: sqm3
144/620:
fig,ax=subplots(1,1)

ax.plot(arange(len(sqm3[:,1])),sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
#ax.set_xticklabels(sqm3[xs,1],rotation=90)
#ax.set_yticklabels(linspace(0,,10))
144/621:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype={'str','str','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float'}
    data=loadtxt(filename, dtype=datatype, unpack=True)
    data=swapaxes(data,0,1)
    data[:,3]=data[:,3].astype('float64')
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/622:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3[0,7]))
144/623: sqm3
144/624:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    datatype=''str','str','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float''
    data=loadtxt(filename, dtype=datatype, unpack=True)
    data=swapaxes(data,0,1)
    data[:,3]=data[:,3].astype('float64')
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/625:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    #datatype='str','str','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float'
    datatype='str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'
    data=loadtxt(filename, dtype=datatype, unpack=True)
    data=swapaxes(data,0,1)
    data[:,3]=data[:,3].astype('float64')
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/626:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3[0,7]))
144/627:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    #datatype='str','str','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float'
    datatype=str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float
    data=loadtxt(filename, dtype=datatype, unpack=True)
    data=swapaxes(data,0,1)
    data[:,3]=data[:,3].astype('float64')
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/628:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3[0,7]))
144/629:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    #datatype='str','str','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float'
    datatype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float]
    data=loadtxt(filename, dtype=datatype, unpack=True)
    data=swapaxes(data,0,1)
    data[:,3]=data[:,3].astype('float64')
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/630:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3[0,7]))
144/631:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    #datatype='str','str','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float'
    datatype=['str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float']
    data=loadtxt(filename, dtype=datatype, unpack=True)
    data=swapaxes(data,0,1)
    data[:,3]=data[:,3].astype('float64')
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/632:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3[0,7]))
144/633:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    #datatype='str','str','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float'
    datatype=['U12,U12,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float']
    data=loadtxt(filename, dtype=datatype, unpack=True)
    data=swapaxes(data,0,1)
    data[:,3]=data[:,3].astype('float64')
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/634:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3[0,7]))
144/635: dtest=loadtxt('test_file.rtf')
144/636: dtest=loadtxt('test_file.txt')
144/637: dtest=loadtxt('test_file.txt')
144/638: dtest
144/639: dtest=loadtxt('test_file.txt',dtype=float)
144/640: dtest
144/641:
print (dtest)
print (dtest[1])
144/642:
print (dtest)
print (shape(dtest))
144/643: dtest=loadtxt('test_file.txt',dtype=str)
144/644:
print (dtest)
print (shape(dtest))
144/645:
print (dtest)
print (type(dtest))
144/646:
print (dtest)
print (type(dtest[0]))
144/647:
print (dtest)
print (type(dtest[0,0]))
144/648: dtest=loadtxt('test_file.txt',dtype=float)
144/649:
print (dtest)
print (type(dtest[0,0]))
144/650: dtest=loadtxt('test_file.txt',dtype='str,float,float,float')
144/651:
print (dtest)
print (type(dtest[0,0]))
144/652:
print (dtest)
print (type(dtest[0]))
144/653:
print (dtest)
print (type(dtest[1]))
144/654:
print (dtest)
print (type(dtest[2]))
144/655:
print (dtest)
print (type(dtest[1,1))
144/656:
print (dtest)
print (type(dtest[1,1]))
144/657:
print (dtest)
print (type(dtest))
144/658: dtest=loadtxt('test_file.txt',dtype='str,float,str,float')
144/659:
print (dtest)
print (type(dtest))
144/660: dtest=loadtxt('test_file.txt',dtype='str,float,str,float')
144/661:
print (dtest)
print (type(dtest))
144/662: dtest=loadtxt('test_file.txt',dtype='U3,float,str,float')
144/663:
print (dtest)
print (type(dtest))
144/664: dtest=loadtxt('test_file.txt',dtype='U3,float,float,float')
144/665:
print (dtest)
print (type(dtest))
144/666:
print (dtest)
print (type(dtest[0]))
144/667:
print (dtest)
print (type(dtest[1]))
144/668:
print (dtest)
print (shape(dtest))
print (type(dtest[1]))
144/669:
print (dtest)
print (shape(list(dtest)))
print (type(dtest[1]))
144/670:
print (dtest)
print (shape(array(dtest)))
print (type(dtest[1]))
144/671:
mylist=[1,2,3,4,'tes']
print (mylist)
print (type(mylist))
144/672: dtest=loadtxt('test_file.txt',dtype='str,float,float,float')
144/673:
print (dtest)
print (shape(dtest))
print (type(dtest[1]))
144/674: dtest=loadtxt('test_file.txt',dtype='float,float,float,float')
144/675: dtest=loadtxt('test_file.txt',dtype='float,float,float,float')
144/676:
print (dtest)
print (shape(dtest))
print (type(dtest[1]))
144/677: dtest=loadtxt('test_file.txt')
144/678:
print (dtest)
print (shape(dtest))
print (type(dtest[1]))
144/679: dtest=loadtxt('test_file.txt',dtype='float,float,float,float')
144/680:
print (dtest)
print (shape(dtest))
print (type(dtest[1]))
144/681: dtest=loadtxt('test_file.txt',dtype='float,float,float,float',unpack=True)
144/682:
print (dtest)
print (shape(dtest))
print (type(dtest[1]))
144/683: dtest=loadtxt('test_file.txt',dtype='str,float,float,float',unpack=True)
144/684:
print (dtest)
print (shape(dtest))
print (type(dtest[1]))
144/685:
print (dtest)
print (shape(dtest))
print (type(dtest[1]))
print (dtest[0])
144/686:
print (dtest)
print (shape(dtest))
print (type(dtest[1]))
print (dtest[1])
144/687:
print (dtest)
print (shape(dtest))
print (type(dtest[1]))
print (dtest[1,1])
144/688:
print (dtest)
print (shape(dtest))
print (type(dtest[1]))
print (dtest[1])
144/689:
print (dtest)
dtest.swapaxes(0,1)
print (shape(dtest))
print (type(dtest[1]))
print (dtest[1])
144/690:
print (dtest)
dtest=swapaxes(dtest,0,1)
print (shape(dtest))
print (type(dtest[1]))
print (dtest[1])
144/691:
print (dtest)
dtest=swapaxes(dtest,0,1)
print (shape(dtest))
print (type(dtest[1]))
print (dtest[1,1])
144/692:
print (dtest)
dtest=swapaxes(dtest,0,1)
print (shape(dtest))
print (type(dtest[1]))
print (dtest[1,:])
144/693:
print (dtest)
dtest=swapaxes(dtest,0,1)
print (shape(dtest))
print (type(dtest[1]))
print (dtest[1,1])
144/694:
print (dtest)
dtest=swapaxes(dtest,0,1)
print (shape(dtest))
print (type(dtest[1]))
print (dtest[1,2])
144/695:
print (dtest)
dtest=swapaxes(dtest,0,1)
print (shape(dtest))
print (type(dtest[1]))
print (dtest[1,0])
144/696:
print (dtest)
dtest=swapaxes(dtest,0,1)
print (shape(dtest))
print (type(dtest[1]))
print (type(dtest[1,0]))
144/697:
print (dtest)
dtest=swapaxes(dtest,0,1)
print (shape(dtest))
print (type(dtest[1]))
print (type(dtest[1,1]))
144/698:
print (dtest)
dtest=swapaxes(dtest,0,1)
print (shape(dtest))
print (type(dtest[1]))
print (type(dtest[1,2]))
144/699:
print (dtest)
dtest=swapaxes(dtest,0,1)
print (shape(dtest))
print (type(dtest[1]))
print (type(dtest[1]))
144/700:
print (dtest)
dtest=swapaxes(dtest,0,1)
print (shape(dtest))
print (type(dtest[1]))
print (type(dtest[2]))
144/701:
print (dtest)
dtest=swapaxes(dtest,0,1)
print (shape(dtest))
print (type(dtest[1]))
print (type(dtest[1,2]))
144/702:
print (dtest)
dtest=swapaxes(dtest,0,1)
print (shape(dtest))
print (type(dtest[1]))
print (type(dtest[1,2]))
144/703:
print (dtest)
dtest=swapaxes(dtest,0,1)
print (shape(dtest))
print (type(dtest[1]))
print (type(dtest[1,2]))
144/704:
print (dtest)
dtest=swapaxes(dtest,0,1)
print (shape(dtest))
print (type(dtest[1]))
print (type(dtest[1,2]))
144/705:
dtest=loadtxt('test_file.txt',dtype='str,float,float,float',unpack=True)
dtest=swapaxes(dtest,0,1)
144/706: dtest
144/707:
dtest=loadtxt('test_file.txt',dtype='U12,float,float,float',unpack=True)
dtest=swapaxes(dtest,0,1)
144/708: dtest
144/709:
dtest=loadtxt('test_file.txt',dtype='|U12,float,float,float',unpack=True)
dtest=swapaxes(dtest,0,1)
144/710: dtest
144/711:
dtest=loadtxt('test_file.txt',dtype='U1,float,float,float',unpack=True)
dtest=swapaxes(dtest,0,1)
144/712: dtest
144/713:
dtest=loadtxt('test_file.txt',dtype='float,float,float,float',unpack=True)
dtest=swapaxes(dtest,0,1)
144/714: dtest
144/715: dtest[0]
144/716: dtest[0,2]
144/717: type(dtest[0,2])
144/718:
dtest=genfromtxt('test_file.txt',dtype='float,float,float,float',unpack=True)
dtest=swapaxes(dtest,0,1)
144/719: type(dtest[0,2])
144/720: dtest=genfromtxt('test_file.txt',dtype='float,float,float,float',unpack=True)
144/721: type(dtest)
144/722:
type(dtest)
print (dtest)
144/723: dtest=genfromtxt('test_file.txt',dtype=None,unpack=True)
144/724:
type(dtest)
print (dtest)
144/725: dtest=genfromtxt('test_file.txt',dtype=None,unpack=True)
144/726:
type(dtest)
print (dtest)
144/727:
type(dtest)
print (dtest, len(dtest))
144/728:
print(type(dtest))
print (dtest, len(dtest))
144/729:
print(type(dtest))
print (dtest, len(dtest), type(dtest[0]))
144/730: dtest=genfromtxt('test_file.txt',dtype=[str,float,float,float],unpack=True)
144/731:
print(type(dtest))
print (dtest, len(dtest), type(dtest[0]))
144/732: dtest=genfromtxt('test_file.txt',dtype=[float,float,float,float],unpack=True)
144/733:
print(type(dtest))
print (dtest, len(dtest), type(dtest[0]))
144/734: dtest=genfromtxt('test_file.txt',dtype=[float,float,float,float],unpack=True)
144/735:
print(type(dtest))
print (dtest, len(dtest), type(dtest[0]))
144/736: dtest=genfromtxt('test_file.txt',dtype=[float,float,float,float],unpack=True)
144/737:
print(type(dtest))
print (dtest, len(dtest), type(dtest[0]))
144/738: dtest=genfromtxt('test_file.txt',dtype=[float,float,float,float])
144/739:
print(type(dtest))
print (dtest, len(dtest), type(dtest[0]))
144/740: dtest=genfromtxt('test_file.txt',dtype=None)
144/741:
print(type(dtest))
print (dtest, len(dtest), type(dtest[0]))
144/742: dtest=genfromtxt('test_file.txt',dtype=None)
144/743:
print(type(dtest))
print (dtest, len(dtest), type(dtest[0]))
144/744:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data_dates=loadtxt(filename, usecols=(0,1), unpack=True)
    data=swapaxes(data,0,1)
    data[:,3]=data[:,3].astype('float64')
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/745:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3[0,7]))
144/746:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data_dates=loadtxt(filename, usecols=(0,1), unpack=True)
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/747:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3[0,7]))
144/748:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/749:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3[0,7]))
144/750:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data=loadtxt(filename, usecols=arange(2,17), unpack=True)
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,7],label='clear',color='k')
    ax.plot(x,-data[:,8],label='R',color='r')
    ax.plot(x,-data[:,9],label='G',color='g')
    ax.plot(x,-data[:,10],label='B',color='b')
    ax.plot(x,-data[:,11],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/751:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3[0,7]))
144/752: sqm3
144/753:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data=loadtxt(filename, usecols=arange(2,17), unpack=True)
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/754:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3[0,7]))
144/755: sqm3
144/756:
fig,ax=subplots(1,1)

ax.plot(arange(len(sqm3[:,1])),sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
#ax.set_xticklabels(sqm3[xs,1],rotation=90)
#ax.set_yticklabels(linspace(0,,10))
144/757:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3[0,7]))
print (arange(2,17))
144/758:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3[0,7]))
144/759:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/760:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3[0,7]))
144/761: sqm3
144/762:
fig,ax=subplots(1,1)

ax.plot(arange(len(sqm3[:,1])),sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
#ax.set_xticklabels(sqm3[xs,1],rotation=90)
#ax.set_yticklabels(linspace(0,,10))
144/763:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3[0,7]))
print (list(arange(2,17)))
144/764:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data,0,1)
    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/765:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3[0,7]))
print (list(arange(2,17)))
144/766:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.title(str(data[0,0]+'-'+str(data[0,-1])))
    
    return
144/767:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3[0,7]))
print (list(arange(2,17)))
144/768: sqm3
144/769:
fig,ax=subplots(1,1)

ax.plot(arange(len(sqm3[:,1])),sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
#ax.set_xticklabels(sqm3[xs,1],rotation=90)
#ax.set_yticklabels(linspace(0,,10))
144/770:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.title(str(data_dates[0,0]+'-'+str(data_dates[0,-1])))
    
    return
144/771:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3[0,7]))
print (list(arange(2,17)))
144/772: sqm3
144/773:
fig,ax=subplots(1,1)

ax.plot(arange(len(sqm3[:,1])),sqm3[:,7],'--')

xs=arange(0,len(sqm3[:,1]),10)
#ax.set_xticklabels(sqm3[xs,1],rotation=90)
#ax.set_yticklabels(linspace(0,,10))
144/774:
plot_mag(data)
#ax.set_xticklabels(sqm3[xs,1],rotation=90)
#ax.set_yticklabels(linspace(0,,10))
144/775:
plot_mag(sqm3)
#ax.set_xticklabels(sqm3[xs,1],rotation=90)
#ax.set_yticklabels(linspace(0,,10))
144/776:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data,data_dates

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.title(str(data_dates[0,0]+'-'+str(data_dates[0,-1])))
    
    return
144/777:
sqm3=load_data('005_2019-05-27.txt')
print (shape(sqm3))
print (type (sqm3[0,7]))
print (list(arange(2,17)))
144/778:
sqm3=load_data('005_2019-05-27.txt')
print (type (sqm3[0,7]))
print (list(arange(2,17)))
144/779:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data,data_dates

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.title(str(data_dates[0,0]+'-'+str(data_dates[0,-1])))
    
    return
144/780:
sqm3=load_data('005_2019-05-27.txt')
print (type (sqm3[0,0,7]))
print (list(arange(2,17)))
144/781: sqm3
144/782:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data,data_dates

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]
    xs=arange(len(data[1]))

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.title(str(data_dates[0,0]+'-'+str(data_dates[0,-1])))
    ax.set_xticklabels(sqm3[1][xs,1],rotation=90)
    ax.set_yticklabels(linspace(0,,10))
    
    
    return
144/783:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data,data_dates

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]
    xs=arange(len(data[1]))

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.title(str(data_dates[0,0]+'-'+str(data_dates[0,-1])))
    ax.set_xticklabels(sqm3[1][xs,1],rotation=90)
    
    
    return
144/784:
sqm3=load_data('005_2019-05-27.txt')
print (type (sqm3[0,0,7]))
print (list(arange(2,17)))
144/785:
sqm3=load_data('005_2019-05-27.txt')
print (type (sqm3))
print (list(arange(2,17)))
144/786:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return array(data,data_dates)

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]
    xs=arange(len(data[1]))

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.title(str(data_dates[0,0]+'-'+str(data_dates[0,-1])))
    ax.set_xticklabels(sqm3[1][xs,1],rotation=90)
    
    
    return
144/787:
sqm3=load_data('005_2019-05-27.txt')
print (type (sqm3))
print (list(arange(2,17)))
144/788:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data

def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]
    xs=arange(len(data[1]))

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.title(str(data_dates[0,0]+'-'+str(data_dates[0,-1])))
    ax.set_xticklabels(sqm3[1][xs,1],rotation=90)
    
    
    return
144/789:
sqm3=load_data('005_2019-05-27.txt')
print (type (sqm3))
print (list(arange(2,17)))
144/790:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3))
print (list(arange(2,17)))
144/791:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data

def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates

def plot_mag(data):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]
    xs=arange(len(data[1]))

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.title(str(data_dates[0,0]+'-'+str(data_dates[0,-1])))
    ax.set_xticklabels(sqm3[1][xs,1],rotation=90)
    
    
    return
144/792:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3))
print (list(arange(2,17)))
144/793: sqm3
144/794:
plot_mag(sqm3)
#ax.set_xticklabels(sqm3[xs,1],rotation=90)
#ax.set_yticklabels(linspace(0,,10))
144/795:
plot_mag(sqm3,sqm3_dates)
#ax.set_xticklabels(sqm3[xs,1],rotation=90)
#ax.set_yticklabels(linspace(0,,10))
144/796:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data

def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates

def plot_mag(data,data_dates):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]
    xs=arange(len(data[1]))

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.title(str(data_dates[0,0]+'-'+str(data_dates[0,-1])))
    ax.set_xticklabels(sqm3[1][xs,1],rotation=90)
    
    
    return
144/797:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3))
print (list(arange(2,17)))
144/798: sqm3
144/799:
plot_mag(sqm3,sqm3_dates)
#ax.set_xticklabels(sqm3[xs,1],rotation=90)
#ax.set_yticklabels(linspace(0,,10))
144/800: sqm3,sqm3_dates
144/801:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates))
print (list(arange(2,17)))
144/802:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates))
print (shape(sqm3),shape(sqm3_dates))
144/803:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
144/804: sqm3,sqm3_dates
144/805:
plot_mag(sqm3,sqm3_dates)
#ax.set_xticklabels(sqm3[xs,1],rotation=90)
#ax.set_yticklabels(linspace(0,,10))
144/806:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data

def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates

def plot_mag(data,data_dates):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]
    xs=arange(len(data[1]))

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.title(data_dates[0,0],'-',data_dates[0,-1])
    ax.set_xticklabels(sqm3[1][xs,1],rotation=90)
    
    
    return
144/807:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
144/808: sqm3,sqm3_dates
144/809:
plot_mag(sqm3,sqm3_dates)
#ax.set_xticklabels(sqm3[xs,1],rotation=90)
#ax.set_yticklabels(linspace(0,,10))
144/810:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,0],sqm3_dates[0,0])
144/811:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,0],sqm3_dates[0,0],sqm3_dates[0,1])
144/812:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
144/813:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,6],sqm3_dates[0,0],sqm3_dates[0,1])
144/814:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,4],sqm3_dates[0,0],sqm3_dates[0,1])
144/815:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
144/816: sqm3,sqm3_dates
144/817:
plot_mag(sqm3,sqm3_dates)
#ax.set_xticklabels(sqm3[xs,1],rotation=90)
#ax.set_yticklabels(linspace(0,,10))
144/818:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data

def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates

def plot_mag(data,data_dates):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]
    xs=arange(len(data[1]))

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title(data_dates[0,0],'-',data_dates[0,-1])
    ax.set_xticklabels(sqm3[1][xs,1],rotation=90)
    
    
    return
144/819:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
144/820: sqm3,sqm3_dates
144/821:
plot_mag(sqm3,sqm3_dates)
#ax.set_xticklabels(sqm3[xs,1],rotation=90)
#ax.set_yticklabels(linspace(0,,10))
144/822:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data

def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates

def plot_mag(data,data_dates):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]
    xs=arange(len(data[1]))

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    #ax.set_title(data_dates[0,0],'-',data_dates[0,-1])
    ax.set_xticklabels(sqm3[1][xs,1],rotation=90)
    
    
    return
144/823:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
144/824: sqm3,sqm3_dates
144/825:
plot_mag(sqm3,sqm3_dates)
#ax.set_xticklabels(sqm3[xs,1],rotation=90)
#ax.set_yticklabels(linspace(0,,10))
144/826:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data

def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates

def plot_mag(data,data_dates):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=data[:,2]
    xs=arange(len(data[1]))

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    #ax.set_title(data_dates[0,0],'-',data_dates[0,-1])
    ax.set_xticklabels(sqm3_dates[xs,1],rotation=90)
    
    
    return
144/827:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
144/828: sqm3,sqm3_dates
144/829:
plot_mag(sqm3,sqm3_dates)
#ax.set_xticklabels(sqm3[xs,1],rotation=90)
#ax.set_yticklabels(linspace(0,,10))
144/830:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data

def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates

def plot_mag(data,data_dates):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=arange(len(data[:,0]))
    xs=arange(len(data[1]))

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    #ax.set_title(data_dates[0,0],'-',data_dates[0,-1])
    ax.set_xticklabels(sqm3_dates[xs,1],rotation=90)
    
    
    return
144/831:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
144/832: sqm3,sqm3_dates
144/833:
plot_mag(sqm3,sqm3_dates)
#ax.set_xticklabels(sqm3[xs,1],rotation=90)
#ax.set_yticklabels(linspace(0,,10))
144/834:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data

def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates

def plot_mag(data,data_dates):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=arange(len(data[:,0]))
    xs=arange(len(data[1]),10)

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    #ax.set_title(data_dates[0,0],'-',data_dates[0,-1])
    ax.set_xticklabels(sqm3_dates[xs,1],rotation=90)
    
    
    return
144/835:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
144/836: sqm3,sqm3_dates
144/837:
plot_mag(sqm3,sqm3_dates)
#ax.set_xticklabels(sqm3[xs,1],rotation=90)
#ax.set_yticklabels(linspace(0,,10))
144/838:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (arange(len(sqm3[:,0]))
144/839:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (arange(len(sqm3[:,0])))
144/840:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (arange(len(sqm3[:,0])),10)
144/841:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (arange(len(sqm3[:,0])),100)
144/842:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (arange(len(sqm3[:,0])),1)
144/843:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (arange(len(sqm3[:,0])),0.1)
144/844:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (linspace(len(sqm3[:,0])),10)
144/845:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (linspace(0,len(sqm3[:,0])),10)
144/846:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (linspace(0,len(sqm3[:,0])),100)
144/847:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (linspace(0,len(sqm3[:,0])),1)
144/848:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (linspace(0,len(sqm3[:,0])),20)
144/849:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (linspace(0,len(sqm3[:,0]),20))
144/850:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (linspace(0,len(sqm3[:,0]),18))
144/851:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (linspace(0,len(sqm3[:,0]),10))
144/852: sqm3,sqm3_dates
144/853:
plot_mag(sqm3,sqm3_dates)
#ax.set_xticklabels(sqm3[xs,1],rotation=90)
#ax.set_yticklabels(linspace(0,,10))
144/854:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (linspace(0,len(sqm3[:,0]),10,dtype=int))
144/855: sqm3,sqm3_dates
144/856:
plot_mag(sqm3,sqm3_dates)
#ax.set_xticklabels(sqm3[xs,1],rotation=90)
#ax.set_yticklabels(linspace(0,,10))
144/857:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data

def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates

def plot_mag(data,data_dates):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0]),10,dtype=int)

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    #ax.set_title(data_dates[0,0],'-',data_dates[0,-1])
    ax.set_xticklabels(sqm3_dates[xs,1],rotation=90)
    
    
    return
144/858:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (linspace(0,len(sqm3[:,0]),10,dtype=int))
144/859: sqm3,sqm3_dates
144/860:
plot_mag(sqm3,sqm3_dates)
#ax.set_xticklabels(sqm3[xs,1],rotation=90)
#ax.set_yticklabels(linspace(0,,10))
144/861:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data

def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates

def plot_mag(data,data_dates):
#    x=linspace(8.26,29.4,len(data[:][0]))
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0]),10,dtype=int)

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    #ax.set_title(data_dates[0,0],'-',data_dates[0,-1])
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    
    
    return
144/862:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (linspace(0,len(sqm3[:,0]),10,dtype=int))
144/863: sqm3,sqm3_dates
144/864:
plot_mag(sqm3,sqm3_dates)
#ax.set_xticklabels(sqm3[xs,1],rotation=90)
#ax.set_yticklabels(linspace(0,,10))
144/865:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (linspace(0,len(sqm3[:,0]),10,dtype=int))
print (arange(len(sqm3[:,0])))
144/866:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    #ax.set_title(data_dates[0,0],'-',data_dates[0,-1])
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    return
144/867:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (linspace(0,len(sqm3[:,0]),10,dtype=int))
144/868:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-2,10,dtype=int)

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    #ax.set_title(data_dates[0,0],'-',data_dates[0,-1])
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    return
144/869:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (linspace(0,len(sqm3[:,0]),10,dtype=int))
144/870:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (linspace(0,len(sqm3[:,0])-1,10,dtype=int))
144/871:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    #ax.set_title(data_dates[0,0],'-',data_dates[0,-1])
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    return
144/872:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (linspace(0,len(sqm3[:,0])-1,10,dtype=int))
144/873: sqm3,sqm3_dates
144/874:
plot_mag(sqm3,sqm3_dates)
#ax.set_xticklabels(sqm3[xs,1],rotation=90)
#ax.set_yticklabels(linspace(0,,10))
144/875:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title(str(data_dates[0,0],'-',data_dates[0,-1]))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    return
144/876:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (linspace(0,len(sqm3[:,0])-1,10,dtype=int))
144/877: sqm3,sqm3_dates
144/878: plot_mag(sqm3,sqm3_dates)
144/879:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title(str(data_dates[0,0]),'-',str(data_dates[0,-1]))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    return
144/880:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (linspace(0,len(sqm3[:,0])-1,10,dtype=int))
144/881: sqm3,sqm3_dates
144/882: plot_mag(sqm3,sqm3_dates)
144/883:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0]),'-',str(data_dates[0,-1])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    return
144/884:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (linspace(0,len(sqm3[:,0])-1,10,dtype=int))
144/885: sqm3,sqm3_dates
144/886: plot_mag(sqm3,sqm3_dates)
144/887:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+'-'+str(data_dates[0,-1])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    return
144/888:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (linspace(0,len(sqm3[:,0])-1,10,dtype=int))
144/889: sqm3,sqm3_dates
144/890: plot_mag(sqm3,sqm3_dates)
144/891:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+'-'+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    return
144/892:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (linspace(0,len(sqm3[:,0])-1,10,dtype=int))
144/893: sqm3,sqm3_dates
144/894: plot_mag(sqm3,sqm3_dates)
144/895:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+'to'+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    return
144/896:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    return
144/897:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (linspace(0,len(sqm3[:,0])-1,10,dtype=int))
144/898: sqm3,sqm3_dates
144/899: plot_mag(sqm3,sqm3_dates)
144/900:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_yticklabels(arange(20))
    return
144/901:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (linspace(0,len(sqm3[:,0])-1,10,dtype=int))
144/902: sqm3,sqm3_dates
144/903: plot_mag(sqm3,sqm3_dates)
144/904:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_yticklabels(linspace(min(data[:,5]),max(data[:,5]),10))
    return
144/905:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (linspace(0,len(sqm3[:,0])-1,10,dtype=int))
144/906: plot_mag(sqm3,sqm3_dates)
144/907:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_yticklabels(linspace(min(data[:,5]),max(data[:,5]),10,dtype=int))
    return
144/908:
sqm3=load_data('005_2019-05-27.txt')
sqm3_dates=load_dates('005_2019-05-27.txt')
print (type (sqm3),type(sqm3_dates), type(sqm3[0,0]),type(sqm3_dates[0,0]))
print (shape(sqm3),shape(sqm3_dates))
print (sqm3[0,5],sqm3_dates[0,0],sqm3_dates[0,1])
print (linspace(0,len(sqm3[:,0])-1,10,dtype=int))
144/909: plot_mag(sqm3,sqm3_dates)
144/910:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates):
    x=arange(len(data[:,0]))
    xs=linspace(len(sqm3[:,0]),0,-1,10,dtype=int)

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_yticklabels(linspace(min(data[:,5]),max(data[:,5]),10,dtype=int))
    return
144/911:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/912:
sqm3=load_data('003_2019-05-27.txt')
sqm3_dates=load_dates('003_2019-05-27.txt')
sqm4=load_data('004_2019-05-27.txt')
sqm4_dates=load_dates('004_2019-05-27.txt')
sqm5=load_data('005_2019-05-27.txt')
sqm5_dates=load_dates('005_2019-05-27.txt')
sqm1=load_data('001_2019-05-27.txt')
sqm1_dates=load_dates('001_2019-05-27.txt')
144/913: plot_mag(sqm3,sqm3_dates)
144/914:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/915:
sqm3=load_data('003_2019-05-27.txt')
sqm3_dates=load_dates('003_2019-05-27.txt')
sqm4=load_data('004_2019-05-27.txt')
sqm4_dates=load_dates('004_2019-05-27.txt')
sqm5=load_data('005_2019-05-27.txt')
sqm5_dates=load_dates('005_2019-05-27.txt')
sqm1=load_data('001_2019-05-27.txt')
sqm1_dates=load_dates('001_2019-05-27.txt')
144/916: plot_mag(sqm3,sqm3_dates)
144/917:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/918:
sqm3=load_data('003_2019-05-27.txt')
sqm3_dates=load_dates('003_2019-05-27.txt')
sqm4=load_data('004_2019-05-27.txt')
sqm4_dates=load_dates('004_2019-05-27.txt')
sqm5=load_data('005_2019-05-27.txt')
sqm5_dates=load_dates('005_2019-05-27.txt')
sqm1=load_data('001_2019-05-27.txt')
sqm1_dates=load_dates('001_2019-05-27.txt')
144/919: plot_mag(sqm3,sqm3_dates)
144/920:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=150)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/921: plot_mag(sqm3,sqm3_dates)
144/922: plot(sqm3[:,6]-sqm3[:,5])
144/923:
plot(sqm3[:,6]-sqm3[:,5])
plot(sqm3[:,7]-sqm3[:,5])
plot(sqm3[:,8]-sqm3[:,5])
plot(sqm3[:,9]-sqm3[:,5])
144/924:
plot(sqm3[:,6]-sqm3[:,5]<0)
plot(sqm3[:,7]-sqm3[:,5])
plot(sqm3[:,8]-sqm3[:,5])
plot(sqm3[:,9]-sqm3[:,5])
144/925:
plot(sqm3[:,6]-sqm3[:,5]<0)
plot(sqm3[:,7]-sqm3[:,5]<0)
plot(sqm3[:,8]-sqm3[:,5]<0)
plot(sqm3[:,9]-sqm3[:,5]<0)
144/926:
plot(sqm3[:,6]-sqm3[:,5]<=0)
plot(sqm3[:,7]-sqm3[:,5]<=0)
plot(sqm3[:,8]-sqm3[:,5]<=0)
plot(sqm3[:,9]-sqm3[:,5]<=0)
144/927:
plot(sqm3[:,6]-sqm3[:,5]<=0)
#plot(sqm3[:,7]-sqm3[:,5]<=0)
#plot(sqm3[:,8]-sqm3[:,5]<=0)
#plot(sqm3[:,9]-sqm3[:,5]<=0)
144/928:
#plot(sqm3[:,6]-sqm3[:,5]<=0)
plot(sqm3[:,7]-sqm3[:,5]<=0)
#plot(sqm3[:,8]-sqm3[:,5]<=0)
#plot(sqm3[:,9]-sqm3[:,5]<=0)
144/929:
#plot(sqm3[:,6]-sqm3[:,5]<=0)
plot(sqm3[:,7]-sqm3[:,5]<=0)
plot(sqm3[:,8]-sqm3[:,5]<=0)
#plot(sqm3[:,9]-sqm3[:,5]<=0)
144/930:
#plot(sqm3[:,6]-sqm3[:,5]<=0)
plot(sqm3[:,7]-sqm3[:,5]<=0)
plot(sqm3[:,8]-sqm3[:,5]<=0)
plot(sqm3[:,9]-sqm3[:,5]<=0)
144/931:
#plot(sqm3[:,6]-sqm3[:,5]<=0)
plot((sqm3[:,7]-sqm3[:,5])<=0)
plot(sqm3[:,8]-sqm3[:,5]<=0)
plot(sqm3[:,9]-sqm3[:,5]<=0)
144/932:
#plot(sqm3[:,6]-sqm3[:,5]<=0)
plot((sqm3[:,7]-sqm3[:,5])<=0)
#plot(sqm3[:,8]-sqm3[:,5]<=0)
#plot(sqm3[:,9]-sqm3[:,5]<=0)
144/933:
#plot(sqm3[:,6]-sqm3[:,5]<=0)
plot((sqm3[:,7]-sqm3[:,5]))
#plot(sqm3[:,8]-sqm3[:,5]<=0)
#plot(sqm3[:,9]-sqm3[:,5]<=0)
144/934:
#plot(sqm3[:,6]-sqm3[:,5]<=0)
plot((sqm3[:,7]-sqm3[:,5]))
plot(sqm3[:,8]-sqm3[:,5]<=0)
#plot(sqm3[:,9]-sqm3[:,5]<=0)
144/935:
#plot(sqm3[:,6]-sqm3[:,5]<=0)
plot((sqm3[:,7]-sqm3[:,5]))
plot(sqm3[:,8]-sqm3[:,5])
#plot(sqm3[:,9]-sqm3[:,5]<=0)
144/936:
#plot(sqm3[:,6]-sqm3[:,5]<=0)
plot((sqm3[:,7]-sqm3[:,5]))
plot(sqm3[:,8]-sqm3[:,5])
plot(sqm3[:,9]-sqm3[:,5]<=0)
144/937:
#plot(sqm3[:,6]-sqm3[:,5]<=0)
plot((sqm3[:,7]-sqm3[:,5]))
plot(sqm3[:,8]-sqm3[:,5])
plot(sqm3[:,9]-sqm3[:,5])
144/938:
#plot(sqm3[:,6]-sqm3[:,5]<=0)
plot((sqm3[:,7]-sqm3[:,5]))
plot(sqm3[:,8]-sqm3[:,5])
plot(sqm3[:,9]-sqm3[:,5] if <0)
144/939:
#plot(sqm3[:,6]-sqm3[:,5]<=0)
plot((sqm3[:,7]-sqm3[:,5]))
plot(sqm3[:,8]-sqm3[:,5])
plot(sqm3[:,9]-sqm3[:,5] if <=0)
144/940:
#plot(sqm3[:,6]-sqm3[:,5]<=0)
plot((sqm3[:,7]-sqm3[:,5]))
plot(sqm3[:,8]-sqm3[:,5])
plot(sqm3[:,9]-sqm3[:,5])
144/941:
#plot(sqm3[:,6]-sqm3[:,5]<=0)
plot(sqm3[:,7]-sqm3[:,5],'.')
plot(sqm3[:,8]-sqm3[:,5],'.')
plot(sqm3[:,9]-sqm3[:,5],'.')
144/942:
plot(sqm3[:,6]-sqm3[:,5]<=0)
plot(sqm3[:,7]-sqm3[:,5],'.')
plot(sqm3[:,8]-sqm3[:,5],'.')
plot(sqm3[:,9]-sqm3[:,5],'.')
144/943:
plot(sqm3[:,6]-sqm3[:,5],'.')
plot(sqm3[:,7]-sqm3[:,5],'.')
plot(sqm3[:,8]-sqm3[:,5],'.')
plot(sqm3[:,9]-sqm3[:,5],'.')
144/944:
plot(sqm3[:,6]-sqm3[:,5],'.')
plot(sqm3[:,7]-sqm3[:,5],'.')
plot(sqm3[:,8]-sqm3[:,5],'.')
plot(sqm3[:,9]-sqm3[:,5],'.')
plot.ylim(-1.5,0)
144/945:
plot(sqm3[:,6]-sqm3[:,5],'.')
plot(sqm3[:,7]-sqm3[:,5],'.')
plot(sqm3[:,8]-sqm3[:,5],'.')
plot(sqm3[:,9]-sqm3[:,5],'.')
plot.set_ylim(-1.5,0)
144/946:
plot(sqm3[:,6]-sqm3[:,5],'.')
plot(sqm3[:,7]-sqm3[:,5],'.')
plot(sqm3[:,8]-sqm3[:,5],'.')
plot(sqm3[:,9]-sqm3[:,5],'.')
ylim(-1.5,0)
144/947:
#plot(sqm3[:,6]-sqm3[:,5],'.')
plot(sqm3[:,7]-sqm3[:,5],'.')
plot(sqm3[:,8]-sqm3[:,5],'.')
plot(sqm3[:,9]-sqm3[:,5],'.')
ylim(-1.5,0)
144/948:
plot(sqm3[:,6]-sqm3[:,5],'.')
#plot(sqm3[:,7]-sqm3[:,5],'.')
plot(sqm3[:,8]-sqm3[:,5],'.')
plot(sqm3[:,9]-sqm3[:,5],'.')
ylim(-1.5,0)
144/949:
plot(sqm3[:,6]-sqm3[:,5],'.')
#plot(sqm3[:,7]-sqm3[:,5],'.')
#plot(sqm3[:,8]-sqm3[:,5],'.')
plot(sqm3[:,9]-sqm3[:,5],'.')
ylim(-1.5,0)
144/950:
plot(sqm3[:,6]-sqm3[:,5],'.')
#plot(sqm3[:,7]-sqm3[:,5],'.')
#plot(sqm3[:,8]-sqm3[:,5],'.')
#plot(sqm3[:,9]-sqm3[:,5],'.')
ylim(-1.5,0)
144/951:
plot(sqm3[:,6]-sqm3[:,5],'.')
#plot(sqm3[:,7]-sqm3[:,5],'.')
#plot(sqm3[:,8]-sqm3[:,5],'.')
plot(sqm3[:,9]-sqm3[:,5],'.')
ylim(-1.5,0)
144/952:
plot(sqm3[:,6]-sqm3[:,5],'.')
plot(sqm3[:,7]-sqm3[:,5],'.')
#plot(sqm3[:,8]-sqm3[:,5],'.')
plot(sqm3[:,9]-sqm3[:,5],'.')
ylim(-1.5,0)
144/953:
#plot(sqm3[:,6]-sqm3[:,5],'.')
plot(sqm3[:,7]-sqm3[:,5],'.')
#plot(sqm3[:,8]-sqm3[:,5],'.')
#plot(sqm3[:,9]-sqm3[:,5],'.')
ylim(-1.5,0)
144/954:
#plot(sqm3[:,6]-sqm3[:,5],'.')
#plot(sqm3[:,7]-sqm3[:,5],'.')
plot(sqm3[:,8]-sqm3[:,5],'.')
#plot(sqm3[:,9]-sqm3[:,5],'.')
ylim(-1.5,0)
144/955:
#plot(sqm3[:,6]-sqm3[:,5],'.')
#plot(sqm3[:,7]-sqm3[:,5],'.')
plot(sqm3[:,8]-sqm3[:,5],'.')
plot(sqm3[:,9]-sqm3[:,5],'.')
ylim(-1.5,0)
144/956:
#plot(sqm3[:,6]-sqm3[:,5],'.')
#plot(sqm3[:,7]-sqm3[:,5],'.')
plot(sqm3[:,8]-sqm3[:,5],'.')
#plot(sqm3[:,9]-sqm3[:,5],'.')
ylim(-1.5,0)
144/957:
plot(sqm3[:,6]-sqm3[:,5],'.')
#plot(sqm3[:,7]-sqm3[:,5],'.')
#plot(sqm3[:,8]-sqm3[:,5],'.')
#plot(sqm3[:,9]-sqm3[:,5],'.')
ylim(-1.5,0)
144/958:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/959: plot_mag(sqm3,sqm3_dates)
144/960:
sqm3=load_data('003_2019-05-27.txt')
sqm3_dates=load_dates('003_2019-05-27.txt')
sqm4=load_data('004_2019-05-27.txt')
sqm4_dates=load_dates('004_2019-05-27.txt')
sqm5=load_data('005_2019-05-27.txt')
sqm5_dates=load_dates('005_2019-05-27.txt')
sqm1=load_data('001_2019-05-27.txt')
sqm1_dates=load_dates('001_2019-05-27.txt')
144/961:
sqm3=load_data('003_2019-05-27.txt')
sqm3_dates=load_dates('003_2019-05-27.txt')
sqm4=load_data('004_2019-05-27.txt')
sqm4_dates=load_dates('004_2019-05-27.txt')
sqm5=load_data('005_2019-05-27.txt')
sqm5_dates=load_dates('005_2019-05-27.txt')
sqm1=load_data('001_2019-05-27.txt')
sqm1_dates=load_dates('001_2019-05-27.txt')
144/962:
plot_mag(sqm3,sqm3_dates)
plot_mag(sqm4,sqm4_dates)
plot_mag(sqm5,sqm5_dates)
plot_mag(sqm1,sqm1_dates)
144/963:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    ax.textbox(cosqm_number)
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/964:
plot_mag(sqm3,sqm3_dates,'003')
plot_mag(sqm4,sqm4_dates,'004')
plot_mag(sqm5,sqm5_dates,'005')
plot_mag(sqm1,sqm1_dates,'001')
144/965:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    ax.text(0.05, 0.95, cosqm_number)
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/966:
plot_mag(sqm3,sqm3_dates,'003')
plot_mag(sqm4,sqm4_dates,'004')
plot_mag(sqm5,sqm5_dates,'005')
plot_mag(sqm1,sqm1_dates,'001')
144/967:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)
    ax.text(0.05, 0.95, cosqm_number, transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/968:
plot_mag(sqm3,sqm3_dates,'003')
plot_mag(sqm4,sqm4_dates,'004')
plot_mag(sqm5,sqm5_dates,'005')
plot_mag(sqm1,sqm1_dates,'001')
144/969:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)
    ax.text(0.1, 0.95, cosqm_number, transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/970:
plot_mag(sqm3,sqm3_dates,'003')
plot_mag(sqm4,sqm4_dates,'004')
plot_mag(sqm5,sqm5_dates,'005')
plot_mag(sqm1,sqm1_dates,'001')
144/971:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', alpha=0.5)
    ax.text(0.1, 0.95, cosqm_number, transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/972:
plot_mag(sqm3,sqm3_dates,'003')
plot_mag(sqm4,sqm4_dates,'004')
plot_mag(sqm5,sqm5_dates,'005')
plot_mag(sqm1,sqm1_dates,'001')
144/973:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', alpha=0.5)
    ax.text(0.1, 0.95, cosqm_number, facecolor='white',transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/974:
sqm3=load_data('003_2019-05-27.txt')
sqm3_dates=load_dates('003_2019-05-27.txt')
sqm4=load_data('004_2019-05-27.txt')
sqm4_dates=load_dates('004_2019-05-27.txt')
sqm5=load_data('005_2019-05-27.txt')
sqm5_dates=load_dates('005_2019-05-27.txt')
sqm1=load_data('001_2019-05-27.txt')
sqm1_dates=load_dates('001_2019-05-27.txt')
144/975:
plot_mag(sqm3,sqm3_dates,'003')
plot_mag(sqm4,sqm4_dates,'004')
plot_mag(sqm5,sqm5_dates,'005')
plot_mag(sqm1,sqm1_dates,'001')
144/976:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', alpha=0.5)
    ax.text(0.1, 0.95, cosqm_number, facecolour='white',transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/977:
plot_mag(sqm3,sqm3_dates,'003')
plot_mag(sqm4,sqm4_dates,'004')
plot_mag(sqm5,sqm5_dates,'005')
plot_mag(sqm1,sqm1_dates,'001')
144/978:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', alpha=0.5)
    ax.text(0.1, 0.95, cosqm_number, face_color='white',transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/979:
plot_mag(sqm3,sqm3_dates,'003')
plot_mag(sqm4,sqm4_dates,'004')
plot_mag(sqm5,sqm5_dates,'005')
plot_mag(sqm1,sqm1_dates,'001')
144/980:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', face_color='white', alpha=0.5)
    ax.text(0.1, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/981:
plot_mag(sqm3,sqm3_dates,'003')
plot_mag(sqm4,sqm4_dates,'004')
plot_mag(sqm5,sqm5_dates,'005')
plot_mag(sqm1,sqm1_dates,'001')
144/982:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.1, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/983:
plot_mag(sqm3,sqm3_dates,'003')
plot_mag(sqm4,sqm4_dates,'004')
plot_mag(sqm5,sqm5_dates,'005')
plot_mag(sqm1,sqm1_dates,'001')
144/984:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/985:
plot_mag(sqm3,sqm3_dates,'003')
plot_mag(sqm4,sqm4_dates,'004')
plot_mag(sqm5,sqm5_dates,'005')
plot_mag(sqm1,sqm1_dates,'001')
144/986:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(2,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/987:
plot_mag(sqm3,sqm3_dates,'003')
plot_mag(sqm4,sqm4_dates,'004')
plot_mag(sqm5,sqm5_dates,'005')
plot_mag(sqm1,sqm1_dates,'001')
144/988:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/989:
plot_mag(sqm3,sqm3_dates,'003')
plot_mag(sqm4,sqm4_dates,'004')
plot_mag(sqm5,sqm5_dates,'005')
plot_mag(sqm1,sqm1_dates,'001')
144/990:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return

def plot_diff(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,6]+data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,7]+data[:,5],label='C-R',color='r')
    ax.plot(x,-data[:,8]+data[:,5],label='C-G',color='g')
    ax.plot(x,-data[:,9]+data[:,5],label='C-B',color='b')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude diff')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/991:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return

def plot_diff(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,6]+data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,7]+data[:,5],label='C-R',color='r')
    ax.plot(x,-data[:,8]+data[:,5],label='C-G',color='g')
    ax.plot(x,-data[:,9]+data[:,5],label='C-B',color='b')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude diff')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/992:
plot_mag(sqm3,sqm3_dates,'003')
plot_mag(sqm4,sqm4_dates,'004')
plot_mag(sqm5,sqm5_dates,'005')
plot_mag(sqm1,sqm1_dates,'001')

plot_diff(sqm3,sqm3_dates,'003')
plot_diff(sqm4,sqm4_dates,'004')
plot_diff(sqm5,sqm5_dates,'005')
144/993:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return

def plot_diff(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,6]+data[:,5],label='C-R',color='r')
    ax.plot(x,-data[:,7]+data[:,5],label='C-G',color='g')
    ax.plot(x,-data[:,8]+data[:,5],label='C-B',color='b')
    ax.plot(x,-data[:,9]+data[:,5],label='C-Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude diff')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/994:
plot_mag(sqm3,sqm3_dates,'003')
plot_mag(sqm4,sqm4_dates,'004')
plot_mag(sqm5,sqm5_dates,'005')
plot_mag(sqm1,sqm1_dates,'001')

plot_diff(sqm3,sqm3_dates,'003')
plot_diff(sqm4,sqm4_dates,'004')
plot_diff(sqm5,sqm5_dates,'005')
144/995:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return

def plot_diff(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,6]+data[:,5],label='C-R',color='r')
    ax.plot(x,-data[:,7]+data[:,5],label='C-G',color='g')
    ax.plot(x,-data[:,8]+data[:,5],label='C-B',color='b')
    ax.plot(x,-data[:,9]+data[:,5],label='C-Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude diff')
    ax.hline(0,'--')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/996:
plot_mag(sqm3,sqm3_dates,'003')
plot_mag(sqm4,sqm4_dates,'004')
plot_mag(sqm5,sqm5_dates,'005')
plot_mag(sqm1,sqm1_dates,'001')

plot_diff(sqm3,sqm3_dates,'003')
plot_diff(sqm4,sqm4_dates,'004')
plot_diff(sqm5,sqm5_dates,'005')
144/997:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return

def plot_diff(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,6]+data[:,5],label='C-R',color='r')
    ax.plot(x,-data[:,7]+data[:,5],label='C-G',color='g')
    ax.plot(x,-data[:,8]+data[:,5],label='C-B',color='b')
    ax.plot(x,-data[:,9]+data[:,5],label='C-Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude diff')
    ax.axhline(0,'--')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/998:
plot_mag(sqm3,sqm3_dates,'003')
plot_mag(sqm4,sqm4_dates,'004')
plot_mag(sqm5,sqm5_dates,'005')
plot_mag(sqm1,sqm1_dates,'001')

plot_diff(sqm3,sqm3_dates,'003')
plot_diff(sqm4,sqm4_dates,'004')
plot_diff(sqm5,sqm5_dates,'005')
144/999:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return

def plot_diff(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,6]+data[:,5],label='C-R',color='r')
    ax.plot(x,-data[:,7]+data[:,5],label='C-G',color='g')
    ax.plot(x,-data[:,8]+data[:,5],label='C-B',color='b')
    ax.plot(x,-data[:,9]+data[:,5],label='C-Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude diff')
    ax.axhline(0,ls='--')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/1000:
plot_mag(sqm3,sqm3_dates,'003')
plot_mag(sqm4,sqm4_dates,'004')
plot_mag(sqm5,sqm5_dates,'005')
plot_mag(sqm1,sqm1_dates,'001')

plot_diff(sqm3,sqm3_dates,'003')
plot_diff(sqm4,sqm4_dates,'004')
plot_diff(sqm5,sqm5_dates,'005')
144/1001:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return

def plot_diff(data,data_dates,cosqm_number):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,data[:,6]-data[:,5],label='C-R',color='r')
    ax.plot(x,data[:,7]-data[:,5],label='C-G',color='g')
    ax.plot(x,data[:,8]-data[:,5],label='C-B',color='b')
    ax.plot(x,data[:,9]-data[:,5],label='C-Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude diff')
    ax.axhline(0,ls='--')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/1002:
plot_mag(sqm3,sqm3_dates,'003')
plot_mag(sqm4,sqm4_dates,'004')
plot_mag(sqm5,sqm5_dates,'005')
plot_mag(sqm1,sqm1_dates,'001')

plot_diff(sqm3,sqm3_dates,'003')
plot_diff(sqm4,sqm4_dates,'004')
plot_diff(sqm5,sqm5_dates,'005')
144/1003:
plot_mag(sqm3,sqm3_dates,'003')
plot_mag(sqm4,sqm4_dates,'004')
plot_mag(sqm5,sqm5_dates,'005')
plot_mag(sqm1,sqm1_dates,'001')

plot_diff(sqm3,sqm3_dates,'003')
plot_diff(sqm4,sqm4_dates,'004')
plot_diff(sqm5,sqm5_dates,'005')
plot_diff(sqm1,sqm1_dates,'001')
144/1004:
plot_mag(sqm3,sqm3_dates,'003')
savefig('sqm3.png')
plot_mag(sqm4,sqm4_dates,'004')
plot_mag(sqm5,sqm5_dates,'005')
plot_mag(sqm1,sqm1_dates,'001')

plot_diff(sqm3,sqm3_dates,'003')
plot_diff(sqm4,sqm4_dates,'004')
plot_diff(sqm5,sqm5_dates,'005')
plot_diff(sqm1,sqm1_dates,'001')
144/1005:
plot_mag(sqm3,sqm3_dates,'003')
savefig('sqm3.png',bbox_inches='tight')
plot_mag(sqm4,sqm4_dates,'004')
plot_mag(sqm5,sqm5_dates,'005')
plot_mag(sqm1,sqm1_dates,'001')

plot_diff(sqm3,sqm3_dates,'003')
plot_diff(sqm4,sqm4_dates,'004')
plot_diff(sqm5,sqm5_dates,'005')
plot_diff(sqm1,sqm1_dates,'001')
144/1006: print (dt.datetime)
144/1007: print (dt.datetime.now())
144/1008:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    
    savefig(str(date)'.png',bbox_inches='tight')

    return

def plot_diff(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,data[:,6]-data[:,5],label='C-R',color='r')
    ax.plot(x,data[:,7]-data[:,5],label='C-G',color='g')
    ax.plot(x,data[:,8]-data[:,5],label='C-B',color='b')
    ax.plot(x,data[:,9]-data[:,5],label='C-Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude diff')
    ax.axhline(0,ls='--')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    return
144/1009:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    
    savefig(output_figname+'.png',bbox_inches='tight')

    return

def plot_diff(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,data[:,6]-data[:,5],label='C-R',color='r')
    ax.plot(x,data[:,7]-data[:,5],label='C-G',color='g')
    ax.plot(x,data[:,8]-data[:,5],label='C-B',color='b')
    ax.plot(x,data[:,9]-data[:,5],label='C-Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude diff')
    ax.axhline(0,ls='--')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    
    savefig(output_figname+'.png',bbox_inches='tight')

    return
144/1010:
plot_mag(sqm3,sqm3_dates,'003','sqm3')
plot_mag(sqm4,sqm4_dates,'004','sqm4')
plot_mag(sqm5,sqm5_dates,'005','sqm5')
plot_mag(sqm1,sqm1_dates,'001','sqm1')

plot_diff(sqm3,sqm3_dates,'003','sqm3_diff')
plot_diff(sqm4,sqm4_dates,'004','sqm4_diff')
plot_diff(sqm5,sqm5_dates,'005','sqm5_diff')
plot_diff(sqm1,sqm1_dates,'001','sqm1_diff')
144/1011:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    
    savefig('/figures/'+output_figname+'.png',bbox_inches='tight')

    return

def plot_diff(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,data[:,6]-data[:,5],label='C-R',color='r')
    ax.plot(x,data[:,7]-data[:,5],label='C-G',color='g')
    ax.plot(x,data[:,8]-data[:,5],label='C-B',color='b')
    ax.plot(x,data[:,9]-data[:,5],label='C-Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude diff')
    ax.axhline(0,ls='--')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    
    savefig('/figures/'+output_figname+'.png',bbox_inches='tight')

    return
144/1012:
plot_mag(sqm3,sqm3_dates,'003','sqm3')
plot_mag(sqm4,sqm4_dates,'004','sqm4')
plot_mag(sqm5,sqm5_dates,'005','sqm5')
plot_mag(sqm1,sqm1_dates,'001','sqm1')

plot_diff(sqm3,sqm3_dates,'003','sqm3_diff')
plot_diff(sqm4,sqm4_dates,'004','sqm4_diff')
plot_diff(sqm5,sqm5_dates,'005','sqm5_diff')
plot_diff(sqm1,sqm1_dates,'001','sqm1_diff')
144/1013:
plot_mag(sqm3,sqm3_dates,'003','sqm3')
plot_mag(sqm4,sqm4_dates,'004','sqm4')
plot_mag(sqm5,sqm5_dates,'005','sqm5')
plot_mag(sqm1,sqm1_dates,'001','sqm1')

plot_diff(sqm3,sqm3_dates,'003','sqm3_diff')
plot_diff(sqm4,sqm4_dates,'004','sqm4_diff')
plot_diff(sqm5,sqm5_dates,'005','sqm5_diff')
plot_diff(sqm1,sqm1_dates,'001','sqm1_diff')
144/1014:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    
    savefig('/figures/'+output_figname+'.png',bbox_inches='tight')

    return

def plot_diff(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,data[:,6]-data[:,5],label='C-R',color='r')
    ax.plot(x,data[:,7]-data[:,5],label='C-G',color='g')
    ax.plot(x,data[:,8]-data[:,5],label='C-B',color='b')
    ax.plot(x,data[:,9]-data[:,5],label='C-Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude diff')
    ax.axhline(0,ls='--')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    
    savefig('/figures/'+output_figname+'.png',bbox_inches='tight')

    return
144/1015:
plot_mag(sqm3,sqm3_dates,'003','sqm3')
plot_mag(sqm4,sqm4_dates,'004','sqm4')
plot_mag(sqm5,sqm5_dates,'005','sqm5')
plot_mag(sqm1,sqm1_dates,'001','sqm1')

plot_diff(sqm3,sqm3_dates,'003','sqm3_diff')
plot_diff(sqm4,sqm4_dates,'004','sqm4_diff')
plot_diff(sqm5,sqm5_dates,'005','sqm5_diff')
plot_diff(sqm1,sqm1_dates,'001','sqm1_diff')
144/1016: sqm33=load_data('/data/003_2019-05-27.txt')
144/1017: sqm33=load_data('data/003_2019-05-27.txt')
144/1018:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    
    savefig('figures/'+output_figname+'.png',bbox_inches='tight')

    return

def plot_diff(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,data[:,6]-data[:,5],label='C-R',color='r')
    ax.plot(x,data[:,7]-data[:,5],label='C-G',color='g')
    ax.plot(x,data[:,8]-data[:,5],label='C-B',color='b')
    ax.plot(x,data[:,9]-data[:,5],label='C-Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude diff')
    ax.axhline(0,ls='--')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    
    savefig('figures/'+output_figname+'.png',bbox_inches='tight')

    return
144/1019:
plot_mag(sqm3,sqm3_dates,'003','sqm3')
plot_mag(sqm4,sqm4_dates,'004','sqm4')
plot_mag(sqm5,sqm5_dates,'005','sqm5')
plot_mag(sqm1,sqm1_dates,'001','sqm1')

plot_diff(sqm3,sqm3_dates,'003','sqm3_diff')
plot_diff(sqm4,sqm4_dates,'004','sqm4_diff')
plot_diff(sqm5,sqm5_dates,'005','sqm5_diff')
plot_diff(sqm1,sqm1_dates,'001','sqm1_diff')
144/1020:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    
    savefig('figures/'+output_figname+'.png',bbox_inches='tight')

    return

def plot_diff(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,data[:,6]-data[:,5],label='R-C',color='r')
    ax.plot(x,data[:,7]-data[:,5],label='G-C',color='g')
    ax.plot(x,data[:,8]-data[:,5],label='B-C',color='b')
    ax.plot(x,data[:,9]-data[:,5],label='Y-C',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude diff')
    ax.axhline(0,ls='--')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    
    savefig('figures/'+output_figname+'.png',bbox_inches='tight')

    return
144/1021:
plot_mag(sqm3,sqm3_dates,'003','sqm3')
plot_mag(sqm4,sqm4_dates,'004','sqm4')
plot_mag(sqm5,sqm5_dates,'005','sqm5')
plot_mag(sqm1,sqm1_dates,'001','sqm1')

plot_diff(sqm3,sqm3_dates,'003','sqm3_diff')
plot_diff(sqm4,sqm4_dates,'004','sqm4_diff')
plot_diff(sqm5,sqm5_dates,'005','sqm5_diff')
plot_diff(sqm1,sqm1_dates,'001','sqm1_diff')
144/1022:
sqm3=load_data('003_2019-05-28.txt')
sqm3_dates=load_dates('003_2019-05-28.txt')
sqm4=load_data('004_2019-05-28.txt')
sqm4_dates=load_dates('004_2019-05-28.txt')
sqm5=load_data('005_2019-05-28.txt')
sqm5_dates=load_dates('005_2019-05-28.txt')
sqm1=load_data('001_2019-05-28.txt')
sqm1_dates=load_dates('001_2019-05-28.txt')
144/1023:
#sqm3=load_data('003_2019-05-28.txt')
#sqm3_dates=load_dates('003_2019-05-28.txt')
#sqm4=load_data('004_2019-05-28.txt')
#sqm4_dates=load_dates('004_2019-05-28.txt')
sqm5=load_data('005_2019-05-28.txt')
sqm5_dates=load_dates('005_2019-05-28.txt')
#sqm1=load_data('001_2019-05-28.txt')
#sqm1_dates=load_dates('001_2019-05-28.txt')
144/1024:
plot_mag(sqm3,sqm3_dates,'003','sqm3')
plot_diff(sqm3,sqm3_dates,'003','sqm3_diff')
144/1025:
sqm3_28=load_data('003_2019-05-28.txt')
sqm3_28_dates=load_dates('003_2019-05-28.txt')
sqm4_28=load_data('004_2019-05-28.txt')
sqm4_28_dates=load_dates('004_2019-05-28.txt')
sqm5_28=load_data('005_2019-05-28.txt')
sqm5_28_dates=load_dates('005_2019-05-28.txt')
sqm1_28=load_data('001_2019-05-28.txt')
sqm1_28_dates=load_dates('001_2019-05-28.txt')
144/1026:
plot_mag(sqm3_28,sqm3_28_dates,'003','sqm3')
plot_diff(sqm3_28,sqm3_28_dates,'003','sqm3_diff')
plot_mag(sqm4_28,sqm4_28_dates,'004','sqm4')
plot_diff(sqm4_28,sqm4_28_dates,'004','sqm4_diff')
plot_mag(sqm5_28,sqm5_28_dates,'005','sqm5')
plot_diff(sqm5_28,sqm5_28_dates,'005','sqm5_diff')
plot_mag(sqm1_28,sqm1_28_dates,'001','sqm1')
plot_diff(sqm1_28,sqm1_28_dates,'001','sqm1_diff')
144/1027:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(data[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    
    savefig('figures/'+output_figname+'.png',bbox_inches='tight')

    return

def plot_diff(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(sqm3[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,data[:,6]-data[:,5],label='R-C',color='r')
    ax.plot(x,data[:,7]-data[:,5],label='G-C',color='g')
    ax.plot(x,data[:,8]-data[:,5],label='B-C',color='b')
    ax.plot(x,data[:,9]-data[:,5],label='Y-C',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude diff')
    ax.axhline(0,ls='--')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    
    savefig('figures/'+output_figname+'.png',bbox_inches='tight')

    return
144/1028:
sqm3_28=load_data('003_2019-05-28.txt')
sqm3_28_dates=load_dates('003_2019-05-28.txt')
sqm4_28=load_data('004_2019-05-28.txt')
sqm4_28_dates=load_dates('004_2019-05-28.txt')
sqm5_28=load_data('005_2019-05-28.txt')
sqm5_28_dates=load_dates('005_2019-05-28.txt')
sqm1_28=load_data('001_2019-05-28.txt')
sqm1_28_dates=load_dates('001_2019-05-28.txt')
144/1029:
plot_mag(sqm3_28,sqm3_28_dates,'003','sqm3_28')
plot_diff(sqm3_28,sqm3_28_dates,'003','sqm3_28_diff')
plot_mag(sqm4_28,sqm4_28_dates,'004','sqm4_28')
plot_diff(sqm4_28,sqm4_28_dates,'004','sqm4_28_diff')
plot_mag(sqm5_28,sqm5_28_dates,'005','sqm5_28')
plot_diff(sqm5_28,sqm5_28_dates,'005','sqm5_28_diff')
plot_mag(sqm1_28,sqm1_28_dates,'001','sqm1_28')
plot_diff(sqm1_28,sqm1_28_dates,'001','sqm1_28_diff')
144/1030:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):

    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):

    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(data[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    
    savefig('figures/'+output_figname+'.png',bbox_inches='tight')

    return

def plot_diff(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(data[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,data[:,6]-data[:,5],label='R-C',color='r')
    ax.plot(x,data[:,7]-data[:,5],label='G-C',color='g')
    ax.plot(x,data[:,8]-data[:,5],label='B-C',color='b')
    ax.plot(x,data[:,9]-data[:,5],label='Y-C',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude diff')
    ax.axhline(0,ls='--')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    
    savefig('figures/'+output_figname+'.png',bbox_inches='tight')

    return
144/1031:
plot_mag(sqm3_28,sqm3_28_dates,'003','sqm3_28')
plot_diff(sqm3_28,sqm3_28_dates,'003','sqm3_28_diff')
plot_mag(sqm4_28,sqm4_28_dates,'004','sqm4_28')
plot_diff(sqm4_28,sqm4_28_dates,'004','sqm4_28_diff')
plot_mag(sqm5_28,sqm5_28_dates,'005','sqm5_28')
plot_diff(sqm5_28,sqm5_28_dates,'005','sqm5_28_diff')
plot_mag(sqm1_28,sqm1_28_dates,'001','sqm1_28')
plot_diff(sqm1_28,sqm1_28_dates,'001','sqm1_28_diff')
144/1032:
sqm3_29=load_data('003_2019-05-29.txt')
sqm3_29_dates=load_dates('003_2019-05-29.txt')
144/1033:
plot_mag(sqm3_28,sqm3_28_dates,'003','sqm3_28')
plot_diff(sqm3_28,sqm3_28_dates,'003','sqm3_28_diff')
144/1034:
plot_mag(sqm3_29,sqm3_29_dates,'003','sqm3_29')
plot_diff(sqm3_29,sqm3_29_dates,'003','sqm3_29_diff')
144/1035:
#Intercalibration, with reference to cosqm1 (martin aube's first instrument)
#data used is from night of 05/27-28, from approx. 01:30 to 2:30 am 

fig,ax=subplots(2,1,dpi=150)

ax[0].plot(sqm1_28,sqm3_28)
144/1036:
#Find nearest time data for intercalibration
print (sqm1_28dates[:10,1],sqm3_28dates[:10,1])
144/1037:
#Find nearest time data for intercalibration
print (sqm1_28_dates[:10,1],sqm3_28dates[:10,1])
144/1038:
#Find nearest time data for intercalibration
print (sqm1_28_dates[:10,1],sqm3_28_dates[:10,1])
144/1039:
#Find nearest time data for intercalibration
print (sqm1_28_dates[:10,1])
print (sqm3_28_dates[:10,1])
144/1040:
#Find nearest time data for intercalibration
print (sqm1_28_dates[30:,1])
print (sqm3_28_dates[100:,1])
144/1041:
#Find nearest time data for intercalibration
print (sqm1_28_dates[20:,1])
print (sqm3_28_dates[110:,1])
144/1042:
#Find nearest time data for intercalibration
print (sqm1_28_dates[23:,1])
print (sqm3_28_dates[105:,1])
144/1043:
#Find nearest time data for intercalibration
print (sqm1_28_dates[23:,1])
print (sqm3_28_dates[107:,1])
144/1044:
#Find nearest time data for intercalibration
print (sqm1_28_dates[20:,1])
print (sqm3_28_dates[107:,1])
144/1045:
#Find nearest time data for intercalibration
print (sqm1_28_dates[19:,1])
print (sqm3_28_dates[107:,1])
144/1046:
#Find nearest time data for intercalibration
print (sqm1_28_dates[20:,1])
print (sqm3_28_dates[107:,1])
144/1047:
##Find nearest time data for intercalibration

print (len(sqm1_28),len(sqm3_28))
#print (sqm1_28_dates[20:,1])
#print (sqm3_28_dates[107:,1])
144/1048:
#Intercalibration, with reference to cosqm1 (martin aube's first instrument)
#data used is from night of 05/27-28, from approx. 01:30 to 2:30 am 

fig,ax=subplots(2,1,dpi=150)

ax[0].plot(sqm1_28[:,5],sqm3_28[:len(sqm1_28[:,0]),5])
144/1049:
#Intercalibration, with reference to cosqm1 (martin aube's first instrument)
#data used is from night of 05/27-28, from approx. 01:30 to 2:30 am 

fig,ax=subplots(1,1,dpi=150)

ax[0].plot(sqm1_28[:,5],sqm3_28[:len(sqm1_28[:,0]),5])
144/1050:
#Intercalibration, with reference to cosqm1 (martin aube's first instrument)
#data used is from night of 05/27-28, from approx. 01:30 to 2:30 am 

fig,ax=subplots(1,1,dpi=150)

ax.plot(sqm1_28[:,5],sqm3_28[:len(sqm1_28[:,0]),5])
144/1051:
#Intercalibration, with reference to cosqm1 (martin aube's first instrument)
#data used is from night of 05/27-28, from approx. 01:30 to 2:30 am 

fig,ax=subplots(1,1,dpi=150)

ax.plot(sqm1_28[:100,5],sqm3_28[:100,5])
144/1052:
#Intercalibration, with reference to cosqm1 (martin aube's first instrument)
#data used is from night of 05/27-28, from approx. 01:30 to 2:30 am 

fig,ax=subplots(1,1,dpi=150)

ax.plot(sqm1_28[:10,5],sqm3_28[:10,5])
144/1053:
#Intercalibration, with reference to cosqm1 (martin aube's first instrument)
#data used is from night of 05/27-28, from approx. 01:30 to 2:30 am 

fig,ax=subplots(1,1,dpi=150)

ax.plot(sqm1_28[:80,5],sqm3_28[:80,5])
144/1054:
#Intercalibration, with reference to cosqm1 (martin aube's first instrument)
#data used is from night of 05/27-28, from approx. 01:30 to 2:30 am 

fig,ax=subplots(1,1,dpi=150)

ax.plot(sqm1_28[85:,5],sqm3_28[85:,5])
144/1055:
##Find nearest time data for intercalibration
#Find time offset between sqm1 and 3,4,5 (GMT and EMT)
print (sqm1_28_date[0,1],sqm3_28_date[0,1])
144/1056: ##Find nearest time data for intercalibration
144/1057:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])
144/1058:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#time offset between each sqm
print ('offsets: sqm1_3=19:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')
144/1059:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#acq times for data in time window 1h30-2h30 am
start=100
end=130
print (sqm1_28_dates[start:end,1],sqm3_28_dates[start:end,1],sqm4_28_dates[start:end,1],sqm5_28_dates[start:end,1)

#time offset between each sqm if started approx at the same time (sqm5-sqm3 max time offset)
print ('offsets: sqm1_3=19:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')

#find best times for intercalibration (data to be used is from night of 05/27-28, from approx. 01:30 to 2:30 am)
print (sqm1_28_dates[100:130],sqm3_28_dates[100:130])
144/1060:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#acq times for data in time window 1h30-2h30 am
start=100
end=130
print (sqm1_28_dates[start:end,1],sqm3_28_dates[start:end,1],sqm4_28_dates[start:end,1],sqm5_28_dates[start:end,1])

#time offset between each sqm if started approx at the same time (sqm5-sqm3 max time offset)
print ('offsets: sqm1_3=19:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')

#find best times for intercalibration (data to be used is from night of 05/27-28, from approx. 01:30 to 2:30 am)
print (sqm1_28_dates[100:130],sqm3_28_dates[100:130])
144/1061:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#acq times for data in time window 1h30-2h30 am
start=100
end=130
print (sqm1_28_dates[start:end,1],sqm3_28_dates[start:end,1],sqm4_28_dates[start:end,1],sqm5_28_dates[start:end,1])

#time offset between each sqm if started approx at the same time (sqm5-sqm3 max time offset)
print ('offsets: sqm1_3=3:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')

#find best times for intercalibration (data to be used is from night of 05/27-28, from approx. 01:30 to 2:30 am)
print (sqm1_28_dates[100:130],sqm3_28_dates[100:130])
144/1062:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#time offset between each sqm if started approx at the same time (sqm5-sqm3 max time offset)
print ('offsets: sqm1_3=3:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')


#acq times for data in time window 1h30-2h30 am
start=100
end=130
print (sqm1_28_dates[start:end,1],sqm3_28_dates[start:end,1],sqm4_28_dates[start:end,1],sqm5_28_dates[start:end,1])


#find best times for intercalibration (data to be used is from night of 05/27-28, from approx. 01:30 to 2:30 am)
print (sqm1_28_dates[100:130],sqm3_28_dates[100:130])
144/1063:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#time offset between each sqm if started approx at the same time (sqm5-sqm3 max time offset)
print ('offsets: sqm1_3=3:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')
print ('earliest is sqm3')


#acq times for data in time window 1h30-2h30 am
start=100
end=130
print (sqm1_28_dates[start:end,1],sqm3_28_dates[start:end,1],sqm4_28_dates[start:end,1],sqm5_28_dates[start:end,1])


#find best times for intercalibration (data to be used is from night of 05/27-28, from approx. 01:30 to 2:30 am)
print (sqm1_28_dates[100:130],sqm3_28_dates[100:130])
144/1064:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#time offset between each sqm if started approx at the same time (sqm5-sqm3 max time offset)
print ('offsets: sqm1_3=3:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')
print ('latest is sqm5')


#acq times for data in time window 1h30-2h30 am
start=100
end=130
print (sqm1_28_dates[start:end,1],sqm3_28_dates[start:end,1],sqm4_28_dates[start:end,1],sqm5_28_dates[start:end,1])


#find best times for intercalibration (data to be used is from night of 05/27-28, from approx. 01:30 to 2:30 am)
print (sqm1_28_dates[100:130],sqm3_28_dates[100:130])
144/1065:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#time offset between each sqm if started approx at the same time (sqm5-sqm3 max time offset)
print ('offsets: sqm1_3=3:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')
print ('latest is sqm5, order 1-3-4-5')


#acq times for data in time window 1h30-2h30 am
start=100
end=130


xs=linspace(start,end,end-start)
fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,sqm1_28[start:end,5])
ax.plot(xs,sqm3_28[start:end,5])
ax.plot(xs,sqm4_28[start:end,5])
ax.plot(xs,sqm5_28[start:end,5])




#find best times for intercalibration (data to be used is from night of 05/27-28, from approx. 01:30 to 2:30 am)
#print (sqm1_28_dates[100:130],sqm3_28_dates[100:130])
144/1066:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#time offset between each sqm if started approx at the same time (sqm5-sqm3 max time offset)
print ('offsets: sqm1_3=3:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')
print ('latest is sqm5, order 1-3-4-5')


#acq times for data in time window 1h30-2h30 am
start=100
end=150


xs=linspace(start,end,end-start)
fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,sqm1_28[start:end,5])
ax.plot(xs,sqm3_28[start:end,5])
ax.plot(xs,sqm4_28[start:end,5])
ax.plot(xs,sqm5_28[start:end,5])




#find best times for intercalibration (data to be used is from night of 05/27-28, from approx. 01:30 to 2:30 am)
#print (sqm1_28_dates[100:130],sqm3_28_dates[100:130])
144/1067:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#time offset between each sqm if started approx at the same time (sqm5-sqm3 max time offset)
print ('offsets: sqm1_3=3:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')
print ('latest is sqm5, order 1-3-4-5')


#acq times for data in time window 1h30-2h30 am
start=100
end=150


xs=linspace(start,end,end-start)
fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,5])
ax.plot(xs,-sqm3_28[start:end,5])
ax.plot(xs,-sqm4_28[start:end,5])
ax.plot(xs,-sqm5_28[start:end,5])




#find best times for intercalibration (data to be used is from night of 05/27-28, from approx. 01:30 to 2:30 am)
#print (sqm1_28_dates[100:130],sqm3_28_dates[100:130])
144/1068:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#time offset between each sqm if started approx at the same time (sqm5-sqm3 max time offset)
print ('offsets: sqm1_3=3:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')
print ('latest is sqm5, order 1-3-4-5')


#acq times for data in time window 1h30-2h30 am
start=900
end=150


xs=linspace(start,end,end-start)
fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,5])
ax.plot(xs,-sqm3_28[start:end,5])
ax.plot(xs,-sqm4_28[start:end,5])
ax.plot(xs,-sqm5_28[start:end,5])




#find best times for intercalibration (data to be used is from night of 05/27-28, from approx. 01:30 to 2:30 am)
#print (sqm1_28_dates[100:130],sqm3_28_dates[100:130])
144/1069:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#time offset between each sqm if started approx at the same time (sqm5-sqm3 max time offset)
print ('offsets: sqm1_3=3:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')
print ('latest is sqm5, order 1-3-4-5')


#acq times for data in time window 1h30-2h30 am
start=90
end=150


xs=linspace(start,end,end-start)
fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,5])
ax.plot(xs,-sqm3_28[start:end,5])
ax.plot(xs,-sqm4_28[start:end,5])
ax.plot(xs,-sqm5_28[start:end,5])




#find best times for intercalibration (data to be used is from night of 05/27-28, from approx. 01:30 to 2:30 am)
#print (sqm1_28_dates[100:130],sqm3_28_dates[100:130])
144/1070:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#time offset between each sqm if started approx at the same time (sqm5-sqm3 max time offset)
print ('offsets: sqm1_3=3:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')
print ('latest is sqm5, order 1-3-4-5')


#acq times for data in time window 1h30-2h30 am
start=90
end=170


xs=linspace(start,end,end-start)
fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,5])
ax.plot(xs,-sqm3_28[start:end,5])
ax.plot(xs,-sqm4_28[start:end,5])
ax.plot(xs,-sqm5_28[start:end,5])




#find best times for intercalibration (data to be used is from night of 05/27-28, from approx. 01:30 to 2:30 am)
#print (sqm1_28_dates[100:130],sqm3_28_dates[100:130])
144/1071:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#time offset between each sqm if started approx at the same time (sqm5-sqm3 max time offset)
print ('offsets: sqm1_3=3:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')
print ('latest is sqm5, order 1-3-4-5')


#acq times for data in time window 1h30-2h30 am
start=90
end=170


xs=linspace(start,end,end-start)
fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,5],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,5],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,5],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,5],label='sqm5')




#find best times for intercalibration (data to be used is from night of 05/27-28, from approx. 01:30 to 2:30 am)
#print (sqm1_28_dates[100:130],sqm3_28_dates[100:130])
144/1072:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#time offset between each sqm if started approx at the same time (sqm5-sqm3 max time offset)
print ('offsets: sqm1_3=3:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')
print ('latest is sqm5, order 1-3-4-5')


#acq times for data in time window 1h30-2h30 am
start=90
end=170


xs=linspace(start,end,end-start)
fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,5],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,5],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,5],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,5],label='sqm5')
ax.legend()



#find best times for intercalibration (data to be used is from night of 05/27-28, from approx. 01:30 to 2:30 am)
#print (sqm1_28_dates[100:130],sqm3_28_dates[100:130])
144/1073:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#time offset between each sqm if started approx at the same time (sqm5-sqm3 max time offset)
print ('offsets: sqm1_3=3:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')
print ('latest is sqm5, order 1-3-4-5')


#acq times for data in time window 1h30-2h30 am
start=90
end=175


xs=linspace(start,end,end-start)
fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,5],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,5],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,5],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,5],label='sqm5')
ax.legend()



#find best times for intercalibration (data to be used is from night of 05/27-28, from approx. 01:30 to 2:30 am)
#print (sqm1_28_dates[100:130],sqm3_28_dates[100:130])
144/1074:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#time offset between each sqm if started approx at the same time (sqm5-sqm3 max time offset)
print ('offsets: sqm1_3=3:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')
print ('latest is sqm5, order 1-3-4-5')


#acq times for data in time window 1h30-2h30 am
start=90
end=170


xs=linspace(start,end,end-start)
fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,5],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,5],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,5],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,5],label='sqm5')
ax.legend()



#find best times for intercalibration (data to be used is from night of 05/27-28, from approx. 01:30 to 2:30 am)
#print (sqm1_28_dates[100:130],sqm3_28_dates[100:130])
144/1075:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#time offset between each sqm if started approx at the same time (sqm5-sqm3 max time offset)
print ('offsets: sqm1_3=3:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')
print ('latest is sqm5, order 1-3-4-5')


#acq times for data in time window 1h30-2h30 am
start=90
end=175


xs=linspace(start,end,end-start)
fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,5],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,5],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,5],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,5],label='sqm5')
ax.legend()



#find best times for intercalibration (data to be used is from night of 05/27-28, from approx. 01:30 to 2:30 am)
#print (sqm1_28_dates[100:130],sqm3_28_dates[100:130])
144/1076:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#time offset between each sqm if started approx at the same time (sqm5-sqm3 max time offset)
print ('offsets: sqm1_3=3:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')
print ('latest is sqm5, order 1-3-4-5')


#acq times for data in time window 1h30-2h30 am
start=50
end=170


xs=linspace(start,end,end-start)
fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,5],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,5],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,5],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,5],label='sqm5')
ax.legend()



#find best times for intercalibration (data to be used is from night of 05/27-28, from approx. 01:30 to 2:30 am)
#print (sqm1_28_dates[100:130],sqm3_28_dates[100:130])
144/1077:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#time offset between each sqm if started approx at the same time (sqm5-sqm3 max time offset)
print ('offsets: sqm1_3=3:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')
print ('latest is sqm5, order 1-3-4-5')


#acq times for data in time window 1h30-2h30 am
start=0
end=170


xs=linspace(start,end,end-start)
fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,5],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,5],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,5],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,5],label='sqm5')
ax.legend()



#find best times for intercalibration (data to be used is from night of 05/27-28, from approx. 01:30 to 2:30 am)
#print (sqm1_28_dates[100:130],sqm3_28_dates[100:130])
144/1078:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#time offset between each sqm if started approx at the same time (sqm5-sqm3 max time offset)
print ('offsets: sqm1_3=3:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')
print ('latest is sqm5, order 1-3-4-5')


#acq times for data in time window 1h30-2h30 am
start=0
end=170


xs=linspace(start,end,end-start)
fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,5],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,5],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,5],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,5],label='sqm5')
ax.legend()
ax.set_title('CLEAR')



#find best times for intercalibration (data to be used is from night of 05/27-28, from approx. 01:30 to 2:30 am)
#print (sqm1_28_dates[100:130],sqm3_28_dates[100:130])
144/1079:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#time offset between each sqm if started approx at the same time (sqm5-sqm3 max time offset)
print ('offsets: sqm1_3=3:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')
print ('latest is sqm5, order 1-3-4-5')


#acq times for data in time window 1h30-2h30 am
start=0
end=170


xs=linspace(start,end,end-start)
fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,5],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,5],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,5],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,5],label='sqm5')
ax.legend()
ax.set_title('CLEAR')

fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,6],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,6],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,6],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,6],label='sqm5')
ax.legend()
ax.set_title('RED')

fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,7],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,7],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,7],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,7],label='sqm5')
ax.legend()
ax.set_title('GREEN')

fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,8],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,8],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,8],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,8],label='sqm5')
ax.legend()
ax.set_title('BLUE')

fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,9],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,9],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,9],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,9],label='sqm5')
ax.legend()
ax.set_title('YELLOW')



#find best times for intercalibration (data to be used is from night of 05/27-28, from approx. 01:30 to 2:30 am)
#print (sqm1_28_dates[100:130],sqm3_28_dates[100:130])
144/1080:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

ftr = [1,1/60,1/3600]
times_data1 = sqm1_dates[:,1]
times_data3 = sqm3_dates[:,1]
time_hours1=sum([a*b for a,b in zip(ftr, map(float,times_data1.split(':')))])
time_hours3=sum([a*b for a,b in zip(ftr, map(float,times_data3.split(':')))])

fig,ax=subplots(1,1,dpi=100)
ax.plot(time_hours1,sqm1[:,5],label='sqm1',color='k--')
ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k.')

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data3[int(linspace(0,len(times_data3),10)),1]),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1081:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

ftr = [1,1/60,1/3600]
times_data1 = sqm1_dates[:,1]
times_data3 = sqm3_dates[:,1]
time_hours1=sum([a*b for a,b in zip(ftr, map(float,times_data1.split(':')))])
time_hours3=sum([a*b for a,b in zip(ftr, map(float,times_data3.split(':')))])

fig,ax=subplots(1,1,dpi=100)
ax.plot(time_hours1,sqm1[:,5],label='sqm1',color='k--')
ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k.')

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data3[int(linspace(0,len(times_data3),10)),1],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1082: test_time=sqm1_dates[:,1]
144/1083:
test_time=sqm1_dates[:,1]
print (test_time)
144/1084:
test_time=sqm1_dates[:,1]
print (len(test_time))
144/1085:
test_time=sqm1_dates[:,1]
print (type(test_time)
144/1086:
test_time=sqm1_dates[:,1]
print (type(test_time))
144/1087:
test_time=sqm1_dates[:,1]
print (test_time.split(':'))
144/1088:
test_time=sqm1_dates[:,1]
print (test_time[:,.split(':'))
144/1089:
test_time=sqm1_dates[:,1]
print (test_time[:].split(':'))
144/1090:
test_time=sqm1_dates[:,1]
print (shape(test_time))
144/1091:
test_time=sqm1_dates[:,1]
test_hours=test_time.split(':')
144/1092:
test_time=sqm1_dates[:,1]
test_hours=array()
for time in test_time:
    test_hours.append(test_time.split(':'))
144/1093:
test_time=sqm1_dates[:,1]
test_hours=array(203,1)
for time in test_time:
    test_hours.append(test_time.split(':'))
144/1094:
test_time=sqm1_dates[:,1]
test_hours=array(203)
for time in test_time:
    test_hours.append(test_time.split(':'))
144/1095:
test_time=sqm1_dates[:,1]
test_hours=array(203)
for time in test_time:
    test_hours[time]=(test_time.split(':'))
144/1096:
test_time=sqm1_dates[:,1]
test_hours=array(203)
for i in len(test_time):
    test_hours[i]=(test_time[i].split(':'))
144/1097:
test_time=sqm1_dates[:,1]
print (len(test_time))
test_hours=array(203)
for i in len(test_time):
    test_hours[i]=(test_time[i].split(':'))
144/1098:
test_time=sqm1_dates[:,1]
test_hours=array(203)
print (test_hours[0])
for i in len(test_time):
    test_hours[i]=(test_time[i].split(':'))
144/1099:
test_time=sqm1_dates[:,1]
test_hours=array(203)
print (test_hours)
for i in len(test_time):
    test_hours[i]=(test_time[i].split(':'))
144/1100:
test_time=sqm1_dates[:,1]
test_hours=empty(203)
print (test_hours)
for i in len(test_time):
    test_hours[i]=(test_time[i].split(':'))
144/1101:
test_time=sqm1_dates[:,1]
test_hours=empty(203)
for i in range(len(test_time)):
    test_hours[i]=(test_time[i].split(':'))
144/1102:
test_time=sqm1_dates[:,1]
test_hours=empty(203,3)
for i in range(len(test_time)):
    test_hours[i]=(test_time[i].split(':'))
144/1103:
test_time=sqm1_dates[:,1]
test_hours=empty((203,3))
for i in range(len(test_time)):
    test_hours[i]=(test_time[i].split(':'))
144/1104:
test_time=sqm1_dates[:,1]
test_hours=empty((203,3))
for i in range(len(test_time)):
    test_hours[i]=(test_time[i].split(':'))
print (test_hours)
144/1105:
test_time=sqm1_dates[:,1]
test_hours=empty((len(test_time),3))
for i in range(len(test_time)):
    test_hours[i]=(test_time[i].split(':'))
144/1106:
test_time=sqm1_dates[:,1]
test_hours=empty((len(test_time),3))
for i in range(len(test_time)):
    test_hours[i]=(test_time[i].split(':'))
print test_hours
144/1107:
test_time=sqm1_dates[:,1]
test_hours=empty((len(test_time),3))
for i in range(len(test_time)):
    test_hours[i]=(test_time[i].split(':'))
print (test_hours)
144/1108:
test_time=sqm1_dates[:,1]
test_hours=empty((len(test_time),3))
for i in range(len(test_time)):
    test_hours[i]=(test_time[i].split(':'))
print (shape(test_hours))
144/1109:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty((len(test_time),3))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_hours[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(time_data1,sqm1[:,5],label='sqm1',color='k--')
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k.')

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[int(linspace(0,len(times_data1),10)),1],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1110:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty((len(test_time),3))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(time_data1,sqm1[:,5],label='sqm1',color='k--')
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k.')

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[int(linspace(0,len(times_data1),10)),1],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1111:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty((len(test_time),3))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,sqm1[:,5],label='sqm1',color='k--')
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k.')

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[int(linspace(0,len(times_data1),10)),1],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1112:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty((len(test_time),3))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,sqm1[:,5],label='sqm1',color='k',linestyle='--')
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[int(linspace(0,len(times_data1),10)),1],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1113:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty((len(test_time),3))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,sqm1[:,5],label='sqm1',color='k',linestyle='.')
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[int(linspace(0,len(times_data1),10)),1],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1114:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty((len(test_time),3))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,sqm1[:,5],label='sqm1',color='k.')
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[int(linspace(0,len(times_data1),10)),1],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1115:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty((len(test_time),3))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,sqm1[:,5],label='sqm1','k.')
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[int(linspace(0,len(times_data1),10)),1],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1116:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty((len(test_time),3))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,sqm1[:,5],'k.',label='sqm1')
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[int(linspace(0,len(times_data1),10)),1],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1117:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty((len(test_time),3))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1[:,5],'k.',label='sqm1')
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[int(linspace(0,len(times_data1),10)),1],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1118:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty((len(test_time),3))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1[:,5],'k.',label='sqm1',size=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[int(linspace(0,len(times_data1),10)),1],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1119:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty((len(test_time),3))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[int(linspace(0,len(times_data1),10)),1],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1120:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty((len(test_time),3))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_dates)
print (shape(times_data1))

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[int(linspace(0,len(times_data1),10)),1],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1121:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty((len(test_time),3))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_dates)
print (times_data1)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[int(linspace(0,len(times_data1),10)),1],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1122:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_dates)
print (times_data1)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[int(linspace(0,len(times_data1),10)),1],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1123:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_dates)
print (shape(times_data1))

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[int(linspace(0,len(times_data1),10)),1],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1124:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[int(linspace(0,len(times_data1),10)),1],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1125:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[int(linspace(0,len(times_data1),10)),1],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1126:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[int(linspace(0,len(times_data1[0]),10)),1],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1127:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[int(linspace(0,len(times_data1),10)),1],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1128:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[int(linspace(0,len(times_data1),10))],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1129:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[linspace(0,len(times_data1),10)],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1130:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[int(linspace(0,len(times_data1),10))],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1131:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

print (int(linspace(0,len(times_data1),10)))

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[int(linspace(0,len(times_data1),10))],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1132:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

print (linspace(0,len(times_data1),10))

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[int(linspace(0,len(times_data1),10))],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1133:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

print (array(int(linspace(0,len(times_data1),10))))

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[int(linspace(0,len(times_data1),10))],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1134:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

print (linspace(0,len(times_data1),10))

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[int(linspace(0,len(times_data1),10))],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1135:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

print (linspace(0,len(times_data1),10))

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[list(int(linspace(0,len(times_data1),10)))],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1136:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

print (linspace(0,len(times_data1),10))

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[ndarray.astype(linspace(0,len(times_data1),10))],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1137:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

print (linspace(0,len(times_data1),10))

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[ndarray.astype(int,linspace(0,len(times_data1),10))],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1138:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

print (linspace(0,len(times_data1),10))

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[ndarray.astype(nd.int,linspace(0,len(times_data1),10))],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1139:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

print (linspace(0,len(times_data1),10))

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[ndarray.astype(ndarray.int,linspace(0,len(times_data1),10))],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1140:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

print (linspace(0,len(times_data1),10))

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[ndarray.astype(numpy.int,linspace(0,len(times_data1),10))],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1141:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')

print (linspace(0,len(times_data1),10))

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
ax.set_xticklabels(times_data1[ndarray.astype(int,linspace(0,len(times_data1),10))],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1142:
test_time=sqm1_dates[:,1]
test_hours=empty((len(test_time),3))
for i in range(len(test_time)):
    test_hours[i]=(test_time[i].split(':'))
print (shape(test_hours))


print (int(test_hours))
144/1143:
test_time=sqm1_dates[:,1]
test_hours=empty((len(test_time),1))
for i in range(len(test_time)):
    test_hours[i]=(test_time[i].split(':'))
print (shape(test_hours))


print (int(test_hours))
144/1144:
test_time=sqm1_dates[:,1]
test_hours=empty((len(test_time),3))
for i in range(len(test_time)):
    test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
print (shape(test_hours))


print (int(test_hours))
144/1145:
test_time=sqm1_dates[:,1]
test_hours=empty((len(test_time),1))
for i in range(len(test_time)):
    test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
print (shape(test_hours))


print (int(test_hours))
144/1146:
test_time=sqm1_dates[:,1]
test_hours=empty((len(test_time),1))
for i in range(len(test_time)):
    test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
print (shape(test_hours))


print (test_hours)
144/1147:
test_time=sqm1_dates[:,1]
test_hours=empty((len(test_time),1))
for i in range(len(test_time)):
    test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
print (shape(test_hours))


print (test_hours.astype(int))
144/1148:
test_time=sqm1_dates[:,1]
test_hours=empty((len(test_time),1))
for i in range(len(test_time)):
    test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
print (shape(test_hours))
144/1149:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')


ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_data1_ticks_float=linspace(0,len(times_data1),10))
times_data1_ticks_int=times_data1_ticks_float.astype(int)
ax.set_xticklabels(times_data1[times_data1_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1150:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')


ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_data1_ticks_float=linspace(0,len(times_data1),10)
times_data1_ticks_int=times_data1_ticks_float.astype(int)
ax.set_xticklabels(times_data1[times_data1_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1151:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')


ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_data1_ticks_float=linspace(0,len(times_data1),10)
times_data1_ticks_int=list(times_data1_ticks_float.astype(int))
ax.set_xticklabels(times_data1[times_data1_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1152:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')


ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_data1_ticks_float=linspace(0,len(times_data1),10)
times_data1_ticks_int=times_data1_ticks_float.astype(int)
print (times_data1_ticks_int)
ax.set_xticklabels(times_data1[times_data1_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1153:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')


ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_data1_ticks_float=linspace(0,len(times_data1),10)
times_data1_ticks_int=times_data1_ticks_float.astype(int)
print type((times_data1_ticks_int))
ax.set_xticklabels(times_data1[times_data1_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1154:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')


ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_data1_ticks_float=linspace(0,len(times_data1),10)
times_data1_ticks_int=times_data1_ticks_float.astype(int)
print (type(times_data1_ticks_int))
ax.set_xticklabels(times_data1[times_data1_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1155:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')


ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_data1_ticks_float=linspace(0,len(times_data1)-1,10)
times_data1_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_data1[times_data1_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.axhline(0,ls='--')
144/1156:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')


ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_data1_ticks_float=linspace(0,len(times_data1)-1,10)
times_data1_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_data1[times_data1_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1157:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return around(test_hours,3)


times_data1 = Time_hours(sqm1_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_data1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(time_hours3,sqm3[:,5],label='sqm3',color='k')


ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_data1_ticks_float=linspace(0,len(times_data1)-1,10)
times_data1_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_data1[times_data1_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1158:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return around(test_hours,3)


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_data3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_data1_ticks_float=linspace(0,len(times_data1)-1,10)
times_data1_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_data1[times_data1_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1159:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return around(test_hours,3)


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_data3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm31_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1160:
sqm3_28=load_data('003_2019-05-28.txt')
sqm3_28_dates=load_dates('003_2019-05-28.txt')
sqm4_28=load_data('004_2019-05-28.txt')
sqm4_28_dates=load_dates('004_2019-05-28.txt')
sqm5_28=load_data('005_2019-05-28.txt')
sqm5_28_dates=load_dates('005_2019-05-28.txt')
sqm1_28=load_data('001_2019-05-28.txt')
sqm1_28_dates=load_dates('001_2019-05-28.txt')
144/1161:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return around(test_hours,3)


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_data3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm31_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1162:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return around(test_hours,3)


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm31_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1163:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return around(test_hours,3)


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1164:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return around(test_hours,3)


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1-times_sqm1
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1165:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return around(test_hours,3)


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm1[0]
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1166:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm1[0]
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1167:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[10]-times_sqm1[10]
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1168:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[10]-times_sqm1[10]
print(times_sqm1)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1169:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[10]-times_sqm1[10]
print(times_sqm1==times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1170:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[10]-times_sqm1[10]
print(times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1171:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[10]+times_sqm1[10]
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1172:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]+times_sqm1[0]
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1173:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm1[0]
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1174:
test_time=sqm1_dates[:,1]
test_hours=empty((len(test_time),1))
for i in range(len(test_time)):
    test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
print (shape(test_hours))

print ([1,2]-[1,4])
144/1175:
test_time=sqm1_dates[:,1]
test_hours=empty((len(test_time),1))
for i in range(len(test_time)):
    test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
print (shape(test_hours))

print (array(1,2)-array(1,4))
144/1176:
test_time=sqm1_dates[:,1]
test_hours=empty((len(test_time),1))
for i in range(len(test_time)):
    test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
print (shape(test_hours))

print (array([1,2])-array([1,4]))
144/1177:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=array(empty(len(test_time)))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm1[0]
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1178:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm1[0]
print(type(offset_sqm3))

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1179:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm1[0]
print(type(times_sqm1[0]))

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1180:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm1[0]
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1181:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm1[1]
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1182:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm1[2]
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1183:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[1]-times_sqm1[1]
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1184:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[1]-times_sqm3[1]
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1185:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1186:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1187:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm3[0]-times_sqm1[0]
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1188:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm3[0]-times_sqm1[0]
print(times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1189:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm3[0]-times_sqm1[0]
print(times_sqm1[0],times_sqm3[0])

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1190:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm3[0]-times_sqm1[0]+24
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1191:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]+24
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print 
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1192:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]+24
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1193:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        if test_time[i]>=24:
            test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])-24
        else test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]+24
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1194:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        if test_time[i]>=24:
            test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])-24
        else: test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]+24
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1195:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])-24
        
        if test_hours[i]>=24:test_hours[i]-=24

    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]+24
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1196:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])-24
        
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]+24
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1197:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
        
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]+24
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1198:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
        
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]+24
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print (times_sqm3_ticks_int)
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1199:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
        
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]+24
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,10)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print (times_sqm3[times_sqm3_ticks_int])
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1200:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
        
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]+24
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print (times_sqm3[times_sqm3_ticks_int])
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1201:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
        
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]+24
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=times_data1_ticks_float.astype(int)
print (list(times_sqm3[times_sqm3_ticks_int]))
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1202:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
        
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]+24
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
print (list(times_sqm3[times_sqm3_ticks_int]))
ax.set_xticklabels(times_sqm3[times_sqm3_ticks_int],rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1203:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
        
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]+24
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
print (list(times_sqm3[times_sqm3_ticks_int]))
ax.set_xticklabels(around(times_sqm3[times_sqm3_ticks_int],3),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1204:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
        
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]
print(offset_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
print (list(times_sqm3[times_sqm3_ticks_int]))
ax.set_xticklabels(around(times_sqm3[times_sqm3_ticks_int],3),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1205:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
        
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
print (list(times_sqm3[times_sqm3_ticks_int]))
#ax.set_xticklabels(around(times_sqm3[times_sqm3_ticks_int],3),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1206:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
        
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
print (list(times_sqm3[times_sqm3_ticks_int]))
ax.set_xticklabels(around(times_sqm3[times_sqm3_ticks_int],3),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1207:
tester=array([1,2,3,23,24,25,2,3])
for i in range (len(tester)):
    if tester[i]>=24:tester[i]-24
    print tester[i]
144/1208:
tester=array([1,2,3,23,24,25,2,3])
for i in range (len(tester)):
    if tester[i]>=24:tester[i]-24
    print (tester[i])
144/1209:
tester=array([1,2,3,23,24,25,2,3])
for i in range (len(tester)):
    if tester[i]>=24:tester[i]-=24
    print (tester[i])
144/1210:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
        if test_hours[i]>=24:test_hours[i]-=24
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
print (list(times_sqm3[times_sqm3_ticks_int]))
ax.set_xticklabels(around(times_sqm3[times_sqm3_ticks_int],3),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1211:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
        if test_hours[i]>=24:test_hours[i]-=24
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1+4,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
print (list(times_sqm3[times_sqm3_ticks_int]))
ax.set_xticklabels(around(times_sqm3[times_sqm3_ticks_int],3),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1212:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
        if test_hours[i]>=24:test_hours[i]-=24
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1+4,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
print (list(times_sqm3[times_sqm3_ticks_int]))
ax.set_xticklabels(around(times_sqm3[times_sqm3_ticks_int],3),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1213:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
        if test_hours[i]>=24:test_hours[i]-=24
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

print (times_sqm1+8,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
print (list(times_sqm3[times_sqm3_ticks_int]))
ax.set_xticklabels(around(times_sqm3[times_sqm3_ticks_int],3),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1214:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
        if test_hours[i]>=24:test_hours[i]-=24
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

print (times_sqm1+20,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
print (list(times_sqm3[times_sqm3_ticks_int]))
ax.set_xticklabels(around(times_sqm3[times_sqm3_ticks_int],3),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1215:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
        if test_hours[i]>=24:test_hours[i]-=24
    return test_hours


times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

print (times_sqm1+20,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1+20,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
print (list(times_sqm3[times_sqm3_ticks_int]))
ax.set_xticklabels(around(times_sqm3[times_sqm3_ticks_int],3),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1216:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates,*offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])
        if test_hours[i]>=24:test_hours[i]-=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1+20,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
print (list(times_sqm3[times_sqm3_ticks_int]))
ax.set_xticklabels(around(times_sqm3[times_sqm3_ticks_int],3),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1217:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates,*offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]>=24:test_hours[i]-=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20)
times_sqm3 = Time_hours(sqm3_28_dates)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1+20,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
print (list(times_sqm3[times_sqm3_ticks_int]))
ax.set_xticklabels(around(times_sqm3[times_sqm3_ticks_int],3),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1218:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]>=24:test_hours[i]-=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1+20,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
print (list(times_sqm3[times_sqm3_ticks_int]))
ax.set_xticklabels(around(times_sqm3[times_sqm3_ticks_int],3),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1219:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]>=24:test_hours[i]-=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

#print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1+20,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
print (list(times_sqm3[times_sqm3_ticks_int]))
ax.set_xticklabels(around(times_sqm3[times_sqm3_ticks_int],3),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1220:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]>=24:test_hours[i]-=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,24)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

#print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1+20,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
print (list(times_sqm3[times_sqm3_ticks_int]))
ax.set_xticklabels(around(times_sqm3[times_sqm3_ticks_int],3),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1221:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]>=12:test_hours[i]+12
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,24)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

#print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1+20,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
print (list(times_sqm3[times_sqm3_ticks_int]))
ax.set_xticklabels(around(times_sqm3[times_sqm3_ticks_int],3),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1222:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]>=12:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,24)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

#print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1+20,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
print (list(times_sqm3[times_sqm3_ticks_int]))
ax.set_xticklabels(around(times_sqm3[times_sqm3_ticks_int],3),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1223:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]>=12:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,24)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

#print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1+20,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
print (list(times_sqm3[times_sqm3_ticks_int]))
ax.set_xticklabels(around(times_sqm3[times_sqm3_ticks_int],3),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1224:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]>=12:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,24)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

#print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1+20,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
print (list(times_sqm3[times_sqm3_ticks_int].astype(str)))
ax.set_xticklabels(around(times_sqm3[times_sqm3_ticks_int],3),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1225:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]>=12:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,24)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

#print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1+20,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
print (list(times_sqm3[times_sqm3_ticks_int].astype(str)))
ax.set_xticklabels(around(times_sqm3[times_sqm3_ticks_int].astype(str,3),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1226:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]>=12:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,24)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

#print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1+20,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
print (list(times_sqm3[times_sqm3_ticks_int].astype(str)))
ax.set_xticklabels(around(times_sqm3[times_sqm3_ticks_int].astype(str),3),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1227:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]>=12:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,24)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

#print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1+20,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
print (list(times_sqm3[times_sqm3_ticks_int].astype(str)))
ax.set_xticklabels(around(times_sqm3[times_sqm3_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1228:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]>=12:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,24)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

#print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1+20,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
ax.set_xticklabels(around(times_sqm3[times_sqm3_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1229:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]>=12:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,24)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

#print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1+20,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
ax.set_xticklabels(around(times_sqm3[times_sqm3_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')

print (times_sqm1)
144/1230:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]>=12:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,24)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

#print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1+20,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
ax.set_xticklabels(around(times_sqm3[times_sqm3_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1231:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]>=12:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,24)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

#print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1+20,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm3_ticks_float=linspace(0,len(times_sqm3)-1,4)
times_sqm3_ticks_int=list(times_data1_ticks_float.astype(int))
ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1232:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]>=12:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,24)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

#print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1+20,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1233:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]>=12:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,24)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1+20,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1234:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        #if test_hours[i]>=12:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,24)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1+20,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1235:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        #if test_hours[i]>=12:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,0)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1+20,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1236:
tester=array([1,2,3,23,24,25,2,3])
for i in range (len(tester)):
    if tester[i]>=24:tester[i]-=24
    print (tester[i])
    
print (sqm1_28_dates)
144/1237:
tester=array([1,2,3,23,24,25,2,3])
for i in range (len(tester)):
    if tester[i]>=24:tester[i]-=24
    print (tester[i])
    
print (sqm1_28_dates[1,0],sqm3_28_dates[1,0])
144/1238:
tester=array([1,2,3,23,24,25,2,3])
for i in range (len(tester)):
    if tester[i]>=24:tester[i]-=24
    print (tester[i])
    
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1])
144/1239:
tester=array([1,2,3,23,24,25,2,3])
for i in range (len(tester)):
    if tester[i]>=24:tester[i]-=24
    print (tester[i])
    
print (times_sqm1[0]-times_sqm3[0])
144/1240:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        #if test_hours[i]>=12:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1+20,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1241:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        #if test_hours[i]>=12:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

#print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1+20,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1242:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        #if test_hours[i]>=12:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

#print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1243:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        #if test_hours[i]>=12:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

#print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1244:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        #if test_hours[i]>=12:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

#print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1245:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        #if test_hours[i]>=12:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

#print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1246:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        #if test_hours[i]>=12:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,44.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,24)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

#print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1247:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,44.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,24)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

#print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1248:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

#print (times_sqm1,times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1249:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

print (times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1250:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

print (times_sqm1)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1251:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12.0:test_hours[i]+24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

print (times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1252:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]

print (times_sqm3)

fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1253:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1254:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1255:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
144/1256: plot(times_sqm1,times_sqm3)
144/1257: plot(times_sqm1,times_sqm3[:-24])
144/1258: plot(times_sqm1,times_sqm3[:-24],figsize=8,3)
144/1259: plot(times_sqm1,times_sqm3[:-24],figsize=(8,3))
144/1260: plot(times_sqm1,times_sqm3[:-24],size=(8,3))
144/1261: plot(times_sqm1,times_sqm3[:-24],width=10)
144/1262: plot(times_sqm1,times_sqm3[:-24])
144/1263: plot(linspace(0,10,170)times_sqm1,times_sqm3[:-24])
144/1264: plot(linspace(0,10,170),times_sqm1,times_sqm3[:-24])
144/1265: plot(linspace(0,10,170),times_sqm1,linspace(0,10,170),times_sqm3[:-24])
144/1266:
#Determine time offset between acqs after night reboot (offset of fits)

def linear_fuc(data,a,b):
    return data*a+b

xs=linspace(0,100,70)
sqm1_fit_param=curvefit(linear_func,xs,times_sqm1[100:])

plot(linspace(0,10,170),times_sqm1,linspace(0,10,170),times_sqm3[:-24])
144/1267:
from pylab import *
from matplotlib import *
import datetime as dt
from scipy.optimize import curvefit as cf
144/1268:
#Determine time offset between acqs after night reboot (offset of fits)

def linear_fuc(data,a,b):
    return data*a+b

xs=linspace(0,100,70)
sqm1_fit_param=curve_fit(linear_func,xs,times_sqm1[100:])

plot(linspace(0,10,170),times_sqm1,linspace(0,10,170),times_sqm3[:-24])
144/1269:
from pylab import *
from matplotlib import *
import datetime as dt
from scipy.optimize import curve_fit as cf
144/1270:
#Determine time offset between acqs after night reboot (offset of fits)

def linear_fuc(data,a,b):
    return data*a+b

xs=linspace(0,100,70)
sqm1_fit_param=cf(linear_func,xs,times_sqm1[100:])

plot(linspace(0,10,170),times_sqm1,linspace(0,10,170),times_sqm3[:-24])
144/1271:
from pylab import *
from matplotlib import *
import datetime as dt
from scipy.optimize import curve_fit as cfit
144/1272:
#Determine time offset between acqs after night reboot (offset of fits)

def linear_func(data,a,b):
    return data*a+b

xs=linspace(0,100,70)
sqm1_fit_param=cfit(linear_func,xs,times_sqm1[100:])

plot(linspace(0,10,170),times_sqm1,linspace(0,10,170),times_sqm3[:-24])
144/1273:
#Determine time offset between acqs after night reboot (offset of fits)

def linear_func(data,a,b):
    return data*a+b

xs=linspace(0,100,70)
sqm1_fit_params=cfit(linear_func,xs,times_sqm1[100:])

plot(xs,times_sqm1,xs,times_sqm3[:-24])
plot(xs,linear_func(xs,sqm1_fit_params[0],sqm1_fit_params[1]))
144/1274:
#Determine time offset between acqs after night reboot (offset of fits)

def linear_func(data,a,b):
    return data*a+b

xs=linspace(0,100,70)
sqm1_fit_params=cfit(linear_func,xs,times_sqm1[100:])

plot(xs,times_sqm1,'.')
plot(xs,times_sqm3[:-24],'.')
plot(xs,linear_func(xs,sqm1_fit_params[0],sqm1_fit_params[1]))
144/1275:
#Determine time offset between acqs after night reboot (offset of fits)

def linear_func(data,a,b):
    return data*a+b

xs=linspace(0,100,170)
xs_fit=xs[100:]
sqm1_fit_params=cfit(linear_func,xs,times_sqm1[100:])

plot(xs,times_sqm1,'.')
plot(xs,times_sqm3[:-24],'.')
plot(xs,linear_func(xs,sqm1_fit_params[0],sqm1_fit_params[1]))
144/1276:
#Determine time offset between acqs after night reboot (offset of fits)

def linear_func(data,a,b):
    return data*a+b

xs=linspace(0,100,170)
xs_fit=xs[100:]
sqm1_fit_params=cfit(linear_func,xs_fit,times_sqm1[100:])

plot(xs,times_sqm1,'.')
plot(xs,times_sqm3[:-24],'.')
plot(xs,linear_func(xs,sqm1_fit_params[0],sqm1_fit_params[1]))
144/1277:
#Determine time offset between acqs after night reboot (offset of fits)

def linear_func(data,a,b):
    return data*a+b

xs=linspace(0,100,170)
xs_fit=xs[100:]
sqm1_fit_params=cfit(linear_func,xs_fit,times_sqm1[100:])

plot(xs,times_sqm1,'.')
plot(xs,times_sqm3[:-24],'.')
plot(xs,linear_func(xs,sqm1_fit_params[0][0],sqm1_fit_params[0][1]))
144/1278:
#Determine time offset between acqs after night reboot (offset of fits)

def linear_func(data,a,b):
    return data*a+b

xs=linspace(0,100,170)
xs_fit=xs[100:]
sqm1_fit_params=cfit(linear_func,xs_fit,times_sqm1[100:])
sqm3_fit_params=cfit(linear_func,xs_fit,times_sqm3[100:-24])

plot(xs,times_sqm1,'.')
plot(xs,times_sqm3[:-24],'.')
plot(xs,linear_func(xs,sqm1_fit_params[0][0],sqm1_fit_params[0][1]))
plot(xs,linear_func(xs,sqm3_fit_params[0][0],sqm3_fit_params[0][1]))
144/1279:
#Determine time offset between acqs after night reboot (offset of fits)

def linear_func(data,a,b):
    return data*a+b

xs=linspace(0,100,170)
xs_fit=xs[100:]
sqm1_fit_params=cfit(linear_func,xs_fit,times_sqm1[100:])
sqm3_fit_params=cfit(linear_func,xs_fit,times_sqm3[100:-24])

print ('Y-axis crossing offset:',sqm1_fit_params[0][1]-sqm3_fit_params[0][1] )

plot(xs,times_sqm1,'.')
plot(xs,times_sqm3[:-24],'.')
plot(xs,linear_func(xs,sqm1_fit_params[0][0],sqm1_fit_params[0][1]))
plot(xs,linear_func(xs,sqm3_fit_params[0][0],sqm3_fit_params[0][1]))
144/1280:
#Determine time offset between acqs after night reboot (offset of fits)

def linear_func(data,a,b):
    return data*a+b

xs=linspace(0,200,170)
xs_fit=xs[100:]
sqm1_fit_params=cfit(linear_func,xs_fit,times_sqm1[100:])
sqm3_fit_params=cfit(linear_func,xs_fit,times_sqm3[100:-24])

print ('Y-axis crossing offset:',sqm1_fit_params[0][1]-sqm3_fit_params[0][1] )

plot(xs,times_sqm1,'.')
plot(xs,times_sqm3[:-24],'.')
plot(xs,linear_func(xs,sqm1_fit_params[0][0],sqm1_fit_params[0][1]))
plot(xs,linear_func(xs,sqm3_fit_params[0][0],sqm3_fit_params[0][1]))
144/1281:
#Determine time offset between acqs after night reboot (offset of fits)

def linear_func(data,a,b):
    return data*a+b

xs=linspace(0,100,170)
xs_fit=xs[100:]
sqm1_fit_params=cfit(linear_func,xs_fit,times_sqm1[100:])
sqm3_fit_params=cfit(linear_func,xs_fit,times_sqm3[100:-24])

print ('Y-axis crossing offset:',sqm1_fit_params[0][1]-sqm3_fit_params[0][1] )

plot(xs,times_sqm1,'.')
plot(xs,times_sqm3[:-24],'.')
plot(xs,linear_func(xs,sqm1_fit_params[0][0],sqm1_fit_params[0][1]))
plot(xs,linear_func(xs,sqm3_fit_params[0][0],sqm3_fit_params[0][1]))
144/1282:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(26.5,28)
144/1283:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(26.5,26.7)
144/1284:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(27.5,27.7)
144/1285:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(28.5,28.7)
144/1286:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(29.5,29.7)
144/1287:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(29,29.2)
144/1288:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(28,28.2)
144/1289:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(28.075,28.08)
144/1290:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(28.075,28.085)
144/1291:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_dates[0,0])+' to '+str(sqm1_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
#ax.set_xlim(28.075,28.085)
144/1292:
#Determine time offset between acqs after night reboot (offset of fits)

def linear_func(data,a,b):
    return data*a+b

xs=linspace(0,100,170)
xs_fit=xs[100:]
sqm1_fit_params=cfit(linear_func,xs_fit,times_sqm1[100:])
sqm3_fit_params=cfit(linear_func,xs_fit,times_sqm3[100:-24])

print ('Y-axis crossing offset (:',sqm1_fit_params[0][1]-sqm3_fit_params[0][1] )

plot(xs,times_sqm1,'.')
plot(xs,times_sqm3[:-24],'.')
plot(xs,linear_func(xs,sqm1_fit_params[0][0],sqm1_fit_params[0][1]))
plot(xs,linear_func(xs,sqm3_fit_params[0][0],sqm3_fit_params[0][1]))



print (times_sqm1)
144/1293:
#Determine time offset between acqs after night reboot (offset of fits)

def linear_func(data,a,b):
    return data*a+b

xs=linspace(0,100,170)
xs_fit=xs[100:]
sqm1_fit_params=cfit(linear_func,xs_fit,times_sqm1[100:])
sqm3_fit_params=cfit(linear_func,xs_fit,times_sqm3[100:-24])

print ('Y-axis crossing offset (:',sqm1_fit_params[0][1]-sqm3_fit_params[0][1] )

plot(xs,times_sqm1,'.')
plot(xs,times_sqm3[:-24],'.')
plot(xs,linear_func(xs,sqm1_fit_params[0][0],sqm1_fit_params[0][1]))
plot(xs,linear_func(xs,sqm3_fit_params[0][0],sqm3_fit_params[0][1]))



#print (times_sqm1)
144/1294:
#Determine time offset between acqs after night reboot (offset of fits)

def linear_func(data,a,b):
    return data*a+b

xs=linspace(0,100,170)
xs_fit=xs[100:]
sqm1_fit_params=cfit(linear_func,xs_fit,times_sqm1[100:])
sqm3_fit_params=cfit(linear_func,xs_fit,times_sqm3[100:-24])

print ('Y-axis crossing offset (in hours):',sqm1_fit_params[0][1]-sqm3_fit_params[0][1] )

plot(xs,times_sqm1,'.')
plot(xs,times_sqm3[:-24],'.')
plot(xs,linear_func(xs,sqm1_fit_params[0][0],sqm1_fit_params[0][1]))
plot(xs,linear_func(xs,sqm3_fit_params[0][0],sqm3_fit_params[0][1]))



#print (times_sqm1)
144/1295:
#Determine time offset between acqs after night reboot (offset of fits)

def linear_func(data,a,b):
    return data*a+b

xs=linspace(0,1,170)
xs_fit=xs[100:]
sqm1_fit_params=cfit(linear_func,xs_fit,times_sqm1[100:])
sqm3_fit_params=cfit(linear_func,xs_fit,times_sqm3[100:-24])

print ('Y-axis crossing offset (in hours):',sqm1_fit_params[0][1]-sqm3_fit_params[0][1] )

plot(xs,times_sqm1,'.')
plot(xs,times_sqm3[:-24],'.')
plot(xs,linear_func(xs,sqm1_fit_params[0][0],sqm1_fit_params[0][1]))
plot(xs,linear_func(xs,sqm3_fit_params[0][0],sqm3_fit_params[0][1]))



#print (times_sqm1)
144/1296:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm1_28_dates[0,0])+' to '+str(sqm1_28_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
#ax.set_xlim(28.075,28.085)
144/1297: print (sqm1_28_dates[0,0])
144/1298:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
#ax.set_xlim(28.075,28.085)
144/1299:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
#ax.set_xlim(28.075,28.085)
144/1300:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
#ax.set_xlim(28.075,28.085)
ax.vline(times_sqm1[100])
144/1301:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
#ax.set_xlim(28.075,28.085)
ax.axvline(times_sqm1[100])
144/1302:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
#ax.set_xlim(28.075,28.085)
ax.axvline(times_sqm1[80])
144/1303:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
#ax.set_xlim(28.075,28.085)
ax.axvline(times_sqm1[75])
144/1304:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
#ax.set_xlim(28.075,28.085)
ax.axvline(times_sqm1[75])
ax.axvline(times_sqm1[100])
144/1305:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
#ax.set_xlim(28.075,28.085)
ax.axvline(times_sqm1[75])
ax.axvline(times_sqm1[100])
ax.axvline(times_sqm3[75])
144/1306:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
#ax.set_xlim(28.075,28.085)
ax.axvline(times_sqm1[75])
ax.axvline(times_sqm1[100])
ax.axvline(times_sqm3[100])
144/1307:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
#ax.set_xlim(28.075,28.085)
ax.axvline(times_sqm1[75])
ax.axvline(times_sqm1[100])
ax.axvline(times_sqm3[103])
144/1308:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
#ax.set_xlim(28.075,28.085)
ax.axvline(times_sqm1[75])
ax.axvline(times_sqm1[100])
ax.axvline(times_sqm3[101])
144/1309:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
#ax.set_xlim(28.075,28.085)
ax.axvline(times_sqm1[75])
ax.axvline(times_sqm1[100])
ax.axvline(times_sqm3[99])
144/1310:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
#ax.set_xlim(28.075,28.085)
ax.axvline(times_sqm1[75])
ax.axvline(times_sqm1[100])
ax.axvline(times_sqm3[99])
ax.axvline(124)
144/1311:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
#ax.set_xlim(28.075,28.085)
ax.axvline(times_sqm1[75])
ax.axvline(times_sqm1[100])
ax.axvline(times_sqm3[99])
ax.axvline(times_sqm3[124])
144/1312:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(25,26.3)
ax.axvline(times_sqm1[75])
ax.axvline(times_sqm1[100])
ax.axvline(times_sqm3[99])
ax.axvline(times_sqm3[124])
144/1313:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(25,26.3)
ax.axvline(times_sqm1[75])
ax.axvline(times_sqm1[100])
ax.axvline(times_sqm3[98])
ax.axvline(times_sqm3[124])
144/1314:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(25,26.3)
ax.axvline(times_sqm1[75])
ax.axvline(times_sqm1[100])
ax.axvline(times_sqm3[99])
ax.axvline(times_sqm3[124])
144/1315:
#intercalibration graph for cosqm1 vs 3-4-5
#time to float in hours, negative hours represent before midnight acq times

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(25,26.7)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #first value for average sqm1
ax.axvline(times_sqm3[99])  #first value for average sqm3
ax.axvline(times_sqm3[124]) #f value for average sqm3
144/1316:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:100,5],-sqm3_28[99:124],'k.',label='sqm3vssqm1',markersize=3)
ax.set_title('CLEAR')
144/1317:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:100,5],-sqm3_28[99:124,5],'k.',label='sqm3vssqm1',markersize=3)
ax.set_title('CLEAR')
144/1318:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:100,5],-sqm3_28[99:124,5],'k.',label='sqm3 vs sqm1',markersize=3)
ax.legend()
ax.set_title('CLEAR')
144/1319:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print(-sqm1_28[75:100,5])

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:100,5],-sqm3_28[99:124,5],'k.',label='sqm3 vs sqm1',markersize=3)
ax.legend()
ax.set_title('CLEAR')
144/1320:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(25)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
ax.axvline(times_sqm3[99])  #first value for average sqm3
ax.axvline(times_sqm3[124]) #last value for average sqm3
144/1321:
test_x=array([1,2,3,6,5,4])
test_y=array([5,6,7,8,9,10])
plot(test_x,test_y)
144/1322:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print(avg(-sqm1_28[75:100,5]))

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:100,5],-sqm3_28[99:124,5],'k.',label='sqm3 vs sqm1',markersize=3)
ax.legend()
ax.set_title('CLEAR')
144/1323:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print(average(-sqm1_28[75:100,5]))

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:100,5],-sqm3_28[99:124,5],'k.',label='sqm3 vs sqm1',markersize=3)
ax.legend()
ax.set_title('CLEAR')
144/1324:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1:',average(-sqm1_28[75:100,5]))
print('average sqm1:',average(-sqm3_28[99:124,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:100,5],-sqm3_28[99:124,5],'k.',label='sqm3 vs sqm1',markersize=3)
ax.legend()
ax.set_title('CLEAR')
144/1325:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1:',average(-sqm1_28[75:100,5]))
print('average sqm1:',average(-sqm3_28[99:124,5]))
print('average offset:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:100,5],-sqm3_28[99:124,5],'k.',label='sqm3 vs sqm1',markersize=3)
ax.legend()
ax.set_title('CLEAR')
144/1326:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:100,5],-sqm3_28[99:124,5],'k.',label='sqm3 vs sqm1',markersize=3)
ax.legend()
ax.set_title('CLEAR')
144/1327:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:150,5],-sqm3_28[99:174,5],'k.',label='sqm3 vs sqm1',markersize=3)
ax.legend()
ax.set_title('CLEAR')
144/1328:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:150,5],-sqm3_28[99:174,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:150,6],-sqm3_28[99:174,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:150,7],-sqm3_28[99:174,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:150,8],-sqm3_28[99:174,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:150,9],-sqm3_28[99:174,9],'y.',label='Y',markersize=3)

ax.legend()
ax.set_title('CLEAR')
144/1329:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:150,5],-sqm3_28[99:174,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:150,6],-sqm3_28[99:174,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:150,7],-sqm3_28[99:174,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:150,8],-sqm3_28[99:174,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:150,9],-sqm3_28[99:174,9],'y.',label='Y',markersize=3)

ax.legend()
ax.set_title('SQM3 vs SQM1')
144/1330:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=150)
ax.plot(-sqm1_28[75:150,5],-sqm3_28[99:174,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:150,6],-sqm3_28[99:174,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:150,7],-sqm3_28[99:174,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:150,8],-sqm3_28[99:174,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:150,9],-sqm3_28[99:174,9],'y.',label='Y',markersize=3)

ax.legend()
ax.set_title('SQM3 vs SQM1')
144/1331:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:150,5],-sqm3_28[99:174,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:150,6],-sqm3_28[99:174,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:150,7],-sqm3_28[99:174,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:150,8],-sqm3_28[99:174,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:150,9],-sqm3_28[99:174,9],'y.',label='Y',markersize=3)

ax.legend()
ax.set_title('SQM3 vs SQM1')
144/1332:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(25)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
ax.axvline(times_sqm3[99])  #first value for average sqm3
ax.axvline(times_sqm3[124]) #last value for average sqm3
144/1333:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'b.',label='sqm3',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(25)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
ax.axvline(times_sqm3[99])  #first value for average sqm3
ax.axvline(times_sqm3[124]) #last value for average sqm3
144/1334:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'b.',label='sqm4',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(25)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
ax.axvline(times_sqm3[99])  #first value for average sqm3
ax.axvline(times_sqm3[124]) #last value for average sqm3
144/1335:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm4',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(25)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
ax.axvline(times_sqm3[99])  #first value for average sqm3
ax.axvline(times_sqm3[124]) #last value for average sqm3
144/1336:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'b.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'b.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(25)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
ax.axvline(times_sqm3[99])  #first value for average sqm3
ax.axvline(times_sqm3[124]) #last value for average sqm3
144/1337:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(25)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
ax.axvline(times_sqm3[99])  #first value for average sqm3
ax.axvline(times_sqm3[124]) #last value for average sqm3
144/1338:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm3_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm3_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm3_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm3_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm3_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM1')
144/1339:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm3_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm3_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm3_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm3_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm3_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM1')
ax.xlim(-12,-9)
144/1340:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm3_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm3_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm3_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm3_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm3_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM1')
ax.set_xlim(-12,-9)
144/1341:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm3_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm3_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm3_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm3_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm3_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM1')
#ax.set_xlim(-12,-9)
144/1342:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm3_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm3_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm3_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm3_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm3_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM1')
#ax.set_xlim(-12,-9)

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm4_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm4_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm4_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm4_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm4_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM4 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm5_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm5_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm5_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm5_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm5_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM5 vs SQM1')
144/1343:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm3_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm3_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm3_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm3_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm3_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM1')
#ax.set_xlim(-12,-9)

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:160,5],-sqm4_28[99:184,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:160,6],-sqm4_28[99:184,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:160,7],-sqm4_28[99:184,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:160,8],-sqm4_28[99:184,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:160,9],-sqm4_28[99:184,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM4 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm5_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm5_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm5_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm5_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm5_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM5 vs SQM1')
144/1344:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm3_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm3_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm3_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm3_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm3_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM1')
#ax.set_xlim(-12,-9)

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:150,5],-sqm4_28[99:174,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:150,6],-sqm4_28[99:174,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:150,7],-sqm4_28[99:174,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:150,8],-sqm4_28[99:174,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:150,9],-sqm4_28[99:174,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM4 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm5_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm5_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm5_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm5_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm5_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM5 vs SQM1')
144/1345:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm3_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm3_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm3_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm3_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm3_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM1')
#ax.set_xlim(-12,-9)

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:150,5],-sqm4_28[99:174,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:150,6],-sqm4_28[99:174,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:150,7],-sqm4_28[99:174,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:150,8],-sqm4_28[99:174,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:150,9],-sqm4_28[99:174,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM4 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:160,5],-sqm5_28[99:184,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:160,6],-sqm5_28[99:184,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:160,7],-sqm5_28[99:184,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:160,8],-sqm5_28[99:184,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:160,9],-sqm5_28[99:184,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM5 vs SQM1')
144/1346:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm3_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm3_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm3_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm3_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm3_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM1')
#ax.set_xlim(-12,-9)

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:150,5],-sqm4_28[99:174,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:150,6],-sqm4_28[99:174,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:150,7],-sqm4_28[99:174,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:150,8],-sqm4_28[99:174,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:150,9],-sqm4_28[99:174,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM4 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:150,5],-sqm5_28[99:174,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:150,6],-sqm5_28[99:174,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:150,7],-sqm5_28[99:174,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:150,8],-sqm5_28[99:174,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:150,9],-sqm5_28[99:174,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM5 vs SQM1')
144/1347:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm3_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm3_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm3_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm3_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm3_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM1')
#ax.set_xlim(-12,-9)

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:150,5],-sqm4_28[99:174,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:150,6],-sqm4_28[99:174,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:150,7],-sqm4_28[99:174,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:150,8],-sqm4_28[99:174,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:150,9],-sqm4_28[99:174,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM4 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:148,5],-sqm5_28[99:172,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:148,6],-sqm5_28[99:172,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:148,7],-sqm5_28[99:172,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:148,8],-sqm5_28[99:172,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:148,9],-sqm5_28[99:172,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM5 vs SQM1')
144/1348:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm3_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm3_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm3_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm3_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm3_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM1')
#ax.set_xlim(-12,-9)

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:150,5],-sqm4_28[99:174,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:150,6],-sqm4_28[99:174,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:150,7],-sqm4_28[99:174,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:150,8],-sqm4_28[99:174,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:150,9],-sqm4_28[99:174,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM4 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:148,5],-sqm5_28[99:172,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:148,6],-sqm5_28[99:172,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:148,7],-sqm5_28[99:172,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:148,8],-sqm5_28[99:172,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:148,9],-sqm5_28[99:172,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM5 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm3_28[99:204,5],-sqm5_28[99:172,5],'k.',label='clear',markersize=3)
ax.plot(-sqm3_28[99:204,6],-sqm5_28[99:172,6],'r.',label='R',markersize=3)
ax.plot(-sqm3_28[99:204,7],-sqm5_28[99:172,7],'g.',label='G',markersize=3)
ax.plot(-sqm3_28[99:204,8],-sqm5_28[99:172,8],'b.',label='B',markersize=3)
ax.plot(-sqm3_28[99:204,9],-sqm5_28[99:172,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM4')
144/1349:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm3_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm3_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm3_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm3_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm3_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM1')
#ax.set_xlim(-12,-9)

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:150,5],-sqm4_28[99:174,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:150,6],-sqm4_28[99:174,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:150,7],-sqm4_28[99:174,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:150,8],-sqm4_28[99:174,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:150,9],-sqm4_28[99:174,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM4 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:148,5],-sqm5_28[99:172,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:148,6],-sqm5_28[99:172,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:148,7],-sqm5_28[99:172,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:148,8],-sqm5_28[99:172,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:148,9],-sqm5_28[99:172,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM5 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm3_28[99:181,5],-sqm5_28[99:172,5],'k.',label='clear',markersize=3)
ax.plot(-sqm3_28[99:181,6],-sqm5_28[99:172,6],'r.',label='R',markersize=3)
ax.plot(-sqm3_28[99:181,7],-sqm5_28[99:172,7],'g.',label='G',markersize=3)
ax.plot(-sqm3_28[99:181,8],-sqm5_28[99:172,8],'b.',label='B',markersize=3)
ax.plot(-sqm3_28[99:181,9],-sqm5_28[99:172,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM4')
144/1350:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm3_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm3_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm3_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm3_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm3_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM1')
#ax.set_xlim(-12,-9)

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:150,5],-sqm4_28[99:174,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:150,6],-sqm4_28[99:174,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:150,7],-sqm4_28[99:174,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:150,8],-sqm4_28[99:174,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:150,9],-sqm4_28[99:174,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM4 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:148,5],-sqm5_28[99:172,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:148,6],-sqm5_28[99:172,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:148,7],-sqm5_28[99:172,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:148,8],-sqm5_28[99:172,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:148,9],-sqm5_28[99:172,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM5 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm3_28[99:172,5],-sqm5_28[99:172,5],'k.',label='clear',markersize=3)
ax.plot(-sqm3_28[99:172,6],-sqm5_28[99:172,6],'r.',label='R',markersize=3)
ax.plot(-sqm3_28[99:172,7],-sqm5_28[99:172,7],'g.',label='G',markersize=3)
ax.plot(-sqm3_28[99:172,8],-sqm5_28[99:172,8],'b.',label='B',markersize=3)
ax.plot(-sqm3_28[99:172,9],-sqm5_28[99:172,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM4')
144/1351:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(25)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3
ax.axvline(times_sqm4[100])
144/1352:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(25)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3
#ax.axvline(times_sqm4[100])
144/1353:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(25)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3
ax.axvline(times_sqm4[100])
144/1354:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(25)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3
ax.axvline(times_sqm4[90])
144/1355:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(25)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3
ax.axvline(times_sqm4[80])
144/1356:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(24)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3
ax.axvline(times_sqm4[80])
144/1357:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(24)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3
ax.axvline(times_sqm4[83])
144/1358:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(24)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3
ax.axvline(times_sqm4[84])
144/1359:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(24)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3
ax.axvline(times_sqm4[82])
144/1360:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(24)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3
ax.axvline(times_sqm4[81])
144/1361:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(24)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3
ax.axvline(times_sqm4[82])
144/1362:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(24)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3
ax.axvline(times_sqm4[82])
ax.axvline(times_sqm4[107])
144/1363:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(24)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3   
#ax.axvline(times_sqm4[82])   #first value for average sqm4
#ax.axvline(times_sqm4[107])  #last value for average sqm4
ax.axvline(times_sqm5[82])   #first value for average sqm5
ax.axvline(times_sqm5[107])  #last value for average sqm5
144/1364:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(24)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3   
#ax.axvline(times_sqm4[82])   #first value for average sqm4
#ax.axvline(times_sqm4[107])  #last value for average sqm4
ax.axvline(times_sqm5[76])   #first value for average sqm5
ax.axvline(times_sqm5[107])  #last value for average sqm5
144/1365:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(24)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3   
#ax.axvline(times_sqm4[82])   #first value for average sqm4
#ax.axvline(times_sqm4[107])  #last value for average sqm4
ax.axvline(times_sqm5[77])   #first value for average sqm5
ax.axvline(times_sqm5[107])  #last value for average sqm5
144/1366:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(24)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3   
#ax.axvline(times_sqm4[82])   #first value for average sqm4
#ax.axvline(times_sqm4[107])  #last value for average sqm4
ax.axvline(times_sqm5[77])   #first value for average sqm5
ax.axvline(times_sqm5[102])  #last value for average sqm5
144/1367:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(24)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3   
#ax.axvline(times_sqm4[82])   #first value for average sqm4
#ax.axvline(times_sqm4[107])  #last value for average sqm4
ax.axvline(times_sqm5[77])   #first value for average sqm5
ax.axvline(times_sqm5[101])  #last value for average sqm5
144/1368:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(24)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3   
#ax.axvline(times_sqm4[82])   #first value for average sqm4
#ax.axvline(times_sqm4[107])  #last value for average sqm4
ax.axvline(times_sqm5[77])   #first value for average sqm5
ax.axvline(times_sqm5[103])  #last value for average sqm5
144/1369:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(24)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3   
#ax.axvline(times_sqm4[82])   #first value for average sqm4
#ax.axvline(times_sqm4[107])  #last value for average sqm4
ax.axvline(times_sqm5[77])   #first value for average sqm5
ax.axvline(times_sqm5[102])  #last value for average sqm5
144/1370:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
#ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
#ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(24)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3   
#ax.axvline(times_sqm4[82])   #first value for average sqm4
#ax.axvline(times_sqm4[107])  #last value for average sqm4
ax.axvline(times_sqm5[77])   #first value for average sqm5
ax.axvline(times_sqm5[102])  #last value for average sqm5
144/1371:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
#ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(24)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3   
#ax.axvline(times_sqm4[82])   #first value for average sqm4
#ax.axvline(times_sqm4[107])  #last value for average sqm4
ax.axvline(times_sqm5[77])   #first value for average sqm5
ax.axvline(times_sqm5[102])  #last value for average sqm5
144/1372:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
#ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(24)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3   
#ax.axvline(times_sqm4[82])   #first value for average sqm4
#ax.axvline(times_sqm4[107])  #last value for average sqm4
ax.axvline(times_sqm5[77])   #first value for average sqm5
ax.axvline(times_sqm5[102])  #last value for average sqm5
144/1373:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
#ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(24)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3   
#ax.axvline(times_sqm4[82])   #first value for average sqm4
#ax.axvline(times_sqm4[107])  #last value for average sqm4
ax.axvline(times_sqm5[77])   #first value for average sqm5
ax.axvline(times_sqm5[102])  #last value for average sqm5
144/1374:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset sqm3 clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm3_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm3_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm3_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm3_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm3_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM1')
#ax.set_xlim(-12,-9)

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:150,5],-sqm4_28[82:157,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:150,6],-sqm4_28[82:157,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:150,7],-sqm4_28[82:157,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:150,8],-sqm4_28[82:157,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:150,9],-sqm4_28[82:157,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM4 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:148,5],-sqm5_28[99:172,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:148,6],-sqm5_28[99:172,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:148,7],-sqm5_28[99:172,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:148,8],-sqm5_28[99:172,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:148,9],-sqm5_28[99:172,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM5 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm3_28[99:172,5],-sqm5_28[99:172,5],'k.',label='clear',markersize=3)
ax.plot(-sqm3_28[99:172,6],-sqm5_28[99:172,6],'r.',label='R',markersize=3)
ax.plot(-sqm3_28[99:172,7],-sqm5_28[99:172,7],'g.',label='G',markersize=3)
ax.plot(-sqm3_28[99:172,8],-sqm5_28[99:172,8],'b.',label='B',markersize=3)
ax.plot(-sqm3_28[99:172,9],-sqm5_28[99:172,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM4')
144/1375:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset sqm3 clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm3_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm3_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm3_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm3_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm3_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM1')
#ax.set_xlim(-12,-9)

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:150,5],-sqm4_28[82:157,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:150,6],-sqm4_28[82:157,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:150,7],-sqm4_28[82:157,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:150,8],-sqm4_28[82:157,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:150,9],-sqm4_28[82:157,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM4 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:148,5],-sqm5_28[77:150,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:148,6],-sqm5_28[77:150,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:148,7],-sqm5_28[77:150,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:148,8],-sqm5_28[77:150,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:148,9],-sqm5_28[77:150,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM5 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm3_28[99:172,5],-sqm5_28[99:172,5],'k.',label='clear',markersize=3)
ax.plot(-sqm3_28[99:172,6],-sqm5_28[99:172,6],'r.',label='R',markersize=3)
ax.plot(-sqm3_28[99:172,7],-sqm5_28[99:172,7],'g.',label='G',markersize=3)
ax.plot(-sqm3_28[99:172,8],-sqm5_28[99:172,8],'b.',label='B',markersize=3)
ax.plot(-sqm3_28[99:172,9],-sqm5_28[99:172,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM4')
144/1376:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
#ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
#ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(25)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3   
#ax.axvline(times_sqm4[82])   #first value for average sqm4
#ax.axvline(times_sqm4[107])  #last value for average sqm4
ax.axvline(times_sqm5[77])   #first value for average sqm5
ax.axvline(times_sqm5[102])  #last value for average sqm5
144/1377:
#intercalibration graph for cosqm1 vs 3
#time to float in hours, hours over 24 for graphing simplicity

def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(25)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3   
#ax.axvline(times_sqm4[82])   #first value for average sqm4
#ax.axvline(times_sqm4[107])  #last value for average sqm4
ax.axvline(times_sqm5[77])   #first value for average sqm5
ax.axvline(times_sqm5[102])  #last value for average sqm5
144/1378:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset sqm3 clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm3_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm3_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm3_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm3_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm3_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM1')
#ax.set_xlim(-12,-9)

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:170,5],-sqm4_28[82:177,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:170,6],-sqm4_28[82:177,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:170,7],-sqm4_28[82:177,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:170,8],-sqm4_28[82:177,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:170,9],-sqm4_28[82:177,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM4 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:168,5],-sqm5_28[77:170,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:168,6],-sqm5_28[77:170,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:168,7],-sqm5_28[77:170,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:168,8],-sqm5_28[77:170,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:168,9],-sqm5_28[77:170,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM5 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm3_28[99:172,5],-sqm5_28[99:172,5],'k.',label='clear',markersize=3)
ax.plot(-sqm3_28[99:172,6],-sqm5_28[99:172,6],'r.',label='R',markersize=3)
ax.plot(-sqm3_28[99:172,7],-sqm5_28[99:172,7],'g.',label='G',markersize=3)
ax.plot(-sqm3_28[99:172,8],-sqm5_28[99:172,8],'b.',label='B',markersize=3)
ax.plot(-sqm3_28[99:172,9],-sqm5_28[99:172,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM4')
144/1379:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset sqm3 clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm3_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm3_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm3_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm3_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm3_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM1')
#ax.set_xlim(-12,-9)

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:170,5],-sqm4_28[82:177,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:170,6],-sqm4_28[82:177,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:170,7],-sqm4_28[82:177,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:170,8],-sqm4_28[82:177,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:170,9],-sqm4_28[82:177,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM4 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:168,5],-sqm5_28[77:170,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:168,6],-sqm5_28[77:170,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:168,7],-sqm5_28[77:170,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:168,8],-sqm5_28[77:170,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:168,9],-sqm5_28[77:170,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM5 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm3_28[99:172,5],-sqm5_28[82:155,5],'k.',label='clear',markersize=3)
ax.plot(-sqm3_28[99:172,6],-sqm5_28[82:155,6],'r.',label='R',markersize=3)
ax.plot(-sqm3_28[99:172,7],-sqm5_28[82:155,7],'g.',label='G',markersize=3)
ax.plot(-sqm3_28[99:172,8],-sqm5_28[82:155,8],'b.',label='B',markersize=3)
ax.plot(-sqm3_28[99:172,9],-sqm5_28[82:155,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM4')
144/1380:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset sqm3 clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm3_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm3_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm3_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm3_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm3_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM1')
#ax.set_xlim(-12,-9)

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:170,5],-sqm4_28[82:177,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:170,6],-sqm4_28[82:177,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:170,7],-sqm4_28[82:177,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:170,8],-sqm4_28[82:177,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:170,9],-sqm4_28[82:177,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM4 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:168,5],-sqm5_28[77:170,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:168,6],-sqm5_28[77:170,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:168,7],-sqm5_28[77:170,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:168,8],-sqm5_28[77:170,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:168,9],-sqm5_28[77:170,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM5 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm3_28[99:192,5],-sqm5_28[82:175,5],'k.',label='clear',markersize=3)
ax.plot(-sqm3_28[99:192,6],-sqm5_28[82:175,6],'r.',label='R',markersize=3)
ax.plot(-sqm3_28[99:192,7],-sqm5_28[82:175,7],'g.',label='G',markersize=3)
ax.plot(-sqm3_28[99:192,8],-sqm5_28[82:175,8],'b.',label='B',markersize=3)
ax.plot(-sqm3_28[99:192,9],-sqm5_28[82:175,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM4')
144/1381:
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset sqm3 clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm3_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm3_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm3_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm3_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm3_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM1')
#ax.set_xlim(-12,-9)

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:170,5],-sqm4_28[82:177,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:170,6],-sqm4_28[82:177,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:170,7],-sqm4_28[82:177,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:170,8],-sqm4_28[82:177,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:170,9],-sqm4_28[82:177,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM4 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:168,5],-sqm5_28[77:170,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:168,6],-sqm5_28[77:170,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:168,7],-sqm5_28[77:170,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:168,8],-sqm5_28[77:170,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:168,9],-sqm5_28[77:170,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM5 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm3_28[99:189,5],-sqm5_28[82:172,5],'k.',label='clear',markersize=3)
ax.plot(-sqm3_28[99:189,6],-sqm5_28[82:172,6],'r.',label='R',markersize=3)
ax.plot(-sqm3_28[99:189,7],-sqm5_28[82:172,7],'g.',label='G',markersize=3)
ax.plot(-sqm3_28[99:189,8],-sqm5_28[82:172,8],'b.',label='B',markersize=3)
ax.plot(-sqm3_28[99:189,9],-sqm5_28[82:172,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM4')
144/1382: print (times_cosqm1)
144/1383: print (times_sqm1)
144/1384: print (sm3_28)
144/1385: print (sqm3_28)
144/1386: print (sqm3_28[:])
144/1387: print (sqm3_28[:,5:9])
144/1388: print (sqm3_28[:,5:10])
146/1: print (sqm3_28[:,5:10])
146/2: %matplotlib inline
146/3:
from pylab import *
from matplotlib import *
import datetime as dt
from scipy.optimize import curve_fit as cfit
146/4:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):
    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(data[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    
    savefig('figures/'+output_figname+'.png',bbox_inches='tight')

    return

def plot_diff(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(data[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,data[:,6]-data[:,5],label='R-C',color='r')
    ax.plot(x,data[:,7]-data[:,5],label='G-C',color='g')
    ax.plot(x,data[:,8]-data[:,5],label='B-C',color='b')
    ax.plot(x,data[:,9]-data[:,5],label='Y-C',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude diff')
    ax.axhline(0,ls='--')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    
    savefig('figures/'+output_figname+'.png',bbox_inches='tight')

    return

#Function to convert time string HH:MM:SS to float hours, offset is difference between cosqm times (internal clock)
def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours
146/5:
sqm3=load_data('003_2019-05-27.txt')
sqm3_dates=load_dates('003_2019-05-27.txt')
sqm4=load_data('004_2019-05-27.txt')
sqm4_dates=load_dates('004_2019-05-27.txt')
sqm5=load_data('005_2019-05-27.txt')
sqm5_dates=load_dates('005_2019-05-27.txt')
sqm1=load_data('001_2019-05-27.txt')
sqm1_dates=load_dates('001_2019-05-27.txt')
146/6:
plot_mag(sqm3,sqm3_dates,'003','sqm3')
plot_mag(sqm4,sqm4_dates,'004','sqm4')
plot_mag(sqm5,sqm5_dates,'005','sqm5')
plot_mag(sqm1,sqm1_dates,'001','sqm1')

plot_diff(sqm3,sqm3_dates,'003','sqm3_diff')
plot_diff(sqm4,sqm4_dates,'004','sqm4_diff')
plot_diff(sqm5,sqm5_dates,'005','sqm5_diff')
plot_diff(sqm1,sqm1_dates,'001','sqm1_diff')
146/7:
plot(sqm3[:,6]-sqm3[:,5],'.')
#plot(sqm3[:,7]-sqm3[:,5],'.')
#plot(sqm3[:,8]-sqm3[:,5],'.')
#plot(sqm3[:,9]-sqm3[:,5],'.')
ylim(-1.5,0)
146/8:
#sqm3=load_data('003_2019-05-28.txt')
#sqm3_dates=load_dates('003_2019-05-28.txt')
#sqm4=load_data('004_2019-05-28.txt')
#sqm4_dates=load_dates('004_2019-05-28.txt')
sqm5=load_data('005_2019-05-28.txt')
sqm5_dates=load_dates('005_2019-05-28.txt')
#sqm1=load_data('001_2019-05-28.txt')
#sqm1_dates=load_dates('001_2019-05-28.txt')
146/9:
plot_mag(sqm3,sqm3_dates,'003','sqm3')
plot_diff(sqm3,sqm3_dates,'003','sqm3_diff')
146/10:
sqm3_28=load_data('003_2019-05-28.txt')
sqm3_28_dates=load_dates('003_2019-05-28.txt')
sqm4_28=load_data('004_2019-05-28.txt')
sqm4_28_dates=load_dates('004_2019-05-28.txt')
sqm5_28=load_data('005_2019-05-28.txt')
sqm5_28_dates=load_dates('005_2019-05-28.txt')
sqm1_28=load_data('001_2019-05-28.txt')
sqm1_28_dates=load_dates('001_2019-05-28.txt')
146/11:
plot_mag(sqm3_28,sqm3_28_dates,'003','sqm3_28')
plot_diff(sqm3_28,sqm3_28_dates,'003','sqm3_28_diff')
plot_mag(sqm4_28,sqm4_28_dates,'004','sqm4_28')
plot_diff(sqm4_28,sqm4_28_dates,'004','sqm4_28_diff')
plot_mag(sqm5_28,sqm5_28_dates,'005','sqm5_28')
plot_diff(sqm5_28,sqm5_28_dates,'005','sqm5_28_diff')
plot_mag(sqm1_28,sqm1_28_dates,'001','sqm1_28')
plot_diff(sqm1_28,sqm1_28_dates,'001','sqm1_28_diff')
146/12:
sqm3_29=load_data('003_2019-05-29.txt')
sqm3_29_dates=load_dates('003_2019-05-29.txt')
146/13:
plot_mag(sqm3_29,sqm3_29_dates,'003','sqm3_29')
plot_diff(sqm3_29,sqm3_29_dates,'003','sqm3_29_diff')
146/14:
#Determine time offset between acqs after night reboot (offset of fits)

def linear_func(data,a,b):
    return data*a+b

xs=linspace(0,1,170)
xs_fit=xs[100:]
sqm1_fit_params=cfit(linear_func,xs_fit,times_sqm1[100:])
sqm3_fit_params=cfit(linear_func,xs_fit,times_sqm3[100:-24])

print ('Y-axis crossing offset (in hours):',sqm1_fit_params[0][1]-sqm3_fit_params[0][1] )

plot(xs,times_sqm1,'.')
plot(xs,times_sqm3[:-24],'.')
plot(xs,linear_func(xs,sqm1_fit_params[0][0],sqm1_fit_params[0][1]))
plot(xs,linear_func(xs,sqm3_fit_params[0][0],sqm3_fit_params[0][1]))



#print (times_sqm1)
146/15:
#intercalibration graph for cosqms vs float hours to find good interval for average correction
#time to float in hours, hours over 24 for graphing simplicity

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_data1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(25)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3   
#ax.axvline(times_sqm4[82])   #first value for average sqm4
#ax.axvline(times_sqm4[107])  #last value for average sqm4
ax.axvline(times_sqm5[77])   #first value for average sqm5
ax.axvline(times_sqm5[102])  #last value for average sqm5
146/16:
#intercalibration graph for cosqms vs float hours to find good interval for average correction
#time to float in hours, hours over 24 for graphing simplicity

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_sqm1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(25)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3   
#ax.axvline(times_sqm4[82])   #first value for average sqm4
#ax.axvline(times_sqm4[107])  #last value for average sqm4
ax.axvline(times_sqm5[77])   #first value for average sqm5
ax.axvline(times_sqm5[102])  #last value for average sqm5
146/17:
#Determine time offset between acqs after night reboot (offset of fits)

def linear_func(data,a,b):
    return data*a+b

xs=linspace(0,1,170)
xs_fit=xs[100:]
sqm1_fit_params=cfit(linear_func,xs_fit,times_sqm1[100:])
sqm3_fit_params=cfit(linear_func,xs_fit,times_sqm3[100:-24])

print ('Y-axis crossing offset (in hours):',sqm1_fit_params[0][1]-sqm3_fit_params[0][1] )

plot(xs,times_sqm1,'.')
plot(xs,times_sqm3[:-24],'.')
plot(xs,linear_func(xs,sqm1_fit_params[0][0],sqm1_fit_params[0][1]))
plot(xs,linear_func(xs,sqm3_fit_params[0][0],sqm3_fit_params[0][1]))



#print (times_sqm1)
146/18:
#Intercalibration graph, cosqm3-4-5 vs cosqm1, looking for crossing value at y-axis and slope variation (linearity)
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset sqm3 clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm3_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm3_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm3_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm3_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm3_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM1')
#ax.set_xlim(-12,-9)

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:170,5],-sqm4_28[82:177,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:170,6],-sqm4_28[82:177,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:170,7],-sqm4_28[82:177,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:170,8],-sqm4_28[82:177,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:170,9],-sqm4_28[82:177,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM4 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:168,5],-sqm5_28[77:170,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:168,6],-sqm5_28[77:170,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:168,7],-sqm5_28[77:170,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:168,8],-sqm5_28[77:170,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:168,9],-sqm5_28[77:170,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM5 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm3_28[99:189,5],-sqm5_28[82:172,5],'k.',label='clear',markersize=3)
ax.plot(-sqm3_28[99:189,6],-sqm5_28[82:172,6],'r.',label='R',markersize=3)
ax.plot(-sqm3_28[99:189,7],-sqm5_28[82:172,7],'g.',label='G',markersize=3)
ax.plot(-sqm3_28[99:189,8],-sqm5_28[82:172,8],'b.',label='B',markersize=3)
ax.plot(-sqm3_28[99:189,9],-sqm5_28[82:172,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM4')
146/19:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#time offset between each sqm if started approx at the same time (sqm5-sqm3 max time offset)
print ('offsets: sqm1_3=3:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')
print ('latest is sqm5, order 1-3-4-5')


#acq times for data in time window 1h30-2h30 am
start=0
end=170


xs=linspace(start,end,end-start)
fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,5],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,5],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,5],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,5],label='sqm5')
ax.legend()
ax.set_title('CLEAR')

fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,6],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,6],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,6],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,6],label='sqm5')
ax.legend()
ax.set_title('RED')

fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,7],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,7],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,7],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,7],label='sqm5')
ax.legend()
ax.set_title('GREEN')

fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,8],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,8],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,8],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,8],label='sqm5')
ax.legend()
ax.set_title('BLUE')

fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,9],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,9],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,9],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,9],label='sqm5')
ax.legend()
ax.set_title('YELLOW')



#find best times for intercalibration (data to be used is from night of 05/27-28, from approx. 01:30 to 2:30 am)
#print (sqm1_28_dates[100:130],sqm3_28_dates[100:130])
147/1: %matplotlib inline
147/2:
from pylab import *
from matplotlib import *
import datetime as dt
from scipy.optimize import curve_fit as cfit
147/3:
def load_data(filename):
    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data
146/20:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('/angle_dependance_optical_loop/001_2019-06-24.txt')
146/21:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')
146/22:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=150,figsize=10,4)

xs=linspace (-50,50,101)
ax.plot(xs, sqm1_angular[:,6])
ax.plot(xs, sqm1_angular[:,7])
ax.plot(xs, sqm1_angular[:,8])
ax.plot(xs, sqm1_angular[:,9])
ax.plot(xs, sqm1_angular[:,10])
146/23:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=150,figsize=(10,4))

xs=linspace (-50,50,101)
ax.plot(xs, sqm1_angular[:,6])
ax.plot(xs, sqm1_angular[:,7])
ax.plot(xs, sqm1_angular[:,8])
ax.plot(xs, sqm1_angular[:,9])
ax.plot(xs, sqm1_angular[:,10])
146/24:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=150,figsize=(10,4))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, sqm1_angular[start:stop,6])
ax.plot(xs, sqm1_angular[start:stop,7])
ax.plot(xs, sqm1_angular[start:stop,8])
ax.plot(xs, sqm1_angular[start:stop,9])
ax.plot(xs, sqm1_angular[start:stop,10])
146/25:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=150,figsize=(10,4))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, sqm1_angular[start:stop,6])
ax.plot(xs, sqm1_angular[start:stop,7])
ax.plot(xs, sqm1_angular[start:stop,8])
ax.plot(xs, sqm1_angular[start:stop,9])
ax.plot(xs, sqm1_angular[start:stop,5])
146/26:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=150,figsize=(10,4))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,6])
ax.plot(xs, -sqm1_angular[start:stop,7])
ax.plot(xs, -sqm1_angular[start:stop,8])
ax.plot(xs, -sqm1_angular[start:stop,9])
ax.plot(xs, -sqm1_angular[start:stop,5])
146/27:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=150,figsize=(10,4))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.')
ax.plot(xs, -sqm1_angular[start:stop,6])
ax.plot(xs, -sqm1_angular[start:stop,7])
ax.plot(xs, -sqm1_angular[start:stop,8])
ax.plot(xs, -sqm1_angular[start:stop,9])
146/28:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=150,figsize=(10,4))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.')
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.')
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.')
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.')
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.')
146/29:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=150,figsize=(10,4))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'kc')
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.')
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.')
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.')
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.')
146/30:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=150,figsize=(10,4))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.')
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.')
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.')
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.')
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.')
146/31:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=150,figsize=(10,10))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.')
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.')
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.')
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.')
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.')
146/32:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=150,figsize=(10,10))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.')
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.')
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.')
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.')
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.')
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^^2$')
ax.set_xtickslabel(linspace(-50,50,11))
146/33:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=150,figsize=(10,10))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.')
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.')
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.')
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.')
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.')
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^^2$')
ax.set_xticks(linspace(-50,50,11))
146/34:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=150,figsize=(10,10))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.')
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.')
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.')
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.')
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.')
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
146/35:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=150,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.')
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.')
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.')
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.')
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.')
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
146/36:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=300,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.')
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.')
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.')
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.')
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.')
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
146/37:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.')
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.')
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.')
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.')
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.')
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
146/38:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k-')
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.')
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.')
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.')
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.')
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
146/39:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k--')
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.')
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.')
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.')
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.')
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
146/40:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k')
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.')
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.')
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.')
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.')
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
146/41:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.')
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.')
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.')
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.')
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.')
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
146/42:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=4)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.')
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.')
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.')
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.')
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
146/43:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=2)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.')
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.')
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.')
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.')
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
146/44:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=2)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.', markersize=2)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.', markersize=2)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.', markersize=2)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.', markersize=2)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
146/45:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
146/46:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
146/47:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
ax.set_yticks(abs))
146/48:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
ax.set_yticks(abs)
146/49:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
ax.set_yticks(abs())
146/50:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
146/51:
sqm1_angular_reverse=load_data('angle_dependance_optical_loop/001_2019-06-25.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular_reverse[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular_reverse[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular_reverse[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular_reverse[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular_reverse[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
146/52:
sqm1_angular_reverse=load_data('angle_dependance_optical_loop/001_2019-06-25.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular_reverse[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular_reverse[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular_reverse[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular_reverse[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular_reverse[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(60,-60,11))
146/53:
sqm1_angular_reverse=load_data('angle_dependance_optical_loop/001_2019-06-25.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=3
stop=124

ax.plot(xs, -sqm1_angular_reverse[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular_reverse[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular_reverse[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular_reverse[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular_reverse[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(60,-60,11))
146/54:
sqm1_angular_reverse=load_data('angle_dependance_optical_loop/001_2019-06-25.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,121)
start=3
stop=124

ax.plot(xs, -sqm1_angular_reverse[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular_reverse[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular_reverse[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular_reverse[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular_reverse[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(60,-60,11))
146/55:
sqm1_angular_reverse=load_data('angle_dependance_optical_loop/001_2019-06-25.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,121)
start=3
stop=124

ax.plot(-xs, -sqm1_angular_reverse[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular_reverse[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular_reverse[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular_reverse[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular_reverse[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
146/56:
sqm1_angular_reverse=load_data('angle_dependance_optical_loop/001_2019-06-25.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,121)
start=3
stop=124

ax.plot(-xs, -sqm1_angular_reverse[start:stop,5], 'k.', markersize=3)
ax.plot(-xs, -sqm1_angular_reverse[start:stop,6], 'r.', markersize=3)
ax.plot(-xs, -sqm1_angular_reverse[start:stop,7], 'g.', markersize=3)
ax.plot(-xs, -sqm1_angular_reverse[start:stop,8], 'b.', markersize=3)
ax.plot(-xs, -sqm1_angular_reverse[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
146/57:
sqm1_angular_reverse=load_data('angle_dependance_optical_loop/001_2019-06-25.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-60,60,121)
start=3
stop=124

ax.plot(-xs, -sqm1_angular_reverse[start:stop,5], 'k.', markersize=3)
ax.plot(-xs, -sqm1_angular_reverse[start:stop,6], 'r.', markersize=3)
ax.plot(-xs, -sqm1_angular_reverse[start:stop,7], 'g.', markersize=3)
ax.plot(-xs, -sqm1_angular_reverse[start:stop,8], 'b.', markersize=3)
ax.plot(-xs, -sqm1_angular_reverse[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
146/58:
sqm1_angular_halfstep=load_data('angle_dependance_optical_loop/001_2019-06-26.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-60,60,121)
start=3
stop=124

ax.plot(-xs, -sqm1_angular_halfstep[start:stop,5], 'k.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,6], 'r.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,7], 'g.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,8], 'b.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
146/59: print (sqm1_angular_halfstep[100:2])
146/60: print (sqm1_angular_halfstep[100,2])
146/61: print (sqm1_angular_halfstep[100,1])
146/62: print (sqm1_angular_halfstep[100,0])
146/63: print (sqm1_angular_halfstep[2,0])
146/64: print (sqm1_angular_halfstep[2,3])
146/65: print (sqm1_angular_halfstep[2,1])
146/66:
sqm1_angular_halfstep=load_data('angle_dependance_optical_loop/001_2019-06-26.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-60,60,121)
start=3
stop=124

ax.plot(-xs, -sqm1_angular_halfstep[start:stop,5], 'k.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,6], 'r.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,7], 'g.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,8], 'b.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
146/67: print (sqm1_angular_halfstep[2,2])
146/68: print (shape(sqm1_angular_halfstep))
146/69: print (sqm1_angular_halfstep[100][2])
146/70: print (sqm1_angular_halfstep[100,0])
146/71: print (sqm1_angular_halfstep[100,10])
146/72: print (sqm1_angular_halfstep[100,14])
146/73: print (sqm1_angular_halfstep[100,0])
146/74: print (sqm1_angular_halfstep[10,0])
146/75: print (sqm1_angular_halfstep[10,1])
146/76:
sqm1_angular_halfstep=load_dates('angle_dependance_optical_loop/001_2019-06-26.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-60,60,121)
start=3
stop=124

ax.plot(-xs, -sqm1_angular_halfstep[start:stop,5], 'k.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,6], 'r.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,7], 'g.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,8], 'b.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
146/77: print (sqm1_angular_halfstep[10,1])
146/78: print (sqm1_angular_halfstep[100,1])
146/79: print (sqm1_angular_halfstep[200,1])
146/80: print (sqm1_angular_halfstep[250,1])
146/81: print (sqm1_angular_halfstep[270,1])
146/82: print (sqm1_angular_halfstep[255,1])
146/83: print (sqm1_angular_halfstep[260,1])
146/84: print (sqm1_angular_halfstep[261,1])
146/85:
sqm1_angular_halfstep=load_data('angle_dependance_optical_loop/001_2019-06-26.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-60,60,121)
start=3
stop=124

ax.plot(-xs, -sqm1_angular_halfstep[start:stop,5], 'k.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,6], 'r.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,7], 'g.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,8], 'b.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
146/86:
sqm1_angular_halfstep=load_data('angle_dependance_optical_loop/001_2019-06-26.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-60,60,121)
start=261
stop=261+2*120

ax.plot(-xs, -sqm1_angular_halfstep[start:stop,5], 'k.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,6], 'r.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,7], 'g.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,8], 'b.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
146/87:
sqm1_angular_halfstep=load_data('angle_dependance_optical_loop/001_2019-06-26.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(-xs, -sqm1_angular_halfstep[start:stop,5], 'k.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,6], 'r.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,7], 'g.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,8], 'b.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
146/88:
sqm1_angular_halfstep=load_data('angle_dependance_optical_loop/001_2019-06-26.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))


start=261
stop=261+2*120
xs=linspace (-55,65,stop-start)

ax.plot(-xs, -sqm1_angular_halfstep[start:stop,5], 'k.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,6], 'r.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,7], 'g.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,8], 'b.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
146/89:
sqm1_angular_halfstep=load_data('angle_dependance_optical_loop/001_2019-06-26.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))


start=261
stop=261+2*120
xs=linspace (-65,65,stop-start)

ax.plot(-xs, -sqm1_angular_halfstep[start:stop,5], 'k.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,6], 'r.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,7], 'g.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,8], 'b.', markersize=3)
ax.plot(-xs, -sqm1_angular_halfstep[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
146/90:
sqm1_angular_halfstep=load_data('angle_dependance_optical_loop/001_2019-06-26.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))


start=261
stop=261+2*120
xs=linspace (-65,65,stop-start)

ax.plot(xs, -sqm1_angular_halfstep[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular_halfstep[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular_halfstep[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular_halfstep[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular_halfstep[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
146/91:
sqm1_angular_halfstep=load_data('angle_dependance_optical_loop/001_2019-06-26.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))


start=261
stop=261+2*120
xs=linspace (-80,50,stop-start)

ax.plot(xs, -sqm1_angular_halfstep[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular_halfstep[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular_halfstep[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular_halfstep[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular_halfstep[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
146/92:
sqm1_angular_halfstep=load_data('angle_dependance_optical_loop/001_2019-06-26.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs, -sqm1_angular_halfstep[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular_halfstep[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular_halfstep[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular_halfstep[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular_halfstep[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
146/93:
sqm1_angular_halfstep=load_data('angle_dependance_optical_loop/001_2019-06-26.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
146/94:
sqm1_angular_halfstep=load_data('angle_dependance_optical_loop/001_2019-06-26.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-50,50)
146/95:
sqm1_angular_halfstep=load_data('angle_dependance_optical_loop/001_2019-06-26.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/96:
sqm1_angular_halfstep=load_data('angle_dependance_optical_loop/001_2019-06-26.txt')

fig,ax=subplots(1,1,dpi=400,figsize=(6,6))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/97:
sqm1_angular_halfstep=load_data('angle_dependance_optical_loop/001_2019-06-26.txt')

fig,ax=subplots(1,1,dpi=400,figsize=(4,4))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/98:
sqm1_angular_halfstep=load_data('angle_dependance_optical_loop/001_2019-06-26.txt')

fig,ax=subplots(1,1,dpi=600,figsize=(4,4))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/99:
sqm1_angular_halfstep=load_data('angle_dependance_optical_loop/001_2019-06-26.txt')

fig,ax=subplots(1,1,dpi=100,figsize=(4,4))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/100:
sqm1_angular_halfstep=load_data('angle_dependance_optical_loop/001_2019-06-26.txt')

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/101:
#color-clear

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,6]+sqm1_angular_halfstep[start:stop,5], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,7]+sqm1_angular_halfstep[start:stop,5], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,8]+sqm1_angular_halfstep[start:stop,5], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,9]+sqm1_angular_halfstep[start:stop,5], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/102:
# dark while spinning table
sqm1_angular_halfstep=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/103:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/104:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print (shape(sqm1_angular_halfstep_dark))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/105:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print (shape(sqm1_angular_halfstep_dark[0]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/106:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print (shape(sqm1_angular_halfstep_dark[0,0]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/107:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print (type(sqm1_angular_halfstep_dark[0,0]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/108:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print (type(sqm1_angular_halfstep_dark[0,1]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/109:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print (type(sqm1_angular_halfstep_dark[0,2]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/110:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print (type(sqm1_angular_halfstep_dark[0,3]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/111:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print (type(sqm1_angular_halfstep_dark[0,4]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/112:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((sqm1_angular_halfstep_dark[0,4]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/113:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((sqm1_angular_halfstep_dark[0,0]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/114:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((sqm1_angular_halfstep_dark[0,1]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/115:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((sqm1_angular_halfstep_dark[0,2]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/116:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((sqm1_angular_halfstep_dark[0,3]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/117:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((sqm1_angular_halfstep_dark[0,4]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/118:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((sqm1_angular_halfstep_dark[0,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/119:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((sqm1_angular_halfstep_dark[0,6]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/120:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((sqm1_angular_halfstep_dark[0,7]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/121:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((sqm1_angular_halfstep_dark[0,8]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/122:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((sqm1_angular_halfstep_dark[0,]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/123:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((sqm1_angular_halfstep_dark[0,9]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/124:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((sqm1_angular_halfstep_dark[0,10]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/125:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((sqm1_angular_halfstep_dark[0,11]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/126:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((sqm1_angular_halfstep_dark[0,12]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/127:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((sqm1_angular_halfstep_dark[0,13]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/128:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((sqm1_angular_halfstep_dark[0,14]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/129:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((sqm1_angular_halfstep_dark[0,15]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/130:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=0+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/131:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=0+2*120
xs=linspace (-60,60,len(sqm1_angular_halfstep_dark[:,0]))

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/132:
#after code update, new lamp with bigger batteries, new black sheet didsposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-26.txt')

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/133:
#after code update, new lamp with bigger batteries, new black sheet didsposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-28.txt')

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/134:
#after code update, new lamp with bigger batteries, new black sheet didsposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-28.txt')

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/135:
#after code update, new lamp with bigger batteries, new black sheet didsposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-26.txt')

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/136:
#after code update, new lamp with bigger batteries, new black sheet didsposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/137:
#after code update, new lamp with bigger batteries, new black sheet didsposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print (shape(-sqm1_angular_code[start:stop,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/138:
#after code update, new lamp with bigger batteries, new black sheet didsposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print (start,stop)

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/139:
#after code update, new lamp with bigger batteries, new black sheet didsposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((-sqm1_angular_code[start:stop,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/140:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((-sqm1_angular_code[5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/141:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((-sqm1_angular_code[5,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/142:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((-sqm1_angular_code[6,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/143:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((-sqm1_angular_code[261,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/144:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((-sqm1_angular_code50,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/145:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((-sqm1_angular_code[50,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/146:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

print ((-sqm1_angular_code[50,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=0+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/147:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-29.txt')

print ((-sqm1_angular_code[50,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=0+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/148:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-30.txt')

print ((-sqm1_angular_code[50,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=0+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/149:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-28.txt')

print ((-sqm1_angular_code[50,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=0+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/150:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-28.txt')

print ((-sqm1_angular_code[50,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=0+2*50
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/151:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-28.txt')

print (len(-sqm1_angular_code[50,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=0+2*50
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/152:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-28.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=0+2*50
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/153:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-28.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=141
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/154:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-30.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(-sqm1_angular_code[:,5])
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/155:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-30.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(-sqm1_angular_code[:,5])
xs=linspace (-60,60,stop-start)

ax.plot(xs-12, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/156:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-30.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(-sqm1_angular_code[:,5])
xs=linspace (-60,60,stop-start)

ax.plot(xs, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/157:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-30.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(-sqm1_angular_code[:,5])
xs=linspace (-60,60,stop-start)

ax.plot(xs+6, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+6, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+6, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+6, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+6, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/158:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-30.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(-sqm1_angular_code[:,5])
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/159:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-30.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(-sqm1_angular_code[:,5])
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
146/160:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-28.txt')

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=0+2*120
xs=linspace (-60,60,len(sqm1_angular_halfstep_dark[:,0]))

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/161:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-29.txt')

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=0+2*120
xs=linspace (-60,60,len(sqm1_angular_halfstep_dark[:,0]))

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/162:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-29.txt')

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(sqm1_angular_halfstep_dark[:,0])
xs=linspace (-60,60,len(sqm1_angular_halfstep_dark[:,0]))

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
146/163:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-30.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(-sqm1_angular_code[:,5])
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
146/164:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('http://192.168.0.100/data/2019/06/2019-06-30.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(-sqm1_angular_code[:,5])
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
146/165:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-30.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(-sqm1_angular_code[:,5])
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
146/166:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-30.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(-sqm1_angular_code[:,5])
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
146/167:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-01.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(-sqm1_angular_code[:,5])
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
146/168:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-01.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(-sqm1_angular_code[:,5])/2
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
146/169:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-01.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=250
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
146/170:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-01.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=125
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
146/171:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-02.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=125
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
146/172:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-02.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=178
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
146/173:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-16.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=125
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
146/174:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-16.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
146/175:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-16.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
146/176:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-16.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=150
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
146/177:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-16.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=450
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
146/178:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-16.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=300
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
148/1: %matplotlib inline
148/2:
from pylab import *
from matplotlib import *
import datetime as dt
from scipy.optimize import curve_fit as cfit
148/3:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):
    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(data[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    
    savefig('figures/'+output_figname+'.png',bbox_inches='tight')

    return

def plot_diff(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(data[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,data[:,6]-data[:,5],label='R-C',color='r')
    ax.plot(x,data[:,7]-data[:,5],label='G-C',color='g')
    ax.plot(x,data[:,8]-data[:,5],label='B-C',color='b')
    ax.plot(x,data[:,9]-data[:,5],label='Y-C',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude diff')
    ax.axhline(0,ls='--')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    
    savefig('figures/'+output_figname+'.png',bbox_inches='tight')

    return

#Function to convert time string HH:MM:SS to float hours, offset is difference between cosqm times (internal clock)
def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours
148/4:
sqm3=load_data('003_2019-05-27.txt')
sqm3_dates=load_dates('003_2019-05-27.txt')
sqm4=load_data('004_2019-05-27.txt')
sqm4_dates=load_dates('004_2019-05-27.txt')
sqm5=load_data('005_2019-05-27.txt')
sqm5_dates=load_dates('005_2019-05-27.txt')
sqm1=load_data('001_2019-05-27.txt')
sqm1_dates=load_dates('001_2019-05-27.txt')
148/5:
plot_mag(sqm3,sqm3_dates,'003','sqm3')
plot_mag(sqm4,sqm4_dates,'004','sqm4')
plot_mag(sqm5,sqm5_dates,'005','sqm5')
plot_mag(sqm1,sqm1_dates,'001','sqm1')

plot_diff(sqm3,sqm3_dates,'003','sqm3_diff')
plot_diff(sqm4,sqm4_dates,'004','sqm4_diff')
plot_diff(sqm5,sqm5_dates,'005','sqm5_diff')
plot_diff(sqm1,sqm1_dates,'001','sqm1_diff')
148/6:
plot(sqm3[:,6]-sqm3[:,5],'.')
#plot(sqm3[:,7]-sqm3[:,5],'.')
#plot(sqm3[:,8]-sqm3[:,5],'.')
#plot(sqm3[:,9]-sqm3[:,5],'.')
ylim(-1.5,0)
148/7:
#sqm3=load_data('003_2019-05-28.txt')
#sqm3_dates=load_dates('003_2019-05-28.txt')
#sqm4=load_data('004_2019-05-28.txt')
#sqm4_dates=load_dates('004_2019-05-28.txt')
sqm5=load_data('005_2019-05-28.txt')
sqm5_dates=load_dates('005_2019-05-28.txt')
#sqm1=load_data('001_2019-05-28.txt')
#sqm1_dates=load_dates('001_2019-05-28.txt')
148/8:
plot_mag(sqm3,sqm3_dates,'003','sqm3')
plot_diff(sqm3,sqm3_dates,'003','sqm3_diff')
148/9:
sqm3_28=load_data('003_2019-05-28.txt')
sqm3_28_dates=load_dates('003_2019-05-28.txt')
sqm4_28=load_data('004_2019-05-28.txt')
sqm4_28_dates=load_dates('004_2019-05-28.txt')
sqm5_28=load_data('005_2019-05-28.txt')
sqm5_28_dates=load_dates('005_2019-05-28.txt')
sqm1_28=load_data('001_2019-05-28.txt')
sqm1_28_dates=load_dates('001_2019-05-28.txt')
148/10:
plot_mag(sqm3_28,sqm3_28_dates,'003','sqm3_28')
plot_diff(sqm3_28,sqm3_28_dates,'003','sqm3_28_diff')
plot_mag(sqm4_28,sqm4_28_dates,'004','sqm4_28')
plot_diff(sqm4_28,sqm4_28_dates,'004','sqm4_28_diff')
plot_mag(sqm5_28,sqm5_28_dates,'005','sqm5_28')
plot_diff(sqm5_28,sqm5_28_dates,'005','sqm5_28_diff')
plot_mag(sqm1_28,sqm1_28_dates,'001','sqm1_28')
plot_diff(sqm1_28,sqm1_28_dates,'001','sqm1_28_diff')
148/11:
sqm3_29=load_data('003_2019-05-29.txt')
sqm3_29_dates=load_dates('003_2019-05-29.txt')
148/12:
plot_mag(sqm3_29,sqm3_29_dates,'003','sqm3_29')
plot_diff(sqm3_29,sqm3_29_dates,'003','sqm3_29_diff')
148/13:
#Determine time offset between acqs after night reboot (offset of fits)

def linear_func(data,a,b):
    return data*a+b

xs=linspace(0,1,170)
xs_fit=xs[100:]
sqm1_fit_params=cfit(linear_func,xs_fit,times_sqm1[100:])
sqm3_fit_params=cfit(linear_func,xs_fit,times_sqm3[100:-24])

print ('Y-axis crossing offset (in hours):',sqm1_fit_params[0][1]-sqm3_fit_params[0][1] )

plot(xs,times_sqm1,'.')
plot(xs,times_sqm3[:-24],'.')
plot(xs,linear_func(xs,sqm1_fit_params[0][0],sqm1_fit_params[0][1]))
plot(xs,linear_func(xs,sqm3_fit_params[0][0],sqm3_fit_params[0][1]))



#print (times_sqm1)
148/14:
#intercalibration graph for cosqms vs float hours to find good interval for average correction
#time to float in hours, hours over 24 for graphing simplicity

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_sqm1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(25)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3   
#ax.axvline(times_sqm4[82])   #first value for average sqm4
#ax.axvline(times_sqm4[107])  #last value for average sqm4
ax.axvline(times_sqm5[77])   #first value for average sqm5
ax.axvline(times_sqm5[102])  #last value for average sqm5
148/15:
#Intercalibration graph, cosqm3-4-5 vs cosqm1, looking for crossing value at y-axis and slope variation (linearity)
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset sqm3 clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm3_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm3_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm3_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm3_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm3_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM1')
#ax.set_xlim(-12,-9)

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:170,5],-sqm4_28[82:177,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:170,6],-sqm4_28[82:177,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:170,7],-sqm4_28[82:177,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:170,8],-sqm4_28[82:177,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:170,9],-sqm4_28[82:177,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM4 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:168,5],-sqm5_28[77:170,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:168,6],-sqm5_28[77:170,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:168,7],-sqm5_28[77:170,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:168,8],-sqm5_28[77:170,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:168,9],-sqm5_28[77:170,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM5 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm3_28[99:189,5],-sqm5_28[82:172,5],'k.',label='clear',markersize=3)
ax.plot(-sqm3_28[99:189,6],-sqm5_28[82:172,6],'r.',label='R',markersize=3)
ax.plot(-sqm3_28[99:189,7],-sqm5_28[82:172,7],'g.',label='G',markersize=3)
ax.plot(-sqm3_28[99:189,8],-sqm5_28[82:172,8],'b.',label='B',markersize=3)
ax.plot(-sqm3_28[99:189,9],-sqm5_28[82:172,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM4')
148/16:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#time offset between each sqm if started approx at the same time (sqm5-sqm3 is the max time offset)
print ('offsets: sqm1_3=3:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')
print ('latest is sqm5, order 1-3-4-5')


#acq times for data in time window 1h30-2h30 am
start=0
end=170


xs=linspace(start,end,end-start)
fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,5],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,5],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,5],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,5],label='sqm5')
ax.legend()
ax.set_title('CLEAR')

fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,6],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,6],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,6],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,6],label='sqm5')
ax.legend()
ax.set_title('RED')

fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,7],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,7],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,7],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,7],label='sqm5')
ax.legend()
ax.set_title('GREEN')

fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,8],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,8],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,8],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,8],label='sqm5')
ax.legend()
ax.set_title('BLUE')

fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,9],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,9],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,9],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,9],label='sqm5')
ax.legend()
ax.set_title('YELLOW')



#find best times for intercalibration (data to be used is from night of 05/27-28, from approx. 01:30 to 2:30 am)
148/17:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
148/18:
sqm1_angular_reverse=load_data('angle_dependance_optical_loop/001_2019-06-25.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-60,60,121)
start=3
stop=124

ax.plot(-xs, -sqm1_angular_reverse[start:stop,5], 'k.', markersize=3)
ax.plot(-xs, -sqm1_angular_reverse[start:stop,6], 'r.', markersize=3)
ax.plot(-xs, -sqm1_angular_reverse[start:stop,7], 'g.', markersize=3)
ax.plot(-xs, -sqm1_angular_reverse[start:stop,8], 'b.', markersize=3)
ax.plot(-xs, -sqm1_angular_reverse[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
148/19: print (sqm1_angular_halfstep[261,1])
148/20:
sqm1_angular_halfstep=load_data('angle_dependance_optical_loop/001_2019-06-26.txt')

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
148/21:
#color-clear

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,6]+sqm1_angular_halfstep[start:stop,5], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,7]+sqm1_angular_halfstep[start:stop,5], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,8]+sqm1_angular_halfstep[start:stop,5], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,9]+sqm1_angular_halfstep[start:stop,5], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
148/22:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=0+2*120
xs=linspace (-60,60,len(sqm1_angular_halfstep_dark[:,0]))

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
148/23:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-29.txt')

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(sqm1_angular_halfstep_dark[:,0])
xs=linspace (-60,60,len(sqm1_angular_halfstep_dark[:,0]))

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
148/24:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-30.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(-sqm1_angular_code[:,5])
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
148/25:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-01.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=125
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
148/26:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-02.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=178
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
148/27:
#small middle lamp, color pattern C-Y-R-G-B

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-17.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=178
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
148/28:
#small middle lamp, color pattern C-Y-R-G-B

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-17.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=178
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
148/29:
#small middle lamp, color pattern C-Y-R-G-B

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-17.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
148/30:
#small middle lamp, color pattern C-Y-R-G-B

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-17.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=200
stop=len(sqm1_angular_code)-100
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
148/31:
#small middle lamp, color pattern C-Y-R-G-B

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-17.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=200
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
148/32:
#small middle lamp, color pattern C-Y-R-G-B

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-17.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=100
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
148/33:
#small middle lamp, color pattern C-Y-R-G-B

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-17.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=100
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
148/34: %matplotlib inline
149/1: %matplotlib inline
151/1: %matplotlib inline
151/2:
from pylab import *
from matplotlib import *
import datetime as dt
from scipy.optimize import curve_fit as cfit
151/3:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):
    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(data[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    
    savefig('figures/'+output_figname+'.png',bbox_inches='tight')

    return

def plot_diff(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(data[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,data[:,6]-data[:,5],label='R-C',color='r')
    ax.plot(x,data[:,7]-data[:,5],label='G-C',color='g')
    ax.plot(x,data[:,8]-data[:,5],label='B-C',color='b')
    ax.plot(x,data[:,9]-data[:,5],label='Y-C',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude diff')
    ax.axhline(0,ls='--')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    
    savefig('figures/'+output_figname+'.png',bbox_inches='tight')

    return

#Function to convert time string HH:MM:SS to float hours, offset is difference between cosqm times (internal clock)
def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours
151/4:
sqm3=load_data('003_2019-05-27.txt')
sqm3_dates=load_dates('003_2019-05-27.txt')
sqm4=load_data('004_2019-05-27.txt')
sqm4_dates=load_dates('004_2019-05-27.txt')
sqm5=load_data('005_2019-05-27.txt')
sqm5_dates=load_dates('005_2019-05-27.txt')
sqm1=load_data('001_2019-05-27.txt')
sqm1_dates=load_dates('001_2019-05-27.txt')
151/5:
plot_mag(sqm3,sqm3_dates,'003','sqm3')
plot_mag(sqm4,sqm4_dates,'004','sqm4')
plot_mag(sqm5,sqm5_dates,'005','sqm5')
plot_mag(sqm1,sqm1_dates,'001','sqm1')

plot_diff(sqm3,sqm3_dates,'003','sqm3_diff')
plot_diff(sqm4,sqm4_dates,'004','sqm4_diff')
plot_diff(sqm5,sqm5_dates,'005','sqm5_diff')
plot_diff(sqm1,sqm1_dates,'001','sqm1_diff')
151/6:
plot(sqm3[:,6]-sqm3[:,5],'.')
#plot(sqm3[:,7]-sqm3[:,5],'.')
#plot(sqm3[:,8]-sqm3[:,5],'.')
#plot(sqm3[:,9]-sqm3[:,5],'.')
ylim(-1.5,0)
151/7:
#sqm3=load_data('003_2019-05-28.txt')
#sqm3_dates=load_dates('003_2019-05-28.txt')
#sqm4=load_data('004_2019-05-28.txt')
#sqm4_dates=load_dates('004_2019-05-28.txt')
sqm5=load_data('005_2019-05-28.txt')
sqm5_dates=load_dates('005_2019-05-28.txt')
#sqm1=load_data('001_2019-05-28.txt')
#sqm1_dates=load_dates('001_2019-05-28.txt')
151/8:
plot_mag(sqm3,sqm3_dates,'003','sqm3')
plot_diff(sqm3,sqm3_dates,'003','sqm3_diff')
151/9:
sqm3_28=load_data('003_2019-05-28.txt')
sqm3_28_dates=load_dates('003_2019-05-28.txt')
sqm4_28=load_data('004_2019-05-28.txt')
sqm4_28_dates=load_dates('004_2019-05-28.txt')
sqm5_28=load_data('005_2019-05-28.txt')
sqm5_28_dates=load_dates('005_2019-05-28.txt')
sqm1_28=load_data('001_2019-05-28.txt')
sqm1_28_dates=load_dates('001_2019-05-28.txt')
151/10:
plot_mag(sqm3_28,sqm3_28_dates,'003','sqm3_28')
plot_diff(sqm3_28,sqm3_28_dates,'003','sqm3_28_diff')
plot_mag(sqm4_28,sqm4_28_dates,'004','sqm4_28')
plot_diff(sqm4_28,sqm4_28_dates,'004','sqm4_28_diff')
plot_mag(sqm5_28,sqm5_28_dates,'005','sqm5_28')
plot_diff(sqm5_28,sqm5_28_dates,'005','sqm5_28_diff')
plot_mag(sqm1_28,sqm1_28_dates,'001','sqm1_28')
plot_diff(sqm1_28,sqm1_28_dates,'001','sqm1_28_diff')
151/11:
sqm3_29=load_data('003_2019-05-29.txt')
sqm3_29_dates=load_dates('003_2019-05-29.txt')
151/12:
plot_mag(sqm3_29,sqm3_29_dates,'003','sqm3_29')
plot_diff(sqm3_29,sqm3_29_dates,'003','sqm3_29_diff')
151/13:
#Determine time offset between acqs after night reboot (offset of fits)

def linear_func(data,a,b):
    return data*a+b

xs=linspace(0,1,170)
xs_fit=xs[100:]
sqm1_fit_params=cfit(linear_func,xs_fit,times_sqm1[100:])
sqm3_fit_params=cfit(linear_func,xs_fit,times_sqm3[100:-24])

print ('Y-axis crossing offset (in hours):',sqm1_fit_params[0][1]-sqm3_fit_params[0][1] )

plot(xs,times_sqm1,'.')
plot(xs,times_sqm3[:-24],'.')
plot(xs,linear_func(xs,sqm1_fit_params[0][0],sqm1_fit_params[0][1]))
plot(xs,linear_func(xs,sqm3_fit_params[0][0],sqm3_fit_params[0][1]))



#print (times_sqm1)
151/14:
#intercalibration graph for cosqms vs float hours to find good interval for average correction
#time to float in hours, hours over 24 for graphing simplicity

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_sqm1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(25)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3   
#ax.axvline(times_sqm4[82])   #first value for average sqm4
#ax.axvline(times_sqm4[107])  #last value for average sqm4
ax.axvline(times_sqm5[77])   #first value for average sqm5
ax.axvline(times_sqm5[102])  #last value for average sqm5
151/15:
#Intercalibration graph, cosqm3-4-5 vs cosqm1, looking for crossing value at y-axis and slope variation (linearity)
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset sqm3 clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm3_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm3_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm3_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm3_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm3_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM1')
#ax.set_xlim(-12,-9)

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:170,5],-sqm4_28[82:177,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:170,6],-sqm4_28[82:177,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:170,7],-sqm4_28[82:177,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:170,8],-sqm4_28[82:177,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:170,9],-sqm4_28[82:177,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM4 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:168,5],-sqm5_28[77:170,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:168,6],-sqm5_28[77:170,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:168,7],-sqm5_28[77:170,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:168,8],-sqm5_28[77:170,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:168,9],-sqm5_28[77:170,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM5 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm3_28[99:189,5],-sqm5_28[82:172,5],'k.',label='clear',markersize=3)
ax.plot(-sqm3_28[99:189,6],-sqm5_28[82:172,6],'r.',label='R',markersize=3)
ax.plot(-sqm3_28[99:189,7],-sqm5_28[82:172,7],'g.',label='G',markersize=3)
ax.plot(-sqm3_28[99:189,8],-sqm5_28[82:172,8],'b.',label='B',markersize=3)
ax.plot(-sqm3_28[99:189,9],-sqm5_28[82:172,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM4')
151/16:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#time offset between each sqm if started approx at the same time (sqm5-sqm3 is the max time offset)
print ('offsets: sqm1_3=3:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')
print ('latest is sqm5, order 1-3-4-5')


#acq times for data in time window 1h30-2h30 am
start=0
end=170


xs=linspace(start,end,end-start)
fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,5],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,5],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,5],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,5],label='sqm5')
ax.legend()
ax.set_title('CLEAR')

fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,6],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,6],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,6],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,6],label='sqm5')
ax.legend()
ax.set_title('RED')

fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,7],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,7],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,7],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,7],label='sqm5')
ax.legend()
ax.set_title('GREEN')

fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,8],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,8],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,8],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,8],label='sqm5')
ax.legend()
ax.set_title('BLUE')

fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,9],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,9],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,9],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,9],label='sqm5')
ax.legend()
ax.set_title('YELLOW')



#find best times for intercalibration (data to be used is from night of 05/27-28, from approx. 01:30 to 2:30 am)
151/17:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
151/18:
sqm1_angular_reverse=load_data('angle_dependance_optical_loop/001_2019-06-25.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-60,60,121)
start=3
stop=124

ax.plot(-xs, -sqm1_angular_reverse[start:stop,5], 'k.', markersize=3)
ax.plot(-xs, -sqm1_angular_reverse[start:stop,6], 'r.', markersize=3)
ax.plot(-xs, -sqm1_angular_reverse[start:stop,7], 'g.', markersize=3)
ax.plot(-xs, -sqm1_angular_reverse[start:stop,8], 'b.', markersize=3)
ax.plot(-xs, -sqm1_angular_reverse[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
151/19: print (sqm1_angular_halfstep[261,1])
151/20:
sqm1_angular_halfstep=load_data('angle_dependance_optical_loop/001_2019-06-26.txt')

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
151/21:
#color-clear

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=261
stop=261+2*120
xs=linspace (-60,60,stop-start)

ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,6]+sqm1_angular_halfstep[start:stop,5], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,7]+sqm1_angular_halfstep[start:stop,5], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,8]+sqm1_angular_halfstep[start:stop,5], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep[start:stop,9]+sqm1_angular_halfstep[start:stop,5], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
151/22:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-27.txt')

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=0+2*120
xs=linspace (-60,60,len(sqm1_angular_halfstep_dark[:,0]))

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
151/23:
# dark while spinning table
sqm1_angular_halfstep_dark=load_data('angle_dependance_optical_loop/001_2019-06-29.txt')

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(sqm1_angular_halfstep_dark[:,0])
xs=linspace (-60,60,len(sqm1_angular_halfstep_dark[:,0]))

ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,5], 'k.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,6], 'r.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,7], 'g.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,8], 'b.', markersize=3)
ax.plot(xs-6, -sqm1_angular_halfstep_dark[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,11))
ax.set_xlim(-60,60)
151/24:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-30.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(-sqm1_angular_code[:,5])
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/25:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-01.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=125
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/26:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-02.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=178
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/27:
#small middle lamp, color pattern C-Y-R-G-B

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-17.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=100
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/28:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-18.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/29:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-18.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/30:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-18.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
150/1: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/fft_microphone.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
150/2: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/fft_microphone.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
150/3: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/fft_microphone.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
150/4: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/fft_microphone.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
152/1: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/fft_microphone.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
152/2: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/fft_microphone.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
153/1: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/fft_microphone.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
153/2: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/fft_microphone.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
154/1: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/fft_microphone.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
154/2: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/fft_microphone.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
155/1: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/fft_microphone.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
155/2: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/fft_microphone.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
156/1: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/fft_microphone.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
156/2: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/fft_microphone.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
157/1: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/fft_microphone.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
157/2: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/fft_microphone.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
158/1: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/fft_microphone.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
158/2: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/fft_microphone.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
159/1: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/fft_microphone.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
151/31:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-18.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/32:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-18.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/33:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-19.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/34:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-19.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/35:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-18.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/36:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-19.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/37:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-18.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))

print (len(sqm1_angular_code))
start=0
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/38:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-18.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))

print (len(sqm1_angular_code))
start=200
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/39:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-18.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))

print (len(sqm1_angular_code))
start=230
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/40:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-18.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))

print (len(sqm1_angular_code))
start=260
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/41:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-18.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))

print (len(sqm1_angular_code))
start=400
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/42:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-18.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))

print (len(sqm1_angular_code))
start=400
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/43:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-18.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))

print (len(sqm1_angular_code))
start=400
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.vline(xs+4)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/44:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-18.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))

print (len(sqm1_angular_code))
start=400
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.axvline(xs+4)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/45:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-18.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))

print (len(sqm1_angular_code))
start=400
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
for point in xs:
    ax.axvline(point+4)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/46:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-18.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))

print (len(sqm1_angular_code))
start=400
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
for point in xs:
    ax.axvline(point+4,width=1)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/47:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-18.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))

print (len(sqm1_angular_code))
start=400
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
for point in xs:
    ax.axvline(point+4,linewidth=1)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/48:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-18.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))

print (len(sqm1_angular_code))
start=400
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
for point in xs:
    ax.axvline(point+4,linewidth=0.3)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/49:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-18.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))

print (len(sqm1_angular_code))
start=400
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
for point in xs:
    ax.axvline(point+4,linewidth=0.3)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/50:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-02.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=178
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
for point in xs:
    ax.axvline(point+4,linewidth=0.3)


ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/51:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-30.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=250
stop=len(-sqm1_angular_code[:,5])
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/52:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-30.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=300
stop=len(-sqm1_angular_code[:,5])
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/53:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-30.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=300
stop=len(-sqm1_angular_code[:,5])-50
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/54:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-30.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=300
stop=len(-sqm1_angular_code[:,5])-100
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/55:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-30.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=330
stop=len(-sqm1_angular_code[:,5])-100
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/56:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-06-30.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=310
stop=len(-sqm1_angular_code[:,5])-100
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
for point in xs:
    ax.axvline(point+4,linewidth=0.3)


ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/57:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-19.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/58:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-19.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
159/2: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/fft_microphone.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
151/59:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal
#From 10:42 pc time, lights better shaded, setup back to center of room.
sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-19.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/60:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal
#From 10:42 pc time, lights better shaded, setup back to center of room.
sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-19.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/61:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal
#From 10:42 pc time, lights better shaded, setup back to center of room.
sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-19.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/62:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal
#From 10:42 pc time, lights better shaded, setup back to center of room.
sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-19.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=150
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/63:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal
#From 10:42 pc time, lights better shaded, setup back to center of room.
sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-19.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=150
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(xs+4)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/64:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal
#From 10:42 pc time, lights better shaded, setup back to center of room.
sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-19.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=150
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/65:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal
#From 10:42 pc time, lights better shaded, setup back to center of room.
sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-19.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=150
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/66:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal
#From 10:42 pc time, lights better shaded, setup back to center of room.
sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-19.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=400
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/67:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal
#From 10:42 pc time, lights better shaded, setup back to center of room.
sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-19.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=400
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/68:
#Comparison with cosqm003 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/003_2019-07-19.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=400
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/69:
#Comparison with cosqm003 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/003_2019-07-19.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/70:
#Comparison with cosqm003 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/003_2019-07-19.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/71:
#Comparison with cosqm003 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/003_2019-07-19.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)-300
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/72:
#Comparison with cosqm003 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/003_2019-07-19.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)-300
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/73:
#Comparison with cosqm003 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/003_2019-07-19.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)-100
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/74:
#Comparison with cosqm003 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/003_2019-07-19.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/75:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal
#From 10:42 pc time, lights better shaded, setup back to center of room.
sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-19.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=400
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/76:
#Comparison with cosqm003 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/003_2019-07-19.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/77:
#Comparison with cosqm003 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/003_2019-07-19.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/78:
#Comparison with cosqm003 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/003_2019-07-19.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
#ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/79:
#Comparison with cosqm003 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/003_2019-07-19.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
#ax.set_xticks(linspace(-60,60,21))
#ax.set_xlim(-60,60)
151/80:
#Comparison with cosqm003 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/003_2019-07-19.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)
xs=linspace (0,len(sqm3_angular_code,stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
#ax.set_xticks(linspace(-60,60,21))
#ax.set_xlim(-60,60)
151/81:
#Comparison with cosqm003 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/003_2019-07-19.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)
xs=linspace (0,len(sqm3_angular_code,stop-start))

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
#ax.set_xticks(linspace(-60,60,21))
#ax.set_xlim(-60,60)
151/82:
#Comparison with cosqm003 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/003_2019-07-19.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)
xs=linspace (0,len(sqm3_angular_code),stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
#ax.set_xticks(linspace(-60,60,21))
#ax.set_xlim(-60,60)
151/83:
#Comparison with cosqm003 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/003_2019-07-19.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)
xs=linspace (0,len(sqm3_angular_code),stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'y.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
#ax.set_xticks(linspace(-60,60,21))
#ax.set_xlim(-60,60)
151/84:
#Comparison with cosqm003 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/003_2019-07-18.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)
xs=linspace (0,len(sqm3_angular_code),stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'y.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
#ax.set_xticks(linspace(-60,60,21))
#ax.set_xlim(-60,60)
151/85:
#Comparison with cosqm003 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/003_2019-07-17.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)
xs=linspace (0,len(sqm3_angular_code),stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'y.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
#ax.set_xticks(linspace(-60,60,21))
#ax.set_xlim(-60,60)
151/86:
#Comparison with cosqm003 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/003_2019-07-17.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)
xs=linspace (0,len(sqm3_angular_code),stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'y.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
#ax.set_xticks(linspace(-60,60,21))
#ax.set_xlim(-60,60)
151/87:
#Comparison with cosqm003 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/004_2019-07-17.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)
xs=linspace (0,len(sqm3_angular_code),stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'y.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
#ax.set_xticks(linspace(-60,60,21))
#ax.set_xlim(-60,60)
151/88:
#Comparison with cosqm003 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/004_2019-07-19.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)
xs=linspace (0,len(sqm3_angular_code),stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'y.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
#ax.set_xticks(linspace(-60,60,21))
#ax.set_xlim(-60,60)
151/89:
#Comparison with cosqm005 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/005_2019-07-17.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)
xs=linspace (0,len(sqm3_angular_code),stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'y.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
#ax.set_xticks(linspace(-60,60,21))
#ax.set_xlim(-60,60)
151/90:
#Comparison with cosqm005 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/005_2019-07-19.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)
xs=linspace (0,len(sqm3_angular_code),stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'y.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
#ax.set_xticks(linspace(-60,60,21))
#ax.set_xlim(-60,60)
151/91:
#Comparison with cosqm003 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/003_2019-07-19.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)
xs=linspace (0,len(sqm3_angular_code),stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'y.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
#ax.set_xticks(linspace(-60,60,21))
#ax.set_xlim(-60,60)
151/92:
#Comparison with cosqm005 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/005_2019-07-05.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)
xs=linspace (0,len(sqm3_angular_code),stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'y.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
#ax.set_xticks(linspace(-60,60,21))
#ax.set_xlim(-60,60)
151/93:
#Comparison with cosqm005 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/005_2019-07-05.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'y.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
#ax.set_xticks(linspace(-60,60,21))
#ax.set_xlim(-60,60)
151/94:
#Comparison with cosqm005 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/005_2019-07-01.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'y.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
#ax.set_xticks(linspace(-60,60,21))
#ax.set_xlim(-60,60)
151/95:
#Comparison with cosqm004 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/004_2019-07-19.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)
xs=linspace (0,len(sqm3_angular_code),stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'r.', markersize=3)
#ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'g.', markersize=3)
#ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'b.', markersize=3)
#ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'y.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
#ax.set_xticks(linspace(-60,60,21))
#ax.set_xlim(-60,60)
151/96:
#Comparison with cosqm004 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/004_2019-07-19.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)
xs=linspace (0,len(sqm3_angular_code),stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
#ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'g.', markersize=3)
#ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'b.', markersize=3)
#ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'y.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
#ax.set_xticks(linspace(-60,60,21))
#ax.set_xlim(-60,60)
151/97:
#Comparison with cosqm004 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/004_2019-07-19.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)
xs=linspace (0,len(sqm3_angular_code),stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
#ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'r.', markersize=3)
#ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'b.', markersize=3)
#ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'y.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
#ax.set_xticks(linspace(-60,60,21))
#ax.set_xlim(-60,60)
151/98:
#Comparison with cosqm004 to see minimum mag (determine if sensor wierdness at low values is important)
sqm3_angular_code=load_data('angle_dependance_optical_loop/004_2019-07-19.txt')

print (len(-sqm3_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm3_angular_code)
xs=linspace (0,len(sqm3_angular_code),stop-start)

ax.plot(xs+4, -sqm3_angular_code[start:stop,5], 'k.', markersize=3)
#ax.plot(xs+4, -sqm3_angular_code[start:stop,6], 'r.', markersize=3)
#ax.plot(xs+4, -sqm3_angular_code[start:stop,7], 'g.', markersize=3)
#ax.plot(xs+4, -sqm3_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm3_angular_code[start:stop,9], 'y.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
#ax.set_xticks(linspace(-60,60,21))
#ax.set_xlim(-60,60)
151/99:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal
#From 10:42 pc time, lights better shaded, setup back to center of room.
sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-19.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=400
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/100:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal
#From 10:42 pc time, lights better shaded, setup back to center of room.
sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-20.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=400
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/101:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal
#From 10:42 pc time, lights better shaded, setup back to center of room.
sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-20.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/102:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal
#From 10:42 pc time, lights better shaded, setup back to center of room.
sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-20.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/103:
#load file from server test

address='http://192.168.0.100/data/2019/07/'
data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/104:
#load file from server test

address='http://192.168.0.100/data/2019/07/2019-07-20.txt'
data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/105:
#load file from server test

address='\\http://192.168.0.100/data/2019/07/2019-07-20.txt'
data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/106:
#load file from server test

address='\http://192.168.0.100/data/2019/07/2019-07-20.txt'
data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/107:
#load file from server test

address='http://192.168.0.100/data/2019/07/2019-07-20.txt'
data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/108:
#load file from server test

address='/http://192.168.0.100/data/2019/07/2019-07-20.txt'
data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/109:
#load file from server test

address='192.168.0.100/data/2019/07/2019-07-20.txt'
data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/110:
#load file from server test

address='/192.168.0.100/data/2019/07/2019-07-20.txt'
data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/111:
#load file from server test

address='\192.168.0.100\data\2019\07\2019-07-20.txt'
data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/112:
#load file from server test

address='//192.168.0.100/data/2019/07/2019-07-20.txt'
data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/113:
#load file from server test

address=r'//192.168.0.100/data/2019/07/2019-07-20.txt'
data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/114:
#load file from server test

address=r'192.168.0.100/data/2019/07/2019-07-20.txt'
data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/115:
#load file from server test

address=r'192.168.0.100/data/2019/07/2019-07-20.txt'
f=open(address,r)
data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/116:
#load file from server test

address=r'192.168.0.100/data/2019/07/2019-07-20.txt'
f=open(address,'r')
data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/117:
#load file from server test

address=r'//192.168.0.100/data/2019/07/2019-07-20.txt'
f=open(address,'r')
data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/118:
#load file from server test

address=r'\\192.168.0.100/data/2019/07/2019-07-20.txt'
f=open(address,'r')
data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/119:
#load file from server test

address=r'\\\\192.168.0.100/data/2019/07/2019-07-20.txt'
f=open(address,'r')
data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/120:
#load file from server test

address=r'//192.168.0.100/data/2019/07/2019-07-20.txt'
f=open(address,'r')
data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/121:
#load file from server test

address=r'http:192.168.0.100/data/2019/07/2019-07-20.txt'
f=open(address,'r')
data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/122:
#load file from server test

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
f=open(address,'r')
data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/123:
#load file from server test

address=r'//http://192.168.0.100/data/2019/07/2019-07-20.txt'
f=open(address,'r')
data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/124:
#load file from server test

address=r'\\http://192.168.0.100/data/2019/07/2019-07-20.txt'
f=open(address,'r')
data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/125:
#load file from server test

address=r'\\http://192.168.0.100/data/2019/07/2019-07-20.txt'
response = urllib.urlopen(address)
lines = response.readlines()
data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/126:
#load file from server test

address=r'\\http://192.168.0.100/data/2019/07/2019-07-20.txt'
response = urllib.urlopen(address)
lines = response.readlines()
#data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/127:
#load file from server test

address=r'\\http://192.168.0.100/data/2019/07/2019-07-20.txt'
response = urllib.urlrequest.urlopen(address)
lines = response.readlines()
#data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/128:
#load file from server test

address=r'\\http://192.168.0.100/data/2019/07/2019-07-20.txt'
response = urllib.request.urlopen(address)
lines = response.readlines()
#data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/129:
#load file from server test

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
response = urllib.request.urlopen(address)
lines = response.readlines()
#data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/130:
#load file from server test

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
response = urllib.request.urlopen(address)
data_server = response.read()
#data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data,0,1)

print (data_server)
151/131:
#load file from server test

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
response = urllib.request.urlopen(address)
data_server = response.read()
#data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
data_server=swapaxes(data_server,0,1)

print (data_server)
151/132:
#load file from server test

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
response = urllib.request.urlopen(address)
data_server = response.read()
#data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
#data_server=swapaxes(data_server,0,1)

print (data_server)
151/133:
#load file from server test

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
response = urllib.request.urlopen(address)
data_server = response.read()
#data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
#data_server=swapaxes(data_server,0,1)

print (type(data_server))
151/134:
#load file from server test

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
response = urllib.request.urlopen(address)
print (type(response))
#data_server = resread()
#data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
#data_server=swapaxes(data_server,0,1)

print (type(data_server))
151/135:
#load file from server test

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data_server = urllib2.urlopen(address)
#print (type(response))
#data_server = resread()
#data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
#data_server=swapaxes(data_server,0,1)

print (type(data_server))
151/136:
#load file from server test
import urllib2

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data_server = urllib2.urlopen(address)
#print (type(response))
#data_server = resread()
#data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
#data_server=swapaxes(data_server,0,1)

print (type(data_server))
151/137:
#load file from server test
#import urllib2

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data_server = urlopen(address)
#print (type(response))
#data_server = resread()
#data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
#data_server=swapaxes(data_server,0,1)

print (type(data_server))
151/138:
#load file from server test
from urllib import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data_server = urlopen(address)
#print (type(response))
#data_server = resread()
#data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
#data_server=swapaxes(data_server,0,1)

print (type(data_server))
151/139:
#load file from server test
from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data_server = urlopen(address)
#print (type(response))
#data_server = resread()
#data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
#data_server=swapaxes(data_server,0,1)

print (type(data_server))
151/140:
#load file from server test
from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data_server = urlopen(address)
#print (type(response))
#data_server = resread()
#data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
#data_server=swapaxes(data_server,0,1)

print (type(data_server))
for line in data_server:
    print line
151/141:
#load file from server test
from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data_server = urlopen(address)
#print (type(response))
#data_server = resread()
#data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
#data_server=swapaxes(data_server,0,1)

print (type(data_server))
for line in data_server:
    print (line)
151/142:
#load file from server test
from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data_server = urlopen(address)
#print (type(response))
#data_server = resread()
#data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
#data_server=swapaxes(data_server,0,1)

print (type(data_server))
for line in data_server:
    print (line[0])
151/143:
#load file from server test
from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data_server = urlopen(address)
#print (type(response))
#data_server = resread()
#data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
#data_server=swapaxes(data_server,0,1)

print (type(data_server))
for line in data_server:
    print (line[1])
151/144:
#load file from server test
from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data_server = urlopen(address)
#print (type(response))
#data_server = resread()
#data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
#data_server=swapaxes(data_server,0,1)

print (type(data_server))
for line in data_server:
    print (line[2])
151/145:
#load file from server test
from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data_server = urlopen(address)
#print (type(response))
#data_server = resread()
#data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
#data_server=swapaxes(data_server,0,1)

print (type(data_server))
for line in data_server:
    print (line[3])
151/146:
#load file from server test
from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data_server = urlopen(address)
#print (type(response))
#data_server = resread()
#data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
#data_server=swapaxes(data_server,0,1)

print (type(data_server))
for line in data_server:
    print (line[4])
151/147:
#load file from server test
from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data_server = urlopen(address)
#print (type(response))
#data_server = resread()
#data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
#data_server=swapaxes(data_server,0,1)

print (type(data_server))
for line in data_server:
    print (line[5])
151/148:
#load file from server test
from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data_server = urlopen(address)
#print (type(response))
#data_server = resread()
#data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
#data_server=swapaxes(data_server,0,1)

print (type(data_server))
for line in data_server:
    print (line[50])
151/149:
#load file from server test
from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data_server = urlopen(address)
#print (type(response))
#data_server = resread()
#data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
#data_server=swapaxes(data_server,0,1)

print (type(data_server))
for line in data_server:
    print (type(line))
151/150:
#load file from server test cosqm001
from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data_server = urlopen(address)
#print (type(response))
#data_server = resread()
#data_server=loadtxt(address,usecols=list(arange(2,17)), unpack=True)
#data_server=swapaxes(data_server,0,1)

print (type(data_server))
for line in data_server:
    print (line)
151/151:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
response = urllib.request.urlopen(request)
print (response.read().decode('utf-8'))

print (type(data_server))
for line in data_server:
    print (line)
151/152:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
print (data_server.read().decode('utf-8'))

print (type(data_server))
for line in data_server:
    print (line)
151/153:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
print (data_server.read().decode('utf-8'))
151/154:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
print (type(data_server.read().decode('utf-8')))
print (data_server.read().decode('utf-8'))
151/155:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
#print (type(data_server.read().decode('utf-8')))
print (data_server.read().decode('utf-8'))
151/156:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
print (type(data_server.read().decode('utf-8')))
print (data_server.read().decode('utf-8'))
151/157:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
print (type(data_server.read().decode('utf-8')))
data_server.close()
print (data_server.read().decode('utf-8'))
151/158:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)

print (data_server.read().decode('utf-8'))
151/159:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)


data_server.read().decode('utf-8').split(' ')
151/160:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)


data_server.read().decode('utf-8').split('\n')
151/161:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)


print(len(data_server.read().decode('utf-8').split('\n')))
151/162:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)


data_server.read().decode('utf-8').split('\n').split(' ')
151/163:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)


array(data_server.read().decode('utf-8').split('\n'))
151/164:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)


print (len(array(data_server.read().decode('utf-8').split('\n'))))
151/165:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)


print (shape(array(data_server.read().decode('utf-8').split('\n'))))
151/166:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)


print (shape(array(data_server.read().decode('utf-8').split('\n'))))
151/167:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)


print (shape(array(list((data_server.read().decode('utf-8').split('\n'))))))
151/168:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)


print (list((data_server.read().decode('utf-8').split('\n'))))
151/169:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=list((data_server.read().decode('utf-8').split('\n')))

print (data_server)
151/170:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=list((data_server.read().decode('utf-8').split('\n')))

print (data_server[0])
151/171:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=list((data_server.read().decode('utf-8').split('\n')))

print (data_server[1])
151/172:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=list((data_server.read().decode('utf-8').split('\n')))

print (data_server[2])
151/173:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=array(list((data_server.read().decode('utf-8').split('\n'))))

print (data_server[2])
151/174:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=array(list((data_server.read().decode('utf-8').split('\n'))))

print (data_server[2,0])
151/175:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=list((data_server.read().decode('utf-8').split('\n')))
data_server=data.server.split(' ')
print (data_server[2,0])
151/176:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=list((data_server.read().decode('utf-8').split('\n')))
data_server=dataserver.split(' ')
print (data_server[2,0])
151/177:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=list((data_server.read().decode('utf-8').split('\n')))
data_server=data_server.split(' ')
print (data_server[2,0])
151/178:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=list((data_server.read().decode('utf-8').split('\n')))
data_server=array(data_server).split(' ')
print (data_server[2,0])
151/179:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
data_server=data_server[].split(' ')
print (data_server[2,0])
151/180:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
#data_server=data_server[].split(' ')
print (data_server[2,0])
151/181:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
#data_server=data_server[].split(' ')
print (data_server[2])
151/182:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
#data_server=data_server[].split(' ')
print (data_server[1])
151/183:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
#data_server=data_server[].split(' ')
print (data_server[1].split())
151/184:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
#data_server=data_server[].split(' ')
print (data_server.split())
151/185:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=array(data_server.read().decode('utf-8').split('\n'))
data_server=data_server[].split(' ')
151/186:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=array(data_server.read().decode('utf-8').split('\n'))
data_server=data_server[:].split(' ')
151/187:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=array(data_server.read().decode('utf-8').split('\n'))
data_server=data_server[0].split(' ')
151/188:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=array(data_server.read().decode('utf-8').split('\n'))
data_server=data_server[0].split(' ')

print (data_server[0,0])
151/189:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=array(data_server.read().decode('utf-8').split('\n'))
data_server=data_server[0].split(' ')

print (type(data_server))
151/190:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
print (shape(data_server))
data_server=data_server[0].split(' ')

print (type(data_server))
151/191:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
print (shape(data_server))
for item in data_server:
    data_server[item]=data_server[item].split(' ')

print (type(data_server))
151/192:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
print (shape(data_server))
for i in len(data_server):
    data_server[i]=data_server[i].split(' ')

print (type(data_server))
151/193:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
print (shape(data_server))
for item in data_server:
    items=item.split(' ')

print (type(data_server))
151/194:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
print (shape(data_server))
for item in data_server:
    items=item.split(' ')

print (type(data_server))
print (type(items))
151/195:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
print (shape(data_server))
for item in data_server:
    items=item.split(' ')

print (type(data_server))
print (type(items))
print (shape(items))
151/196:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
print (shape(data_server))
for item in data_server:
    items=item.split(' ')

print (type(data_server))
print (type(items))
print (shape(items))
print (items)
151/197:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
print (shape(data_server))
for item in data_server:
    items.append(item.split(' '))

print (type(data_server))
print (type(items))
print (shape(items))
print (items)
151/198:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=array(data_server.read().decode('utf-8').split('\n'))
print (shape(data_server))
for item in data_server:
    items.append(item.split(' '))

print (type(data_server))
print (type(items))
print (shape(items))
print (items)
151/199:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
print (shape(data_server))
for item in data_server:
    items.append(item.split(' '))

print (type(data_server))
print (type(items))
print (shape(items))
print (items)
151/200:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
print (shape(data_server))
for item in data_server:
    items.append(item.split(' '))

print (type(data_server))
print (type(items))
print (shape(items))
print (array(items))
151/201:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
print (shape(data_server))
for item in data_server:
    items.append(item.split(' '))

print (type(data_server))
print (type(items))
print (shape(items))
print (array(array(items)))
151/202:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
print (shape(data_server))
for item in data_server:
    items.append(item.split(' '))

print (type(data_server))
print (type(items))
print (shape(items))
print (items)
151/203:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
for item in data_server:
    items.append(item.split(' '))

print (shape(data_server))
print (type(data_server))
print (type(items))
print (shape(items))
print (items)
151/204:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
for item in data_server:
    items.append(item.split(' '))

print (shape(data_server))
print (type(data_server))
print (type(items))
print (shape(items))
print (items)
151/205:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
for item in data_server:
    items.append(item.split(' '))

print (shape(data_server))
print (type(data_server))
print (type(items))
print (shape(items))
print (items)
151/206:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')

print (shape(data_server))
print (type(data_server))
151/207:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')

print (shape(data_server))
print (type(data_server))
print (data_server)
151/208:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')

print (shape(data_server))
print (type(data_server))
print (array(data_server))
151/209:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')

print (shape(data_server))
print (type(data_server))
print (array(data_server))
print (shape(array(data_server)))
151/210:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')

print (shape(data_server))
print (type(data_server))
print (shape(array(data_server)))
print (array(data_server))
151/211:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')

print (shape(data_server))
print (type(data_server))
print (shape(array(data_server)[0]))
print (array(data_server))
151/212:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
data_server=data_server.split(' ')

print (shape(data_server))
print (type(data_server))
print (shape(array(data_server)))
print (array(data_server))
151/213:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
for i in range len(data_server):
    data_server[i]=data_server[i].split(' ')

print (shape(data_server))
print (type(data_server))
print (shape(array(data_server)))
print (array(data_server))
151/214:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
for i in range (len(data_server)):
    data_server[i]=data_server[i].split(' ')

print (shape(data_server))
print (type(data_server))
print (shape(array(data_server)))
print (array(data_server))
151/215:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
#for i in range (len(data_server)):
    #data_server[i]=data_server[i].split(' ')

print (shape(data_server))
print (type(data_server))
print (shape(array(data_server)))
print (array(data_server))
151/216:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
for i in range (len(data_server)):
    data_server[i]=data_server[i].split(' ')

print (shape(data_server))
print (type(data_server))
print (shape(array(data_server)))
print (array(data_server))
151/217:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
for i in range (len(data_server)):
    data_server[i]=data_server[i].split(' ')

print (shape(data_server))
print (type(data_server))
print (shape(array(data_server)))
print (array(data_server)[0])
151/218:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
for i in range (len(data_server)):
    data_server[i]=data_server[i].split(' ')

print (shape(data_server))
print (type(data_server))
print (shape(array(data_server)))
print (array(data_server)[0,0])
151/219:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
for i in range (len(data_server)):
    data_server[i]=data_server[i].split(' ')

print (shape(data_server))
print (type(data_server))
print (shape(array(data_server)))
print (array(data_server)[0][0])
151/220:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
for i in range (len(data_server)):
    data_server[i]=data_server[i].split(' ')

print (shape(data_server))
print (type(data_server))
print (shape(array(data_server)))
print (array(data_server)[0][1])
151/221:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
for i in range (len(data_server)):
    data_server[i]=data_server[i].split(' ')

print (shape(data_server))
print (type(data_server))
print (shape(array(data_server)))
print (array(data_server)[0][2])
151/222:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
for i in range (len(data_server)):
    data_server[i]=data_server[i].split(' ')

print (shape(data_server))
print (type(data_server))
print (shape(array(data_server)))
print (array(data_server)[0][3])
151/223:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
for i in range (len(data_server)):
    data_server[i]=data_server[i].split(' ')

print (shape(data_server))
print (type(data_server))
print (shape(array(data_server)))
print (array(data_server)[0,3])
151/224:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
for i in range (len(data_server)):
    data_server[i]=data_server[i].split(' ')

print (shape(data_server))
print (type(data_server))
print (shape(array(data_server)))
print (asarray(data_server)[0,3])
151/225:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
for i in range (len(data_server)):
    data_server[i]=array(data_server[i].split(' '))

print (shape(data_server))
print (type(data_server))
print (shape(array(data_server)))
print (asarray(data_server)[0,3])
151/226:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
for i in range (len(data_server)):
    data_server[i]=array(data_server[i].split(' '))
data_server=array(data_server)

print (shape(data_server))
print (type(data_server))
print (shape(array(data_server)))
print (asarray(data_server)[0,3])
151/227:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
for i in range (len(data_server)):
    data_server[i]=array(data_server[i].split(' '))
data_server=array(data_server)

print (shape(data_server))
print (type(data_server))
print (shape(array(data_server)))
print (asarray(data_server)[0][3])
151/228:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
for i in range (len(data_server)):
    data_server[i]=array(data_server[i].split(' '))
data_server=array(data_server)

print (shape(data_server))
print (type(data_server))
print (shape(array(data_server)))
print (asarray(data_server)[0][1])
151/229:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
for i in range (len(data_server)):
    data_server[i]=array(data_server[i].split(' '))
data_server=array(data_server)

print (shape(data_server))
print (type(data_server))
print (shape(array(data_server)))
print (asarray(data_server)[10][1])
151/230:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
for i in range (len(data_server)):
    data_server[i]=array(data_server[i].split(' '))
data_server=array(data_server)

print (shape(data_server))
print (type(data_server))
print (shape(array(data_server)))
print (asarray(data_server)[100][1])
151/231:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
for i in range (len(data_server)):
    data_server[i]=array(data_server[i].split(' '))
data_server=array(data_server)

print (shape(data_server))
print (type(data_server))
print (shape(array(data_server)))
print (asarray(data_server)[100][5])
151/232:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
for i in range (len(data_server)):
    data_server[i]=array(data_server[i].split(' '))
data_server=array(data_server)

print (shape(data_server))
print (type(data_server))
print (shape(array(data_server)))
print (asarray(data_server)[100][6])
151/233:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
for i in range (len(data_server)):
    data_server[i]=array(data_server[i].split(' '))
data_server=array(data_server)

print (shape(data_server))
print (type(data_server))
print (shape(array(data_server)))
print (asarray(data_server)[100][7])
151/234:
#load file from server test cosqm001
#from urllib.request import urlopen

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
import urllib.request
request = urllib.request.Request(address)
data_server = urllib.request.urlopen(request)
data_server=data_server.read().decode('utf-8').split('\n')
for i in range (len(data_server)):
    data_server[i]=array(data_server[i].split(' '))
data_server=array(data_server)

print (shape(data_server))
print (type(data_server))
print (shape(array(data_server)))
print (type(asarray(data_server)[100][7]))
151/235:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(filepath, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

# for i in range (len(data_server)):
#     data_server[i]=array(data_server[i].split(' '))
# data_server=array(data_server)

print (shape(data0720))
print (type(data0720))
print (shape(array(data0720)))
print (type(asarray(data0720)[100][7]))
151/236:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib2.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(filepath, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

# for i in range (len(data_server)):
#     data_server[i]=array(data_server[i].split(' '))
# data_server=array(data_server)

print (shape(data0720))
print (type(data0720))
print (shape(array(data0720)))
print (type(asarray(data0720)[100][7]))
151/237:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request
import urllib2.open

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib2.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(filepath, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

# for i in range (len(data_server)):
#     data_server[i]=array(data_server[i].split(' '))
# data_server=array(data_server)

print (shape(data0720))
print (type(data0720))
print (shape(array(data0720)))
print (type(asarray(data0720)[100][7]))
151/238:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib2.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(request, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

# for i in range (len(data_server)):
#     data_server[i]=array(data_server[i].split(' '))
# data_server=array(data_server)

print (shape(data0720))
print (type(data0720))
print (shape(array(data0720)))
print (type(asarray(data0720)[100][7]))
151/239:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(request, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

# for i in range (len(data_server)):
#     data_server[i]=array(data_server[i].split(' '))
# data_server=array(data_server)

print (shape(data0720))
print (type(data0720))
print (shape(array(data0720)))
print (type(asarray(data0720)[100][7]))
151/240:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

# for i in range (len(data_server)):
#     data_server[i]=array(data_server[i].split(' '))
# data_server=array(data_server)

print (shape(data0720))
print (type(data0720))
print (shape(array(data0720)))
print (type(asarray(data0720)[100][7]))
151/241:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

# for i in range (len(data_server)):
#     data_server[i]=array(data_server[i].split(' '))
# data_server=array(data_server)

print (shape(data0720))
print (type(data0720))
print (shape(array(data0720)))
print (type(asarray(data0720)[100][7]))
151/242:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

# for i in range (len(data_server)):
#     data_server[i]=array(data_server[i].split(' '))
# data_server=array(data_server)

print (shape(data0720))
151/243:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)


print (data0720[0])
151/244:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)


print (data0720[1])
151/245:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)


print (data0720[2])
151/246:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)


print (data0720[2,1])
151/247:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)


print (data0720[2,15])
151/248:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)


print (data0720[2,14])
151/249:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

xs=linspace(0,1000,len(data0720))
plot(data0720[5])
151/250:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

xs=linspace(0,1000,len(data0720))
plot(data0720[6])
151/251:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

xs=linspace(0,1000,len(data0720))
plot(data0720[7])
151/252:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

xs=linspace(0,1000,len(data0720))
plot(data0720[8])
151/253:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

xs=linspace(0,1000,len(data0720))
plot(data0720[8,:])
151/254:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

xs=linspace(0,1000,len(data0720))
plot(xs,data0720[5])
151/255:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

xs=linspace(0,1000,len(data0720[:,0]))
plot(xs,data0720[5])
151/256:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

xs=linspace(0,1000,len(data0720[0,:]))
plot(xs,data0720[5])
151/257:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

plot(data0720[5])
151/258:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

plot(data0720[:,5])
151/259:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

plot(-data0720[:,5])
151/260:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

plot(-data0720[:,6])
151/261:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

plot(-data0720[:,2])
151/262:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

plot(-data0720[:,3])
151/263:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

plot(-data0720[:,4])
151/264:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

plot(-data0720[:,3])
151/265:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

plot(-data0720[:,4])
151/266:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

plot(-data0720[:,5])
151/267:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

plot(-data0720[:,6])
151/268:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

plot(-data0720[:,7])
151/269:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

plot(-data0720[:,8])
151/270:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

plot(-data0720[:,9])
151/271:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

plot(-data0720[:,10])
151/272:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-15.txt'
data0720=load_web_data(address)

plot(-data0720[:,10])
151/273:
#load file from server test cosqm001
#from urllib.request import urlopen

import urllib.request

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-15.txt'
data0720=load_web_data(address)

plot(-data0720[:,5])
151/274: import urllib.request
151/275:
#load file from server test cosqm001
#from urllib.request import urlopen



def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-15.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(sqm3_angular_code)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,9], 'y.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
151/276:
#load file from server test cosqm001
#from urllib.request import urlopen



def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-15.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(sqm3_angular_code)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
151/277:
#load file from server test cosqm001
#from urllib.request import urlopen



def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-17.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(sqm3_angular_code)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
151/278:
#load file from server test cosqm001
#from urllib.request import urlopen



def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-18.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(sqm3_angular_code)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
151/279:
#load file from server test cosqm001
#from urllib.request import urlopen



def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-19.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(sqm3_angular_code)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
151/280:
#load file from server test cosqm001
#from urllib.request import urlopen



def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-20.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(sqm3_angular_code)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
151/281:
#load file from server test cosqm001
#from urllib.request import urlopen



def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-21.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(sqm3_angular_code)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
151/282:
#load file from server test cosqm001
#from urllib.request import urlopen



def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-21.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(sqm3_angular_code)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
151/283:
#small middle lamp, color pattern C-Y-R-G-B

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-17.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=100
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/284:
#after code update, new lamp with bigger batteries, new black sheet disposition

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-02.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))


start=0
stop=178
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'b.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'y.', markersize=3)
for point in xs:
    ax.axvline(point+4,linewidth=0.3)


ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/285:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-18.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))

print (len(sqm1_angular_code))
start=400
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
for point in xs:
    ax.axvline(point+4,linewidth=0.3)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/286:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-18.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))

print (len(sqm1_angular_code))
start=400
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
#ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
for point in xs:
    ax.axvline(point+4,linewidth=0.3)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/287:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-18.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))

print (len(sqm1_angular_code))
start=400
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
bax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
for point in xs:
    ax.axvline(point+4,linewidth=0.3)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/288:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal

sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-18.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(7,7))

print (len(sqm1_angular_code))
start=400
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
for point in xs:
    ax.axvline(point+4,linewidth=0.3)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/289:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal
#From 10:42 pc time, lights better shaded, setup back to center of room.
sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-19.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=400
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/290:
#small middle lamp, color pattern C-Y-R-G-B, setup closer to right wall to test difference in angles/mag for red signal
#From 10:42 pc time, lights better shaded, setup back to center of room.
sqm1_angular_code=load_data('angle_dependance_optical_loop/001_2019-07-20.txt')

print (len(-sqm1_angular_code[:,5]))

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))


start=0
stop=len(sqm1_angular_code)
xs=linspace (-60,60,stop-start)

ax.plot(xs+4, -sqm1_angular_code[start:stop,5], 'k.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,6], 'y.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,7], 'r.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,8], 'g.', markersize=3)
ax.plot(xs+4, -sqm1_angular_code[start:stop,9], 'b.', markersize=3)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-60,60,21))
ax.set_xlim(-60,60)
151/291:
#load file from server test cosqm001
#from urllib.request import urlopen



def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-22.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(sqm3_angular_code)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
151/292:
#load file from server test cosqm001
#from urllib.request import urlopen



def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-23.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(sqm3_angular_code)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
151/293:
#load file from server test cosqm001
#from urllib.request import urlopen



def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-24.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(sqm3_angular_code)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
151/294:
#load file from server test cosqm001
#from urllib.request import urlopen



def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-25.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(sqm3_angular_code)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
151/295:
#load file from server test cosqm001
#from urllib.request import urlopen



def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-25.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0720_angular_code)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
151/296:
#load file from server test cosqm001
#from urllib.request import urlopen



def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-25.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0720)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
151/297:
#load file from server test cosqm001
#from urllib.request import urlopen



def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-25.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0720)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
151/298:
address=r'http://192.168.0.100/data/2019/08/2019-08-08.txt'
data0808=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(sqm3_angular_code)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
151/299:
address=r'http://192.168.0.100/data/2019/08/2019-08-09.txt'
data0809=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(sqm3_angular_code)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
151/300:
address=r'http://192.168.0.100/data/2019/08/2019-08-08.txt'
data0808=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(sqm3_angular_code)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
151/301:
address=r'http://192.168.0.100/data/2019/08/2019-08-08.txt'
data0808=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0808)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
151/302:
address=r'http://192.168.0.100/data/2019/08/2019-08-07.txt'
data0808=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0808)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
151/303:
address=r'http://192.168.0.100/data/2019/08/2019-08-07.txt'
data0808=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0808)
xs=linspace(0,24,stop-start)

ax.plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
161/1: from numpy import *
161/2:
from numpy import *
from matplotlib import*
161/3:
from numpy import *
from matplotlib import*
161/4:
xs=linspace(0,1000,10000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))))

plot(xs, black(xs,1000))
161/5:
from numpy import *
from matplotlib import *
161/6:
xs=linspace(0,1000,10000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))))

plot(xs, black(xs,1000))
161/7:
xs=linspace(0,1000,10000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))))

fig,ax=subplot(1,1)
plot(xs, black(xs,1000))
161/8: from scipy import *
161/9:
xs=linspace(0,1000,10000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))))

fig,ax=subplot(1,1)
plot(xs, black(xs,1000))
161/10:
import numpy as np
import matplotlib as mp
161/11:
xs=np.linspace(0,1000,10000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))))

mp.plot(xs, black(xs,1000))
161/12:
import numpy as np
import matplotlib.pyplot as pl
161/13:
xs=np.linspace(0,1000,10000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))))

pl.plot(xs, black(xs,1000))
161/14:
xs=np.linspace(1,1000,10000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))))

pl.plot(xs, black(xs,1000))
161/15:
xs=np.linspace(1,1000,10000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))))

for i in range(10):
    pl.plot(xs, black(xs,i))
161/16:
xs=np.linspace(1,1000,10000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))))

for i in range(10):
    pl.plot(xs, black(xs,i), xlim=(0,200))
161/17:
xs=np.linspace(1,1000,10000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))))

for i in range(10):
    pl.plot(xs, black(xs,i))
    pl.xlim=(0,200)
161/18:
xs=np.linspace(1,200,10000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))))

for i in range(10):
    pl.plot(xs, black(xs,i))
161/19:
xs=np.linspace(1,100,10000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))))

for i in range(10):
    pl.plot(xs, black(xs,i))
161/20:
xs=np.linspace(1,10,10000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))))

for i in range(10):
    pl.plot(xs, black(xs,i))
161/21:
xs=np.linspace(1,10,10000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))-1))

for i in range(10):
    pl.plot(xs, black(xs,i))
161/22:
xs=np.linspace(1,100,10000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))-1))

for i in range(10):
    pl.plot(xs, black(xs,i))
161/23:
xs=np.linspace(1,1000,10000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))-1))

for i in range(10):
    pl.plot(xs, black(xs,i))
161/24:
xs=np.linspace(1,100000,10000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))-1))

for i in range(10):
    pl.plot(xs, black(xs,i))
161/25:
xs=np.linspace(0.001,10,10000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))-1))

for i in range(10):
    pl.plot(xs, black(xs,i))
161/26:
xs=np.linspace(0.01,10,10000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))-1))

for i in range(10):
    pl.plot(xs, black(xs,i))
161/27:
xs=np.linspace(1,10,10001)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))-1))

for i in range(10):
    pl.plot(xs, black(xs,i))
161/28:
xs=np.linspace(1,10,10001)

def black(x,T):
    return 1/(x*(e**-(1/(T*x)))-1)

for i in range(10):
    pl.plot(xs, black(xs,i))
161/29:
xs=np.linspace(1,10,10001)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))-1))

for i in range(10):
    pl.plot(xs, black(xs,i))
161/30:
xs=np.linspace(2,10,10001)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))-1))

for i in range(10):
    pl.plot(xs, black(xs,i))
161/31:
xs=np.linspace(3,10,10001)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))-1))

for i in range(10):
    pl.plot(xs, black(xs,i))
161/32:
xs=np.linspace(4,10,10001)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))-1))

for i in range(10):
    pl.plot(xs, black(xs,i))
161/33:
xs=np.linspace(40,10,10001)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))-1))

for i in range(10):
    pl.plot(xs, black(xs,i))
161/34:
xs=np.linspace(1,10,10001)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))-1))

for i in range(10):
    pl.plot(xs, black(xs,i*1000))
161/35:
xs=np.linspace(1,10001,1000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))-1))

for i in range(10):
    pl.plot(xs, black(xs,i*1000))
161/36:
xs=np.linspace(1,10001,1000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))-1))

for i in range(10):
    pl.plot(xs, black(xs,i*1000))
161/37:
xs=np.linspace(1,100001,1000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))-1))

for i in range(10):
    pl.plot(xs, black(xs,i*1000))
161/38:
xs=np.linspace(1,1000001,1000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))-1))

for i in range(10):
    pl.plot(xs, black(xs,i*1000))
161/39:
xs=np.linspace(1,1000001,1000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))))

for i in range(10):
    pl.plot(xs, black(xs,i*1000))
161/40:
xs=np.linspace(1,1001,1000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))))

for i in range(10):
    pl.plot(xs, black(xs,i*1000))
161/41:
xs=np.linspace(1,101,1000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))))

for i in range(10):
    pl.plot(xs, black(xs,i*1000))
161/42:
xs=np.linspace(1,11,1000)

def black(x,T):
    return 1/(x*(e**-(1/(T*x))))

for i in range(10):
    pl.plot(xs, black(xs,i*1000))
161/43:
xs=np.linspace(1,11,1000)

def black(x,T):
    return 3.7*e**-16*1/(x*(e**-(1/(T*x))))

for i in range(10):
    pl.plot(xs, black(xs,i*1000))
161/44:
xs=np.linspace(1,11,1000)

def black(x,T):
    return 3.7e-16*1/(x*(e**-(1/(T*x))))

for i in range(10):
    pl.plot(xs, black(xs,i*1000))
161/45:
xs=np.linspace(1,11,1000)

def black(x,T):
    return 3.7e-16*1/(x*(e**-(1.4e-2/(T*x))))

for i in range(10):
    pl.plot(xs, black(xs,i*1000))
161/46:
xs=np.linspace(1,11,1000)

def black(x,T):
    return 3.7e-16*1/x*1/(e**-(1.4e-2/(T*x)))

for i in range(10):
    pl.plot(xs, black(xs,i*1000))
161/47:
xs=np.linspace(1,11,1000)

def black(x,T):
    return 3.7e-16*1/x*1/(e**-(1.4e-2/(T*x))-1)

for i in range(10):
    pl.plot(xs, black(xs,i*1000))
161/48:
xs=np.linspace(1,11,1000)

def black(x,T):
    return 3.7e-16*1/x**5*1/(e**-(1.4e-2/(T*x))-1)

for i in range(10):
    pl.plot(xs, black(xs,i*1000))
161/49:
xs=np.linspace(1,11,1000)

def black(x,T):
    return 3.7e-16*1/x**5*1/(e**(1.4e-2/(T*x))-1)

for i in range(10):
    pl.plot(xs, black(xs,i*1000))
161/50:
xs=np.linspace(1,1,1000)

def black(x,T):
    return 3.7e-16*1/x**5*1/(e**(1.4e-2/(T*x))-1)

for i in range(10):
    pl.plot(xs, black(xs,i*1000))
161/51:
xs=np.linspace(1,5,1000)

def black(x,T):
    return 3.7e-16*1/x**5*1/(e**(1.4e-2/(T*x))-1)

for i in range(10):
    pl.plot(xs, black(xs,i*1000))
161/52:
xs=np.linspace(2,5,1000)

def black(x,T):
    return 3.7e-16*1/x**5*1/(e**(1.4e-2/(T*x))-1)

for i in range(10):
    pl.plot(xs, black(xs,i*1000))
161/53:
xs=np.linspace(3,5,1000)

def black(x,T):
    return 3.7e-16*1/x**5*1/(e**(1.4e-2/(T*x))-1)

for i in range(10):
    pl.plot(xs, black(xs,i*1000))
161/54:
xs=np.linspace(0.1,5,1000)

def black(x,T):
    return 3.7e-16*1/x**5*1/(e**(1.4e-2/(T*x))-1)

for i in range(10):
    pl.plot(xs, black(xs,i*1000))
161/55:
xs=np.linspace(0.1,1,1000)

def black(x,T):
    return 3.7e-16*1/x**5*1/(e**(1.4e-2/(T*x))-1)

for i in range(10):
    pl.plot(xs, black(xs,i*1000))
161/56:
xs=np.linspace(0.1,1,1000)

def black(x,T):
    return 3.7e-16/x**5*1/(e**(1.4e-2/(T*x))-1)

for i in range(5):
    pl.plot(xs, black(xs,i*1000))
161/57:
xs=np.linspace(0.01,1,1000)

def black(x,T):
    return 3.7e-16/x**5*1/(e**(1.4e-2/(T*x))-1)

for i in range(5):
    pl.plot(xs, black(xs,i*1000))
161/58:
xs=np.linspace(0.001,1,1000)

def black(x,T):
    return 3.7e-16/x**5*1/(e**(1.4e-2/(T*x))-1)

for i in range(5):
    pl.plot(xs, black(xs,i*1000))
161/59:
xs=np.linspace(1,10,1000)

def black(x,T):
    return 3.7e-16/x**5*1/(e**(1.4e-2/(T*x))-1)

for i in range(5):
    pl.plot(xs, black(xs,i*1000))
161/60:
xs=np.linspace(1,10,1000)
print xs

def black(x,T):
    return 3.7e-16/x**5*1/(e**(1.4e-2/(T*x))-1)

for i in range(5):
    pl.plot(xs, black(xs,i*1000))
161/61:
xs=np.linspace(1,10,1000)
print (xs)

def black(x,T):
    return 3.7e-16/x**5*1/(e**(1.4e-2/(T*x))-1)

for i in range(5):
    pl.plot(xs, black(xs,i*1000))
161/62:
xs=np.linspace(1,10,1000)

def black(x,T):
    return 3.7e-16/x**5*1/(e**(1.4e-2/(T*x))-1)

for i in range(5):
    pl.plot(xs, black(xs,i*1000))
161/63:
xs=np.linspace(1,10,1000)

def black(x,T):
    return 3.7e-16/x**5*1/(e**(1.4e-2/(T*x))

for i in range(5):
    pl.plot(xs, black(xs,i*1000))
161/64:
xs=np.linspace(1,10,1000)

def black(x,T):
    return 3.7e-16/x**5*1/(e**(1.4e-2/(T*x)))

for i in range(5):
    pl.plot(xs, black(xs,i*1000))
161/65:
xs=np.linspace(1,10,1000)

def black(x,T):
    return 3.7e-16/x**5*1/(e**(1.4e-2/(T*x)))

for i in (1,2,3,4):
    pl.plot(xs, black(xs,i*1000))
161/66:
xs=np.linspace(1,10,1000)

def black(x,T):
    return 3.7e-16/x**5*1/(e**(1.4e-2/(T*x))-1)

for i in (1,2,3,4):
    pl.plot(xs, black(xs,i*1000))
161/67:
xs=np.linspace(1,10,1000)

def Wien(x,T):
    return 3.7e-16/x**5*1/(e**(1.4e-2/(T*x))-1)

def Black(x,T):
    return 3.7e-16/x**5*1/(e**(1.4e-2/(T*x))-1)

for i in (1,2,3,4):
    pl.plot(xs, Black(xs,i*1000))
    pl.plot(xs, Wien(xs,i*1000))
161/68:
xs=np.linspace(1,10,1000)

def Wien(x,T):
    return 3.7e-16/x**5*1/(e**(1.4e-2/(T*x)))

def Black(x,T):
    return 3.7e-16/x**5*1/(e**(1.4e-2/(T*x))-1)

for i in (1,2,3,4):
    pl.plot(xs, Black(xs,i*1000)-Wien)
    pl.plot(xs, Wien(xs,i*1000))
161/69:
xs=np.linspace(1,10,1000)

def Wien(x,T):
    return 3.7e-16/x**5*1/(e**(1.4e-2/(T*x)))

def Black(x,T):
    return 3.7e-16/x**5*1/(e**(1.4e-2/(T*x))-1)

for i in (1,2,3,4):
    pl.plot(xs, Black(xs,i*1000)-Wien(xs,i*1000))
    pl.plot(xs, Wien(xs,i*1000))
161/70:
xs=np.linspace(1,10,1000)

def Wien(x,T):
    return 3.7e-16/x**5*1/(e**(1.4e-2/(T*x)))

def Black(x,T):
    return 3.7e-16/x**5*1/(e**(1.4e-2/(T*x))-1)

for i in (1,2,3,4):
    pl.plot(xs, Black(xs,i*1000)-Wien(xs,i*1000))
    #pl.plot(xs, Wien(xs,i*1000))
161/71: plot(xs,1/(e**(1/xs)-1))
161/72: pl.plot(xs,1/(e**(1/xs)-1))
161/73:
xs1=linspace(1,1000,1001)

pl.plot(xs1,1/(e**(1/xs1)-1))
161/74:
xs1=linspace(1,10000,1001)

pl.plot(xs1,1/(e**(1/xs1)-1))
161/75:
xs1=linspace(1,100000,1001)

pl.plot(xs1,1/(e**(1/xs1)-1))
161/76:
xs1=linspace(1,1000000,1001)

pl.plot(xs1,1/(e**(1/xs1)-1))
161/77:
xs1=linspace(0.1,100,1001)

pl.plot(xs1,1/(e**(1/xs1)-1))
161/78:
xs1=linspace(0.1,10,1001)

pl.plot(xs1,1/(e**(1/xs1)-1))
161/79:
xs1=linspace(0.1,1,1001)

pl.plot(xs1,1/(e**(1/xs1)-1))
161/80:
xs1=linspace(0.1,1,1001)

pl.plot(xs1,1/x**5*1/(e**(1/xs1)-1))
161/81:
xs1=linspace(0.1,1,1001)

pl.plot(xs1,1/xs1**5*1/(e**(1/xs1)-1))
161/82:
xs1=linspace(0.1,1,1001)

pl.plot(xs1,1/xs1**5*1/(e**(1/xs1)))
161/83:
xs1=linspace(0.1,1,1001)

pl.plot(xs1,1/xs1**5*1/(e**(1/xs1))
161/84:
xs1=linspace(0.1,1,1001)

pl.plot(xs1,1/xs1**5*1/(e**(1/xs1)))
161/85:
xs1=linspace(0.1,1,1001)

pl.plot(xs1,1/xs1**5*1/(e**(1/xs1))-1)
161/86:
xs1=linspace(0.1,1,1001)

pl.plot(xs1,1/xs1**5*1/(e**(1/xs1))-100)
161/87:
xs1=linspace(0.1,1,1001)

pl.plot(xs1,1/xs1**5*1/(e**(1/xs1))-100000)
161/88:
xs1=linspace(0.1,1,1001)

pl.plot(xs1,1/xs1**5*1/(e**(1/xs1))-0.0001)
161/89:
xs1=linspace(0.1,1,1001)

pl.plot(xs1,1/xs1**5*1/(e**(1/xs1)))
162/1: from vpython import *
162/2: sphere()
162/3: earth=sphere(radius=10,color=color.blue,pos=(100,0,0))
162/4: earth=sphere(radius=10,color=color.blue,pos=[100,0,0])
162/5: earth=simple_sphere(radius=10,color=color.blue,pos=(100,0,0))
162/6: %matplotlib inline
162/7: earth=simple_sphere(radius=10,color=color.blue,pos=(100,0,0))
162/8: earth=simple_sphere(radius=10,color=color.blue,pos=vector(100,0,0))
162/9:
sun=simple_sphere(radius=10,color=color.blue,pos=vector(0,0,0))
earth=simple_sphere(radius=1,color=color.blue,pos=vector(100,0,0))
162/10:
scene=canvas()
sun=simple_sphere(radius=10,color=color.blue,pos=vector(0,0,0))
earth=simple_sphere(radius=1,color=color.blue,pos=vector(100,0,0))
162/11: from vpython import *
162/12:
scene=canvas()
sun=simple_sphere(radius=10,color=color.orange,pos=vector(0,0,0))
earth=simple_sphere(radius=1,color=color.blue,pos=vector(100,0,0))
162/13:
scene=canvas()
sun=simple_sphere(radius=10,color=color.orange,pos=vector(0,0,0))
earth=simple_sphere(radius=1,color=color.blue,pos=vector(100,0,0),make_trail=true)
162/14:
#scene=canvas()
#sun=simple_sphere(radius=10,color=color.orange,pos=vector(0,0,0))
#earth=simple_sphere(radius=1,color=color.blue,pos=vector(100,0,0),make_trail=true)
163/1: %matplotlib inline
163/2:
from scipy import *
from matplotlib import *
163/3:
xs=linspace(0,100,101)

fig,ax=subplot(1,1)
ax.plot(xs,xs)
ax.plot(xs,sin(xs))
163/4:
xs=linspace(0,100,101)

fig,ax=subplots(1,1)
ax.plot(xs,xs)
ax.plot(xs,sin(xs))
163/5:
from scipy import *
from matplotlib.pyplot import *
163/6:
xs=linspace(0,100,101)

fig,ax=subplots(1,1)
ax.plot(xs,xs)
ax.plot(xs,sin(xs))
163/7:
xs=linspace(0,100,101)

fig,ax=subplots(2,1)
ax[0].plot(xs,xs)
ax[0].plot(xs,sin(xs))
163/8:
xs=linspace(0,10,101)

fig,ax=subplots(2,1)
ax[0].plot(xs,xs)
ax[0].plot(xs,sin(xs))

ax[1].plot(xs,xs)
ax[1].plot(xs,sin(xs))
ax[1].set_ylim(0,10)
163/9:
xs=linspace(0,10,101)

fig,ax=subplots(2,1)
ax[0].plot(xs,xs)
ax[0].plot(xs,sin(xs))

ax[1].plot(xs,xs)
ax[1].plot(xs,sin(xs))
ax[1].set_ylim(-1,1)
163/10:
xs=linspace(0,10,101)

fig,ax=subplots(2,1)
ax[0].plot(xs,xs)
ax[0].plot(xs,sin(xs))

ax[1].plot(xs,xs)
ax[1].plot(xs,sin(xs))
ax[1].set_xlim(0,1)
ax[1].set_ylim(-1,1)
163/11:
xs=linspace(0,10,101)

fig,ax=subplots(2,1)
ax[0].plot(xs,xs)
ax[0].plot(xs,sin(xs))

ax[1].plot(xs,xs)
ax[1].plot(xs,sin(xs))
ax[1].set_xlim(0,1)
ax[1].set_ylim(-1,1)

print (0.5*360$(2*pi))
163/12:
xs=linspace(0,10,101)

fig,ax=subplots(2,1)
ax[0].plot(xs,xs)
ax[0].plot(xs,sin(xs))

ax[1].plot(xs,xs)
ax[1].plot(xs,sin(xs))
ax[1].set_xlim(0,1)
ax[1].set_ylim(-1,1)

print (0.5*360/(2*pi))
163/13:
xs=linspace(0,10,101)

fig,ax=subplots(2,1)
ax[0].plot(xs,xs)
ax[0].plot(xs,sin(xs))

ax[1].plot(xs,xs)
ax[1].plot(xs,sin(xs))
ax[1].set_xlim(0,1)
ax[1].set_ylim(-1,1)

print (0.5*180/(pi))
163/14:
xs=linspace(0,10,101)

fig,ax=subplots(2,1)
ax[0].plot(xs,xs)
ax[0].plot(xs,sin(xs))

ax[1].plot(xs,xs)
ax[1].plot(xs,sin(xs))
ax[1].set_xlim(0,1)
ax[1].set_ylim(-1,1)

print (0.4*180/(pi))
163/15:
xs=linspace(0,10,101)

fig,ax=subplots(2,1)
ax[0].plot(xs,xs)
ax[0].plot(xs,sin(xs))

ax[1].plot(xs,xs)
ax[1].plot(xs,sin(xs))
ax[1].set_xlim(0,1)
ax[1].set_ylim(-0.5,1)

print (0.4*180/(pi))
163/16:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=10,6)
ax[0].plot(xs,xs)
ax[0].plot(xs,sin(xs))

ax[1].plot(xs,xs)
ax[1].plot(xs,sin(xs))
ax[1].set_xlim(0,1)
ax[1].set_ylim(-0.5,1)

print (0.4*180/(pi))
163/17:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=(10,6))
ax[0].plot(xs,xs)
ax[0].plot(xs,sin(xs))

ax[1].plot(xs,xs)
ax[1].plot(xs,sin(xs))
ax[1].set_xlim(0,1)
ax[1].set_ylim(-0.5,1)

print (0.4*180/(pi))
163/18:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=(10,6))
ax[0].plot(xs,xs)
ax[0].plot(xs,sin(xs))

ax[1].plot(xs,xs)
ax[1].plot(xs,sin(xs))
ax[1].set_xlim(0,1)
ax[1].set_ylim(-0.25,1)

print (0.4*180/(pi))
163/19:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=(10,6))
ax[0].plot(xs,xs)
ax[0].plot(xs,sin(xs))

ax[1].plot(xs,xs)
ax[1].plot(xs,sin(xs))
ax[1].set_xlim(-0.1,1)
ax[1].set_ylim(-0.25,1)

print (0.4*180/(pi))
163/20:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=(10,6))
ax[0].plot(xs,xs)
ax[0].plot(xs,sin(xs))

ax[1].plot(xs,xs)
ax[1].plot(xs,sin(xs))
ax[1].set_xlim(-0.05,1)
ax[1].set_ylim(-0.25,1)

print (0.4*180/(pi))
163/21:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=(10,6))
ax[0].plot(xs,xs)
ax[0].plot(xs,sin(xs))

ax[1].plot(xs,xs)
ax[1].plot(xs,sin(xs))
ax[1].set_xlim(-0.05,1)
ax[1].set_ylim(-0.25,1)

print (0.3*180/(pi))
163/22:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=(10,6))
ax[0].plot(xs,xs)
ax[0].plot(xs,sin(xs))

ax[1].plot(xs,xs)
ax[1].plot(xs,sin(xs))
ax[1].set_xlim(-0.05,1)
ax[1].set_ylim(-0.25,1)

print (0.2*180/(pi))
163/23:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=(10,6))
ax[0].plot(xs,xs)
ax[0].plot(xs,sin(xs))

ax[1].plot(xs,xs)
ax[1].plot(xs,sin(xs))
ax[1].set_xlim(-0.05,0.2)
ax[1].set_ylim(-0.25,1)

print (0.2*180/(pi))
163/24:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=(10,6))
ax[0].plot(xs,xs)
ax[0].plot(xs,sin(xs))

ax[1].plot(xs,xs)
ax[1].plot(xs,sin(xs))
ax[1].set_xlim(-0.05,1)
ax[1].set_ylim(-0.25,1)

print (0.2*180/(pi))
164/1:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=(10,6))
ax[0].plot(xs,xs)
ax[0].plot(xs,sin(xs))
ax[0].set_xlabel(u'\theta(rad)')

ax[1].plot(xs,xs)
ax[1].plot(xs,sin(xs))
ax[1].set_xlim(-0.05,1)
ax[1].set_ylim(-0.25,1)

print (0.2*180/(pi))
164/2: %matplotlib inline
164/3:
from scipy import *
from matplotlib.pyplot import *
164/4:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=(10,6))
ax[0].plot(xs,xs)
ax[0].plot(xs,sin(xs))
ax[0].set_xlabel(u'\theta(rad)')

ax[1].plot(xs,xs)
ax[1].plot(xs,sin(xs))
ax[1].set_xlim(-0.05,1)
ax[1].set_ylim(-0.25,1)

print (0.2*180/(pi))
164/5:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=(10,6))
ax[0].plot(xs,xs)
ax[0].plot(xs,sin(xs))
ax[0].set_xlabel(s'\theta(rad)')

ax[1].plot(xs,xs)
ax[1].plot(xs,sin(xs))
ax[1].set_xlim(-0.05,1)
ax[1].set_ylim(-0.25,1)

print (0.2*180/(pi))
164/6:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=(10,6))
ax[0].plot(xs,xs)
ax[0].plot(xs,sin(xs))
ax[0].set_xlabel(r'$\theta(rad)$')

ax[1].plot(xs,xs)
ax[1].plot(xs,sin(xs))
ax[1].set_xlim(-0.05,1)
ax[1].set_ylim(-0.25,1)

print (0.2*180/(pi))
164/7:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=(10,6))
ax[0].plot(xs,xs)
ax[0].plot(xs,sin(xs))
ax[0].set_xlabel(r'$\theta(rad)$')
ax[0].set_ylabel(r'$f(\theta)$')


ax[1].plot(xs,xs)
ax[1].plot(xs,sin(xs))
ax[1].set_xlim(-0.05,1)
ax[1].set_ylim(-0.25,1)

print (0.2*180/(pi))
164/8:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=(10,8))
ax[0].plot(xs,xs)
ax[0].plot(xs,sin(xs))
ax[0].set_xlabel(r'$\theta(rad)$')
ax[0].set_ylabel(r'$f(\theta)$')


ax[1].plot(xs,xs)
ax[1].plot(xs,sin(xs))
ax[1].set_xlim(-0.05,1)
ax[1].set_ylim(-0.25,1)

print (0.2*180/(pi))
164/9:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=(10,8))
ax[0].plot(xs,xs,label=r'$\theta$')
ax[0].plot(xs,sin(xs),label=r'$sin(\theta)$')
ax[0].set_xlabel(r'$\theta(rad)$')
ax[0].set_ylabel(r'$f(\theta)$')


ax[1].plot(xs,xs,label=r'$\theta$')
ax[1].plot(xs,sin(xs),label=r'$sin(\theta)$')
ax[1].set_xlim(-0.05,1)
ax[1].set_ylim(-0.25,1)
ax[1].set_xlabel(r'$\theta(rad)$')
ax[1].set_ylabel(r'$f(\theta)$')

print (0.2*180/(pi))
164/10:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=(10,8))
ax[0].plot(xs,xs,label=r'$\theta$')
ax[0].plot(xs,sin(xs),label=r'$sin(\theta)$')
ax[0].set_xlabel(r'$\theta(rad)$')
ax[0].set_ylabel(r'$f(\theta)$')
ax[0].legend()


ax[1].plot(xs,xs,label=r'$\theta$')
ax[1].plot(xs,sin(xs),label=r'$sin(\theta)$')
ax[1].set_xlim(-0.05,1)
ax[1].set_ylim(-0.25,1)
ax[1].set_xlabel(r'$\theta(rad)$')
ax[1].set_ylabel(r'$f(\theta)$')

print (0.2*180/(pi))
164/11:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=(10,8))
ax[0].plot(xs,xs,label=r'$\theta$')
ax[0].plot(xs,sin(xs),label=r'$sin(\theta)$')
ax[0].set_xlabel(r'$\theta(rad)$')
ax[0].set_ylabel(r'$f(\theta)$')
ax[0].legend()


ax[1].plot(xs,xs,label=r'$\theta$')
ax[1].plot(xs,sin(xs),label=r'$sin(\theta)$')
ax[1].set_xlim(-0.05,1)
ax[1].set_ylim(-0.25,1)
ax[1].set_xlabel(r'$\theta(rad)$')
ax[1].set_ylabel(r'$f(\theta)$')
ax[1].legend()


print (0.2*180/(pi))
164/12:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=(10,8))
ax[0].plot(xs,xs,label=r'$\theta$')
ax[0].plot(xs,sin(xs),label=r'$sin(\theta)$')
ax[0].set_xlabel(r'$\theta(rad)$')
ax[0].set_ylabel(r'$f(\theta)$')
ax[0].legend()


ax[1].plot(xs,xs,label=r'$\theta$')
ax[1].plot(xs,sin(xs),label=r'$sin(\theta)$')
ax[1].set_xlim(-0.05,1)
ax[1].set_ylim(-0.1,1)
ax[1].set_xlabel(r'$\theta(rad)$')
ax[1].set_ylabel(r'$f(\theta)$')
ax[1].legend()


print (0.2*180/(pi))
164/13:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=(10,8))
ax[0].plot(xs,xs,label=r'$\theta$')
ax[0].plot(xs,sin(xs),label=r'$sin(\theta)$')
ax[0].set_xlabel(r'$\theta(rad)$')
ax[0].set_ylabel(r'$f(\theta)$')
ax[0].legend()


ax[1].plot(xs,xs,label=r'$\theta$')
ax[1].plot(xs,sin(xs),label=r'$sin(\theta)$')
ax[1].set_xlim(-0.05,0.7)
ax[1].set_ylim(-0.1,1)
ax[1].set_xlabel(r'$\theta(rad)$')
ax[1].set_ylabel(r'$f(\theta)$')
ax[1].legend()


print (0.2*180/(pi))
164/14:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=(10,8))
ax[0].plot(xs,xs,label=r'$\theta$')
ax[0].plot(xs,sin(xs),label=r'$sin(\theta)$')
ax[0].set_xlabel(r'$\theta(rad)$')
ax[0].set_ylabel(r'$f(\theta)$')
ax[0].legend()


ax[1].plot(xs,xs,label=r'$\theta$')
ax[1].plot(xs,sin(xs),label=r'$sin(\theta)$')
ax[1].set_xlim(-0.05,0.7)
ax[1].set_ylim(-0.1,0.7)
ax[1].set_xlabel(r'$\theta(rad)$')
ax[1].set_ylabel(r'$f(\theta)$')
ax[1].legend()


print (0.2*180/(pi))
164/15:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=(10,8), dpi=100)
ax[0].plot(xs,xs,label=r'$\theta$')
ax[0].plot(xs,sin(xs),label=r'$sin(\theta)$')
ax[0].set_xlabel(r'$\theta(rad)$')
ax[0].set_ylabel(r'$f(\theta)$')
ax[0].legend()


ax[1].plot(xs,xs,label=r'$\theta$')
ax[1].plot(xs,sin(xs),label=r'$sin(\theta)$')
ax[1].set_xlim(-0.05,0.7)
ax[1].set_ylim(-0.1,0.7)
ax[1].set_xlabel(r'$\theta(rad)$')
ax[1].set_ylabel(r'$f(\theta)$')
ax[1].legend()


print (0.2*180/(pi))
164/16:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=(10,8), dpi=60)
ax[0].plot(xs,xs,label=r'$\theta$')
ax[0].plot(xs,sin(xs),label=r'$sin(\theta)$')
ax[0].set_xlabel(r'$\theta(rad)$')
ax[0].set_ylabel(r'$f(\theta)$')
ax[0].legend()


ax[1].plot(xs,xs,label=r'$\theta$')
ax[1].plot(xs,sin(xs),label=r'$sin(\theta)$')
ax[1].set_xlim(-0.05,0.7)
ax[1].set_ylim(-0.1,0.7)
ax[1].set_xlabel(r'$\theta(rad)$')
ax[1].set_ylabel(r'$f(\theta)$')
ax[1].legend()


print (0.2*180/(pi))
164/17:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=(10,8), dpi=30)
ax[0].plot(xs,xs,label=r'$\theta$')
ax[0].plot(xs,sin(xs),label=r'$sin(\theta)$')
ax[0].set_xlabel(r'$\theta(rad)$')
ax[0].set_ylabel(r'$f(\theta)$')
ax[0].legend()


ax[1].plot(xs,xs,label=r'$\theta$')
ax[1].plot(xs,sin(xs),label=r'$sin(\theta)$')
ax[1].set_xlim(-0.05,0.7)
ax[1].set_ylim(-0.1,0.7)
ax[1].set_xlabel(r'$\theta(rad)$')
ax[1].set_ylabel(r'$f(\theta)$')
ax[1].legend()


print (0.2*180/(pi))
164/18:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=(10,8), dpi=200)
ax[0].plot(xs,xs,label=r'$\theta$')
ax[0].plot(xs,sin(xs),label=r'$sin(\theta)$')
ax[0].set_xlabel(r'$\theta(rad)$')
ax[0].set_ylabel(r'$f(\theta)$')
ax[0].legend()


ax[1].plot(xs,xs,label=r'$\theta$')
ax[1].plot(xs,sin(xs),label=r'$sin(\theta)$')
ax[1].set_xlim(-0.05,0.7)
ax[1].set_ylim(-0.1,0.7)
ax[1].set_xlabel(r'$\theta(rad)$')
ax[1].set_ylabel(r'$f(\theta)$')
ax[1].legend()


print (0.2*180/(pi))
164/19:
xs=linspace(0,10,101)

fig,ax=subplots(2,1, figsize=(5,4), dpi=200)
ax[0].plot(xs,xs,label=r'$\theta$')
ax[0].plot(xs,sin(xs),label=r'$sin(\theta)$')
ax[0].set_xlabel(r'$\theta(rad)$')
ax[0].set_ylabel(r'$f(\theta)$')
ax[0].legend()


ax[1].plot(xs,xs,label=r'$\theta$')
ax[1].plot(xs,sin(xs),label=r'$sin(\theta)$')
ax[1].set_xlim(-0.05,0.7)
ax[1].set_ylim(-0.1,0.7)
ax[1].set_xlabel(r'$\theta(rad)$')
ax[1].set_ylabel(r'$f(\theta)$')
ax[1].legend()


print (0.2*180/(pi))
165/1: from kivy import *
165/2:
import kivy
kivy.require('1.0.6') # replace with your current kivy version !

from kivy.app import App
from kivy.uix.label import Label


class MyApp(App):

    def build(self):
        return Label(text='Hello world')


if __name__ == '__main__':
    MyApp().run()
165/3:
import kivy
kivy.require('1.11.1') # replace with your current kivy version !

from kivy.app import App
from kivy.uix.label import Label


class MyApp(App):

    def build(self):
        return Label(text='Hello world')


if __name__ == '__main__':
    MyApp().run()
166/1: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/kivy_test.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
166/2: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/kivy_test.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
166/3: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/kivy_test.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
166/4: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/kivy_test.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
166/5: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/kivy_test.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
166/6: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/kivy_test.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
167/1: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/kivy_test.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
168/1:
plot_mag(sqm3,sqm3_dates,'003','sqm3')
plot_mag(sqm4,sqm4_dates,'004','sqm4')
plot_mag(sqm5,sqm5_dates,'005','sqm5')
plot_mag(sqm1,sqm1_dates,'001','sqm1')

plot_diff(sqm3,sqm3_dates,'003','sqm3_diff')
plot_diff(sqm4,sqm4_dates,'004','sqm4_diff')
plot_diff(sqm5,sqm5_dates,'005','sqm5_diff')
plot_diff(sqm1,sqm1_dates,'001','sqm1_diff')
168/2: %matplotlib inline
168/3:
from pylab import *
from matplotlib import *
import datetime as dt
from scipy.optimize import curve_fit as cfit
168/4:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):
    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates


def plot_mag(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(data[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    
    savefig('figures/'+output_figname+'.png',bbox_inches='tight')

    return

def plot_diff(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(data[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,data[:,6]-data[:,5],label='R-C',color='r')
    ax.plot(x,data[:,7]-data[:,5],label='G-C',color='g')
    ax.plot(x,data[:,8]-data[:,5],label='B-C',color='b')
    ax.plot(x,data[:,9]-data[:,5],label='Y-C',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude diff')
    ax.axhline(0,ls='--')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    
    savefig('figures/'+output_figname+'.png',bbox_inches='tight')

    return

#Function to convert time string HH:MM:SS to float hours, offset is difference between cosqm times (internal clock)
def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours
168/5:
address=r'http://192.168.0.100/data/2019/08/2019-08-07.txt'
data0808=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0808)
xs=linspace(0,24,stop-start)

ax.plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
168/6:
address=r'http://161.72.128.52/data/2019/08/2019-08-07.txt'
data0808=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0808)
xs=linspace(0,24,stop-start)

ax.plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
168/7:
#load file from server test cosqm001
#from urllib.request import urlopen



def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-21.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(sqm3_angular_code)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
168/8:
address=r'http://161.72.128.52/data/2019/08/2019-08-07.txt'
data0808=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0808)
xs=linspace(0,24,stop-start)

ax.plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
168/9:
address=r'http://161.72.128.52/data/2019/08/2019-08-06.txt'
data0808=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0808)
xs=linspace(0,24,stop-start)

ax.plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
168/10:
address=r'http://161.72.128.52/data/2019/08/2019-08-08.txt'
data0808=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0808)
xs=linspace(0,24,stop-start)

ax.plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
168/11:
address=r'http://161.72.128.52/data/2019/08/2019-08-09.txt'
data0808=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0808)
xs=linspace(0,24,stop-start)

ax.plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
168/12:
address=r'http://161.72.128.52/data/2019/08/2019-08-10.txt'
data0808=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0808)
xs=linspace(0,24,stop-start)

ax.plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
168/13:
address=r'http://161.72.128.52/data/2019/08/2019-08-11.txt'
data0808=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0808)
xs=linspace(0,24,stop-start)

ax.plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
168/14:
address=r'http://161.72.128.52/data/2019/08/2019-08-12.txt'
data0808=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0808)
xs=linspace(0,24,stop-start)

ax.plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
168/15:
address=r'http://161.72.128.52/data/2019/08/2019-08-13.txt'
data0808=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0808)
xs=linspace(0,24,stop-start)

ax.plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
168/16:
address=r'http://161.72.128.52/data/2019/08/2019-08-14.txt'
data0808=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0808)
xs=linspace(0,24,stop-start)

ax.plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
168/17:
address=r'http://161.72.128.52/data/2019/08/2019-08-15.txt'
data0808=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0808)
xs=linspace(0,24,stop-start)

ax.plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
168/18:
address=r'http://161.72.128.52/data/2019/08/2019-08-16.txt'
data0808=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0808)
xs=linspace(0,24,stop-start)

ax.plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
168/19:
address=r'http://161.72.128.52/data/2019/08/2019-08-17.txt'
data0808=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0808)
xs=linspace(0,24,stop-start)

ax.plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
168/20:
address=r'http://161.72.128.52/data/2019/08/2019-08-18.txt'
data0808=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0808)
xs=linspace(0,24,stop-start)

ax.plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
168/21:
address=r'http://161.72.128.52/data/2019/08/2019-08-19.txt'
data0808=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0808)
xs=linspace(0,24,stop-start)

ax.plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
168/22:
address=r'http://161.72.128.52/data/2019/08/2019-08-20.txt'
data0808=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0808)
xs=linspace(0,24,stop-start)

ax.plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
168/23:
address=r'http://161.72.128.52/data/2019/08/2019-08-20.txt'
data0808=load_web_data(address)

fig,ax=subplots(3,3,dpi=300,figsize=(4,4))
start=0
stop=len(data0808)
xs=linspace(0,24,stop-start)

ax.plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
168/24:
address=r'http://161.72.128.52/data/2019/08/2019-08-20.txt'
data0808=load_web_data(address)

fig,ax=subplots(3,3,dpi=300,figsize=(4,4))
start=0
stop=len(data0808)
xs=linspace(0,24,stop-start)

for i in range (8):
    ax[i].plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
    ax[i].plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
    ax[i].plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
    ax[i].plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
    ax[i].plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
#for x in xs:
#    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
168/25:
address=r'http://161.72.128.52/data/2019/08/2019-08-20.txt'
data0808=load_web_data(address)

fig,ax=subplots(3,3,dpi=100,figsize=(4,4))
start=0
stop=len(data0808)
xs=linspace(0,24,stop-start)

for i in range (8):
    ax[i].plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
    ax[i].plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
    ax[i].plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
    ax[i].plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
    ax[i].plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
#for x in xs:
#    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
168/26:
address=r'http://161.72.128.52/data/2019/08/2019-08-20.txt'
data0808=load_web_data(address)

fig,ax=subplots(3,3,dpi=100,figsize=(6,6))
start=0
stop=len(data0808)
xs=linspace(0,24,stop-start)

for i in range (8):
    ax[i].plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
    ax[i].plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
    ax[i].plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
    ax[i].plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
    ax[i].plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
#for x in xs:
#    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
168/27:
address=r'http://161.72.128.52/data/2019/08/2019-08-20.txt'
data0808=load_web_data(address)

fig,ax=subplots(3,3,dpi=100,figsize=(10,10))
start=0
stop=len(data0808)
xs=linspace(0,24,stop-start)

for i in range (8):
    ax[i].plot(xs+4, -data0808[start:stop,5], 'k.', markersize=1)
    ax[i].plot(xs+4, -data0808[start:stop,6], 'y.', markersize=1)
    ax[i].plot(xs+4, -data0808[start:stop,7], 'r.', markersize=1)
    ax[i].plot(xs+4, -data0808[start:stop,8], 'g.', markersize=1)
    ax[i].plot(xs+4, -data0808[start:stop,9], 'b.', markersize=1)
#for x in xs:
#    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
169/1: runfile('/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python/kivy_test.py', wdir='/Users/admin/Documents/physique/Maitrise/ete_2019/seminaire/programmes_python')
171/1: runfile('/Users/admin/Documents/physique/exon_corp/kivy_animation_example.py', wdir='/Users/admin/Documents/physique/exon_corp')
171/2: runfile('/Users/admin/anaconda3/lib/python3.7/site-packages/kivy/core/window/window_pygame.py', wdir='/Users/admin/anaconda3/lib/python3.7/site-packages/kivy/core/window')
171/3: runfile('/Users/admin/Documents/physique/exon_corp/kivy_animation_example.py', wdir='/Users/admin/Documents/physique/exon_corp')
171/4: %tb
171/5: runfile('/Users/admin/Documents/physique/exon_corp/kivy_animation_example.py', wdir='/Users/admin/Documents/physique/exon_corp')
171/6: runfile('/Users/admin/Documents/physique/exon_corp/kivy_animation_example.py', wdir='/Users/admin/Documents/physique/exon_corp')
171/7: runfile('/Users/admin/Documents/physique/exon_corp/kivy_animation_example.py', wdir='/Users/admin/Documents/physique/exon_corp')
171/8: runfile('/Users/admin/Documents/physique/exon_corp/kivy_animation_example.py', wdir='/Users/admin/Documents/physique/exon_corp')
171/9: runfile('/Users/admin/Documents/physique/exon_corp/kivy_animation_example.py', wdir='/Users/admin/Documents/physique/exon_corp')
172/1: runfile('/Users/admin/Documents/physique/exon_corp/kivy_animation_example.py', wdir='/Users/admin/Documents/physique/exon_corp')
172/2: runfile('/Users/admin/Documents/physique/exon_corp/kivy_animation_example.py', wdir='/Users/admin/Documents/physique/exon_corp')
172/3: runfile('/Users/admin/Documents/physique/exon_corp/kivy_animation_example.py', wdir='/Users/admin/Documents/physique/exon_corp')
173/1: runfile('/Users/admin/Documents/physique/exon_corp/kivy_animation_example.py', wdir='/Users/admin/Documents/physique/exon_corp')
175/1: runfile('/Users/admin/Documents/physique/exon_corp/kivy_animation_example.py', wdir='/Users/admin/Documents/physique/exon_corp')
176/1: runfile('/Users/admin/Documents/physique/exon_corp/kivy_animation_example.py', wdir='/Users/admin/Documents/physique/exon_corp')
176/2: runfile('/Users/admin/Documents/physique/exon_corp/kivy_animation_example.py', wdir='/Users/admin/Documents/physique/exon_corp')
180/1: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
180/2: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
180/3: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
180/4: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
180/5: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
180/6: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
180/7: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
180/8: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
180/9: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
180/10: debugfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
180/11: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
180/12: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
180/13: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
180/14: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
180/15: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
181/1: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
181/2: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/1: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/2: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/3: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/4: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/5: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/6: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/7: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/8: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/9: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/10: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/11: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/12: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/13: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/14: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/15: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/16: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/17: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/18: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/19: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/20: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/21: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/22: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/23: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/24: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/25: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/26: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/27: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/28: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/29: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/30: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
182/31: runfile('/Users/admin/Downloads/kivy_ani_example.py', wdir='/Users/admin/Downloads')
188/1: from scipy import *
189/1: from scipy import *
189/2: plot()
189/3:
from scipy import *
from matplotlib.pyplot import *
189/4: plot()
189/5:
xs=linspace (0,10,11)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)

plot(xs,ys)
189/6:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)

plot(xs,ys)
189/7:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplot()
ax.plot(xs,ys,label='mesures',marker='.')
ax.plot(xs,lin,label='modèle',marker='-')
ax.legend()
189/8:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplot()
ax.plot(xs,ys,label=utf8'mesures',marker='.')
ax.plot(xs,lin,label=utf8'modèle',marker='-')
ax.legend()
189/9:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplot()
ax.plot(xs,ys,label=u'mesures',marker='.')
ax.plot(xs,lin,label=u'modèle',marker='-')
ax.legend()
189/10:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplot(1)
ax.plot(xs,ys,label=u'mesures',marker='.')
ax.plot(xs,lin,label=u'modèle',marker='-')
ax.legend()
189/11:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplot(0)
ax.plot(xs,ys,label=u'mesures',marker='.')
ax.plot(xs,lin,label=u'modèle',marker='-')
ax.legend()
189/12:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplot(0,1)
ax.plot(xs,ys,label=u'mesures',marker='.')
ax.plot(xs,lin,label=u'modèle',marker='-')
ax.legend()
189/13:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplot(1,1)
ax.plot(xs,ys,label=u'mesures',marker='.')
ax.plot(xs,lin,label=u'modèle',marker='-')
ax.legend()
189/14:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplot((1))
ax.plot(xs,ys,label=u'mesures',marker='.')
ax.plot(xs,lin,label=u'modèle',marker='-')
ax.legend()
189/15:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplot((1,0))
ax.plot(xs,ys,label=u'mesures',marker='.')
ax.plot(xs,lin,label=u'modèle',marker='-')
ax.legend()
189/16:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplot()
ax.plot(xs,ys,label=u'mesures',marker='.')
ax.plot(xs,lin,label=u'modèle',marker='-')
ax.legend()
189/17:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplots()
ax.plot(xs,ys,label=u'mesures',marker='.')
ax.plot(xs,lin,label=u'modèle',marker='-')
ax.legend()
189/18:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplots()
ax.plot(xs,ys,label=u'mesures',marker='.')
ax.plot(xs,xs,label=u'modèle',marker='-')
ax.legend()
189/19:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplots()
ax.plot(xs,ys,label=u'mesures',marker='.')
ax.plot(xs,xs,label=u'modèle',marker='--')
ax.legend()
189/20:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplots()
ax.plot(xs,ys,label=u'mesures',marker='+')
ax.plot(xs,xs,label=u'modèle',marker='_')
ax.legend()
189/21:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplots()
ax.plot(xs,ys,label=u'mesures',ine_style='+')
ax.plot(xs,xs,label=u'modèle',line_style='_')
ax.legend()
189/22:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplots()
ax.plot(xs,ys,label=u'mesures',line_style='+')
ax.plot(xs,xs,label=u'modèle',line_style='_')
ax.legend()
189/23:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplots()
ax.plot(xs,ys,label=u'mesures',linestyle='+')
ax.plot(xs,xs,label=u'modèle',linestyle='_')
ax.legend()
189/24:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplots()
ax.plot(xs,ys,label=u'mesures',linestyle='.')
ax.plot(xs,xs,label=u'modèle',linestyle='_')
ax.legend()
189/25:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplots()
ax.plot(xs,ys,label=u'mesures',linestyle='.')
ax.plot(xs,xs,label=u'modèle',linestyle='-')
ax.legend()
189/26:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplots()
ax.plot(xs,ys,label=u'mesures',style='.')
ax.plot(xs,xs,label=u'modèle',style='-')
ax.legend()
189/27:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplots()
ax.plot(xs,ys,label=u'mesures',markerstyle='.')
ax.plot(xs,xs,label=u'modèle',style='-')
ax.legend()
189/28:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplots()
ax.plot(xs,ys,label=u'mesures',markerstyle='.')
ax.plot(xs,xs,label=u'modèle',markerstyle='-')
ax.legend()
189/29:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplots()
ax.plot(xs,ys,'.',label=u'mesures')
ax.plot(xs,xs,'-',label=u'modèle')
ax.legend()
189/30:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplots()
ax.plot(xs,ys,'.',label=u'mesures', markersize=1)
ax.plot(xs,xs,'-',label=u'modèle')
ax.legend()
189/31:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplots()
ax.plot(xs,ys,'.',label=u'mesures', markersize=5)
ax.plot(xs,xs,'-',label=u'modèle')
ax.legend()
189/32:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplots()
ax.plot(xs,ys,'.',label=u'mesures', markersize=8)
ax.plot(xs,xs,'-',label=u'modèle')
ax.legend()
189/33:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplots(figsize=8.4)
ax.plot(xs,ys,'.',label=u'mesures', markersize=8)
ax.plot(xs,xs,'-',label=u'modèle')
ax.legend()
189/34:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplots(figsize=8,4)
ax.plot(xs,ys,'.',label=u'mesures', markersize=8)
ax.plot(xs,xs,'-',label=u'modèle')
ax.legend()
189/35:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplots(figsize=(8,4))
ax.plot(xs,ys,'.',label=u'mesures', markersize=8)
ax.plot(xs,xs,'-',label=u'modèle')
ax.legend()
189/36:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplots(figsize=(8,4), dpi=200)
ax.plot(xs,ys,'.',label=u'mesures', markersize=8)
ax.plot(xs,xs,'-',label=u'modèle')
ax.legend()
189/37:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplots(figsize=(6,3), dpi=200)
ax.plot(xs,ys,'.',label=u'mesures', markersize=8)
ax.plot(xs,xs,'-',label=u'modèle')
ax.legend()
189/38:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplots(figsize=(6,3), dpi=200)
ax.plot(xs,ys,'.',label=u'mesures', markersize=8)
ax.plot(xs,xs,'-',label=u'modèle')
ax.legend()
ax.set_xlim(0)
ax.set_ylim(0)
189/39:
xs=linspace (1,10,10)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplots(figsize=(6,3), dpi=200)
ax.plot(xs,ys,'.',label=u'mesures', markersize=8)
ax.plot([0,xs],[0,xs],'-',label=u'modèle')
ax.legend()
ax.set_xlim(0)
ax.set_ylim(0)
189/40:
xs=linspace (1,10,10)
xs1=linspace(0,10,11)
ys=(1.5,5,3,7,8,5,7,8,5,4.5)
fig,ax=subplots(figsize=(6,3), dpi=200)
ax.plot(xs,ys,'.',label=u'mesures', markersize=8)
ax.plot(xs1,xs1,'-',label=u'modèle')
ax.legend()
ax.set_xlim(0)
ax.set_ylim(0)
189/41:
xs=linspace (1,10,10)
xs1=linspace(0,10,11)
ys=(1.5,5,3.6,7,8,5,6.8,7.5,5,4.5)
fig,ax=subplots(figsize=(6,3), dpi=200)
ax.plot(xs,ys,'.',label=u'mesures', markersize=8)
ax.plot(xs1,xs1,'-',label=u'modèle')
ax.legend()
ax.set_xlim(0)
ax.set_ylim(0)
189/42:
xs=linspace (1,10,10)
xs1=linspace(0,10,11)
ys=(4.5,5,3.6,7,8,5,6.8,7.5,5,4.5)
fig,ax=subplots(figsize=(6,3), dpi=200)
ax.plot(xs,ys,'.',label=u'mesures', markersize=8)
ax.plot(xs1,xs1,'-',label=u'modèle')
ax.legend()
ax.set_xlim(0)
ax.set_ylim(0)
189/43:
xs=linspace (1,10,10)
xs1=linspace(0,10,11)
ys=(4.5,5,3.6,7,8,5,6.8,7.5,5,4.5)
fig,ax=subplots(figsize=(6,3), dpi=200)
ax.plot(xs,ys,'.',label=u'mesures', markersize=8)
ax.plot(xs1,xs1,'-',label=u'modèle')
ax.legend()
ax.set_xlim(0,10)
ax.set_ylim(0,10)
ax.set_xlabel('nombre de pommes')
ax.set_ylabel('nombre de visites au docteur')
189/44:
xs=linspace (1,10,10)
xs1=linspace(0,10,11)
ys=(4.5,5,3.6,7,8,5,6.8,7.5,5,4.5)
fig,ax=subplots(figsize=(6,3), dpi=200)
ax.plot(xs,ys,'.',label=u'mesures', markersize=8)
ax.plot(xs1,xs1,'-',label=u'modèle')
ax.legend()
ax.set_xlim(0,10.5)
ax.set_ylim(0,10)
ax.set_xlabel('nombre de pommes')
ax.set_ylabel('nombre de visites au docteur')
189/45:
xs=linspace (1,10,10)
xs1=linspace(0,10,11)
ys=(4.5,5,3.6,7,8,5,6.8,7.5,5,4.5)
fig,ax=subplots(figsize=(6,3), dpi=200)
ax.plot(xs,ys,'.',label=u'mesures', markersize=8)
ax.plot(xs1,xs1,'-',label=u'modèle')
ax.legend()
ax.set_xlim(0,10.5)
ax.set_ylim(0,10.5)
ax.set_xlabel('nombre de pommes')
ax.set_ylabel('nombre de visites au docteur')
195/1:
#def des 3 fonctions
def Permr_func(s,c,w):
    return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    
def Permi_func():
    return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3

def Pen_dep(lamb,permR,permI):
    return lamb*sqrt(permR)/(2*pi*permI)


s=0.1
c=0.1
w=linspace(0,40,401)

permrR=Permr_func(s,c,w)
195/2: from scipy import *
195/3:
#1. Profondeur de pénétration

##Vérifier les calculs de profondeur de pénétration versus contenu volumétrique d’eau des courbes « L »
#et « C » dans la Figure 2 de Nolan et Fatland (2003). Reproduire ces deux courbes sur un graphique avec
#la même échelle que l’axe y de la Fig. 2. Voir le professeur pour une intro à Matlab (ou excel) si
#nécessaire. Dans l’article de Nolan et Fatland, le paramètre « Volumetric water content (%) » de la Fig.
#2 représente la fraction de volume d’eau (« water content in cubic meters per cubic meter » exprimée en
#termes de %. Le calcul de profondeur de pénétration est réalisé à partir des équations (1), (2), and (3)1
#.
#S et C représentent la fraction de sable et argile dans le sol nu par poids(voir le texte juste après l’équation
#(2)). Attention : le paramètre w des équation (1) et (2) est exprimé en termes de fraction et non de
#pourcentage.
195/4:
#def des 3 fonctions
def Permr_func(s,c,w):
    return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    
def Permi_func():
    return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3

def Pen_dep(lamb,permR,permI):
    return lamb*sqrt(permR)/(2*pi*permI)


s=0.1
c=0.1
w=linspace(0,40,401)

permrR=Permr_func(s,c,w)
195/5:
#def des 3 fonctions
def Permr_func(s,c,w):
    return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    
def Permi_func():
    return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3

def Pen_dep(lamb,permR,permI):
    return lamb*sqrt(permR)/(2*pi*permI)


s=0.1
c=0.1
w=linspace(0,40,401)
lamb=3e8/5e9

permR=Permr_func(s,c,w)
permI=Permi_func(s,c,w)
pen_dep=Pen_dep(lamb,permR,permI)
195/6:
#def des 3 fonctions
def Permr_func(s,c,w):
    return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    
def Permi_func(s,c,w):
    return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3

def Pen_dep(lamb,permR,permI):
    return lamb*sqrt(permR)/(2*pi*permI)


s=0.1
c=0.1
w=linspace(0,40,401)
lamb=3e8/5e9

permR=Permr_func(s,c,w)
permI=Permi_func(s,c,w)
pen_dep=Pen_dep(lamb,permR,permI)
195/7:
#def des 3 fonctions
def Permr_func(s,c,w):
    return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    
def Permi_func(s,c,w):
    return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3

def Pen_dep(lamb,permR,permI):
    return lamb*sqrt(permR)/(2*pi*permI)


s=0.1
c=0.1
w=linspace(0,0.4,401)
lamb=3e8/5e9

permR=Permr_func(s,c,w)
permI=Permi_func(s,c,w)
pen_dep=Pen_dep(lamb,permR,permI)
195/8: plot()
195/9:
from scipy import *
from matplotlib.pyplot import *
195/10: plot()
195/11: plot(w,pen_dep)
195/12:
#def des 3 fonctions
def Permr_func(s,c,w):
    return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    
def Permi_func(s,c,w):
    return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3

def Pen_dep(lamb,permR,permI):
    return lamb*sqrt(permR)/(2*pi*permI)


s=0.1
c=0.1
w=linspace(0,40,401)
lamb=3e8/5e9

permR=Permr_func(s,c,w)
permI=Permi_func(s,c,w)
pen_dep=Pen_dep(lamb,permR,permI)
195/13: plot(w,pen_dep)
195/14:
#def des 3 fonctions
def Permr_func(s,c,w):
    return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    
def Permi_func(s,c,w):
    return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3

def Pen_dep(lamb,permR,permI):
    return lamb*sqrt(permR)/(2*pi*permI)


s=0.1
c=0.1
w=linspace(0,0.4,401)
lamb=3e8/5e9

permR=Permr_func(s,c,w)
permI=Permi_func(s,c,w)
pen_dep=Pen_dep(lamb,permR,permI)
195/15: plot(w,pen_dep)
195/16:
fig,ax=subplots()
ax.plot(w,pen_dep)
ax.yscale('log')
195/17:
fig,ax=subplots()
ax.plot(w,pen_dep,scale=log)
195/18:
fig,ax=subplots()
ax.plot(w,pen_dep)
ax.set_yscale('log')
195/19:
fig,ax=subplots()
ax.plot(w,pen_dep)
ax.set_yscale('log')
ax.ylim(0.5)
195/20:
fig,ax=subplots()
ax.plot(w,pen_dep)
ax.set_yscale('log')
ax.set_ylim(0.5)
195/21:
fig,ax=subplots()
ax.plot(w,pen_dep)
ax.set_yscale('log')
#ax.set_ylim(0.5)
195/22:
fig,ax=subplots()
ax.plot(w,pen_dep_L)
ax.set_yscale('log')
ax.set_ylim(0.5)
195/23:
#def des 3 fonctions
def Permr_func(s,c,w):
    return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    
def Permi_func(s,c,w):
    return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3

def Pen_dep(lamb,permR,permI):
    return lamb*sqrt(permR)/(2*pi*permI)


s=0.1
c=0.1
w=linspace(0,0.4,401)
lamb=3e8/5e9

permR=Permr_func(s,c,w)
permI=Permi_func(s,c,w)
pen_dep_L=Pen_dep(lamb,permR,permI)
pen_dep_C=Pen_dep(lamb,permR,permI)
195/24:
fig,ax=subplots()
ax.plot(w,pen_dep_L)
ax.set_yscale('log')
ax.set_ylim(0.5)
195/25:
fig,ax=subplots()
ax.plot(w,pen_dep_L)
ax.set_yscale('log')
ax.set_ylim(0,0.5)
195/26:
fig,ax=subplots()
ax.plot(w,pen_dep_L)
ax.set_yscale('log')
ax.set_ylim((0,0.5))
195/27:
fig,ax=subplots()
ax.plot(w,pen_dep_L)
ax.set_yscale('log')
ax.set_ylim((1e-3,0.5))
195/28:
fig,ax=subplots()
ax.plot(w,pen_dep_L)
ax.set_yscale('log')
ax.set_ylim((5e-3,0.5))
195/29:
#def des 3 fonctions
def Permr_func(s,c,w):
    return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    
def Permi_func(s,c,w):
    return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3

def Pen_dep(lamb,permR,permI):
    return lamb*sqrt(permR)/(2*pi*permI)


s=0.2
c=0.1
w=linspace(0,0.4,401)
lamb=3e8/5e9

permR=Permr_func(s,c,w)
permI=Permi_func(s,c,w)
pen_dep_L=Pen_dep(lamb,permR,permI)
pen_dep_C=Pen_dep(lamb,permR,permI)
195/30:
fig,ax=subplots()
ax.plot(w,pen_dep_L)
ax.set_yscale('log')
ax.set_ylim((5e-3,0.5))
195/31:
#def des 3 fonctions
def Permr_func(s,c,w):
    return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    
def Permi_func(s,c,w):
    return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3

def Pen_dep(lamb,permR,permI):
    return lamb*sqrt(permR)/(2*pi*permI)


s=0.2
c=0.2
w=linspace(0,0.4,401)
lamb=3e8/5e9

permR=Permr_func(s,c,w)
permI=Permi_func(s,c,w)
pen_dep_L=Pen_dep(lamb,permR,permI)
pen_dep_C=Pen_dep(lamb,permR,permI)
195/32:
fig,ax=subplots()
ax.plot(w,pen_dep_L)
ax.set_yscale('log')
ax.set_ylim((5e-3,0.5))
195/33:
#def des 3 fonctions
def Permr_func(s,c,w):
    return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    
def Permi_func(s,c,w):
    return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3

def Pen_dep(lamb,permR,permI):
    return lamb*sqrt(permR)/(2*pi*permI)


s=0.8
c=0.8
w=linspace(0,0.4,401)
lamb=3e8/5e9

permR=Permr_func(s,c,w)
permI=Permi_func(s,c,w)
pen_dep_L=Pen_dep(lamb,permR,permI)
pen_dep_C=Pen_dep(lamb,permR,permI)
195/34:
fig,ax=subplots()
ax.plot(w,pen_dep_L)
ax.set_yscale('log')
ax.set_ylim((5e-3,0.5))
195/35:
#def des 3 fonctions
def Permr_func(s,c,w):
    return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    
def Permi_func(s,c,w):
    return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3

def Pen_dep(lamb,permR,permI):
    return lamb*sqrt(permR)/(2*pi*permI)


s=0.8
c=0.8
w=linspace(0,0.4,401)
lamb=3e8*1e3/5e9

permR=Permr_func(s,c,w)
permI=Permi_func(s,c,w)
pen_dep_L=Pen_dep(lamb,permR,permI)
pen_dep_C=Pen_dep(lamb,permR,permI)
195/36:
fig,ax=subplots()
ax.plot(w,pen_dep_L)
ax.set_yscale('log')
ax.set_ylim((5e-3,0.5))
195/37:
fig,ax=subplots()
ax.plot(w,pen_dep_L)
ax.set_yscale('log')
#ax.set_ylim((5e-3,0.5))
195/38:
#def des 3 fonctions
def Permr_func(s,c,w):
    return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    
def Permi_func(s,c,w):
    return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3

def Pen_dep(lamb,permR,permI):
    return lamb*sqrt(permR)/(2*pi*permI)


s=0.8
c=0.8
w=linspace(0,0.4,401)
lamb_1p4=3e8*1e3/1.4e9
lamb_5=3e8*1e3/5e9

permR=Permr_func(s,c,w)
permI=Permi_func(s,c,w)

#L est une bande de 1.4GHz, C est une bande de 5GHz
pen_dep_L=Pen_dep(lamb,permR,permI)
pen_dep_C=Pen_dep(lamb,permR,permI)
195/39:
fig,ax=subplots()
ax.plot(w,pen_dep_L)
ax.plot(w,pen_dep_C)
ax.set_yscale('log')
#ax.set_ylim((5e-3,0.5))
195/40:
#def des 3 fonctions
def Permr_func(s,c,w):
    return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    
def Permi_func(s,c,w):
    return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3

def Pen_dep(lamb,permR,permI):
    return lamb*sqrt(permR)/(2*pi*permI)


s=0.8
c=0.8
w=linspace(0,0.4,401)
lamb_1p4=3e8*1e3/1.4e9
lamb_5=3e8*1e3/5e9

permR=Permr_func(s,c,w)
permI=Permi_func(s,c,w)

#L est une bande de 1.4GHz, C est une bande de 5GHz
pen_dep_L=Pen_dep(lamb_1p4,permR,permI)
pen_dep_C=Pen_dep(lamb_5,permR,permI)
195/41:
fig,ax=subplots()
ax.plot(w,pen_dep_L)
ax.plot(w,pen_dep_C)
ax.set_yscale('log')
#ax.set_ylim((5e-3,0.5))
195/42:
fig,ax=subplots()
ax.plot(w,pen_dep_L)
ax.plot(w,pen_dep_C)
ax.set_yscale('log')
ax.set_xlabel('Volumetric water content (%)')
ax.set_ylabel('Penetration Depth (mm)')

#ax.set_ylim((5e-3,0.5))
195/43:
fig,ax=subplots()
ax.plot(w*100,pen_dep_L)
ax.plot(w*100,pen_dep_C)
ax.set_yscale('log')
ax.set_xlabel('Volumetric water content (%)')
ax.set_ylabel('Penetration Depth (mm)')

#ax.set_ylim((5e-3,0.5))
195/44:
fig,ax=subplots()
ax.plot(w*100,pen_dep_L)
ax.plot(w*100,pen_dep_C)
ax.set_yscale('log')
ax.set_xlabel('Volumetric water content (%)')
ax.set_ylabel('Penetration Depth (mm)')

ax.set_ylim((5e-3,500))
195/45:
fig,ax=subplots()
ax.plot(w*100,pen_dep_L)
ax.plot(w*100,pen_dep_C)
ax.set_yscale('log')
ax.set_xlabel('Volumetric water content (%)')
ax.set_ylabel('Penetration Depth (mm)')

ax.set_ylim((0.5,500))
195/46:
fig,ax=subplots()
ax.plot(w*100,pen_dep_L,label='L band')
ax.plot(w*100,pen_dep_C,label='C band')
ax.set_yscale('log')
ax.set_xlabel('Volumetric water content (%)')
ax.set_ylabel('Penetration Depth (mm)')

ax.set_ylim((0.5,500))
195/47:
fig,ax=subplots()
ax.plot(w*100,pen_dep_L,label='L band')
ax.plot(w*100,pen_dep_C,label='C band')
ax.set_yscale('log')
ax.set_xlabel('Volumetric water content (%)')
ax.set_ylabel('Penetration Depth (mm)')
ax.legend()

ax.set_ylim((0.5,500))
195/48:
#def des 3 fonctions
def Permr_func(s,c,w):
    return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    
def Permi_func(s,c,w):
    return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3

def Pen_dep(lamb,permR,permI):
    return lamb*sqrt(permR)/(2*pi*permI)


s=0.1
c=0.1
w=linspace(0,0.4,401)
lamb_1p4=3e8*1e3/1.4e9
lamb_5=3e8*1e3/5e9

permR=Permr_func(s,c,w)
permI=Permi_func(s,c,w)

#L est une bande de 1.4GHz, C est une bande de 5GHz
pen_dep_L=Pen_dep(lamb_1p4,permR,permI)
pen_dep_C=Pen_dep(lamb_5,permR,permI)
195/49:
fig,ax=subplots()
ax.plot(w*100,pen_dep_L,label='L band')
ax.plot(w*100,pen_dep_C,label='C band')
ax.set_yscale('log')
ax.set_xlabel('Volumetric water content (%)')
ax.set_ylabel('Penetration Depth (mm)')
ax.legend()

ax.set_ylim((0.5,500))
195/50:
fig,ax=subplots()
ax.plot(w*100,pen_dep_L,label='L band')
ax.plot(w*100,pen_dep_C,label='C band')
ax.set_yscale('log')
ax.set_xlabel('Volumetric water content (%)')
ax.set_ylabel('Penetration Depth (mm)')
ax.legend()

ax.set_ylim((0.5,500))
ax.set_xlim((0,40))
195/51:
fig,ax=subplots()
ax.plot(w*100,pen_dep_L-pen_dep-C)
195/52:
fig,ax=subplots()
ax.plot(w*100,pen_dep_L-pen_dep_C)
195/53:
fig,ax=subplots()
ax.plot(w*100,pen_dep_L-pen_dep_C)
ax.set_yscale('log')
195/54:
fig,ax=subplots()
ax.plot(w*100,pen_dep_C-pen_dep_L)
ax.set_yscale('log')
195/55:
fig,ax=subplots()
ax.plot(w*100,pen_dep_L-pen_dep_C)
ax.set_yscale('log')
195/56:
fig,ax=subplots()
ax.plot(w*100,pen_dep_L/pen_dep_C)
ax.set_yscale('log')
195/57:
fig,ax=subplots()
ax.plot(w*100,pen_dep_L-pen_dep_C)
ax.set_yscale('log')
195/58:
fig,ax=subplots()
ax.plot(w*100,sqrt(pen_dep_L)-sqrt(pen_dep_C))
ax.set_yscale('log')
195/59:
fig,ax=subplots()
ax.plot(w*100,pen_dep_L-pen_dep_C)
ax.set_yscale('log')
196/1:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

fig,ax=subplots()
ax.plot(longonde,Corps_noir(longonde,h,c,k,T))
196/2:
from scipy import *
from matplotlib.pyplot import *
196/3:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

fig,ax=subplots()
ax.plot(longonde,Corps_noir(longonde,h,c,k,T))
196/4:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

fig,ax=subplots()
ax.plot(longonde,Corps_noir(longonde,h,c,k,T))
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Luminance ($Wm^-2\mu m-2$)')
196/5:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

fig,ax=subplots()
ax.plot(longonde,Corps_noir(longonde,h,c,k,T))
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Luminance ($Wm^{-2}\mu m{-2}$)')
196/6:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

fig,ax=subplots()
ax.plot(longonde,Corps_noir(longonde,h,c,k,T))
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Luminance ($Wm^{-2}\mu m^{-2}$)')
196/7:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

fig,ax=subplots()
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T))
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Luminance ($Wm^{-2}\mu m^{-2}$)')
196/8:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

fig,ax=subplots()
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)/1e12)
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-2}$)')
196/9:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

fig,ax=subplots()
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)/1e6)
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-2}$)')
196/10:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

fig,ax=subplots()
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)/1e6)
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)')
196/11:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

fig,ax=subplots()
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)/1e6*1.338e-4)
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)')
196/12:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

fig,ax=subplots()
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)/5.69e-9)
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)')
196/13:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

fig,ax=subplots()
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*5.69e-9)
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)')
196/14:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

fig,ax=subplots()
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5)
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)')
196/15:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

fig,ax=subplots()
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6)
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)')
196/16:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

fig,ax=subplots()
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.85e-5/1e6)
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)')
196/17:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

fig,ax=subplots()
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6)
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)')
196/18:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5800
longonde=linspace(0,3e-6,10000)

fig,ax=subplots()
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6)
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)')
196/19:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=6200
longonde=linspace(0,3e-6,10000)

fig,ax=subplots()
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6)
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)')
196/20:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=6000
longonde=linspace(0,3e-6,10000)

fig,ax=subplots()
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6)
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)')
196/21:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

fig,ax=subplots()
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6)
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)')
197/1:
from scipy import *
from matplotlib.pyplot import *
from panda.readcsv import *
197/2:
from scipy import *
from matplotlib.pyplot import *
from panda.readcsv import *
197/3:
from scipy import *
from matplotlib.pyplot import *
from pandas.readcsv import *
197/4:
from scipy import *
from matplotlib.pyplot import *
from pandas.read_csv import *
197/5:
from scipy import *
from matplotlib.pyplot import *
import pandas.read_csv as readcsv
197/6:
from scipy import *
from matplotlib.pyplot import *
import pandas as pd
197/7:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)
197/8:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

#Soleil des mesures excel
mesures=pd.read_csv('sun_radiance_2columns.csv')
print mesures[1,1]
197/9:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

#Soleil des mesures excel
mesures=pd.read_csv('sun_radiance_2columns.csv')
print (mesures[1,1])
197/10:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

#Soleil des mesures excel
mesures=pd.read_csv('sun_radiance_2columns.csv')
print (mesures)
197/11:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

#Soleil des mesures excel
mesures=pd.read_csv('sun_radiance_2columns.csv')
print (shape(mesures))
197/12:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

#Soleil des mesures excel
mesures=pd.read_csv('sun_radiance_2columns.csv')
print (type(mesures))
197/13:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

#Soleil des mesures excel
mesures=array(pd.read_csv('sun_radiance_2columns.csv'))
print (type(mesures))
197/14:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

#Soleil des mesures excel
mesures=array(pd.read_csv('sun_radiance_2columns.csv'))
print (shape(mesures))
197/15:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

#Soleil des mesures excel
mesures=array(pd.read_csv('sun_radiance_2columns.csv'))
print (mesure[0])
197/16:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

#Soleil des mesures excel
mesures=array(pd.read_csv('sun_radiance_2columns.csv'))
print (mesures[0])
197/17:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

#Soleil des mesures excel
mesures=array(pd.read_csv('sun_radiance_2columns.csv'))
print (mesures[1])
197/18:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

#Soleil des mesures excel
mesures=array(pd.read_csv('sun_radiance_2columns.csv'))
print (mesures[1,1])
197/19:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

#Soleil des mesures excel
mesures=array(pd.read_csv('sun_radiance_2columns.csv'))
print (mesures[1,0])
197/20:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

#Soleil des mesures excel
mesures=array(pd.read_csv('sun_radiance_2columns.csv'))
print (mesures[1,:])
197/21:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

#Soleil des mesures excel
mesures=array(pd.read_csv('sun_radiance_2columns.csv'))
print (mesures[0,:])
197/22:
#SOLEIL, corps noir

def Corps_noir(lamb,h,c,k,T):
    return 2*h*c**2/(lamb**5*(exp(h*c/(lamb*k*T))-1))



h=6.626e-34
c=3e8
k=1.38e-23
T=5777
longonde=linspace(0,3e-6,10000)

#Soleil des mesures excel
mesures=array(pd.read_csv('sun_radiance_2columns.csv'))
print (mesures[:,0])
197/23:
fig,ax=subplots()
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_legend()
197/24:
fig,ax=subplots()
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.legend()
197/25:
fig,ax=subplots()
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir')
ax.plot(mesures[:,0],mesures[:,1], label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.legend()
197/26:
fig,ax=subplots()
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir')
ax.plot(mesures[:,0],mesures[:,1], label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,3)
ax.legend()
197/27:
fig,ax=subplots(figsize=(6,3))
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir')
ax.plot(mesures[:,0],mesures[:,1], label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,3)
ax.legend()
197/28:
fig,ax=subplots(figsize=(12,8))
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir')
ax.plot(mesures[:,0],mesures[:,1], label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,3)
ax.legend()
197/29:
fig,ax=subplots(figsize=(10,6))
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir')
ax.plot(mesures[:,0],mesures[:,1], label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,3)
ax.legend()
197/30:
fig,ax=subplots(figsize=(8,6))
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir')
ax.plot(mesures[:,0],mesures[:,1], label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,3)
ax.legend()
197/31:
fig,ax=subplots(figsize=(8,6))
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir')
ax.plot(mesures[:,0],mesures[:,1], label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,2)
ax.legend()
197/32:
fig,ax=subplots(figsize=(8,6))
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir 5777K')
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,6000)*6.79e-5/1e6, label='Corps Noir 5777K')
ax.plot(mesures[:,0],mesures[:,1], label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,2)
ax.legend()
197/33:
fig,ax=subplots(figsize=(8,6))
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir 5777K')
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,5900)*6.79e-5/1e6, label='Corps Noir 5900K')
ax.plot(mesures[:,0],mesures[:,1], label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,2)
ax.legend()
197/34:
fig,ax=subplots(figsize=(8,6))
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir 5777K')
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,5800)*6.79e-5/1e6, label='Corps Noir 5800K')
ax.plot(mesures[:,0],mesures[:,1], label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,2)
ax.legend()
197/35:
fig,ax=subplots(figsize=(8,6))
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir 5777K')
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,5850)*6.79e-5/1e6, label='Corps Noir 5800K')
ax.plot(mesures[:,0],mesures[:,1], label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,2)
ax.legend()
197/36:
fig,ax=subplots(figsize=(8,6))
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir 5777K')
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,5850)*6.79e-5/1e6, label='Corps Noir 5850K')
ax.plot(mesures[:,0],mesures[:,1], label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,2)
ax.legend()
197/37:
fig,ax=subplots(figsize=(8,6))
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir 5777K')
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,5850)*6.79e-5/1e6, label='Corps Noir 5850K')
ax.plot(mesures[:,0],mesures[:,1], '.', label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,2)
ax.legend()
197/38:
fig,ax=subplots(figsize=(8,6))
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir 5777K')
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,5850)*6.79e-5/1e6, label='Corps Noir 5850K')
ax.plot(mesures[:,0],mesures[:,1], '.', size=0.3,label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,2)
ax.legend()
197/39:
fig,ax=subplots(figsize=(8,6))
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir 5777K')
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,5850)*6.79e-5/1e6, label='Corps Noir 5850K')
ax.plot(mesures[:,0],mesures[:,1], '.', line_size=0.3,label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,2)
ax.legend()
197/40:
fig,ax=subplots(figsize=(8,6))
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir 5777K')
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,5850)*6.79e-5/1e6, label='Corps Noir 5850K')
ax.plot(mesures[:,0],mesures[:,1], '.', marker_size=0.3,label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,2)
ax.legend()
197/41:
fig,ax=subplots(figsize=(8,6))
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir 5777K')
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,5850)*6.79e-5/1e6, label='Corps Noir 5850K')
ax.plot(mesures[:,0],mesures[:,1], '.', markersize=0.3,label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,2)
ax.legend()
197/42:
fig,ax=subplots(figsize=(8,6))
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir 5777K')
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,5850)*6.79e-5/1e6, label='Corps Noir 5850K')
ax.plot(mesures[:,0],mesures[:,1], '.', markersize=0.8,label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,2)
ax.legend()
197/43:
fig,ax=subplots(figsize=(8,6))
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir 5777K')
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,5850)*6.79e-5/1e6, label='Corps Noir 5850K')
ax.plot(mesures[:,0],mesures[:,1], '.', markersize=1,label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,2)
ax.legend()
197/44:
fig,ax=subplots(figsize=(8,6))
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir 5777K')
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,5850)*6.79e-5/1e6, label='Corps Noir 5850K')
ax.plot(mesures[:,0],mesures[:,1], '.', markersize=1.5,label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,2)
ax.legend()
197/45:
fig,ax=subplots(figsize=(8,6))
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir 5777K')
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,5850)*6.79e-5/1e6, label='Corps Noir 5850K')
ax.plot(mesures[:,0],mesures[:,1], '.', markersize=3,label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,2)
ax.legend()
197/46:
fig,ax=subplots(figsize=(8,6),dpi-200)
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir 5777K')
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,5850)*6.79e-5/1e6, label='Corps Noir 5850K')
ax.plot(mesures[:,0],mesures[:,1], '.', markersize=3,label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,2)
ax.legend()
197/47:
fig,ax=subplots(figsize=(8,6),dpi=200)
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir 5777K')
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,5850)*6.79e-5/1e6, label='Corps Noir 5850K')
ax.plot(mesures[:,0],mesures[:,1], '.', markersize=3,label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,2)
ax.legend()
197/48:
fig,ax=subplots(figsize=(8,6),dpi=150)
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir 5777K')
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,5850)*6.79e-5/1e6, label='Corps Noir 5850K')
ax.plot(mesures[:,0],mesures[:,1], '.', markersize=3,label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,2)
ax.legend()
197/49:
fig,ax=subplots(figsize=(4,3),dpi=150)
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir 5777K')
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,5850)*6.79e-5/1e6, label='Corps Noir 5850K')
ax.plot(mesures[:,0],mesures[:,1], '.', markersize=3,label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,2)
ax.legend()
197/50:
fig,ax=subplots(figsize=(4,3),dpi=100)
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir 5777K')
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,5850)*6.79e-5/1e6, label='Corps Noir 5850K')
ax.plot(mesures[:,0],mesures[:,1], '.', markersize=3,label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,2)
ax.legend()
197/51:
fig,ax=subplots(figsize=(4,3),dpi=200)
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir 5777K')
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,5850)*6.79e-5/1e6, label='Corps Noir 5850K')
ax.plot(mesures[:,0],mesures[:,1], '.', markersize=3,label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,2)
ax.legend()
197/52:
fig,ax=subplots(figsize=(4,3),dpi=300)
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir 5777K')
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,5850)*6.79e-5/1e6, label='Corps Noir 5850K')
ax.plot(mesures[:,0],mesures[:,1], '.', markersize=3,label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,2)
ax.legend()
197/53:
fig,ax=subplots(figsize=(4,3),dpi=100)
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir 5777K')
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,5850)*6.79e-5/1e6, label='Corps Noir 5850K')
ax.plot(mesures[:,0],mesures[:,1], '.', markersize=3,label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,2)
ax.legend()
197/54:
fig,ax=subplots(figsize=(5,4),dpi=100)
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir 5777K')
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,5850)*6.79e-5/1e6, label='Corps Noir 5850K')
ax.plot(mesures[:,0],mesures[:,1], '.', markersize=3,label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,2)
ax.legend()
197/55:
fig,ax=subplots(figsize=(5,4),dpi=100)
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,T)*6.79e-5/1e6, label='Corps Noir 5777K')
ax.plot(longonde*1e6,Corps_noir(longonde,h,c,k,5850)*6.79e-5/1e6, label='Corps Noir 5850K')
ax.plot(mesures[:,0],mesures[:,1], '.', markersize=2,label='Mesures ATSM')
ax.set_xlabel('longueur d\'onde ($\mu m$)')
ax.set_ylabel('Éclairement ($Wm^{-2}\mu m^{-1}$)') 
ax.set_xlim(0,2)
ax.legend()
198/1: from scipy import *
198/2: (343-43)/343
198/3: 343/(343+43)
198/4: 343/(343+143)
198/5: 343/(343+3)
198/6: (343-3)/343
198/7: (343-30)/343
198/8: 343/(343+30)
198/9: 343/(343+300)
198/10: (343-300)/343
197/56:
xs=linspace(1e-3,1,10001)
ys=exp(xs)
plot(xs,ys)
199/1:
xs=linspace (1,10,10)
xs1=linspace(0,10,11)
ys=(4.5,5,3.6,7,8,5,6.8,7.5,5,4.5)
fig,ax=subplots(figsize=(6,3), dpi=200)
ax.plot(xs,6*ys,'.',label=u'mesures', markersize=8)
ax.plot(xs1,6*xs1,'-',label=u'modèle')
ax.legend()
ax.set_xlim(0,100.5)
ax.set_ylim(0,10.5)
ax.set_xlabel('nombre de pommes')
ax.set_ylabel('nombre de visites au docteur')
199/2:
from scipy import *
from matplotlib.pyplot import *
199/3:
xs=linspace (1,10,10)
xs1=linspace(0,10,11)
ys=(4.5,5,3.6,7,8,5,6.8,7.5,5,4.5)
fig,ax=subplots(figsize=(6,3), dpi=200)
ax.plot(xs,6*ys,'.',label=u'mesures', markersize=8)
ax.plot(xs1,6*xs1,'-',label=u'modèle')
ax.legend()
ax.set_xlim(0,100.5)
ax.set_ylim(0,10.5)
ax.set_xlabel('nombre de pommes')
ax.set_ylabel('nombre de visites au docteur')
199/4:
from scipy import *
from matplotlib.pyplot import *
199/5:
xs=linspace (1,10,10)
xs1=linspace(0,10,11)
ys=(4.5,5,3.6,7,8,5,6.8,7.5,5,4.5)
fig,ax=subplots(figsize=(6,3), dpi=200)
ax.plot(xs,6*ys,'.',label=u'mesures', markersize=8)
ax.plot(xs1,6*xs1,'-',label=u'modèle')
ax.legend()
ax.set_xlim(0,100.5)
ax.set_ylim(0,10.5)
ax.set_xlabel('nombre de pommes')
ax.set_ylabel('nombre de visites au docteur')
199/6:
xs=linspace (1,10,10)
xs1=linspace(0,10,11)
ys=(4.5,5,3.6,7,8,5,6.8,7.5,5,4.5)
fig,ax=subplots(figsize=(6,3), dpi=200)
ax.plot(6*xs,6*ys,'.',label=u'mesures', markersize=8)
ax.plot(6*xs1,6*xs1,'-',label=u'modèle')
ax.legend()
ax.set_xlim(0,100.5)
ax.set_ylim(0,10.5)
ax.set_xlabel('nombre de pommes')
ax.set_ylabel('nombre de visites au docteur')
199/7:
xs=linspace (1,10,10)
xs1=linspace(0,10,11)
ys=(4.5,5,3.6,7,8,5,6.8,7.5,5,4.5)
fig,ax=subplots(figsize=(6,3), dpi=200)
ax.plot(xs,ys,'.',label=u'mesures', markersize=8)
ax.plot(xs1,6*xs1,'-',label=u'modèle')
ax.legend()
ax.set_xlim(0,100.5)
ax.set_ylim(0,10.5)
ax.set_xlabel('nombre de pommes')
ax.set_ylabel('nombre de visites au docteur')
199/8:
xs=linspace (1,10,10)
xs1=linspace(0,10,11)
ys=(4.5,5,3.6,7,8,5,6.8,7.5,5,4.5)
fig,ax=subplots(figsize=(6,3), dpi=200)
ax.plot(xs,ys*10,'.',label=u'mesures', markersize=8)
ax.plot(xs1,xs1*10,'-',label=u'modèle')
ax.legend()
ax.set_xlim(0,100.5)
ax.set_ylim(0,10.5)
ax.set_xlabel('nombre de pommes')
ax.set_ylabel('nombre de visites au docteur')
199/9:
xs=linspace (1,10,10)
xs1=linspace(0,10,11)
ys=array((4.5,5,3.6,7,8,5,6.8,7.5,5,4.5))
fig,ax=subplots(figsize=(6,3), dpi=200)
ax.plot(xs,ys*10,'.',label=u'mesures', markersize=8)
ax.plot(xs1,xs1*10,'-',label=u'modèle')
ax.legend()
ax.set_xlim(0,100.5)
ax.set_ylim(0,10.5)
ax.set_xlabel('nombre de pommes')
ax.set_ylabel('nombre de visites au docteur')
199/10:
xs=linspace (1,10,10)
xs1=linspace(0,10,11)
ys=array((4.5,5,3.6,7,8,5,6.8,7.5,5,4.5))
fig,ax=subplots(figsize=(6,3), dpi=200)
ax.plot(10*xs,ys,'.',label=u'mesures', markersize=8)
ax.plot(10*xs1,xs1,'-',label=u'modèle')
ax.legend()
ax.set_xlim(0,100.5)
ax.set_ylim(0,10.5)
ax.set_xlabel('nombre de pommes')
ax.set_ylabel('nombre de visites au docteur')
199/11:
xs=linspace (1,10,10)
xs1=linspace(0,10,11)
ys=array((4.5,5,3.6,7,8,5,6.8,7.5,5.5,8))
fig,ax=subplots(figsize=(6,3), dpi=200)
ax.plot(10*xs,ys,'.',label=u'mesures', markersize=8)
ax.plot(10*xs1,xs1,'-',label=u'modèle')
ax.legend()
ax.set_xlim(0,100.5)
ax.set_ylim(0,10.5)
ax.set_xlabel('nombre de pommes')
ax.set_ylabel('nombre de visites au docteur')
199/12:
xs=linspace (1,10,10)
xs1=linspace(0,10,11)
ys=array((4.5,5,3.6,7,8.9,5,6.8,7.5,5.5,8))
fig,ax=subplots(figsize=(6,3), dpi=200)
ax.plot(10*xs,ys,'.',label=u'mesures', markersize=8)
ax.plot(10*xs1,xs1,'-',label=u'modèle')
ax.legend()
ax.set_xlim(0,100.5)
ax.set_ylim(0,10.5)
ax.set_xlabel('nombre de pommes')
ax.set_ylabel('nombre de visites au docteur')
199/13:
xs=linspace (1,10,10)
xs1=linspace(0,10,11)
ys=array((4.5,5,3.6,7,8.9,5,6.8,7.5,5.5,8))
fig,ax=subplots(figsize=(6,3), dpi=200)
ax.plot(3*xs,ys,'.',label=u'mesures', markersize=8)
ax.plot(3*xs1,xs1,'-',label=u'modèle')
ax.legend()
ax.set_xlim(0,30)
ax.set_ylim(0,10.5)
ax.set_xlabel('nombre de pommes')
ax.set_ylabel('nombre de visites au docteur')
199/14:
xs=linspace (1,10,10)
xs1=linspace(0,10,11)
ys=array((4.5,5,3.6,7,8.9,5,6.8,7.5,5.5,8))
fig,ax=subplots(figsize=(6,3), dpi=200)
ax.plot(1.2*xs,ys,'.',label=u'mesures', markersize=8)
ax.plot(1.2*xs1,xs1,'-',label=u'modèle')
ax.legend()
ax.set_xlim(0,12)
ax.set_ylim(0,10.5)
ax.set_xlabel('nombre de mois')
ax.set_ylabel('nombre de visites au docteur')
197/57:
from scipy import *
from matplotlib.pyplot import *
import pandas as pd
197/58:
#1. Profondeur de pénétration

##Vérifier les calculs de profondeur de pénétration versus contenu volumétrique d’eau des courbes « L »
#et « C » dans la Figure 2 de Nolan et Fatland (2003). Reproduire ces deux courbes sur un graphique avec
#la même échelle que l’axe y de la Fig. 2. Voir le professeur pour une intro à Matlab (ou excel) si
#nécessaire. Dans l’article de Nolan et Fatland, le paramètre « Volumetric water content (%) » de la Fig.
#2 représente la fraction de volume d’eau (« water content in cubic meters per cubic meter » exprimée en
#termes de %. Le calcul de profondeur de pénétration est réalisé à partir des équations (1), (2), and (3)1
#.
#S et C représentent la fraction de sable et argile dans le sol nu par poids(voir le texte juste après l’équation
#(2)). Attention : le paramètre w des équation (1) et (2) est exprimé en termes de fraction et non de
#pourcentage.
197/59:
#def des 3 fonctions
def Permr_func_1(s,c,w):
    #return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    return 2.37+(-5.24+0.55*s-0.15*c)*w+(146.04-0.74*s-0.85*c)*w**2+(-0-0*s-0*c)*w**3

def Permi_func_1(s,c,w):
    #return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3
    return 0.06+(6.69+0.0367*s-0.062*c)*w+(16.17-0.30*s+0.27*c)*w**2+(0+0*s-0*c)*w**3

def Permr_func_5(s,c,w):
    #return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11-0.38*s-1*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3

def Permi_func_5(s,c,w):
    #return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3
    return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.16*c)*w**3


def Pen_dep1(lamb,permR,permI):
    return lamb*sqrt(permR)/(2*pi*permI)


s=0.1
c=0.1
w=linspace(0,0.4,401)
lamb_1p4=3e8*1e3/1.4e9
lamb_5=3e8*1e3/5e9

permR1=Permr_func_1(s,c,w)
permI1=Permi_func_1(s,c,w)

permR5=Permr_func_5(s,c,w)
permI5=Permi_func_5(s,c,w)

#L est une bande de 1.4GHz, C est une bande de 5GHz
pen_dep_L=Pen_dep(lamb_1p4,permR1,permI5)
pen_dep_C=Pen_dep(lamb_5,permR5,permI5)
197/60:
#def des 3 fonctions
def Permr_func_1(s,c,w):
    #return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    return 2.37+(-5.24+0.55*s-0.15*c)*w+(146.04-0.74*s-0.85*c)*w**2+(-0-0*s-0*c)*w**3

def Permi_func_1(s,c,w):
    #return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3
    return 0.06+(6.69+0.0367*s-0.062*c)*w+(16.17-0.30*s+0.27*c)*w**2+(0+0*s-0*c)*w**3

def Permr_func_5(s,c,w):
    #return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11-0.38*s-1*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3

def Permi_func_5(s,c,w):
    #return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3
    return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.16*c)*w**3


def Pen_dep(lamb,permR,permI):
    return lamb*sqrt(permR)/(2*pi*permI)


s=0.1
c=0.1
w=linspace(0,0.4,401)
lamb_1p4=3e8*1e3/1.4e9
lamb_5=3e8*1e3/5e9

permR1=Permr_func_1(s,c,w)
permI1=Permi_func_1(s,c,w)

permR5=Permr_func_5(s,c,w)
permI5=Permi_func_5(s,c,w)

#L est une bande de 1.4GHz, C est une bande de 5GHz
pen_dep_L=Pen_dep(lamb_1p4,permR1,permI5)
pen_dep_C=Pen_dep(lamb_5,permR5,permI5)
197/61:
fig,ax=subplots()
ax.plot(w*100,pen_dep_L,label='L band')
ax.plot(w*100,pen_dep_C,label='C band')
ax.set_yscale('log')
ax.set_xlabel('Volumetric water content (%)')
ax.set_ylabel('Penetration Depth (mm)')
ax.legend()

ax.set_ylim((0.5,500))
ax.set_xlim((0,40))
197/62:
#def des 3 fonctions
def Permr_func_1(s,c,w):
    #return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    return 2.37+(-5.24+0.55*s-0.15*c)*w+(146.04-0.74*s-0.85*c)*w**2+(-0-0*s-0*c)*w**3

def Permi_func_1(s,c,w):
    #return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3
    return 0.06+(6.69+0.0367*s-0.062*c)*w+(16.17-0.30*s+0.27*c)*w**2+(0+0*s-0*c)*w**3

def Permr_func_5(s,c,w):
    #return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11-0.38*s-1*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3

def Permi_func_5(s,c,w):
    #return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3
    return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.16*c)*w**3


def Pen_dep(lamb,permR,permI):
    return lamb*sqrt(permR)/(2*pi*permI)


s=0.21
c=0.22
w=linspace(0,0.4,401)
lamb_1p4=3e8*1e3/1.4e9
lamb_5=3e8*1e3/5e9

permR1=Permr_func_1(s,c,w)
permI1=Permi_func_1(s,c,w)

permR5=Permr_func_5(s,c,w)
permI5=Permi_func_5(s,c,w)

#L est une bande de 1.4GHz, C est une bande de 5GHz
pen_dep_L=Pen_dep(lamb_1p4,permR1,permI5)
pen_dep_C=Pen_dep(lamb_5,permR5,permI5)
197/63:
fig,ax=subplots()
ax.plot(w*100,pen_dep_L,label='L band')
ax.plot(w*100,pen_dep_C,label='C band')
ax.set_yscale('log')
ax.set_xlabel('Volumetric water content (%)')
ax.set_ylabel('Penetration Depth (mm)')
ax.legend()

ax.set_ylim((0.5,500))
ax.set_xlim((0,40))
197/64:
#def des 3 fonctions
def Permr_func_1(s,c,w):
    #return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    return 2.37+(-5.24+0.55*s-0.15*c)*w+(146.04-0.74*s-0.85*c)*w**2+(-0-0*s-0*c)*w**3

def Permi_func_1(s,c,w):
    #return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3
    return 0.06+(6.69+0.0367*s-0.062*c)*w+(16.17-0.30*s+0.27*c)*w**2+(0+0*s-0*c)*w**3

def Permr_func_5(s,c,w):
    #return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11-0.38*s-1*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3

def Permi_func_5(s,c,w):
    #return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3
    return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.16*c)*w**3


def Pen_dep(lamb,permR,permI):
    return lamb*sqrt(permR)/(2*pi*permI)


s=0.5
c=0.5
w=linspace(0,0.4,401)
lamb_1p4=3e8*1e3/1.4e9
lamb_5=3e8*1e3/5e9

permR1=Permr_func_1(s,c,w)
permI1=Permi_func_1(s,c,w)

permR5=Permr_func_5(s,c,w)
permI5=Permi_func_5(s,c,w)

#L est une bande de 1.4GHz, C est une bande de 5GHz
pen_dep_L=Pen_dep(lamb_1p4,permR1,permI5)
pen_dep_C=Pen_dep(lamb_5,permR5,permI5)
197/65:
fig,ax=subplots()
ax.plot(w*100,pen_dep_L,label='L band')
ax.plot(w*100,pen_dep_C,label='C band')
ax.set_yscale('log')
ax.set_xlabel('Volumetric water content (%)')
ax.set_ylabel('Penetration Depth (mm)')
ax.legend()

ax.set_ylim((0.5,500))
ax.set_xlim((0,40))
197/66:
#def des 3 fonctions
def Permr_func_1(s,c,w):
    #return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    return 2.37+(-5.24+0.55*s-0.15*c)*w+(146.04-0.74*s-0.85*c)*w**2+(-0-0*s-0*c)*w**3

def Permi_func_1(s,c,w):
    #return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3
    return 0.06+(6.69+0.0367*s-0.062*c)*w+(16.17-0.30*s+0.27*c)*w**2+(0+0*s-0*c)*w**3

def Permr_func_5(s,c,w):
    #return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11-0.38*s-1*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3

def Permi_func_5(s,c,w):
    #return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3
    return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.16*c)*w**3


def Pen_dep(lamb,permR,permI):
    return lamb*sqrt(permR)/(2*pi*permI)


s=0.1
c=0.1
w=linspace(0,0.4,401)
lamb_1p4=3e8*1e3/1.4e9
lamb_5=3e8*1e3/5e9

permR1=Permr_func_1(s,c,w)
permI1=Permi_func_1(s,c,w)

permR5=Permr_func_5(s,c,w)
permI5=Permi_func_5(s,c,w)

#L est une bande de 1.4GHz, C est une bande de 5GHz
pen_dep_L=Pen_dep(lamb_1p4,permR1,permI5)
pen_dep_C=Pen_dep(lamb_5,permR5,permI5)
197/67:
fig,ax=subplots()
ax.plot(w*100,pen_dep_L,label='L band')
ax.plot(w*100,pen_dep_C,label='C band')
ax.set_yscale('log')
ax.set_xlabel('Volumetric water content (%)')
ax.set_ylabel('Penetration Depth (mm)')
ax.legend()

ax.set_ylim((0.5,500))
ax.set_xlim((0,40))
197/68:
fig,ax=subplots()
ax.plot(w*100,pen_dep_L,label='L band')
ax.plot(w*100,pen_dep_C,label='C band')
ax.set_yscale('log')
ax.set_xlabel('Volumetric water content (%)')
ax.set_ylabel('Penetration Depth (mm)')
ax.legend()

ax.set_ylim((0.5,500))
ax.set_xlim((0,40))
197/69:
#def des 3 fonctions
def Permr_func_1(s,c,w):
    #return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    return 2.37+(-5.24+0.55*s-0.15*c)*w+(146.04-0.74*s-0.85*c)*w**2+(-0-0*s-0*c)*w**3

def Permi_func_1(s,c,w):
    #return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3
    return 0.06+(6.69+0.0367*s-0.062*c)*w+(16.17-0.30*s+0.27*c)*w**2+(0+0*s-0*c)*w**3

def Permr_func_5(s,c,w):
    #return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11-0.38*s-1*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3

def Permi_func_5(s,c,w):
    #return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3
    return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.16*c)*w**3


def Pen_dep(lamb,permR,permI):
    return lamb*sqrt(permR)/(2*pi*permI)


s=0.1
c=0.1
w=linspace(0,0.4,401)
lamb_1p4=3e8*1e3/1.4e9
lamb_5=3e8*1e3/5e9

permR1=Permr_func_1(s,c,w)
permI1=Permi_func_1(s,c,w)

permR5=Permr_func_5(s,c,w)
permI5=Permi_func_5(s,c,w)

#L est une bande de 1.4GHz, C est une bande de 5GHz
pen_dep_L=Pen_dep(lamb_1p4,permR1,permI1)
pen_dep_C=Pen_dep(lamb_5,permR5,permI5)
197/70:
fig,ax=subplots()
ax.plot(w*100,pen_dep_L,label='L band')
ax.plot(w*100,pen_dep_C,label='C band')
ax.set_yscale('log')
ax.set_xlabel('Volumetric water content (%)')
ax.set_ylabel('Penetration Depth (mm)')
ax.legend()

ax.set_ylim((0.5,500))
ax.set_xlim((0,40))
197/71:
fig,ax=subplots()
ax.plot(w*100,pen_dep_L,label='L band')
ax.plot(w*100,pen_dep_C,label='C band')
ax.set_yscale('log')
ax.set_xlabel('Volumetric water content (%)')
ax.set_ylabel('Penetration Depth (mm)')
ax.legend()

ax.set_ylim((0.5,800))
ax.set_xlim((0,40))
197/72:
fig,ax=subplots()
ax.plot(w*100,pen_dep_L,label='L band')
ax.plot(w*100,pen_dep_C,label='C band')
ax.set_yscale('log')
ax.set_xlabel('Volumetric water content (%)')
ax.set_ylabel('Penetration Depth (mm)')
ax.legend()

ax.set_ylim((0.5,900))
ax.set_xlim((0,40))
197/73:
#def des 3 fonctions
def Permr_func_1(s,c,w):
    #return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    return 2.37+(-5.24+0.55*s-0.15*c)*w+(146.04-0.74*s-0.85*c)*w**2+(-0-0*s-0*c)*w**3

def Permi_func_1(s,c,w):
    #return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3
    return 0.06+(6.69+0.0367*s-0.062*c)*w+(16.17-0.30*s+0.27*c)*w**2+(0+0*s-0*c)*w**3

def Permr_func_5(s,c,w):
    #return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11-0.38*s-1*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3

def Permi_func_5(s,c,w):
    #return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3
    return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.16*c)*w**3


def Pen_dep(lamb,permR,permI):
    return lamb*sqrt(permR)/(2*pi*permI)


s=0.5
c=0.5
w=linspace(0,0.4,401)
lamb_1p4=3e8*1e3/1.4e9
lamb_5=3e8*1e3/5e9

permR1=Permr_func_1(s,c,w)
permI1=Permi_func_1(s,c,w)

permR5=Permr_func_5(s,c,w)
permI5=Permi_func_5(s,c,w)

#L est une bande de 1.4GHz, C est une bande de 5GHz
pen_dep_L=Pen_dep(lamb_1p4,permR1,permI1)
pen_dep_C=Pen_dep(lamb_5,permR5,permI5)
197/74:
fig,ax=subplots()
ax.plot(w*100,pen_dep_L,label='L band')
ax.plot(w*100,pen_dep_C,label='C band')
ax.set_yscale('log')
ax.set_xlabel('Volumetric water content (%)')
ax.set_ylabel('Penetration Depth (mm)')
ax.legend()

ax.set_ylim((0.5,900))
ax.set_xlim((0,40))
197/75:
#def des 3 fonctions
def Permr_func_1(s,c,w):
    #return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    return 2.37+(-5.24+0.55*s-0.15*c)*w+(146.04-0.74*s-0.85*c)*w**2+(-0-0*s-0*c)*w**3

def Permi_func_1(s,c,w):
    #return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3
    return 0.06+(6.69+0.0367*s-0.062*c)*w+(16.17-0.30*s+0.27*c)*w**2+(0+0*s-0*c)*w**3

def Permr_func_5(s,c,w):
    #return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11+0.38*s-0.49*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3
    return 2.46+(13.07+0.14*s-0.44*c)*w+(132.11-0.38*s-1*c)*w**2+(-103.86-1.16*s-0.49*c)*w**3

def Permi_func_5(s,c,w):
    #return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.15*c)*w**3
    return 0.12+(4.7+0.00646*s-0.002356*c)*w+(30.65-0.61*s+1.12*c)*w**2+(-34.29+1.36*s-1.16*c)*w**3


def Pen_dep(lamb,permR,permI):
    return lamb*sqrt(permR)/(2*pi*permI)


s=0.51
c=0.13
w=linspace(0,0.4,401)
lamb_1p4=3e8*1e3/1.4e9
lamb_5=3e8*1e3/5e9

permR1=Permr_func_1(s,c,w)
permI1=Permi_func_1(s,c,w)

permR5=Permr_func_5(s,c,w)
permI5=Permi_func_5(s,c,w)

#L est une bande de 1.4GHz, C est une bande de 5GHz
pen_dep_L=Pen_dep(lamb_1p4,permR1,permI1)
pen_dep_C=Pen_dep(lamb_5,permR5,permI5)
197/76:
fig,ax=subplots()
ax.plot(w*100,pen_dep_L,label='L band')
ax.plot(w*100,pen_dep_C,label='C band')
ax.set_yscale('log')
ax.set_xlabel('Volumetric water content (%)')
ax.set_ylabel('Penetration Depth (mm)')
ax.legend()

ax.set_ylim((0.5,900))
ax.set_xlim((0,40))
200/1: %matplotlib inline
200/2:
from pylab import *
from matplotlib import *
import datetime as dt
from scipy.optimize import curve_fit as cfit
200/3:
#cosqm data format: Date, time, long, lat, elev, temp, wait time, clear mag, red mag, green mag, blue mag, ... watts 

def load_data(filename):
    data=loadtxt(filename, usecols=list(arange(2,17)), unpack=True)
    data=swapaxes(data,0,1)
    return data


def load_dates(filename):
    data_dates=loadtxt(filename, usecols=(0,1),dtype=str , unpack=True)
    data_dates=swapaxes(data_dates,0,1)
    return data_dates

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server


def plot_mag(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(data[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,-data[:,5],label='Clear',color='k')
    ax.plot(x,-data[:,6],label='R',color='r')
    ax.plot(x,-data[:,7],label='G',color='g')
    ax.plot(x,-data[:,8],label='B',color='b')
    ax.plot(x,-data[:,9],label='Y',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    
    savefig('figures/'+output_figname+'.png',bbox_inches='tight')

    return

def plot_diff(data,data_dates,cosqm_number,output_figname):
    x=arange(len(data[:,0]))
    xs=linspace(0,len(data[:,0])-1,10,dtype=int)

    fig,ax=subplots(1,1,dpi=100)
    ax.plot(x,data[:,6]-data[:,5],label='R-C',color='r')
    ax.plot(x,data[:,7]-data[:,5],label='G-C',color='g')
    ax.plot(x,data[:,8]-data[:,5],label='B-C',color='b')
    ax.plot(x,data[:,9]-data[:,5],label='Y-C',color='y')
    ax.legend()
    ax.set_title((str(data_dates[0,0])+' to '+str(data_dates[-1,0])))
    ax.set_xticklabels(data_dates[xs,1],rotation=90)
    ax.set_xlabel('Time')
    ax.set_ylabel('Magnitude diff')
    ax.axhline(0,ls='--')
    
    props = dict(boxstyle='round', facecolor='white', alpha=0.5)
    ax.text(0.2, 0.95, cosqm_number,transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)
    
    #ax.set_yticklabels(linspace(max(data[:,5]),min(data[:,5]),10,dtype=int))
    
    savefig('figures/'+output_figname+'.png',bbox_inches='tight')

    return

#Function to convert time string HH:MM:SS to float hours, offset is difference between cosqm times (internal clock)
def Time_hours(sqm_dates, offset):
    ftr = [1,1/60,1/3600]
    test_time=sqm_dates[:,1]
    test_hours=empty(len(test_time))
    for i in range(len(test_time)):
        test_hours[i]=sum([a*b for a,b in zip(ftr, map(float,test_time[i].split(':')))])+offset
        if test_hours[i]<=12:test_hours[i]+=24
    return test_hours
200/4:
sqm3=load_data('003_2019-05-27.txt')
sqm3_dates=load_dates('003_2019-05-27.txt')
sqm4=load_data('004_2019-05-27.txt')
sqm4_dates=load_dates('004_2019-05-27.txt')
sqm5=load_data('005_2019-05-27.txt')
sqm5_dates=load_dates('005_2019-05-27.txt')
sqm1=load_data('001_2019-05-27.txt')
sqm1_dates=load_dates('001_2019-05-27.txt')
200/5:
plot_mag(sqm3,sqm3_dates,'003','sqm3')
plot_mag(sqm4,sqm4_dates,'004','sqm4')
plot_mag(sqm5,sqm5_dates,'005','sqm5')
plot_mag(sqm1,sqm1_dates,'001','sqm1')

plot_diff(sqm3,sqm3_dates,'003','sqm3_diff')
plot_diff(sqm4,sqm4_dates,'004','sqm4_diff')
plot_diff(sqm5,sqm5_dates,'005','sqm5_diff')
plot_diff(sqm1,sqm1_dates,'001','sqm1_diff')
200/6:
plot(sqm3[:,6]-sqm3[:,5],'.')
#plot(sqm3[:,7]-sqm3[:,5],'.')
#plot(sqm3[:,8]-sqm3[:,5],'.')
#plot(sqm3[:,9]-sqm3[:,5],'.')
ylim(-1.5,0)
200/7:
#sqm3=load_data('003_2019-05-28.txt')
#sqm3_dates=load_dates('003_2019-05-28.txt')
#sqm4=load_data('004_2019-05-28.txt')
#sqm4_dates=load_dates('004_2019-05-28.txt')
sqm5=load_data('005_2019-05-28.txt')
sqm5_dates=load_dates('005_2019-05-28.txt')
#sqm1=load_data('001_2019-05-28.txt')
#sqm1_dates=load_dates('001_2019-05-28.txt')
200/8:
plot_mag(sqm3,sqm3_dates,'003','sqm3')
plot_diff(sqm3,sqm3_dates,'003','sqm3_diff')
200/9:
sqm3_28=load_data('003_2019-05-28.txt')
sqm3_28_dates=load_dates('003_2019-05-28.txt')
sqm4_28=load_data('004_2019-05-28.txt')
sqm4_28_dates=load_dates('004_2019-05-28.txt')
sqm5_28=load_data('005_2019-05-28.txt')
sqm5_28_dates=load_dates('005_2019-05-28.txt')
sqm1_28=load_data('001_2019-05-28.txt')
sqm1_28_dates=load_dates('001_2019-05-28.txt')
200/10:
plot_mag(sqm3_28,sqm3_28_dates,'003','sqm3_28')
plot_diff(sqm3_28,sqm3_28_dates,'003','sqm3_28_diff')
plot_mag(sqm4_28,sqm4_28_dates,'004','sqm4_28')
plot_diff(sqm4_28,sqm4_28_dates,'004','sqm4_28_diff')
plot_mag(sqm5_28,sqm5_28_dates,'005','sqm5_28')
plot_diff(sqm5_28,sqm5_28_dates,'005','sqm5_28_diff')
plot_mag(sqm1_28,sqm1_28_dates,'001','sqm1_28')
plot_diff(sqm1_28,sqm1_28_dates,'001','sqm1_28_diff')
200/11:
sqm3_29=load_data('003_2019-05-29.txt')
sqm3_29_dates=load_dates('003_2019-05-29.txt')
200/12:
plot_mag(sqm3_29,sqm3_29_dates,'003','sqm3_29')
plot_diff(sqm3_29,sqm3_29_dates,'003','sqm3_29_diff')
200/13:
#Determine time offset between acqs after night reboot (offset of fits)

def linear_func(data,a,b):
    return data*a+b

xs=linspace(0,1,170)
xs_fit=xs[100:]
sqm1_fit_params=cfit(linear_func,xs_fit,times_sqm1[100:])
sqm3_fit_params=cfit(linear_func,xs_fit,times_sqm3[100:-24])

print ('Y-axis crossing offset (in hours):',sqm1_fit_params[0][1]-sqm3_fit_params[0][1] )

plot(xs,times_sqm1,'.')
plot(xs,times_sqm3[:-24],'.')
plot(xs,linear_func(xs,sqm1_fit_params[0][0],sqm1_fit_params[0][1]))
plot(xs,linear_func(xs,sqm3_fit_params[0][0],sqm3_fit_params[0][1]))



#print (times_sqm1)
200/14:
#intercalibration graph for cosqms vs float hours to find good interval for average correction
#time to float in hours, hours over 24 for graphing simplicity

times_sqm1 = Time_hours(sqm1_28_dates,20.0013888889)
times_sqm3 = Time_hours(sqm3_28_dates,0)
times_sqm4 = Time_hours(sqm4_28_dates,0)
times_sqm5 = Time_hours(sqm5_28_dates,0)

offset_sqm3=times_sqm1[0]-times_sqm3[0]


fig,ax=subplots(1,1,dpi=100)
ax.plot(times_sqm1,-sqm1_28[:,5],'k.',label='sqm1',markersize=3)
ax.plot(times_sqm3,-sqm3_28[:,5],'r.',label='sqm3',markersize=3)
ax.plot(times_sqm4,-sqm4_28[:,5],'g.',label='sqm4',markersize=3)
ax.plot(times_sqm5,-sqm5_28[:,5],'b.',label='sqm5',markersize=3)

ax.legend()
ax.set_title((str(sqm3_28_dates[0,0])+' to '+str(sqm3_28_dates[-1,0])+' CLEAR'))
times_sqm1_ticks_float=linspace(0,len(times_sqm1)-1,4)
times_sqm1_ticks_int=list(times_sqm1_ticks_float.astype(int))
#ax.set_xticklabels(around(times_sqm1[times_sqm1_ticks_int],3).astype(str),rotation=90)
ax.set_xlabel('Time (float hours)')
ax.set_ylabel('Magnitude')
ax.set_xlim(25)
ax.axvline(times_sqm1[75])  #first value for average sqm1
ax.axvline(times_sqm1[100]) #last value for average sqm1
#ax.axvline(times_sqm3[99])  #first value for average sqm3
#ax.axvline(times_sqm3[124]) #last value for average sqm3   
#ax.axvline(times_sqm4[82])   #first value for average sqm4
#ax.axvline(times_sqm4[107])  #last value for average sqm4
ax.axvline(times_sqm5[77])   #first value for average sqm5
ax.axvline(times_sqm5[102])  #last value for average sqm5
200/15:
#Intercalibration graph, cosqm3-4-5 vs cosqm1, looking for crossing value at y-axis and slope variation (linearity)
#Plot sqm3 vs sqm1 mag, from 25h to 26h approx, clear
print('average sqm1 clear:',average(-sqm1_28[75:100,5]))
print('average sqm1 clear:',average(-sqm3_28[99:124,5]))
print('average offset sqm3 clear:',average(-sqm3_28[99:124,5])-average(-sqm1_28[75:100,5]))


fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:180,5],-sqm3_28[99:204,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:180,6],-sqm3_28[99:204,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:180,7],-sqm3_28[99:204,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:180,8],-sqm3_28[99:204,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:180,9],-sqm3_28[99:204,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM1')
#ax.set_xlim(-12,-9)

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:170,5],-sqm4_28[82:177,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:170,6],-sqm4_28[82:177,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:170,7],-sqm4_28[82:177,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:170,8],-sqm4_28[82:177,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:170,9],-sqm4_28[82:177,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM4 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm1_28[75:168,5],-sqm5_28[77:170,5],'k.',label='clear',markersize=3)
ax.plot(-sqm1_28[75:168,6],-sqm5_28[77:170,6],'r.',label='R',markersize=3)
ax.plot(-sqm1_28[75:168,7],-sqm5_28[77:170,7],'g.',label='G',markersize=3)
ax.plot(-sqm1_28[75:168,8],-sqm5_28[77:170,8],'b.',label='B',markersize=3)
ax.plot(-sqm1_28[75:168,9],-sqm5_28[77:170,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM5 vs SQM1')

fig,ax=subplots(1,1,dpi=100)
ax.plot(-sqm3_28[99:189,5],-sqm5_28[82:172,5],'k.',label='clear',markersize=3)
ax.plot(-sqm3_28[99:189,6],-sqm5_28[82:172,6],'r.',label='R',markersize=3)
ax.plot(-sqm3_28[99:189,7],-sqm5_28[82:172,7],'g.',label='G',markersize=3)
ax.plot(-sqm3_28[99:189,8],-sqm5_28[82:172,8],'b.',label='B',markersize=3)
ax.plot(-sqm3_28[99:189,9],-sqm5_28[82:172,9],'y.',label='Y',markersize=3)
ax.legend()
ax.set_title('SQM3 vs SQM4')
200/16:
#Find time offset between sqm1 and 3,4,5 (GMT and EMT) since all instruments powered on at the same time

#first acq time values for each sqm
print (sqm1_28_dates[0,1],sqm3_28_dates[0,1],sqm4_28_dates[0,1],sqm5_28_dates[0,1])

#time offset between each sqm if started approx at the same time (sqm5-sqm3 is the max time offset)
print ('offsets: sqm1_3=3:59:05 sqm3_4=00:00:44 sqm3_5=00:00:14')
print ('latest is sqm5, order 1-3-4-5')


#acq times for data in time window 1h30-2h30 am
start=0
end=170


xs=linspace(start,end,end-start)
fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,5],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,5],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,5],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,5],label='sqm5')
ax.legend()
ax.set_title('CLEAR')

fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,6],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,6],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,6],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,6],label='sqm5')
ax.legend()
ax.set_title('RED')

fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,7],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,7],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,7],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,7],label='sqm5')
ax.legend()
ax.set_title('GREEN')

fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,8],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,8],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,8],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,8],label='sqm5')
ax.legend()
ax.set_title('BLUE')

fig,ax=subplots(1,1,dpi=120)
ax.plot(xs,-sqm1_28[start:end,9],label='sqm1')
ax.plot(xs,-sqm3_28[start:end,9],label='sqm3')
ax.plot(xs,-sqm4_28[start:end,9],label='sqm4')
ax.plot(xs,-sqm5_28[start:end,9],label='sqm5')
ax.legend()
ax.set_title('YELLOW')



#find best times for intercalibration (data to be used is from night of 05/27-28, from approx. 01:30 to 2:30 am)
200/17:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
200/18:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5]/max(-sqm1_angular[start:stop,5]), 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6]/max(-sqm1_angular[start:stop,6]), 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7]/max(-sqm1_angular[start:stop,7]), 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8]/max(-sqm1_angular[start:stop,8]), 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9]/max(-sqm1_angular[start:stop,9]), 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
200/19:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5]/max(sqm1_angular[start:stop,5]), 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6]/max(sqm1_angular[start:stop,6]), 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7]/max(sqm1_angular[start:stop,7]), 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8]/max(sqm1_angular[start:stop,8]), 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9]/max(sqm1_angular[start:stop,9]), 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
200/20:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5]/min(sqm1_angular[start:stop,5]), 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6]/min(sqm1_angular[start:stop,6]), 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7]/min(sqm1_angular[start:stop,7]), 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8]/min(sqm1_angular[start:stop,8]), 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9]/min(sqm1_angular[start:stop,9]), 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
200/21:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')

fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5]/min(sqm1_angular[start:stop,5]), 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6]/min(sqm1_angular[start:stop,6]), 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7]/min(sqm1_angular[start:stop,7]), 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8]/min(sqm1_angular[start:stop,8]), 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9]/min(sqm1_angular[start:stop,9]), 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$ normalisé')
ax.set_xticks(linspace(-50,50,11))
200/22:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')


#Normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5]/min(sqm1_angular[start:stop,5]), 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6]/min(sqm1_angular[start:stop,6]), 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7]/min(sqm1_angular[start:stop,7]), 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8]/min(sqm1_angular[start:stop,8]), 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9]/min(sqm1_angular[start:stop,9]), 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$ normalisé')
ax.set_xticks(linspace(-50,50,11))


#Pas normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$ normalisé')
ax.set_xticks(linspace(-50,50,11))
200/23:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')


#Normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

ax.plot(xs, -sqm1_angular[start:stop,5]/min(sqm1_angular[start:stop,5]), 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6]/min(sqm1_angular[start:stop,6]), 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7]/min(sqm1_angular[start:stop,7]), 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8]/min(sqm1_angular[start:stop,8]), 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9]/min(sqm1_angular[start:stop,9]), 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$ normalisé')
ax.set_xticks(linspace(-50,50,11))


#Pas normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
200/24:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')


#Normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

print (min(sqm1_angular[start:stop,5]))

ax.plot(xs, -sqm1_angular[start:stop,5]/min(sqm1_angular[start:stop,5]), 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6]/min(sqm1_angular[start:stop,6]), 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7]/min(sqm1_angular[start:stop,7]), 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8]/min(sqm1_angular[start:stop,8]), 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9]/min(sqm1_angular[start:stop,9]), 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$ normalisé')
ax.set_xticks(linspace(-50,50,11))



#Pas normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
200/25:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')


#Normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

print (min(sqm1_angular[start:stop,5]))

ax.plot(xs, -sqm1_angular[start:stop,5]/max(sqm1_angular[start:stop,5]), 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6]/max(sqm1_angular[start:stop,6]), 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7]/max(sqm1_angular[start:stop,7]), 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8]/max(sqm1_angular[start:stop,8]), 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9]/max(sqm1_angular[start:stop,9]), 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$ normalisé')
ax.set_xticks(linspace(-50,50,11))



#Pas normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
200/26:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')


#Normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

print (max(sqm1_angular[start:stop,5]))

ax.plot(xs, -sqm1_angular[start:stop,5]/max(sqm1_angular[start:stop,5]), 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6]/max(sqm1_angular[start:stop,6]), 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7]/max(sqm1_angular[start:stop,7]), 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8]/max(sqm1_angular[start:stop,8]), 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9]/max(sqm1_angular[start:stop,9]), 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$ normalisé')
ax.set_xticks(linspace(-50,50,11))



#Pas normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
200/27:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')


#Normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

print (max(sqm1_angular[start:stop,5]))

ax.plot(xs, sqm1_angular[start:stop,5]/max(sqm1_angular[start:stop,5]), 'k.', markersize=3)
ax.plot(xs, sqm1_angular[start:stop,6]/max(sqm1_angular[start:stop,6]), 'r.', markersize=3)
ax.plot(xs, sqm1_angular[start:stop,7]/max(sqm1_angular[start:stop,7]), 'g.', markersize=3)
ax.plot(xs, sqm1_angular[start:stop,8]/max(sqm1_angular[start:stop,8]), 'b.', markersize=3)
ax.plot(xs, sqm1_angular[start:stop,9]/max(sqm1_angular[start:stop,9]), 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$ normalisé')
ax.set_xticks(linspace(-50,50,11))



#Pas normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
200/28:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')


#Normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

print (max(sqm1_angular[start:stop,5]))

ax.plot(xs, sqm1_angular[start:stop,5]-min(sqm1_angular[start:stop,5]), 'k.', markersize=3)
ax.plot(xs, sqm1_angular[start:stop,6]-min(sqm1_angular[start:stop,6]), 'r.', markersize=3)
ax.plot(xs, sqm1_angular[start:stop,7]-min(sqm1_angular[start:stop,7]), 'g.', markersize=3)
ax.plot(xs, sqm1_angular[start:stop,8]-min(sqm1_angular[start:stop,8]), 'b.', markersize=3)
ax.plot(xs, sqm1_angular[start:stop,9]-min(sqm1_angular[start:stop,9]), 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$ normalisé')
ax.set_xticks(linspace(-50,50,11))



#Pas normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
200/29:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')


#Normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

print (max(sqm1_angular[start:stop,5]))

ax.plot(xs, (sqm1_angular[start:stop,5]-min(sqm1_angular[start:stop,5]))/max(sqm1_angular[start:stop,5]), 'k.', markersize=3)
ax.plot(xs, (sqm1_angular[start:stop,6]-min(sqm1_angular[start:stop,6]))/max(sqm1_angular[start:stop,6]), 'r.', markersize=3)
ax.plot(xs, (sqm1_angular[start:stop,7]-min(sqm1_angular[start:stop,7]))/max(sqm1_angular[start:stop,7]), 'g.', markersize=3)
ax.plot(xs, (sqm1_angular[start:stop,8]-min(sqm1_angular[start:stop,8]))/max(sqm1_angular[start:stop,8]), 'b.', markersize=3)
ax.plot(xs, (sqm1_angular[start:stop,9]-min(sqm1_angular[start:stop,9]))/max(sqm1_angular[start:stop,9]), 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$ normalisé')
ax.set_xticks(linspace(-50,50,11))



#Pas normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
200/30:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')


#Normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

print (max(sqm1_angular[start:stop,5]))

ax.plot(xs, -(sqm1_angular[start:stop,5]-min(sqm1_angular[start:stop,5]))/max(sqm1_angular[start:stop,5]), 'k.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,6]-min(sqm1_angular[start:stop,6]))/max(sqm1_angular[start:stop,6]), 'r.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,7]-min(sqm1_angular[start:stop,7]))/max(sqm1_angular[start:stop,7]), 'g.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,8]-min(sqm1_angular[start:stop,8]))/max(sqm1_angular[start:stop,8]), 'b.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,9]-min(sqm1_angular[start:stop,9]))/max(sqm1_angular[start:stop,9]), 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$ normalisé')
ax.set_xticks(linspace(-50,50,11))



#Pas normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
200/31:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')


#Normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

print (max(sqm1_angular[start:stop,5]))

ax.plot(xs, -(sqm1_angular[start:stop,5]-min(sqm1_angular[start:stop,5]))/(max(sqm1_angular[start:stop,5])-min(sqm1_angular[start:stop,5])), 'k.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,6]-min(sqm1_angular[start:stop,6]))/(max(sqm1_angular[start:stop,6])-min(sqm1_angular[start:stop,6])), 'r.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,7]-min(sqm1_angular[start:stop,7]))/(max(sqm1_angular[start:stop,7])-min(sqm1_angular[start:stop,7])), 'g.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,8]-min(sqm1_angular[start:stop,8]))/(max(sqm1_angular[start:stop,8])-min(sqm1_angular[start:stop,8])), 'b.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,9]-min(sqm1_angular[start:stop,9]))/(max(sqm1_angular[start:stop,9])-min(sqm1_angular[start:stop,9])), 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$ normalisé')
ax.set_xticks(linspace(-50,50,11))



#Pas normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
200/32:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')


#Normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

print (max(sqm1_angular[start:stop,5]))

ax.plot(xs, -(sqm1_angular[start:stop,5]-min(sqm1_angular[start:stop,5]))/(max(sqm1_angular[start:stop,5])), 'k.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,6]-min(sqm1_angular[start:stop,6]))/(max(sqm1_angular[start:stop,6])), 'r.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,7]-min(sqm1_angular[start:stop,7]))/(max(sqm1_angular[start:stop,7])), 'g.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,8]-min(sqm1_angular[start:stop,8]))/(max(sqm1_angular[start:stop,8])), 'b.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,9]-min(sqm1_angular[start:stop,9]))/(max(sqm1_angular[start:stop,9])), 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$ normalisé')
ax.set_xticks(linspace(-50,50,11))



#Pas normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
200/33:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')


#Normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

print (max(sqm1_angular[start:stop,5]))

ax.plot(xs, -(sqm1_angular[start:stop,5]-min(sqm1_angular[start:stop,5]))/(max(sqm1_angular[start:stop,5])-max(sqm1_angular[start:stop,5])), 'k.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,6]-min(sqm1_angular[start:stop,6]))/(max(sqm1_angular[start:stop,6])-max(sqm1_angular[start:stop,5])), 'r.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,7]-min(sqm1_angular[start:stop,7]))/(max(sqm1_angular[start:stop,7])-max(sqm1_angular[start:stop,5])), 'g.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,8]-min(sqm1_angular[start:stop,8]))/(max(sqm1_angular[start:stop,8])-max(sqm1_angular[start:stop,5])), 'b.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,9]-min(sqm1_angular[start:stop,9]))/(max(sqm1_angular[start:stop,9])-max(sqm1_angular[start:stop,5])), 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$ normalisé')
ax.set_xticks(linspace(-50,50,11))



#Pas normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
200/34:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')


#Normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

print (max(sqm1_angular[start:stop,5]))

ax.plot(xs, -(sqm1_angular[start:stop,5]-min(sqm1_angular[start:stop,5]))/(max(sqm1_angular[start:stop,5])-min(sqm1_angular[start:stop,5])), 'k.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,6]-min(sqm1_angular[start:stop,6]))/(max(sqm1_angular[start:stop,6])-min(sqm1_angular[start:stop,5])), 'r.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,7]-min(sqm1_angular[start:stop,7]))/(max(sqm1_angular[start:stop,7])-min(sqm1_angular[start:stop,5])), 'g.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,8]-min(sqm1_angular[start:stop,8]))/(max(sqm1_angular[start:stop,8])-min(sqm1_angular[start:stop,5])), 'b.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,9]-min(sqm1_angular[start:stop,9]))/(max(sqm1_angular[start:stop,9])-min(sqm1_angular[start:stop,5])), 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$ normalisé')
ax.set_xticks(linspace(-50,50,11))



#Pas normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
200/35:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')


#Normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

print (max(sqm1_angular[start:stop,5]))

ax.plot(xs, -(sqm1_angular[start:stop,5]-max(sqm1_angular[start:stop,5]))/(max(sqm1_angular[start:stop,5])-min(sqm1_angular[start:stop,5])), 'k.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,6]-max(sqm1_angular[start:stop,6]))/(max(sqm1_angular[start:stop,6])-min(sqm1_angular[start:stop,5])), 'r.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,7]-max(sqm1_angular[start:stop,7]))/(max(sqm1_angular[start:stop,7])-min(sqm1_angular[start:stop,5])), 'g.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,8]-max(sqm1_angular[start:stop,8]))/(max(sqm1_angular[start:stop,8])-min(sqm1_angular[start:stop,5])), 'b.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,9]-max(sqm1_angular[start:stop,9]))/(max(sqm1_angular[start:stop,9])-min(sqm1_angular[start:stop,5])), 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$ normalisé')
ax.set_xticks(linspace(-50,50,11))



#Pas normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
200/36:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')


#Normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

print (max(sqm1_angular[start:stop,5]))

ax.plot(xs, -(sqm1_angular[start:stop,5]-min(sqm1_angular[start:stop,5])), 'k.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,6]-min(sqm1_angular[start:stop,5])), 'r.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,7]-min(sqm1_angular[start:stop,5])), 'g.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,8]-min(sqm1_angular[start:stop,5])), 'b.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,9]-min(sqm1_angular[start:stop,5])), 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$ normalisé')
ax.set_xticks(linspace(-50,50,11))



#Pas normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
200/37:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')


#Normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

print (max(sqm1_angular[start:stop,5]))

ax.plot(xs, -(sqm1_angular[start:stop,5]-max(sqm1_angular[start:stop,5])), 'k.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,6]-max(sqm1_angular[start:stop,5])), 'r.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,7]-max(sqm1_angular[start:stop,5])), 'g.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,8]-max(sqm1_angular[start:stop,5])), 'b.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,9]-max(sqm1_angular[start:stop,5])), 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$ normalisé')
ax.set_xticks(linspace(-50,50,11))



#Pas normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
200/38:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')


#Normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

print (max(sqm1_angular[start:stop,5]))

ax.plot(xs, -(sqm1_angular[start:stop,5]-min(sqm1_angular[start:stop,5])), 'k.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,6]-min(sqm1_angular[start:stop,5])), 'r.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,7]-min(sqm1_angular[start:stop,5])), 'g.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,8]-min(sqm1_angular[start:stop,5])), 'b.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,9]-min(sqm1_angular[start:stop,5])), 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$ normalisé')
ax.set_xticks(linspace(-50,50,11))



#Pas normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
200/39:
# CoSQM installed on pivoting table on aluminum rail. stepper motor (28byj-48) spins the table.
# White led (headlight) used as source 10 feet appart.

sqm1_angular=load_data('angle_dependance_optical_loop/001_2019-06-24.txt')


#Normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

xs=linspace (-50,50,101)
start=33
stop=134

print (max(sqm1_angular[start:stop,5]))

ax.plot(xs, -(sqm1_angular[start:stop,5]-min(sqm1_angular[start:stop,5])), 'k.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,6]-min(sqm1_angular[start:stop,6])), 'r.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,7]-min(sqm1_angular[start:stop,7])), 'g.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,8]-min(sqm1_angular[start:stop,8])), 'b.', markersize=3)
ax.plot(xs, -(sqm1_angular[start:stop,9]-min(sqm1_angular[start:stop,9])), 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$ normalisé')
ax.set_xticks(linspace(-50,50,11))



#Pas normalisé
fig,ax=subplots(1,1,dpi=500,figsize=(6,6))

ax.plot(xs, -sqm1_angular[start:stop,5], 'k.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,6], 'r.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,7], 'g.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,8], 'b.', markersize=3)
ax.plot(xs, -sqm1_angular[start:stop,9], 'y.', markersize=3)
ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
ax.set_xticks(linspace(-50,50,11))
202/1:
from scipy import *
from matplotlib.pyplot import *
202/2:
xs=linspace(-100,100,101)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/3:
xs=linspace(-100,100,101)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/4:
xs=linspace(-100,100,101)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs))
202/5:
xs=linspace(-100,100,101)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/6:
xs=linspace(-100,10000000,101)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/7:
xs=linspace(-100,100000000000,101)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/8:
xs=linspace(-100,100000000,101)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/9:
xs=linspace(-100,10000000,101)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/10:
xs=linspace(-100,100000000,101)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/11:
xs=linspace(-1,100000000,1001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/12:
xs=linspace(8,100000000,1001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/13:
xs=linspace(1000000,100000000,1001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/14:
xs=linspace(1000000,100000000,100001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/15:
xs=linspace(10000000,100000000,101)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/16:
xs=linspace(10000000,100000000,1001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/17:
xs=linspace(10000000,50000000,1001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/18:
xs=linspace(30000000,50000000,1001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/19:
xs=linspace(10000000,30000000,1001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/20:
xs=linspace(10000000,10000010,1001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/21:
xs=linspace(10000000,1000100,1001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/22:
xs=linspace(10000000,10010000,1001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/23:
xs=linspace(10000000,100100000,1001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/24:
xs=linspace(10000000,10010000,1001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/25:
xs=linspace(10000000,101000000,1001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/26:
xs=linspace(10000000,100100000,1001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/27:
xs=linspace(10000000,10000000,1001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/28:
xs=linspace(10000000,10005000,1001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/29:
xs=linspace(10000000,10009000,1001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/30:
xs=linspace(10000000,10050000,1001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/31:
xs=linspace(10000000,10500000,1001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

print ((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)
202/32:
xs=linspace(10000000,10500000,1001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

n=array((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)


print (n>0)
202/33:
xs=linspace(10000000,10500000,1001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

n=array((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)


print (n[xs]>0)
202/34:
xs=linspace(10000000,10500000,1001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

n=array((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

n=n([n>1])
202/35:
xs=linspace(10000000,10500000,1001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

n=array((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

for item in n:
    if item>0:
        print item
202/36:
xs=linspace(10000000,10500000,1001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

n=array((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

for item in n:
    if item>0:
        print (item)
202/37:
xs=linspace(10000000,10500000,10000001)

plot(xs, (0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

n=array((0.214/pi*4.05e-7-1.7)/0.2 +2*4.05e-7*xs)

for item in n:
    if item>0:
        print (item)
202/38:
xs=linspace(-10,10,100001)

plot(xs, cos(0.2*xs+1.764)*pi/405e-9)
202/39:
xs=linspace(-10,100,100001)

plot(xs, cos(0.2*xs+1.764)*pi/405e-9)
202/40:
xs=linspace(-10,100,100001)

plot(xs, cos**2(0.2*xs+1.764)*pi/405e-9)
202/41:
xs=linspace(-10,100,100001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/42:
xs=linspace(-10,10,100001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/43:
xs=linspace(-1,1,100001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/44:
xs=linspace(-0.1,.1,100001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/45:
xs=linspace(-0.0001,.0001,100001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/46:
xs=linspace(-0.000001,.0001,100001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/47:
xs=linspace(-0.000001,.000001,100001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/48:
xs=linspace(-0.000001,1.000001,100001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/49:
xs=linspace(-1,1.000001,100001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/50:
xs=linspace(-1,1.0000001,100001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/51:
xs=linspace(-1,1.00000001,100001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/52:
xs=linspace(-1,1.000000001,100001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/53:
xs=linspace(-1.0,1.000001,100001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/54:
xs=linspace(-0.1,1.000001,100001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/55:
xs=linspace(-0.1,1.000000001,100001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/56:
xs=linspace(-0.1,1.0000001,1000001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/57:
xs=linspace(-0.9,1.0000001,1000001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/58:
xs=linspace(-1,1.001,1000001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/59:
xs=linspace(-1,1.0001,1000001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/60:
xs=linspace(-1,1.00001,1000001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/61:
xs=linspace(-1,1.000001,1000001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/62:
xs=linspace(1,1.00000001,1000001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/63:
xs=linspace(1,1.000001,1000001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/64:
xs=linspace(1,1.00001,1000001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/65:
xs=linspace(1,1.0001,1000001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/66:
xs=linspace(1,1.0001,1000001)

plot(xs, cos((0.02*xs+1.764)*pi/405e-9))
202/67:
xs=linspace(1,1.0001,1000001)

plot(xs, cos((0.002*xs+1.764)*pi/405e-9))
202/68:
xs=linspace(1,1.001,1000001)

plot(xs, cos((0.002*xs+1.764)*pi/405e-9))
202/69:
xs=linspace(1,1.001,1000001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/70:
xs=linspace(1,1.00001,1000001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9))
202/71:
xs=linspace(1,1.00001,1000001)

plot(xs, cos((0.2*xs+1.764)*pi/405e-9)**2)
202/72:
xs=linspace(1,1.00001,1000001)

plot(xs, 4*0.05*cos((0.2*xs+1.764)*pi/405e-9)**2)
202/73:
xs=linspace(1,1.00001,100001)

plot(xs, 4*0.05*cos((0.2*xs+1.764)*pi/405e-9)**2)
202/74:
xs=linspace(1,1.00001,10001)

plot(xs, 4*0.05*cos((0.2*xs+1.764)*pi/405e-9)**2)
202/75:
xs=linspace(1,1.00001,1001)

plot(xs, 4*0.05*cos((0.2*xs+1.764)*pi/405e-9)**2)
202/76:
xs=linspace(1,1.00001,101)

plot(xs, 4*0.05*cos((0.2*xs+1.764)*pi/405e-9)**2)
202/77:
xs=linspace(1,1.00001,11)

plot(xs, 4*0.05*cos((0.2*xs+1.764)*pi/405e-9)**2)
202/78:
xs=linspace(1,1.00001,101)

plot(xs, 4*0.05*cos((0.2*xs+1.764)*pi/405e-9)**2)
202/79:
xs=linspace(1,1.00001,101)

plot(xs, 4*0.05*cos((0.2*xs+1.764)*pi/405e-9)**2)
plot(xs, 0.01)
202/80:
xs=linspace(1,1.00001,101)

plot(xs, 4*0.05*cos((0.2*xs+1.764)*pi/405e-9)**2)
plot(xs, xs=0.01)
202/81:
xs=linspace(1,1.00001,101)

plot(xs, 4*0.05*cos((0.2*xs+1.764)*pi/405e-9)**2)
plot(xs, xs[:]=0.01)
202/82:
xs=linspace(1,1.00001,101)

plot(xs, 4*0.05*cos((0.2*xs+1.764)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,101))
202/83:
xs=linspace(1,1.00001,101)

plot(xs, 4*0.05*cos((0.2*xs+1.764)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,101))
plot.x_label('n')
plot.y_label('I_2')
202/84:
xs=linspace(1,1.00001,101)

plot(xs, 4*0.05*cos((0.2*xs+1.764)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,101))
plot.xlabel('n')
plot.ylabel('I_2')
202/85:
xs=linspace(1,1.00001,101)

plot(xs, 4*0.05*cos((0.2*xs+1.764)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,101))
xlabel('n')
ylabel('I_2')
202/86:
xs=linspace(1,1.00001,101)

plot(xs, 4*0.05*cos((0.2*xs+1.764)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,101))
xlabel($'n'$)
ylabel($'I_2'$)
202/87:
xs=linspace(1,1.00001,101)

plot(xs, 4*0.05*cos((0.2*xs+1.764)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,101))
xlabel('$n$')
ylabel('$I_2$')
202/88:
xs=linspace(1,1.00001,101)

plot(xs, 4*0.05*cos((0.000002*xs+0.00002)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,101))
xlabel('$n$')
ylabel('$I_2$')
202/89:
xs=linspace(1,1.00001,101)

plot(xs, 4*0.05*cos((0.2*xs+1.764)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,101))
xlabel('$n$')
ylabel('$I_2$')


plot(xs, 4*0.05*cos((0.2*xs+1.764)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,101))
xlabel('$n$')
ylabel('$I_2$')
202/90:
xs=linspace(1,1.00001,101)

plot(xs, 4*0.05*cos((0.2*xs+1.764)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,101))
xlabel('$n$')
ylabel('$I_2$')
202/91:
xs=linspace(1,1.00001,101)

plot(xs, 4*0.05*cos((2e-6*xs+1e-6)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,101))
xlabel('$n$')
ylabel('$I_2$')
202/92:
xs=linspace(1,12,101)

plot(xs, 4*0.05*cos((2e-6*xs+1e-6)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,101))
xlabel('$n$')
ylabel('$I_2$')
202/93:
xs=linspace(1,2,101)

plot(xs, 4*0.05*cos((2e-6*xs+1e-6)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,101))
xlabel('$n$')
ylabel('$I_2$')
202/94:
xs=linspace(1,3,101)

plot(xs, 4*0.05*cos((2e-6*xs+1e-6)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,101))
xlabel('$n$')
ylabel('$I_2$')
202/95:
xs=linspace(1,12,101)

plot(xs, 4*0.05*cos((2e-6*xs+1e-6)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,101))
xlabel('$n$')
ylabel('$I_2$')
202/96:
xs=linspace(1,12,1001)

plot(xs, 4*0.05*cos((2e-6*xs+1e-6)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,101))
xlabel('$n$')
ylabel('$I_2$')
202/97:
xs=linspace(1,12,1001)

plot(xs, 4*0.05*cos((2e-6*xs+1e-6)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,1001))
xlabel('$n$')
ylabel('$I_2$')
202/98:
xs=linspace(1,12,101)

plot(xs, 4*0.05*cos((2e-6*xs+1e-6)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,101))
xlabel('$n$')
ylabel('$I_2$')
202/99:
xs=linspace(1,4,101)

plot(xs, 4*0.05*cos((2e-6*xs+1e-6)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,101))
xlabel('$n$')
ylabel('$I_2$')
202/100:
xs=linspace(1,4,1001)

plot(xs, 4*0.05*cos((2e-6*xs+1e-6)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,1001))
xlabel('$n$')
ylabel('$I_2$')
202/101:
xs=linspace(1,1.1,1001)

plot(xs, 4*0.05*cos((2e-6*xs+1e-6)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,1001))
xlabel('$n$')
ylabel('$I_2$')
202/102:
xs=linspace(1,1.1,1001)

plot(xs, 4*0.05*cos((20e-9*xs)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,1001))
xlabel('$n$')
ylabel('$I_2$')
202/103:
xs=linspace(1,3,1001)

plot(xs, 4*0.05*cos((20e-9*xs)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,1001))
xlabel('$n$')
ylabel('$I_2$')
202/104:
xs=linspace(1,10,1001)

plot(xs, 4*0.05*cos((20e-9*xs)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,1001))
xlabel('$n$')
ylabel('$I_2$')
202/105:
xs=linspace(1,20,1001)

plot(xs, 4*0.05*cos((20e-9*xs)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,1001))
xlabel('$n$')
ylabel('$I_2$')
202/106:
#valeurs de n2
n2=linspace(1,1.00001,101)

#
plot(n2, 4*0.05*cos((0.2*n2+1.764)*pi/405e-9)**2)

#ligne = 10mW
plot(n2, linspace(0.01,0.01,101))

#Titre des axes
xlabel('$n$')
ylabel('$I_2$')
202/107:
#valeurs de n2
n2=linspace(1,1.00001,1001)

#
plot(n2, 4*0.05*cos((0.2*n2+1.764)*pi/405e-9)**2)

#ligne = 10mW
plot(n2, linspace(0.01,0.01,1001))

#Titre des axes
xlabel('$n$')
ylabel('$I_2$')
202/108:
#valeurs de n2
n2=linspace(1,1.00001,1001)

#courbe I_2 en fonction de n2 avec les paramètres trouvés
plot(n2, 4*0.05*cos((0.2*n2+1.764)*pi/405e-9)**2)

#ligne = 10mW
plot(n2, linspace(0.01,0.01,1001))

#Titre des axes
xlabel('$n$')
ylabel('$I_2$')
204/1:
xs= linspace(0.001,30,1001)

plot(xs, 1/xs)
plot(xs, sin(xs))
204/2:
from scipy import *
from matplotlib.pyplot import *
204/3:
#valeurs de n2
n2=linspace(1,1.00001,1001)

#courbe I_2 en fonction de n2 avec les paramètres trouvés
plot(n2, 4*0.05*cos((0.2*n2+1.764)*pi/405e-9)**2)

#ligne = 10mW
plot(n2, linspace(0.01,0.01,1001))

#Titre des axes
xlabel('$n$')
ylabel('$I_2$')
204/4:
xs=linspace(1,20,1001)

plot(xs, 4*0.05*cos((20e-9*xs)*pi/405e-9)**2)
plot(xs, linspace(0.01,0.01,1001))
xlabel('$n$')
ylabel('$I_2$')
204/5:
xs= linspace(0.001,30,1001)

plot(xs, 1/xs)
plot(xs, sin(xs))
204/6:
xs= linspace(0.001,3,1001)

plot(xs, 1/xs)
plot(xs, sin(xs))
204/7:
xs= linspace(0.001,0.1,1001)

plot(xs, 1/xs)
plot(xs, sin(xs))
204/8:
xs= linspace(0.001,0.01,1001)

plot(xs, 1/xs)
plot(xs, sin(xs))
204/9:
xs= linspace(1,10,1001)

plot(xs, 1/xs)
plot(xs, sin(xs))
204/10:
xs= linspace(0,10,1001)

plot(xs, 1/xs)
plot(xs, sin(xs))
204/11:
xs= linspace(0.001,10,1001)

plot(xs, 1/xs)
plot(xs, sin(xs))
204/12:
xs= linspace(0.001,1,1001)

plot(xs, 1/xs)
plot(xs, sin(xs))
204/13:
xs= linspace(0.001,0.01,1001)

plot(xs, 1/xs)
plot(xs, sin(xs))
204/14:
xs= linspace(0.001,0.01,1001)

plot(xs, 1/(pi*1.0e-9/1.0e-9*sin(xs)))
plot(xs, sin((pi*1.0e-9/1.0e-9*sin(xs))))
204/15:
xs= linspace(0.001,0.1,1001)

plot(xs, 1/(pi*1.0e-9/1.0e-9*sin(xs)))
plot(xs, sin((pi*1.0e-9/1.0e-9*sin(xs))))
204/16:
xs=linspace(0.001,0.1,1001)
plot(10*(1/(pi*1.0e-9/1.0e-9*sin(xs))*sin((pi*1.0e-9/1.0e-9*sin(xs))))**2)
204/17:
xs=linspace(0.001,1,1001)
plot(10*(1/(pi*1.0e-9/1.0e-9*sin(xs))*sin((pi*1.0e-9/1.0e-9*sin(xs))))**2)
204/18:
xs=linspace(-10,10,1001)
plot(10*(1/(pi*1.0e-9/1.0e-9*sin(xs))*sin((pi*1.0e-9/1.0e-9*sin(xs))))**2)
204/19:
xs=linspace(-10,10,1001)
plot(10*(1/(pi*5.0e-9/1.0e-9*sin(xs))*sin((pi*5.0e-9/1.0e-9*sin(xs))))**2)
204/20:
xs=linspace(-10,10,1001)
plot(10*(1/(pi*10.0e-9/1.0e-9*sin(xs))*sin((pi*10.0e-9/1.0e-9*sin(xs))))**2)
204/21:
xs=linspace(-2*pi,2*pi,1001)
plot(10*(1/(pi*10.0e-9/1.0e-9*sin(xs))*sin((pi*10.0e-9/1.0e-9*sin(xs))))**2)
204/22:
xs=linspace(-2*pi,2*pi,1001)
plot(10*(1/(pi*20.0e-9/1.0e-9*sin(xs))*sin((pi*20.0e-9/1.0e-9*sin(xs))))**2)
204/23:
xs=linspace(-2*pi,2*pi,1001)
a=0.5e-9
plot(10*(1/(pi*a/1.0e-9*sin(xs))*sin((pi*a/1.0e-9*sin(xs))))**2)
204/24:
xs=linspace(-50,50,1001)
a=0.5e-9
plot(10*(1/(pi*a/1.0e-9*sin(xs))*sin((pi*a/1.0e-9*sin(xs))))**2)
204/25:
xs=linspace(-4*pi,4*pi,1001)
a=0.5e-9
plot(10*(1/(pi*a/1.0e-9*sin(xs))*sin((pi*a/1.0e-9*sin(xs))))**2)
204/26:
xs=linspace(-4*pi,4*pi,1001)
a=0.5e-9
plot((1/(pi*a/1.0e-9*sin(xs))*sin((pi*a/1.0e-9*sin(xs))))**2)
204/27:
xs=linspace(-4*pi,4*pi,1001)
a=0.5e-9
for value in xs:
    if value ==0:
        print('0')
    else:
        plot((1/(pi*a/1.0e-9*sin(xs))*sin((pi*a/1.0e-9*sin(xs))))**2)
204/28:
xs=linspace(-4*pi,4*pi,1000)
a=0.5e-9
for value in xs:
    if value ==0:
        print('0')
    else:
        plot((1/(pi*a/1.0e-9*sin(xs))*sin((pi*a/1.0e-9*sin(xs))))**2)
204/29:
xs=linspace(-4*pi,4*pi,1000)
a=0.5e-9

plot((1/(pi*a/1.0e-9*sin(xs))*sin((pi*a/1.0e-9*sin(xs))))**2)
204/30:
xs=linspace(-4*pi,4*pi,1000)
alpha=1
plot((sin(alpha)/alpha)**2)
204/31:
xs=linspace(-4*pi,4*pi,1000)
alpha=10
plot((sin(alpha)/alpha)**2)
204/32:
xs=linspace(-4*pi,4*pi,1000)
alpha=0.01
plot((sin(alpha)/alpha)**2)
204/33:
xs=linspace(-4*pi,4*pi,1000)
alpha=0.000001
plot((sin(alpha)/alpha)**2)
204/34:
xs=linspace(-4*pi,4*pi,1000)
alpha=10000
plot((sin(alpha)/alpha)**2)
204/35:
xs=linspace(-4*pi,4*pi,1000)
alpha=10000
plot((sin(alpha)/alpha)**2)

print (pi)
204/36:
xs=linspace(-10,10,1000)
alpha=10000
plot((sin(alpha)/alpha)**2)
204/37:
alpha=linspace(-10,10,1000)
plot((sin(alpha)/alpha)**2)
204/38:
xs=linspace(0.01,10,1001)
plot(xs, xs)
plot(xs, tan(xs))
204/39:
xs=linspace(0.01,1,1001)
plot(xs, xs)
plot(xs, tan(xs))
204/40:
xs=linspace(0.01,5,1001)
plot(xs, xs)
plot(xs, tan(xs))
204/41:
xs=linspace(0.01,2,1001)
plot(xs, xs)
plot(xs, tan(xs))
204/42: optimize
204/43: optimize.root
204/44: scipy
204/45: scipy.optimize
204/46: scipy.optimize.root
204/47: optimize.root()
204/48:
xs=linspace(0.01,2,1001)
plot(xs, xs-tan(xs))
204/49:
xs=linspace(1.5,1.6,1001)
plot(xs, xs-tan(xs))
204/50:
xs=linspace(1.56,1.6,1001)
plot(xs, xs-tan(xs))
204/51:
xs=linspace(1.57,1.572,1001)
plot(xs, xs-tan(xs))
204/52:
xs=linspace(1.5707,1.5701,1001)
plot(xs, xs-tan(xs))
204/53:
xs=linspace(1.5707,1.571,1001)
plot(xs, xs-tan(xs))
204/54:
xs=linspace(1.5707,1.5706,1001)
plot(xs, xs-tan(xs))
204/55:
xs=linspace(1.5707,1.5709,1001)
plot(xs, xs-tan(xs))
204/56:
xs=linspace(1.5708,1.5708,1001)
plot(xs, xs-tan(xs))
204/57:
xs=linspace(1.5707,1.5708,1001)
plot(xs, xs-tan(xs))
204/58:
xs=linspace(1.57078,1.5708,1001)
plot(xs, xs-tan(xs))
204/59:
xs=linspace(1.57078,1.57079,1001)
plot(xs, xs-tan(xs))
204/60:
xs=linspace(1.57078,1.5708,1001)
plot(xs, xs-tan(xs))
204/61:
xs=linspace(1.570789,1.5708,1001)
plot(xs, xs-tan(xs))
204/62:
xs=linspace(1.57079,1.5708,1001)
plot(xs, xs-tan(xs))
204/63:
xs=linspace(1.570799,1.5708,1001)
plot(xs, xs-tan(xs))
204/64:
xs=linspace(1.570791,1.5708,1001)
plot(xs, xs-tan(xs))
204/65:
xs=linspace(1.570792,1.5708,1001)
plot(xs, xs-tan(xs))
204/66:
xs=linspace(1.570793,1.5708,1001)
plot(xs, xs-tan(xs))
204/67:
xs=linspace(1.570794,1.5708,1001)
plot(xs, xs-tan(xs))
204/68:
xs=linspace(1.570795,1.5708,1001)
plot(xs, xs-tan(xs))
204/69:
xs=linspace(1.570796,1.5708,1001)
plot(xs, xs-tan(xs))
204/70:
xs=linspace(1.570796,1.570797,1001)
plot(xs, xs-tan(xs))
204/71:
xs=linspace(1.570796,1.5707968,1001)
plot(xs, xs-tan(xs))
204/72:
xs=linspace(1.570796,1.5707965,1001)
plot(xs, xs-tan(xs))
204/73:
xs=linspace(1.5707962,1.5707965,1001)
plot(xs, xs-tan(xs))
204/74:
xs=linspace(0.01,5,1001)
plot(xs, xs)
plot(xs, tan(xs))
204/75:
#xs=linspace(1.5707962,1.5707965,1001)
xs=linspace(1.420*pi,1.44*pi,1001)

plot(xs, xs-tan(xs))
204/76:
#xs=linspace(1.5707962,1.5707965,1001)
xs=linspace(1.420*pi,1.45*pi,1001)

plot(xs, xs-tan(xs))
204/77:
#xs=linspace(1.5707962,1.5707965,1001)
xs=linspace(1.420*pi,1.5*pi,1001)

plot(xs, xs-tan(xs))
204/78:
#xs=linspace(1.5707962,1.5707965,1001)
xs=linspace(1.420*pi,1.6*pi,1001)

plot(xs, xs-tan(xs))
205/1:
from scipy import *
from matplotlib.pyplot import*
205/2:
xs=linspace(1663,4433,2771)

plot(xs, 1e-3/xs)
205/3:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,100)
I0=1

plot(lambdas, 4*I0*cos**2(2*pi*1/lambdas*(1e-3*1.33)))
205/4:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,100)
I0=1

plot(lambdas, 4*cos**2(2*pi*1/lambdas*(1e-3*1.33)))
205/5:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,100)
I0=1

plot(lambdas, (2*pi*1/lambdas*(1e-3*1.33)))
205/6:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,100)
I0=1

plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-3*1.33))**2)
205/7:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,1000)
I0=1

plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-3*1.33))**2)
205/8:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,10001)
I0=1

plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-3*1.33))**2)
205/9:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,10001)
I0=1

plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33))**2)
205/10:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,1001)
I0=1

plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33))**2)
205/11:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,101)
I0=1

plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33))**2)
205/12:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,100)
I0=1

plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33))**2)
205/13:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,100)
I0=1

plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33))**2)

print (min(4*cos(2*pi*1/lambdas*(1e-6*1.33))**2))
205/14: #matplotlib inline
205/15:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,100)
I0=1

plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33))**2)

print (min(4*cos(2*pi*1/lambdas*(1e-6*1.33))**2))
205/16: #scipy inline
205/17:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,100)
I0=1

plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33))**2)

print (min(4*cos(2*pi*1/lambdas*(1e-6*1.33))**2))
205/18: %scipy inline
205/19: %matplotlib inline
205/20:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,100)
I0=1

plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33))**2)

print (min(4*cos(2*pi*1/lambdas*(1e-6*1.33))**2))
205/21: %jupyter inline
205/22: %matplotlib notebook
205/23:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,100)
I0=1

plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33))**2)

print (min(4*cos(2*pi*1/lambdas*(1e-6*1.33))**2))
205/24:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,100)
I0=1

plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33))**2)
205/25:
xs=linspace(1663,4433,2771)

plot(xs, 1e-3/xs)
205/26: %matplotlib notebook
205/27:
from scipy import *
from matplotlib.pyplot import*
205/28:
xs=linspace(1663,4433,2771)

plot(xs, 1e-3/xs)
205/29:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,100)
I0=1

plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33))**2)
205/30:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,100)
I0=1

plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33))**2)
205/31:
xs=linspace(1663,4433,2771)

plot(xs, 1e-3/xs)
205/32:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,100)
I0=1

plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33))**2)
207/1:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,100)
I0=1

plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33))**2)
207/2: %matplotlib notebook
207/3:
from scipy import *
from matplotlib.pyplot import*
207/4:
xs=linspace(1663,4433,2771)

plot(xs, 1e-3/xs)
207/5:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,100)
I0=1

plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33))**2)
207/6:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,100)
I0=1

plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33))**2)
207/7:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,100)
I0=1

plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33/cos(20)))**2)
207/8:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,1000)
I0=1

plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33/cos(20)))**2)
207/9:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

freqs=linspace(3e8/3e-7,3e8/8e-7,1000)
I0=1

plot(lambdas, 4*cos(2*pi*freqs/3e8*(1e-6*1.33/cos(20)))**2)
207/10:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

freqs=linspace(3e8/3e-7,3e8/8e-7,1000)
I0=1

plot(lambdas, 4*cos(2*pi*freqs*(1e-6*1.33/cos(20)))**2)
207/11:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,1000)
I0=1

plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33/cos(20)))**2)
207/12:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,1000)
freqs=linspace(3e8/3e-7,3e8/8e-7,1000)
I0=1

fig=figure()
fig.plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33/cos(20)))**2)
207/13:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,1000)
freqs=linspace(3e8/3e-7,3e8/8e-7,1000)
I0=1

fig=figure()
fig.plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33/cos(20)))**2)
207/14:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,1000)
freqs=linspace(3e8/3e-7,3e8/8e-7,1000)
I0=1

fig,ax=figure()
ax.plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33/cos(20)))**2)
207/15:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,1000)
freqs=linspace(3e8/3e-7,3e8/8e-7,1000)
I0=1

fig=figure()
plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33/cos(20)))**2)
207/16:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,1000)
freqs=linspace(3e8/3e-7,3e8/8e-7,1000)
I0=1

fig=figure()
plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33/cos(20)))**2)

fig=figure()
plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33/cos(20)))**2)
207/17:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,1000)
freqs=linspace(3e8/3e-7,3e8/8e-7,1000)
I0=1

fig=figure()
plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33/cos(20)))**2)

fig=figure()
plot(freqs, 4*cos(2*pi*freqs/3e8*(1e-6*1.33/cos(20)))**2)
207/18:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,1000)
freqs=linspace(3e8/3e-7,3e8/8e-7,1000)
I0=1

fig=figure()
plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33/cos(20)))**2)
title('I de lambda')

fig=figure()
plot(freqs, 4*cos(2*pi*freqs/3e8*(1e-6*1.33/cos(20)))**2)
207/19:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,1000)
freqs=linspace(3e8/3e-7,3e8/8e-7,1000)
I0=1

fig=figure()
plot(lambdas, 4*cos(2*pi*1/lambdas*(1e-6*1.33/cos(20)))**2)
title('I de lambda')

fig=figure()
plot(freqs, 4*cos(2*pi*freqs/3e8*(1e-6*1.33/cos(20)))**2)
title('I de freq')
207/20:
#graphique intensite en fonction de dephasage pour longueur d'onde donnee

lambdas=linspace(3e-7,8e-7,1000)
freqs=linspace(3e8/3e-7,3e8/8e-7,1000)
I0=1

fig=figure()
plot(lambdas, 4*cos(pi*1/lambdas*(1e-6*1.33/cos(20)))**2)
title('I de lambda')

fig=figure()
plot(freqs, 4*cos(2*pi*freqs/3e8*(1e-6*1.33/cos(20)))**2)
title('I de freq')
208/1:
from scipy import *
from matplotlib.pyplot import *
208/2: %matplotlib inline
208/3:
#Def valeurs L
anglesHHL1=array[1,2]
sigHL1=array[1,2,3]
208/4:
#Def valeurs L
anglesHHL1=array([1,2])
sigHL1=array([1,2,3])
208/5: print (anglesHHL1)
208/6: print (type(anglesHHL1))
208/7: print (shape(anglesHHL1))
208/8:
#Def valeurs L
anglesHHL1=array([0,5,10,15,20,25,30,35,40,45,50])
sigHHL1=array([4.5,0.4,-4.2,-7.3,-9.3,-10.4,-13.9,-13.6,-15.4,-18.6,-20.7])

anglesHVL1=array([0,5,10,15,20,25,30,35,40,45,50]])
sigHVL1=array([-16,-18.3,-23,-25.3,-26,-26.4,-29,-27.5,-28,-29.5,-31.2])

anglesVVL1=array([0,5,10,15,20,30,50]])
sigVVL1=array([4.9,1.2,-3.6,-7.9,-10.4,-14.7,-19.5])
208/9:
#Def valeurs L
anglesHHL1=array([0,5,10,15,20,25,30,35,40,45,50])
sigHHL1=array([4.5,0.4,-4.2,-7.3,-9.3,-10.4,-13.9,-13.6,-15.4,-18.6,-20.7])

anglesHVL1=array([0,5,10,15,20,25,30,35,40,45,50])
sigHVL1=array([-16,-18.3,-23,-25.3,-26,-26.4,-29,-27.5,-28,-29.5,-31.2])

anglesVVL1=array([0,5,10,15,20,30,50]])
sigVVL1=array([4.9,1.2,-3.6,-7.9,-10.4,-14.7,-19.5])
208/10:
#Def valeurs L
anglesHHL1=array([0,5,10,15,20,25,30,35,40,45,50])
sigHHL1=array([4.5,0.4,-4.2,-7.3,-9.3,-10.4,-13.9,-13.6,-15.4,-18.6,-20.7])

anglesHVL1=array([0,5,10,15,20,25,30,35,40,45,50])
sigHVL1=array([-16,-18.3,-23,-25.3,-26,-26.4,-29,-27.5,-28,-29.5,-31.2])

anglesVVL1=array([0,5,10,15,20,30,50])
sigVVL1=array([4.9,1.2,-3.6,-7.9,-10.4,-14.7,-19.5])
208/11:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='HH-L')
ax.plot(anglesHVL1,sigHVL1,label='HV-L')
ax.plot(anglesVVL1,sigVVL1,label='VV-L')
ax.legend()
208/12:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='HH-L')
ax.plot(anglesHVL1,sigHVL1,label='HV-L')
ax.plot(anglesVVL1,sigVVL1,label='VV-L')
ax.plot(anglesHHL2,sigHHL2,label='HH-S')
ax.plot(anglesHVL2,sigHVL2,label='HV-S')
ax.plot(anglesVVL2,sigVVL2,label='VV-S')
ax.plot(anglesHHL3,sigHHL3,label='HH-C')
ax.plot(anglesHVL3,sigHVL3,label='HV-C')
ax.plot(anglesVVL3,sigVVL3,label='VV-C')
ax.legend()
208/13:
#Def valeurs L
anglesHHL1=array([0,5,10,15,20,25,30,35,40,45,50])
sigHHL1=array([4.5,0.4,-4.2,-7.3,-9.3,-10.4,-13.9,-13.6,-15.4,-18.6,-20.7])

anglesHVL1=array([0,5,10,15,20,25,30,35,40,45,50])
sigHVL1=array([-16,-18.3,-23,-25.3,-26,-26.4,-29,-27.5,-28,-29.5,-31.2])

anglesVVL1=array([0,5,10,15,20,30,50])
sigVVL1=array([4.9,1.2,-3.6,-7.9,-10.4,-14.7,-19.5])
208/14:
#Def valeurs S
anglesHHL2=array([0,5,10,15,20,25,30,35,40,45,50])
sigHHL2=array([2.6,-0.4,-3.9,-6.2,-9,-12.2,-15.8,-19.2])

anglesHVL2=array([0,5,10,15,20,30,40,50])
sigHVL2=array([-14.5,-17.8,-20.3,-22.6,-23.1,-24.7,-24.9,-31.7])

anglesVVL2=array([0,5,10,15,20,30,40,50])
sigVVL2=array([2.4,-0.9,-4,-6.4,-9,-12.6,-14.2,-17.8])
208/15:
#Def valeurs C
anglesHHL3=array([0,5,10,15,20,25,30,35,40,45,50,60])
sigHHL3=array([1.6,-1.3,-2.9,-4.4,-7.3,-8.8,-10.5,-12,-13.2,-13.4,-14.4,-14.6])

anglesHVL3=array([0,5,10,15,20,25,30,35,40,45,50,55,60])
sigHVL3=array([-12.2,-14.3,-16.4,-17.3,-19.3,-21.3,-21.3,-23.1,-23,-24.1,-23.6,-26.4,-25.5])

anglesVVL3=array([0,5,10,15,20,30,40,45,50,55,60])
sigVVL3=array([2.1,-0.9,-2.6,-4,-7,-10.3,-12.9,-13.3,-14.2,-16.2,-17.5])
208/16:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='HH-L')
ax.plot(anglesHVL1,sigHVL1,label='HV-L')
ax.plot(anglesVVL1,sigVVL1,label='VV-L')
ax.plot(anglesHHL2,sigHHL2,label='HH-S')
ax.plot(anglesHVL2,sigHVL2,label='HV-S')
ax.plot(anglesVVL2,sigVVL2,label='VV-S')
ax.plot(anglesHHL3,sigHHL3,label='HH-C')
ax.plot(anglesHVL3,sigHVL3,label='HV-C')
ax.plot(anglesVVL3,sigVVL3,label='VV-C')
ax.legend()
208/17:
#Def valeurs L
anglesHHL1=array([0,5,10,15,20,25,30,35,40,45,50])
sigHHL1=array([4.5,0.4,-4.2,-7.3,-9.3,-10.4,-13.9,-13.6,-15.4,-18.6,-20.7])

anglesHVL1=array([0,5,10,15,20,25,30,35,40,45,50])
sigHVL1=array([-16,-18.3,-23,-25.3,-26,-26.4,-29,-27.5,-28,-29.5,-31.2])

anglesVVL1=array([0,5,10,15,20,30,50])
sigVVL1=array([4.9,1.2,-3.6,-7.9,-10.4,-14.7,-19.5])
208/18:
#Def valeurs S
anglesHHS2=array([0,5,10,15,20,25,30,35,40,45,50])
sigHHS2=array([2.6,-0.4,-3.9,-6.2,-9,-12.2,-15.8,-19.2])

anglesHVS2=array([0,5,10,15,20,30,40,50])
sigHVS2=array([-14.5,-17.8,-20.3,-22.6,-23.1,-24.7,-24.9,-31.7])

anglesVVS2=array([0,5,10,15,20,30,40,50])
sigVVS2=array([2.4,-0.9,-4,-6.4,-9,-12.6,-14.2,-17.8])
208/19:
#Def valeurs C
anglesHHC3=array([0,5,10,15,20,25,30,35,40,45,50,60])
sigHHC3=array([1.6,-1.3,-2.9,-4.4,-7.3,-8.8,-10.5,-12,-13.2,-13.4,-14.4,-14.6])

anglesHVC3=array([0,5,10,15,20,25,30,35,40,45,50,55,60])
sigHVC3=array([-12.2,-14.3,-16.4,-17.3,-19.3,-21.3,-21.3,-23.1,-23,-24.1,-23.6,-26.4,-25.5])

anglesVVC3=array([0,5,10,15,20,30,40,45,50,55,60])
sigVVC3=array([2.1,-0.9,-2.6,-4,-7,-10.3,-12.9,-13.3,-14.2,-16.2,-17.5])
208/20:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='HH-L')
ax.plot(anglesHVL1,sigHVL1,label='HV-L')
ax.plot(anglesVVL1,sigVVL1,label='VV-L')
ax.plot(anglesHHL2,sigHHL2,label='HH-S')
ax.plot(anglesHVL2,sigHVL2,label='HV-S')
ax.plot(anglesVVL2,sigVVL2,label='VV-S')
ax.plot(anglesHHL3,sigHHL3,label='HH-C')
ax.plot(anglesHVL3,sigHVL3,label='HV-C')
ax.plot(anglesVVL3,sigVVL3,label='VV-C')
ax.legend()
208/21:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='HH-L')
ax.plot(anglesHVL1,sigHVL1,label='HV-L')
ax.plot(anglesVVL1,sigVVL1,label='VV-L')
ax.plot(anglesHHS2,sigHHS2,label='HH-S')
ax.plot(anglesHVS2,sigHVS2,label='HV-S')
ax.plot(anglesVVS2,sigVVS2,label='VV-S')
ax.plot(anglesHHC3,sigHHC3,label='HH-C')
ax.plot(anglesHVC3,sigHVC3,label='HV-C')
ax.plot(anglesVVC3,sigVVC3,label='VV-C')
ax.legend()
208/22:
#Def valeurs S
anglesHHS2=array([0,5,10,15,20,30,40,50° ])
sigHHS2=array([2.6,-0.4,-3.9,-6.2,-9,-12.2,-15.8,-19.2])

anglesHVS2=array([0,5,10,15,20,30,40,50])
sigHVS2=array([-14.5,-17.8,-20.3,-22.6,-23.1,-24.7,-24.9,-31.7])

anglesVVS2=array([0,5,10,15,20,30,40,50])
sigVVS2=array([2.4,-0.9,-4,-6.4,-9,-12.6,-14.2,-17.8])
208/23:
#Def valeurs S
anglesHHS2=array([0,5,10,15,20,30,40,50])
sigHHS2=array([2.6,-0.4,-3.9,-6.2,-9,-12.2,-15.8,-19.2])

anglesHVS2=array([0,5,10,15,20,30,40,50])
sigHVS2=array([-14.5,-17.8,-20.3,-22.6,-23.1,-24.7,-24.9,-31.7])

anglesVVS2=array([0,5,10,15,20,30,40,50])
sigVVS2=array([2.4,-0.9,-4,-6.4,-9,-12.6,-14.2,-17.8])
208/24:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='HH-L')
ax.plot(anglesHVL1,sigHVL1,label='HV-L')
ax.plot(anglesVVL1,sigVVL1,label='VV-L')
ax.plot(anglesHHS2,sigHHS2,label='HH-S')
ax.plot(anglesHVS2,sigHVS2,label='HV-S')
ax.plot(anglesVVS2,sigVVS2,label='VV-S')
ax.plot(anglesHHC3,sigHHC3,label='HH-C')
ax.plot(anglesHVC3,sigHVC3,label='HV-C')
ax.plot(anglesVVC3,sigVVC3,label='VV-C')
ax.legend()
208/25:
#SOIL AND ROCK
#Def valeurs L
anglesHHL1=array([0,5,10,15,20,25,30,35,40,45,50])
sigHHL1=array([4.5,0.4,-4.2,-7.3,-9.3,-10.4,-13.9,-13.6,-15.4,-18.6,-20.7])

anglesHVL1=array([0,5,10,15,20,25,30,35,40,45,50])
sigHVL1=array([-16,-18.3,-23,-25.3,-26,-26.4,-29,-27.5,-28,-29.5,-31.2])

anglesVVL1=array([0,5,10,15,20,30,50])
sigVVL1=array([4.9,1.2,-3.6,-7.9,-10.4,-14.7,-19.5])
208/26:
#Def valeurs S
anglesHHS1=array([0,5,10,15,20,30,40,50])
sigHHS1=array([2.6,-0.4,-3.9,-6.2,-9,-12.2,-15.8,-19.2])

anglesHVS1=array([0,5,10,15,20,30,40,50])
sigHVS1=array([-14.5,-17.8,-20.3,-22.6,-23.1,-24.7,-24.9,-31.7])

anglesVVS1=array([0,5,10,15,20,30,40,50])
sigVVS1=array([2.4,-0.9,-4,-6.4,-9,-12.6,-14.2,-17.8])
208/27:
#Def valeurs C
anglesHHC1=array([0,5,10,15,20,25,30,35,40,45,50,60])
sigHHC1=array([1.6,-1.3,-2.9,-4.4,-7.3,-8.8,-10.5,-12,-13.2,-13.4,-14.4,-14.6])

anglesHVC1=array([0,5,10,15,20,25,30,35,40,45,50,55,60])
sigHVC1=array([-12.2,-14.3,-16.4,-17.3,-19.3,-21.3,-21.3,-23.1,-23,-24.1,-23.6,-26.4,-25.5])

anglesVVC1=array([0,5,10,15,20,30,40,45,50,55,60])
sigVVC1=array([2.1,-0.9,-2.6,-4,-7,-10.3,-12.9,-13.3,-14.2,-16.2,-17.5])
208/28:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='HH-L')
ax.plot(anglesHVL1,sigHVL1,label='HV-L')
ax.plot(anglesVVL1,sigVVL1,label='VV-L')
ax.plot(anglesHHS1,sigHHS1,label='HH-S')
ax.plot(anglesHVS1,sigHVS1,label='HV-S')
ax.plot(anglesVVS1,sigVVS1,label='VV-S')
ax.plot(anglesHHC1,sigHHC1,label='HH-C')
ax.plot(anglesHVC1,sigHVC1,label='HV-C')
ax.plot(anglesVVC1,sigVVC1,label='VV-C')
ax.legend()
208/29:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL2,sigHHL2,label='HH-L')
ax.plot(anglesHVL2,sigHVL2,label='HV-L')
ax.plot(anglesVVL2,sigVVL2,label='VV-L')
ax.plot(anglesHHS2,sigHHS2,label='HH-S')
ax.plot(anglesHVS2,sigHVS2,label='HV-S')
ax.plot(anglesVVS2,sigVVS2,label='VV-S')
ax.plot(anglesHHC2,sigHHC2,label='HH-C')
ax.plot(anglesHVC2,sigHVC2,label='HV-C')
ax.plot(anglesVVC2,sigVVC2,label='VV-C')
ax.legend()
208/30:
#TREES
#Def valeurs L
anglesHHL2=array([0,10,20,30,3,40,45,50,55,60°])
sigHHL2=array([-10.9,-13.9,-12.6,-14.6,-16.9,-14,-11.2,-11.4,-10.7,-16.5])

anglesHVL2=array([0,10,20,30,3,40,45,50,55,60°])
sigHVL2=array([-19,-21.3,-16.7,-18.7,-22.2,-20.7,-19.4,-19.2,-16.3,-18.8])

anglesVVL2=array([0,10,20,30,3,40,45,50,55,60])
sigVVL2=array([-11.7,-12.6,-11.1,-13.1,-17.5,-14.5,-13,-10.9,-11.3,-16.9])
208/31:
#TREES
#Def valeurs L
anglesHHL2=array([0,10,20,30,3,40,45,50,55,60])
sigHHL2=array([-10.9,-13.9,-12.6,-14.6,-16.9,-14,-11.2,-11.4,-10.7,-16.5])

anglesHVL2=array([0,10,20,30,3,40,45,50,55,60])
sigHVL2=array([-19,-21.3,-16.7,-18.7,-22.2,-20.7,-19.4,-19.2,-16.3,-18.8])

anglesVVL2=array([0,10,20,30,3,40,45,50,55,60])
sigVVL2=array([-11.7,-12.6,-11.1,-13.1,-17.5,-14.5,-13,-10.9,-11.3,-16.9])
208/32:
#Def valeurs S
anglesHHS2=array([0,1,20,30,40,60,80])
sigHHS2=array([-10.7,-14.4,-13.6,-14.4,-14,-20.5,-21])

anglesHVS2=array([0,10,2,3,4,6,80])
sigHVS2=array([-18.5,-20.8,-19.2,-19.8,-19.8,-23.9,-26.1])

anglesVVS2=array([0,10,20,30,40,60,80])
sigVVS2=array([-11.6,-12.5,-13.3,-14.2,-13.1,-21.9,-20])
208/33:
#Def valeurs C
anglesHHC2=array([0,10,20,40,55])
sigHHC2=array([-10.3,-12.9,-11,-11,-8.9])

anglesHVC2=array([0,10,20,30,40,55,60,80])
sigHVC2=array([-16.3,-19,-17.1,-16.5,-17.4,-14.7,-22,-24.8])

anglesVVC2=array([0,10,20,40,45,55,60,75,80])
sigVVC2=array([-10.2,-12.3,-10.8,-10.9,-2.3,-8.6,-9.1,-4.1,-19])
208/34:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL2,sigHHL2,label='HH-L')
ax.plot(anglesHVL2,sigHVL2,label='HV-L')
ax.plot(anglesVVL2,sigVVL2,label='VV-L')
ax.plot(anglesHHS2,sigHHS2,label='HH-S')
ax.plot(anglesHVS2,sigHVS2,label='HV-S')
ax.plot(anglesVVS2,sigVVS2,label='VV-S')
ax.plot(anglesHHC2,sigHHC2,label='HH-C')
ax.plot(anglesHVC2,sigHVC2,label='HV-C')
ax.plot(anglesVVC2,sigVVC2,label='VV-C')
ax.legend()
208/35:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='HH-L')
ax.plot(anglesHVL1,sigHVL1,label='HV-L')
ax.plot(anglesVVL1,sigVVL1,label='VV-L')
ax.plot(anglesHHS1,sigHHS1,label='HH-S')
ax.plot(anglesHVS1,sigHVS1,label='HV-S')
ax.plot(anglesVVS1,sigVVS1,label='VV-S')
ax.plot(anglesHHC1,sigHHC1,label='HH-C')
ax.plot(anglesHVC1,sigHVC1,label='HV-C')
ax.plot(anglesVVC1,sigVVC1,label='VV-C')
ax.legend()
208/36:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL2,sigHHL2,label='HH-L')
ax.plot(anglesHVL2,sigHVL2,label='HV-L')
ax.plot(anglesVVL2,sigVVL2,label='VV-L')
ax.plot(anglesHHS2,sigHHS2,label='HH-S')
ax.plot(anglesHVS2,sigHVS2,label='HV-S')
ax.plot(anglesVVS2,sigVVS2,label='VV-S')
ax.plot(anglesHHC2,sigHHC2,label='HH-C')
ax.plot(anglesHVC2,sigHVC2,label='HV-C')
ax.plot(anglesVVC2,sigVVC2,label='VV-C')
ax.legend()
208/37:
#TREES
#Def valeurs L
anglesHHL2=array([0,10,20,30,3,40,45,50,55,60])
sigHHL2=array([-10.9,-13.9,-12.6,-14.6,-16.9,-14,-11.2,-11.4,-10.7,-16.5])

anglesHVL2=array([0,10,20,30,3,40,45,50,55,60])
sigHVL2=array([-19,-21.3,-16.7,-18.7,-22.2,-20.7,-19.4,-19.2,-16.3,-18.8])

anglesVVL2=array([0,10,20,30,3,40,45,50,55,60])
sigVVL2=array([-11.7,-12.6,-11.1,-13.1,-17.5,-14.5,-13,-10.9,-11.3,-16.9])
208/38:
#Def valeurs S
anglesHHS2=array([0,1,20,30,40,60,80])
sigHHS2=array([-10.7,-14.4,-13.6,-14.4,-14,-20.5,-21])

anglesHVS2=array([0,10,2,3,4,6,80])
sigHVS2=array([-18.5,-20.8,-19.2,-19.8,-19.8,-23.9,-26.1])

anglesVVS2=array([0,10,20,30,40,60,80])
sigVVS2=array([-11.6,-12.5,-13.3,-14.2,-13.1,-21.9,-20])
208/39:
#Def valeurs C
anglesHHC2=array([0,10,20,40,55])
sigHHC2=array([-10.3,-12.9,-11,-11,-8.9])

anglesHVC2=array([0,10,20,30,40,55,60,80])
sigHVC2=array([-16.3,-19,-17.1,-16.5,-17.4,-14.7,-22,-24.8])

anglesVVC2=array([0,10,20,40,45,55,60,75,80])
sigVVC2=array([-10.2,-12.3,-10.8,-10.9,-2.3,-8.6,-9.1,-4.1,-19])
208/40:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL2,sigHHL2,label='HH-L')
ax.plot(anglesHVL2,sigHVL2,label='HV-L')
ax.plot(anglesVVL2,sigVVL2,label='VV-L')
ax.plot(anglesHHS2,sigHHS2,label='HH-S')
ax.plot(anglesHVS2,sigHVS2,label='HV-S')
ax.plot(anglesVVS2,sigVVS2,label='VV-S')
ax.plot(anglesHHC2,sigHHC2,label='HH-C')
ax.plot(anglesHVC2,sigHVC2,label='HV-C')
ax.plot(anglesVVC2,sigVVC2,label='VV-C')
ax.legend()
208/41:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL2,sigHHL2,label='HH-L')
ax.plot(anglesHVL2,sigHVL2,label='HV-L')
ax.plot(anglesVVL2,sigVVL2,label='VV-L')
#ax.plot(anglesHHS2,sigHHS2,label='HH-S')
#ax.plot(anglesHVS2,sigHVS2,label='HV-S')
#ax.plot(anglesVVS2,sigVVS2,label='VV-S')
#ax.plot(anglesHHC2,sigHHC2,label='HH-C')
#ax.plot(anglesHVC2,sigHVC2,label='HV-C')
#ax.plot(anglesVVC2,sigVVC2,label='VV-C')
ax.legend()
208/42:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

#ax.plot(anglesHHL2,sigHHL2,label='HH-L')
#ax.plot(anglesHVL2,sigHVL2,label='HV-L')
#ax.plot(anglesVVL2,sigVVL2,label='VV-L')
ax.plot(anglesHHS2,sigHHS2,label='HH-S')
ax.plot(anglesHVS2,sigHVS2,label='HV-S')
ax.plot(anglesVVS2,sigVVS2,label='VV-S')
#ax.plot(anglesHHC2,sigHHC2,label='HH-C')
#ax.plot(anglesHVC2,sigHVC2,label='HV-C')
#ax.plot(anglesVVC2,sigVVC2,label='VV-C')
ax.legend()
208/43:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

#ax.plot(anglesHHL2,sigHHL2,label='HH-L')
#ax.plot(anglesHVL2,sigHVL2,label='HV-L')
#ax.plot(anglesVVL2,sigVVL2,label='VV-L')
#ax.plot(anglesHHS2,sigHHS2,label='HH-S')
#ax.plot(anglesHVS2,sigHVS2,label='HV-S')
#ax.plot(anglesVVS2,sigVVS2,label='VV-S')
ax.plot(anglesHHC2,sigHHC2,label='HH-C')
ax.plot(anglesHVC2,sigHVC2,label='HV-C')
ax.plot(anglesVVC2,sigVVC2,label='VV-C')
ax.legend()
208/44:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL2,sigHHL2,label='HH-L')
#ax.plot(anglesHVL2,sigHVL2,label='HV-L')
#ax.plot(anglesVVL2,sigVVL2,label='VV-L')
#ax.plot(anglesHHS2,sigHHS2,label='HH-S')
#ax.plot(anglesHVS2,sigHVS2,label='HV-S')
#ax.plot(anglesVVS2,sigVVS2,label='VV-S')
#ax.plot(anglesHHC2,sigHHC2,label='HH-C')
#ax.plot(anglesHVC2,sigHVC2,label='HV-C')
#ax.plot(anglesVVC2,sigVVC2,label='VV-C')
ax.legend()
208/45:
#TREES
#Def valeurs L
anglesHHL2=array([0,10,20,30,35,40,45,50,55,60])
sigHHL2=array([-10.9,-13.9,-12.6,-14.6,-16.9,-14,-11.2,-11.4,-10.7,-16.5])

anglesHVL2=array([0,10,20,30,35,40,45,50,55,60])
sigHVL2=array([-19,-21.3,-16.7,-18.7,-22.2,-20.7,-19.4,-19.2,-16.3,-18.8])

anglesVVL2=array([0,10,20,30,35,40,45,50,55,60])
sigVVL2=array([-11.7,-12.6,-11.1,-13.1,-17.5,-14.5,-13,-10.9,-11.3,-16.9])
208/46:
#Def valeurs S
anglesHHS2=array([0,10,20,30,40,60,80])
sigHHS2=array([-10.7,-14.4,-13.6,-14.4,-14,-20.5,-21])

anglesHVS2=array([0,10,20,30,40,60,80])
sigHVS2=array([-18.5,-20.8,-19.2,-19.8,-19.8,-23.9,-26.1])

anglesVVS2=array([0,10,20,30,40,60,80])
sigVVS2=array([-11.6,-12.5,-13.3,-14.2,-13.1,-21.9,-20])
208/47:
#Def valeurs C
anglesHHC2=array([0,10,20,40,55])
sigHHC2=array([-10.3,-12.9,-11,-11,-8.9])

anglesHVC2=array([0,10,20,30,40,55,60,80])
sigHVC2=array([-16.3,-19,-17.1,-16.5,-17.4,-14.7,-22,-24.8])

anglesVVC2=array([0,10,20,40,45,55,60,75,80])
sigVVC2=array([-10.2,-12.3,-10.8,-10.9,-2.3,-8.6,-9.1,-4.1,-19])
208/48:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL2,sigHHL2,label='HH-L')
#ax.plot(anglesHVL2,sigHVL2,label='HV-L')
#ax.plot(anglesVVL2,sigVVL2,label='VV-L')
#ax.plot(anglesHHS2,sigHHS2,label='HH-S')
#ax.plot(anglesHVS2,sigHVS2,label='HV-S')
#ax.plot(anglesVVS2,sigVVS2,label='VV-S')
#ax.plot(anglesHHC2,sigHHC2,label='HH-C')
#ax.plot(anglesHVC2,sigHVC2,label='HV-C')
#ax.plot(anglesVVC2,sigVVC2,label='VV-C')
ax.legend()
208/49:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL2,sigHHL2,label='HH-L')
ax.plot(anglesHVL2,sigHVL2,label='HV-L')
ax.plot(anglesVVL2,sigVVL2,label='VV-L')
ax.plot(anglesHHS2,sigHHS2,label='HH-S')
ax.plot(anglesHVS2,sigHVS2,label='HV-S')
ax.plot(anglesVVS2,sigVVS2,label='VV-S')
ax.plot(anglesHHC2,sigHHC2,label='HH-C')
ax.plot(anglesHVC2,sigHVC2,label='HV-C')
ax.plot(anglesVVC2,sigVVC2,label='VV-C')
ax.legend()
208/50:
#TREES
#Def valeurs L
anglesHHL3=array([0,5,10,15,20,30,40,50,60,80])
sigHHL3=array([8.1,1.8,-6.1,-11.6,-15.6,-19.3,-21.2,-21.1,-24,-29.2])

anglesHVL3=array([0,5,10,15,20,30,40,60,80])
sigHVL3=array([-14.2,-13.2,-22.4,-24.3,-29.9,-31.5,-33.1,-36.1,-37.4])

anglesVVL3=array([0,5,10,15,20,30,40,50,60,80])
sigVVL3=array([8,2.6,-5.2,-11.8,-15,-18.6,-21.6,-18.9,-25.1,-21.6])
208/51:
#Def valeurs S
anglesHHS3=array([0,5,10,15,20,30,40,60,80])
sigHHS3=array([5.7,-1,-5.2,-9.3,-12.8,-15.9,-16.7,-18.4,-20.2])

anglesHVS3=array([0,5,10,15,20,30,40,60,80])
sigHVS3=array([-12.4,-16.2,-19.4,-21.7,-23,-24.2,-25.2,-27.4,-30.1])

anglesVVS3=array([0,5,10,15,20,30,40,60,80])
sigVVS3=array([5.8,-1.2,-4.4,-9.9,-12,-15.7,-17.3,-19.4,-20.7])
208/52:
#Def valeurs C
anglesHHC3=array([0,5,10,15,20,30,40,45,50,60,80])
sigHHC3=array([3.6,0.7,-2.7,-5.3,-9.1,-10.9,-12.9,-15.8,-16.0,-12.4,-13.9])

anglesHVC3=array([0,5,10,15,20,30,40,45,50,60,80])
sigHVC3=array([-8.7,-9.6,-12.7,-13.2,-15.4,-17.1,-17.5,-24.1,-21.6,-18.5,-21])

anglesVVC3=array([0,5,10,15,20,30,40,45,50,60,80])
sigVVC3=array([3.8,0.3,-1.7,-5.4,-7.8,-10.7,-10.6,-14.5,-16.2,-12.6,-15.6])
208/53:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL3,sigHHL3,label='HH-L')
ax.plot(anglesHVL3,sigHVL3,label='HV-L')
ax.plot(anglesVVL3,sigVVL3,label='VV-L')
ax.plot(anglesHHS3,sigHHS3,label='HH-S')
ax.plot(anglesHVS3,sigHVS3,label='HV-S')
ax.plot(anglesVVS3,sigVVS3,label='VV-S')
ax.plot(anglesHHC3,sigHHC3,label='HH-C')
ax.plot(anglesHVC3,sigHVC3,label='HV-C')
ax.plot(anglesVVC3,sigVVC3,label='VV-C')
ax.legend()
217/1: %matplotlib inline
217/2:
from scipy import *
from matplotlib.pyplot import *
217/3:
#SOIL AND ROCK
#Def valeurs L
anglesHHL1=array([0,5,10,15,20,25,30,35,40,45,50])
sigHHL1=array([4.5,0.4,-4.2,-7.3,-9.3,-10.4,-13.9,-13.6,-15.4,-18.6,-20.7])

anglesHVL1=array([0,5,10,15,20,25,30,35,40,45,50])
sigHVL1=array([-16,-18.3,-23,-25.3,-26,-26.4,-29,-27.5,-28,-29.5,-31.2])

anglesVVL1=array([0,5,10,15,20,30,50])
sigVVL1=array([4.9,1.2,-3.6,-7.9,-10.4,-14.7,-19.5])
217/4:
#Def valeurs S
anglesHHS1=array([0,5,10,15,20,30,40,50])
sigHHS1=array([2.6,-0.4,-3.9,-6.2,-9,-12.2,-15.8,-19.2])

anglesHVS1=array([0,5,10,15,20,30,40,50])
sigHVS1=array([-14.5,-17.8,-20.3,-22.6,-23.1,-24.7,-24.9,-31.7])

anglesVVS1=array([0,5,10,15,20,30,40,50])
sigVVS1=array([2.4,-0.9,-4,-6.4,-9,-12.6,-14.2,-17.8])
217/5:
#Def valeurs C
anglesHHC1=array([0,5,10,15,20,25,30,35,40,45,50,60])
sigHHC1=array([1.6,-1.3,-2.9,-4.4,-7.3,-8.8,-10.5,-12,-13.2,-13.4,-14.4,-14.6])

anglesHVC1=array([0,5,10,15,20,25,30,35,40,45,50,55,60])
sigHVC1=array([-12.2,-14.3,-16.4,-17.3,-19.3,-21.3,-21.3,-23.1,-23,-24.1,-23.6,-26.4,-25.5])

anglesVVC1=array([0,5,10,15,20,30,40,45,50,55,60])
sigVVC1=array([2.1,-0.9,-2.6,-4,-7,-10.3,-12.9,-13.3,-14.2,-16.2,-17.5])
217/6:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='HH-L')
ax.plot(anglesHVL1,sigHVL1,label='HV-L')
ax.plot(anglesVVL1,sigVVL1,label='VV-L')
ax.plot(anglesHHS1,sigHHS1,label='HH-S')
ax.plot(anglesHVS1,sigHVS1,label='HV-S')
ax.plot(anglesVVS1,sigVVS1,label='VV-S')
ax.plot(anglesHHC1,sigHHC1,label='HH-C')
ax.plot(anglesHVC1,sigHVC1,label='HV-C')
ax.plot(anglesVVC1,sigVVC1,label='VV-C')
ax.legend()
217/7:
#TREES
#Def valeurs L
anglesHHL2=array([0,10,20,30,35,40,45,50,55,60])
sigHHL2=array([-10.9,-13.9,-12.6,-14.6,-16.9,-14,-11.2,-11.4,-10.7,-16.5])

anglesHVL2=array([0,10,20,30,35,40,45,50,55,60])
sigHVL2=array([-19,-21.3,-16.7,-18.7,-22.2,-20.7,-19.4,-19.2,-16.3,-18.8])

anglesVVL2=array([0,10,20,30,35,40,45,50,55,60])
sigVVL2=array([-11.7,-12.6,-11.1,-13.1,-17.5,-14.5,-13,-10.9,-11.3,-16.9])
217/8:
#Def valeurs S
anglesHHS2=array([0,10,20,30,40,60,80])
sigHHS2=array([-10.7,-14.4,-13.6,-14.4,-14,-20.5,-21])

anglesHVS2=array([0,10,20,30,40,60,80])
sigHVS2=array([-18.5,-20.8,-19.2,-19.8,-19.8,-23.9,-26.1])

anglesVVS2=array([0,10,20,30,40,60,80])
sigVVS2=array([-11.6,-12.5,-13.3,-14.2,-13.1,-21.9,-20])
217/9:
#Def valeurs C
anglesHHC2=array([0,10,20,40,55])
sigHHC2=array([-10.3,-12.9,-11,-11,-8.9])

anglesHVC2=array([0,10,20,30,40,55,60,80])
sigHVC2=array([-16.3,-19,-17.1,-16.5,-17.4,-14.7,-22,-24.8])

anglesVVC2=array([0,10,20,40,45,55,60,75,80])
sigVVC2=array([-10.2,-12.3,-10.8,-10.9,-2.3,-8.6,-9.1,-4.1,-19])
217/10:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL2,sigHHL2,label='HH-L')
ax.plot(anglesHVL2,sigHVL2,label='HV-L')
ax.plot(anglesVVL2,sigVVL2,label='VV-L')
ax.plot(anglesHHS2,sigHHS2,label='HH-S')
ax.plot(anglesHVS2,sigHVS2,label='HV-S')
ax.plot(anglesVVS2,sigVVS2,label='VV-S')
ax.plot(anglesHHC2,sigHHC2,label='HH-C')
ax.plot(anglesHVC2,sigHVC2,label='HV-C')
ax.plot(anglesVVC2,sigVVC2,label='VV-C')
ax.legend()
217/11:
#TREES
#Def valeurs L
anglesHHL3=array([0,5,10,15,20,30,40,50,60,80])
sigHHL3=array([8.1,1.8,-6.1,-11.6,-15.6,-19.3,-21.2,-21.1,-24,-29.2])

anglesHVL3=array([0,5,10,15,20,30,40,60,80])
sigHVL3=array([-14.2,-13.2,-22.4,-24.3,-29.9,-31.5,-33.1,-36.1,-37.4])

anglesVVL3=array([0,5,10,15,20,30,40,50,60,80])
sigVVL3=array([8,2.6,-5.2,-11.8,-15,-18.6,-21.6,-18.9,-25.1,-21.6])
217/12:
#Def valeurs S
anglesHHS3=array([0,5,10,15,20,30,40,60,80])
sigHHS3=array([5.7,-1,-5.2,-9.3,-12.8,-15.9,-16.7,-18.4,-20.2])

anglesHVS3=array([0,5,10,15,20,30,40,60,80])
sigHVS3=array([-12.4,-16.2,-19.4,-21.7,-23,-24.2,-25.2,-27.4,-30.1])

anglesVVS3=array([0,5,10,15,20,30,40,60,80])
sigVVS3=array([5.8,-1.2,-4.4,-9.9,-12,-15.7,-17.3,-19.4,-20.7])
217/13:
#Def valeurs C
anglesHHC3=array([0,5,10,15,20,30,40,45,50,60,80])
sigHHC3=array([3.6,0.7,-2.7,-5.3,-9.1,-10.9,-12.9,-15.8,-16.0,-12.4,-13.9])

anglesHVC3=array([0,5,10,15,20,30,40,45,50,60,80])
sigHVC3=array([-8.7,-9.6,-12.7,-13.2,-15.4,-17.1,-17.5,-24.1,-21.6,-18.5,-21])

anglesVVC3=array([0,5,10,15,20,30,40,45,50,60,80])
sigVVC3=array([3.8,0.3,-1.7,-5.4,-7.8,-10.7,-10.6,-14.5,-16.2,-12.6,-15.6])
217/14:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL3,sigHHL3,label='HH-L')
ax.plot(anglesHVL3,sigHVL3,label='HV-L')
ax.plot(anglesVVL3,sigVVL3,label='VV-L')
ax.plot(anglesHHS3,sigHHS3,label='HH-S')
ax.plot(anglesHVS3,sigHVS3,label='HV-S')
ax.plot(anglesVVS3,sigVVS3,label='VV-S')
ax.plot(anglesHHC3,sigHHC3,label='HH-C')
ax.plot(anglesHVC3,sigHVC3,label='HV-C')
ax.plot(anglesVVC3,sigVVC3,label='VV-C')
ax.legend()
217/15:
#SCHRUBS
#Def valeurs L
anglesHHL4=array([0,5,10,15,20,25,30,35,40,45,50,60,70,80])
sigHHL4=array([1.3,0.8,-7.5,-5.6,-12.5,-7.9,-15,-10.5,-19.4,-14.3,-14.5,-23.8,-14.3,-25.2])

anglesHVL4=array([0,5,10,15,20,25,30,35,40,45,50,60,80])
sigHVL4=array([-22.9,-17.5,-24.1,-19.6,-24.8,-21.6,-25.4,-22.3,-28.3,-24.9,-24.6,-30.9,-32.8])

anglesVVL4=array([0,5,10,15,20,30,40,45,50,60,70,80])
sigVVL4=array([0.8,0.4,-7.9,-8.9,-13.5,-15.8,-18.7,-17.8,-14.5,-20.1,-14.2,-21.9])
217/16:
#Def valeurs S
anglesHHS4=array([0,5,10,15,20,30,40,60,80])
sigHHS4=array([-0.2,-0.9,-7.2,-7,-11.7,-13.5,-16.7,-18.5,-20])

anglesHVS4=array([0,5,10,15,20,30,40,60,80])
sigHVS4=array([-18.8,-16.2,-20.1,-17.6,-21,-21.4,-23.4,-24.7,-27.9])

anglesVVS4=array([0,5,10,15,20,30,40,60,80])
sigVVS4=array([-0.3,-1.3,-6.8,-8.5,-11.6,-13.3,-15,-16.2,-19.2])
217/17:
#Def valeurs C
anglesHHC4=array([0,5,10,15,20,25,30,35,40,45,50,60,80])
sigHHC4=array([-0.9,0.1,-3.7,-4.9,-8.1,-9.6,-9.7,-10.7,-12,-11.5,-13,-13.8,-18])

anglesHVC4=array([0,5,10,15,20,25,30,35,40,45,50,60,80])
sigHVC4=array([-12.5,-10.8,-14.6,-13.3,-16,-16.7,-16.5,-18.2,-17.7,-19.2,-18.1,-18.5,-22])

anglesVVC4=array([0,5,10,15,20,30,40,45,50,60,80])
sigVVC4=array([-0.9,0.5,-5.1,-5.3,-8.4,-9.7,-11.5,-11,-12.9,-13.2,-17.6])
217/18:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL4,sigHHL4,label='HH-L')
ax.plot(anglesHVL4,sigHVL4,label='HV-L')
ax.plot(anglesVVL4,sigVVL4,label='VV-L')
ax.plot(anglesHHS4,sigHHS4,label='HH-S')
ax.plot(anglesHVS4,sigHVS4,label='HV-S')
ax.plot(anglesVVS4,sigVVS4,label='VV-S')
ax.plot(anglesHHC4,sigHHC4,label='HH-C')
ax.plot(anglesHVC4,sigHVC4,label='HV-C')
ax.plot(anglesVVC4,sigVVC4,label='VV-C')
ax.legend()
217/19:
#SHORT VEGETATION
#Def valeurs L
anglesHHL4=array([0,5,10,15,20,25,30,35,40,45,50,60,80])
sigHHL4=array([3.1,1.1,-7.1,-6.9,-13.4,-10.4,-16.2,-13.1,-19.9,-16.7,-16.6,-23.9,-26.3])

anglesHVL4=array([0,5,10,15,20,25,30,35,40,45,50,60,80])
sigHVL4=array([-20.3,-16.6,-23.7,-20.4,-26.1,-23,-26.9,-23.8,-29.7,-26.2,-26.9,-32.3,-34.1])

anglesVVL4=array([0,5,10,15,20,30,40,50,60,80])
sigVVL4=array([2.7,0.9,-7.2,-9.5,-14,-16.6,-19.6,-16.4,-21.6,-23.5])
217/20:
#Def valeurs S
anglesHHS4=array([0,5,10,15,20,30,40,50,60,80])
sigHHS4=array([1.3,-0.9,-6.7,-7.5,-12,-14.1,-16.7,-18.3,-18.5,-20.1])

anglesHVS4=array([0,5,10,15,20,30,40,50,60,80])
sigHVS4=array([-17,-16.2,-19.9,-18.5,-21.5,-22.1,-23.8,-26.7,-25.4,-28.5])

anglesVVS4=array([0,5,10,15,20,30,40,50,60,80])
sigVVS4=array([1.3,-1.3,-6.2,-8.9,-11.7,-13.9,-15.6,-19.2,-17,-19.6])
217/21:
#Def valeurs C
anglesHHC4=array([0,5,10,15,20,25,30,35,40,45,50,55,60,80])
sigHHC4=array([0.3,0.3,-3.5,-5,-8.3,-10.6,-10.1,-12.3,-12.2,-13.1,-14,-13.8,-13.4,-17])

anglesHVC4=array([0,5,10,15,20,25,30,35,40,45,50,55,60,80])
sigHVC4=array([-11.5,-10.5,-14.1,-13.3,-15.9,-18.1,-16.7,-19.6,-17.7,-20.8,-19.1,-21.3,-18.5,-21.8])

anglesVVC4=array([0,5,10,15,20,30,40,45,50,55,60,80])
sigVVC4=array([0.3,0.4,-4.2,-5.3,-8.2,-10,-11.3,-13.2,-14.7,-13.7,-13.1,-17.1])
217/22:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL5,sigHHL5,label='HH-L')
ax.plot(anglesHVL5,sigHVL5,label='HV-L')
ax.plot(anglesVVL5,sigVVL5,label='VV-L')
ax.plot(anglesHHS5,sigHHS5,label='HH-S')
ax.plot(anglesHVS5,sigHVS5,label='HV-S')
ax.plot(anglesVVS5,sigVVS5,label='VV-S')
ax.plot(anglesHHC5,sigHHC5,label='HH-C')
ax.plot(anglesHVC5,sigHVC5,label='HV-C')
ax.plot(anglesVVC5,sigVVC5,label='VV-C')
ax.legend()
217/23:
#SCHRUBS
#Def valeurs L
anglesHHL4=array([0,5,10,15,20,25,30,35,40,45,50,60,70,80])
sigHHL4=array([1.3,0.8,-7.5,-5.6,-12.5,-7.9,-15,-10.5,-19.4,-14.3,-14.5,-23.8,-14.3,-25.2])

anglesHVL4=array([0,5,10,15,20,25,30,35,40,45,50,60,80])
sigHVL4=array([-22.9,-17.5,-24.1,-19.6,-24.8,-21.6,-25.4,-22.3,-28.3,-24.9,-24.6,-30.9,-32.8])

anglesVVL4=array([0,5,10,15,20,30,40,45,50,60,70,80])
sigVVL4=array([0.8,0.4,-7.9,-8.9,-13.5,-15.8,-18.7,-17.8,-14.5,-20.1,-14.2,-21.9])
217/24:
#Def valeurs S
anglesHHS4=array([0,5,10,15,20,30,40,60,80])
sigHHS4=array([-0.2,-0.9,-7.2,-7,-11.7,-13.5,-16.7,-18.5,-20])

anglesHVS4=array([0,5,10,15,20,30,40,60,80])
sigHVS4=array([-18.8,-16.2,-20.1,-17.6,-21,-21.4,-23.4,-24.7,-27.9])

anglesVVS4=array([0,5,10,15,20,30,40,60,80])
sigVVS4=array([-0.3,-1.3,-6.8,-8.5,-11.6,-13.3,-15,-16.2,-19.2])
217/25:
#Def valeurs C
anglesHHC4=array([0,5,10,15,20,25,30,35,40,45,50,60,80])
sigHHC4=array([-0.9,0.1,-3.7,-4.9,-8.1,-9.6,-9.7,-10.7,-12,-11.5,-13,-13.8,-18])

anglesHVC4=array([0,5,10,15,20,25,30,35,40,45,50,60,80])
sigHVC4=array([-12.5,-10.8,-14.6,-13.3,-16,-16.7,-16.5,-18.2,-17.7,-19.2,-18.1,-18.5,-22])

anglesVVC4=array([0,5,10,15,20,30,40,45,50,60,80])
sigVVC4=array([-0.9,0.5,-5.1,-5.3,-8.4,-9.7,-11.5,-11,-12.9,-13.2,-17.6])
217/26:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL4,sigHHL4,label='HH-L')
ax.plot(anglesHVL4,sigHVL4,label='HV-L')
ax.plot(anglesVVL4,sigVVL4,label='VV-L')
ax.plot(anglesHHS4,sigHHS4,label='HH-S')
ax.plot(anglesHVS4,sigHVS4,label='HV-S')
ax.plot(anglesVVS4,sigVVS4,label='VV-S')
ax.plot(anglesHHC4,sigHHC4,label='HH-C')
ax.plot(anglesHVC4,sigHVC4,label='HV-C')
ax.plot(anglesVVC4,sigVVC4,label='VV-C')
ax.legend()
217/27:
#SHORT VEGETATION
#Def valeurs L
anglesHHL5=array([0,5,10,15,20,25,30,35,40,45,50,60,80])
sigHHL5=array([3.1,1.1,-7.1,-6.9,-13.4,-10.4,-16.2,-13.1,-19.9,-16.7,-16.6,-23.9,-26.3])

anglesHVL5=array([0,5,10,15,20,25,30,35,40,45,50,60,80])
sigHVL5=array([-20.3,-16.6,-23.7,-20.4,-26.1,-23,-26.9,-23.8,-29.7,-26.2,-26.9,-32.3,-34.1])

anglesVVL5=array([0,5,10,15,20,30,40,50,60,80])
sigVVL5=array([2.7,0.9,-7.2,-9.5,-14,-16.6,-19.6,-16.4,-21.6,-23.5])
217/28:
#Def valeurs S
anglesHHS5=array([0,5,10,15,20,30,40,50,60,80])
sigHHS5=array([1.3,-0.9,-6.7,-7.5,-12,-14.1,-16.7,-18.3,-18.5,-20.1])

anglesHVS5=array([0,5,10,15,20,30,40,50,60,80])
sigHVS5=array([-17,-16.2,-19.9,-18.5,-21.5,-22.1,-23.8,-26.7,-25.4,-28.5])

anglesVVS5=array([0,5,10,15,20,30,40,50,60,80])
sigVVS5=array([1.3,-1.3,-6.2,-8.9,-11.7,-13.9,-15.6,-19.2,-17,-19.6])
217/29:
#Def valeurs C
anglesHHC5=array([0,5,10,15,20,25,30,35,40,45,50,55,60,80])
sigHHC5=array([0.3,0.3,-3.5,-5,-8.3,-10.6,-10.1,-12.3,-12.2,-13.1,-14,-13.8,-13.4,-17])

anglesHVC5=array([0,5,10,15,20,25,30,35,40,45,50,55,60,80])
sigHVC5=array([-11.5,-10.5,-14.1,-13.3,-15.9,-18.1,-16.7,-19.6,-17.7,-20.8,-19.1,-21.3,-18.5,-21.8])

anglesVVC5=array([0,5,10,15,20,30,40,45,50,55,60,80])
sigVVC5=array([0.3,0.4,-4.2,-5.3,-8.2,-10,-11.3,-13.2,-14.7,-13.7,-13.1,-17.1])
217/30:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL5,sigHHL5,label='HH-L')
ax.plot(anglesHVL5,sigHVL5,label='HV-L')
ax.plot(anglesVVL5,sigVVL5,label='VV-L')
ax.plot(anglesHHS5,sigHHS5,label='HH-S')
ax.plot(anglesHVS5,sigHVS5,label='HV-S')
ax.plot(anglesVVS5,sigVVS5,label='VV-S')
ax.plot(anglesHHC5,sigHHC5,label='HH-C')
ax.plot(anglesHVC5,sigHVC5,label='HV-C')
ax.plot(anglesVVC5,sigVVC5,label='VV-C')
ax.legend()
217/31:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='HH-L',color='r',linestyle='-')
ax.plot(anglesHVL1,sigHVL1,label='HV-L')
ax.plot(anglesVVL1,sigVVL1,label='VV-L')
ax.plot(anglesHHS1,sigHHS1,label='HH-S')
ax.plot(anglesHVS1,sigHVS1,label='HV-S')
ax.plot(anglesVVS1,sigVVS1,label='VV-S')
ax.plot(anglesHHC1,sigHHC1,label='HH-C')
ax.plot(anglesHVC1,sigHVC1,label='HV-C')
ax.plot(anglesVVC1,sigVVC1,label='VV-C')
ax.legend()
217/32:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='HH-L',color='r',linestyle='--')
ax.plot(anglesHVL1,sigHVL1,label='HV-L')
ax.plot(anglesVVL1,sigVVL1,label='VV-L')
ax.plot(anglesHHS1,sigHHS1,label='HH-S')
ax.plot(anglesHVS1,sigHVS1,label='HV-S')
ax.plot(anglesVVS1,sigVVS1,label='VV-S')
ax.plot(anglesHHC1,sigHHC1,label='HH-C')
ax.plot(anglesHVC1,sigHVC1,label='HV-C')
ax.plot(anglesVVC1,sigVVC1,label='VV-C')
ax.legend()
217/33:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='HH-L',color='r',linestyle='--')
ax.plot(anglesHVL1,sigHVL1,label='HV-L',color='r',linestyle='--')
ax.plot(anglesVVL1,sigVVL1,label='VV-L',color='r',linestyle='--')
ax.plot(anglesHHS1,sigHHS1,label='HH-S',color='g',linestyle='-.')
ax.plot(anglesHVS1,sigHVS1,label='HV-S',color='g',linestyle='-.')
ax.plot(anglesVVS1,sigVVS1,label='VV-S',color='g',linestyle='-.')
ax.plot(anglesHHC1,sigHHC1,label='HH-C')
ax.plot(anglesHVC1,sigHVC1,label='HV-C')
ax.plot(anglesVVC1,sigVVC1,label='VV-C')
ax.legend()
217/34:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='HH-L',color='r',linestyle='--')
ax.plot(anglesHVL1,sigHVL1,label='HV-L',color='g',linestyle='--')
ax.plot(anglesVVL1,sigVVL1,label='VV-L',color='b',linestyle='--')
ax.plot(anglesHHS1,sigHHS1,label='HH-S',color='r',linestyle='-.')
ax.plot(anglesHVS1,sigHVS1,label='HV-S',color='g',linestyle='-.')
ax.plot(anglesVVS1,sigVVS1,label='VV-S',color='b',linestyle='-.')
ax.plot(anglesHHC1,sigHHC1,label='HH-C')
ax.plot(anglesHVC1,sigHVC1,label='HV-C')
ax.plot(anglesVVC1,sigVVC1,label='VV-C')
ax.legend()
217/35:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='HH-L',color='r',linestyle='--')
ax.plot(anglesHVL1,sigHVL1,label='HV-L',color='g',linestyle='--')
ax.plot(anglesVVL1,sigVVL1,label='VV-L',color='b',linestyle='--')
ax.plot(anglesHHS1,sigHHS1,label='HH-S',color='r',linestyle='-.')
ax.plot(anglesHVS1,sigHVS1,label='HV-S',color='g',linestyle='-.')
ax.plot(anglesVVS1,sigVVS1,label='VV-S',color='b',linestyle='-.')
ax.plot(anglesHHC1,sigHHC1,label='HH-C',color='r',linestyle=':')
ax.plot(anglesHVC1,sigHVC1,label='HV-C',color='g',linestyle=':')
ax.plot(anglesVVC1,sigVVC1,label='VV-C',color='b',linestyle=':')
ax.legend()
217/36:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='L',color='r',linestyle='--')
ax.plot(anglesHVL1,sigHVL1,label='L',color='g',linestyle='--')
ax.plot(anglesVVL1,sigVVL1,label='L',color='b',linestyle='--')
ax.plot(anglesHHS1,sigHHS1,label='HH-S',color='r',linestyle='-.')
ax.plot(anglesHVS1,sigHVS1,label='HV-S',color='g',linestyle='-.')
ax.plot(anglesVVS1,sigVVS1,label='VV-S',color='b',linestyle='-.')
ax.plot(anglesHHC1,sigHHC1,label='HH-C',color='r',linestyle=':')
ax.plot(anglesHVC1,sigHVC1,label='HV-C',color='g',linestyle=':')
ax.plot(anglesVVC1,sigVVC1,label='VV-C',color='b',linestyle=':')
ax.legend()
217/37:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='L',color='r',linestyle='--')
ax.plot(anglesHVL1,sigHVL1,color='g',linestyle='--')
ax.plot(anglesVVL1,sigVVL1,label='L',color='b',linestyle='--')
ax.plot(anglesHHS1,sigHHS1,label='HH-S',color='r',linestyle='-.')
ax.plot(anglesHVS1,sigHVS1,label='HV-S',color='g',linestyle='-.')
ax.plot(anglesVVS1,sigVVS1,label='VV-S',color='b',linestyle='-.')
ax.plot(anglesHHC1,sigHHC1,label='HH-C',color='r',linestyle=':')
ax.plot(anglesHVC1,sigHVC1,label='HV-C',color='g',linestyle=':')
ax.plot(anglesVVC1,sigVVC1,label='VV-C',color='b',linestyle=':')
ax.legend()
217/38:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='L',color='r',linestyle='--')
ax.plot(anglesHVL1,sigHVL1,color='g',linestyle='--')
ax.plot(anglesVVL1,sigVVL1,color='b',linestyle='--')
ax.plot(anglesHHS1,sigHHS1,label='HH-S',color='r',linestyle='-.')
ax.plot(anglesHVS1,sigHVS1,label='HV-S',color='g',linestyle='-.')
ax.plot(anglesVVS1,sigVVS1,label='VV-S',color='b',linestyle='-.')
ax.plot(anglesHHC1,sigHHC1,label='HH-C',color='r',linestyle=':')
ax.plot(anglesHVC1,sigHVC1,label='HV-C',color='g',linestyle=':')
ax.plot(anglesVVC1,sigVVC1,label='VV-C',color='b',linestyle=':')
ax.legend()
217/39:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='L',color='r',linestyle='--')
ax.plot(anglesHVL1,sigHVL1,color='g',linestyle='--')
ax.plot(anglesVVL1,sigVVL1,color='b',linestyle='--')
ax.plot(anglesHHS1,sigHHS1,label='S',color='r',linestyle='-.')
ax.plot(anglesHVS1,sigHVS1,color='g',linestyle='-.')
ax.plot(anglesVVS1,sigVVS1,color='b',linestyle='-.')
ax.plot(anglesHHC1,sigHHC1,label='C',color='r',linestyle=':')
ax.plot(anglesHVC1,sigHVC1,color='g',linestyle=':')
ax.plot(anglesVVC1,sigVVC1,color='b',linestyle=':')
ax.legend()
217/40:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='k',color='r',linestyle='--')
ax.plot(anglesHVL1,sigHVL1,color='g',linestyle='--')
ax.plot(anglesVVL1,sigVVL1,color='b',linestyle='--')
ax.plot(anglesHHS1,sigHHS1,label='S',color='r',linestyle='-.')
ax.plot(anglesHVS1,sigHVS1,color='g',linestyle='-.')
ax.plot(anglesVVS1,sigVVS1,color='b',linestyle='-.')
ax.plot(anglesHHC1,sigHHC1,label='C',color='r',linestyle=':')
ax.plot(anglesHVC1,sigHVC1,color='g',linestyle=':')
ax.plot(anglesVVC1,sigVVC1,color='b',linestyle=':')
ax.legend()
217/41:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='L',color='k',linestyle='--')
ax.plot(anglesHVL1,sigHVL1,color='g',linestyle='--')
ax.plot(anglesVVL1,sigVVL1,color='b',linestyle='--')
ax.plot(anglesHHS1,sigHHS1,label='S',color='r',linestyle='-.')
ax.plot(anglesHVS1,sigHVS1,color='g',linestyle='-.')
ax.plot(anglesVVS1,sigVVS1,color='b',linestyle='-.')
ax.plot(anglesHHC1,sigHHC1,label='C',color='r',linestyle=':')
ax.plot(anglesHVC1,sigHVC1,color='g',linestyle=':')
ax.plot(anglesVVC1,sigVVC1,color='b',linestyle=':')
ax.legend()
217/42:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='L',color='k',linestyle='--')
ax.plot(anglesHVL1,sigHVL1,color='r',linestyle='--')
ax.plot(anglesVVL1,sigVVL1,color='b',linestyle='--')
ax.plot(anglesHHS1,sigHHS1,label='S',color='k',linestyle='-.')
ax.plot(anglesHVS1,sigHVS1,color='r',linestyle='-.')
ax.plot(anglesVVS1,sigVVS1,color='b',linestyle='-.')
ax.plot(anglesHHC1,sigHHC1,label='C',color='k',linestyle=':')
ax.plot(anglesHVC1,sigHVC1,color='r',linestyle=':')
ax.plot(anglesVVC1,sigVVC1,color='b',linestyle=':')
ax.legend()
217/43:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='L',color='k',linestyle='--')
ax.plot(anglesHVL1,sigHVL1,color='k',linestyle='-.')
ax.plot(anglesVVL1,sigVVL1,color='k',linestyle=':')
ax.plot(anglesHHS1,sigHHS1,label='S',color='r',linestyle='--')
ax.plot(anglesHVS1,sigHVS1,color='r',linestyle='-.')
ax.plot(anglesVVS1,sigVVS1,color='r',linestyle=':')
ax.plot(anglesHHC1,sigHHC1,label='C',color='b',linestyle='--')
ax.plot(anglesHVC1,sigHVC1,color='b',linestyle='-.')
ax.plot(anglesVVC1,sigVVC1,color='b',linestyle=':')
ax.legend()
217/44:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='L,HH',color='k',linestyle='--')
ax.plot(anglesHVL1,sigHVL1,color='k',linestyle='-.')
ax.plot(anglesVVL1,sigVVL1,color='k',linestyle=':')
ax.plot(anglesHHS1,sigHHS1,color='r',linestyle='--')
ax.plot(anglesHVS1,sigHVS1,label='S,HV',color='r',linestyle='-.')
ax.plot(anglesVVS1,sigVVS1,color='r',linestyle=':')
ax.plot(anglesHHC1,sigHHC1,color='b',linestyle='--')
ax.plot(anglesHVC1,sigHVC1,color='b',linestyle='-.')
ax.plot(anglesVVC1,sigVVC1,label='C,VV',color='b',linestyle=':')
ax.legend()
217/45:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL5,sigHHL5,label='L,HH',color='k',linestyle='--')
ax.plot(anglesHVL5,sigHVL5,color='k',linestyle='-.')
ax.plot(anglesVVL5,sigVVL5,color='k',linestyle=':')
ax.plot(anglesHHS5,sigHHS5,color='r',linestyle='--')
ax.plot(anglesHVS5,sigHVS5,label='S,HV',color='r',linestyle='-.')
ax.plot(anglesVVS5,sigVVS5,color='r',linestyle=':')
ax.plot(anglesHHC5,sigHHC5,color='b',linestyle='--')
ax.plot(anglesHVC5,sigHVC5,color='b',linestyle='-.')
ax.plot(anglesVVC5,sigVVC5,label='C,VV',color='b',linestyle=':')
ax.legend()
217/46:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL4,sigHHL4,label='L,HH',color='k',linestyle='--')
ax.plot(anglesHVL4,sigHVL4,color='k',linestyle='-.')
ax.plot(anglesVVL4,sigVVL4,color='k',linestyle=':')
ax.plot(anglesHHS4,sigHHS4,color='r',linestyle='--')
ax.plot(anglesHVS4,sigHVS4,label='S,HV',color='r',linestyle='-.')
ax.plot(anglesVVS4,sigVVS4,color='r',linestyle=':')
ax.plot(anglesHHC4,sigHHC4,color='b',linestyle='--')
ax.plot(anglesHVC4,sigHVC4,color='b',linestyle='-.')
ax.plot(anglesVVC4,sigVVC4,label='C,VV',color='b',linestyle=':')
ax.legend()
217/47:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL3,sigHHL3,label='L,HH',color='k',linestyle='--')
ax.plot(anglesHVL3,sigHVL3,color='k',linestyle='-.')
ax.plot(anglesVVL3,sigVVL3,color='k',linestyle=':')
ax.plot(anglesHHS3,sigHHS3,color='r',linestyle='--')
ax.plot(anglesHVS3,sigHVS3,label='S,HV',color='r',linestyle='-.')
ax.plot(anglesVVS3,sigVVS3,color='r',linestyle=':')
ax.plot(anglesHHC3,sigHHC3,color='b',linestyle='--')
ax.plot(anglesHVC3,sigHVC3,color='b',linestyle='-.')
ax.plot(anglesVVC3,sigVVC3,label='C,VV',color='b',linestyle=':')
ax.legend()
217/48:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL2,sigHHL2,label='L,HH',color='k',linestyle='--')
ax.plot(anglesHVL2,sigHVL2,color='k',linestyle='-.')
ax.plot(anglesVVL2,sigVVL2,color='k',linestyle=':')
ax.plot(anglesHHS2,sigHHS2,color='r',linestyle='--')
ax.plot(anglesHVS2,sigHVS2,label='S,HV',color='r',linestyle='-.')
ax.plot(anglesVVS2,sigVVS2,color='r',linestyle=':')
ax.plot(anglesHHC2,sigHHC2,color='b',linestyle='--')
ax.plot(anglesHVC2,sigHVC2,color='b',linestyle='-.')
ax.plot(anglesVVC2,sigVVC2,label='C,VV',color='b',linestyle=':')
ax.legend()
217/49:
#make graphs
#Color is band, linestyle is polarisation

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='L,HH',color='k',linestyle='--')
ax.plot(anglesHVL1,sigHVL1,color='k',linestyle='-.')
ax.plot(anglesVVL1,sigVVL1,color='k',linestyle=':')
ax.plot(anglesHHS1,sigHHS1,color='r',linestyle='--')
ax.plot(anglesHVS1,sigHVS1,label='S,HV',color='r',linestyle='-.')
ax.plot(anglesVVS1,sigVVS1,color='r',linestyle=':')
ax.plot(anglesHHC1,sigHHC1,color='b',linestyle='--')
ax.plot(anglesHVC1,sigHVC1,color='b',linestyle='-.')
ax.plot(anglesVVC1,sigVVC1,label='C,VV',color='b',linestyle=':')
ax.legend()
ax.set_xlim(0,80)
217/50:
#make graphs
#Color is band, linestyle is polarisation

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='L,HH',color='k',linestyle='--')
ax.plot(anglesHVL1,sigHVL1,color='k',linestyle='-.')
ax.plot(anglesVVL1,sigVVL1,color='k',linestyle=':')
ax.plot(anglesHHS1,sigHHS1,color='r',linestyle='--')
ax.plot(anglesHVS1,sigHVS1,label='S,HV',color='r',linestyle='-.')
ax.plot(anglesVVS1,sigVVS1,color='r',linestyle=':')
ax.plot(anglesHHC1,sigHHC1,color='b',linestyle='--')
ax.plot(anglesHVC1,sigHVC1,color='b',linestyle='-.')
ax.plot(anglesVVC1,sigVVC1,label='C,VV',color='b',linestyle=':')
ax.legend()
ax.set_xlim(0,80)
ax.set_ylim(10,-35)
217/51:
#make graphs
#Color is band, linestyle is polarisation

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='L,HH',color='k',linestyle='--')
ax.plot(anglesHVL1,sigHVL1,color='k',linestyle='-.')
ax.plot(anglesVVL1,sigVVL1,color='k',linestyle=':')
ax.plot(anglesHHS1,sigHHS1,color='r',linestyle='--')
ax.plot(anglesHVS1,sigHVS1,label='S,HV',color='r',linestyle='-.')
ax.plot(anglesVVS1,sigVVS1,color='r',linestyle=':')
ax.plot(anglesHHC1,sigHHC1,color='b',linestyle='--')
ax.plot(anglesHVC1,sigHVC1,color='b',linestyle='-.')
ax.plot(anglesVVC1,sigVVC1,label='C,VV',color='b',linestyle=':')
ax.legend()
ax.set_xlim(0,80)
ax.set_ylim(-35,10)
217/52:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL2,sigHHL2,label='L,HH',color='k',linestyle='--')
ax.plot(anglesHVL2,sigHVL2,color='k',linestyle='-.')
ax.plot(anglesVVL2,sigVVL2,color='k',linestyle=':')
ax.plot(anglesHHS2,sigHHS2,color='r',linestyle='--')
ax.plot(anglesHVS2,sigHVS2,label='S,HV',color='r',linestyle='-.')
ax.plot(anglesVVS2,sigVVS2,color='r',linestyle=':')
ax.plot(anglesHHC2,sigHHC2,color='b',linestyle='--')
ax.plot(anglesHVC2,sigHVC2,color='b',linestyle='-.')
ax.plot(anglesVVC2,sigVVC2,label='C,VV',color='b',linestyle=':')
ax.legend()
ax.set_xlim(0,80)
ax.set_ylim(-35,10)
217/53:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL3,sigHHL3,label='L,HH',color='k',linestyle='--')
ax.plot(anglesHVL3,sigHVL3,color='k',linestyle='-.')
ax.plot(anglesVVL3,sigVVL3,color='k',linestyle=':')
ax.plot(anglesHHS3,sigHHS3,color='r',linestyle='--')
ax.plot(anglesHVS3,sigHVS3,label='S,HV',color='r',linestyle='-.')
ax.plot(anglesVVS3,sigVVS3,color='r',linestyle=':')
ax.plot(anglesHHC3,sigHHC3,color='b',linestyle='--')
ax.plot(anglesHVC3,sigHVC3,color='b',linestyle='-.')
ax.plot(anglesVVC3,sigVVC3,label='C,VV',color='b',linestyle=':')
ax.legend()
ax.set_xlim(0,80)
ax.set_ylim(-35,10)
217/54:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL3,sigHHL3,label='L,HH',color='k',linestyle='--')
ax.plot(anglesHVL3,sigHVL3,color='k',linestyle='-.')
ax.plot(anglesVVL3,sigVVL3,color='k',linestyle=':')
ax.plot(anglesHHS3,sigHHS3,color='r',linestyle='--')
ax.plot(anglesHVS3,sigHVS3,label='S,HV',color='r',linestyle='-.')
ax.plot(anglesVVS3,sigVVS3,color='r',linestyle=':')
ax.plot(anglesHHC3,sigHHC3,color='b',linestyle='--')
ax.plot(anglesHVC3,sigHVC3,color='b',linestyle='-.')
ax.plot(anglesVVC3,sigVVC3,label='C,VV',color='b',linestyle=':')
ax.legend()
ax.set_xlim(0,80)
ax.set_ylim(-40,10)
217/55:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL4,sigHHL4,label='L,HH',color='k',linestyle='--')
ax.plot(anglesHVL4,sigHVL4,color='k',linestyle='-.')
ax.plot(anglesVVL4,sigVVL4,color='k',linestyle=':')
ax.plot(anglesHHS4,sigHHS4,color='r',linestyle='--')
ax.plot(anglesHVS4,sigHVS4,label='S,HV',color='r',linestyle='-.')
ax.plot(anglesVVS4,sigVVS4,color='r',linestyle=':')
ax.plot(anglesHHC4,sigHHC4,color='b',linestyle='--')
ax.plot(anglesHVC4,sigHVC4,color='b',linestyle='-.')
ax.plot(anglesVVC4,sigVVC4,label='C,VV',color='b',linestyle=':')
ax.legend()
ax.set_xlim(0,80)
ax.set_ylim(-40,10)
217/56:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL5,sigHHL5,label='L,HH',color='k',linestyle='--')
ax.plot(anglesHVL5,sigHVL5,color='k',linestyle='-.')
ax.plot(anglesVVL5,sigVVL5,color='k',linestyle=':')
ax.plot(anglesHHS5,sigHHS5,color='r',linestyle='--')
ax.plot(anglesHVS5,sigHVS5,label='S,HV',color='r',linestyle='-.')
ax.plot(anglesVVS5,sigVVS5,color='r',linestyle=':')
ax.plot(anglesHHC5,sigHHC5,color='b',linestyle='--')
ax.plot(anglesHVC5,sigHVC5,color='b',linestyle='-.')
ax.plot(anglesVVC5,sigVVC5,label='C,VV',color='b',linestyle=':')
ax.legend()
ax.set_xlim(0,80)
ax.set_ylim(-40,10)
217/57:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL2,sigHHL2,label='L,HH',color='k',linestyle='--')
ax.plot(anglesHVL2,sigHVL2,color='k',linestyle='-.')
ax.plot(anglesVVL2,sigVVL2,color='k',linestyle=':')
ax.plot(anglesHHS2,sigHHS2,color='r',linestyle='--')
ax.plot(anglesHVS2,sigHVS2,label='S,HV',color='r',linestyle='-.')
ax.plot(anglesVVS2,sigVVS2,color='r',linestyle=':')
ax.plot(anglesHHC2,sigHHC2,color='b',linestyle='--')
ax.plot(anglesHVC2,sigHVC2,color='b',linestyle='-.')
ax.plot(anglesVVC2,sigVVC2,label='C,VV',color='b',linestyle=':')
ax.legend()
ax.set_xlim(0,80)
ax.set_ylim(-40,10)
217/58:
#make graphs
#Color is band, linestyle is polarisation

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL1,sigHHL1,label='L,HH',color='k',linestyle='--')
ax.plot(anglesHVL1,sigHVL1,color='k',linestyle='-.')
ax.plot(anglesVVL1,sigVVL1,color='k',linestyle=':')
ax.plot(anglesHHS1,sigHHS1,color='r',linestyle='--')
ax.plot(anglesHVS1,sigHVS1,label='S,HV',color='r',linestyle='-.')
ax.plot(anglesVVS1,sigVVS1,color='r',linestyle=':')
ax.plot(anglesHHC1,sigHHC1,color='b',linestyle='--')
ax.plot(anglesHVC1,sigHVC1,color='b',linestyle='-.')
ax.plot(anglesVVC1,sigVVC1,label='C,VV',color='b',linestyle=':')
ax.legend()
ax.set_xlim(0,80)
ax.set_ylim(-40,10)
217/59:
#make graphs

fig,ax=subplots(dpi=80,figsize=(6,6))

ax.plot(anglesHHL5,sigHHL5,label='L,HH',color='k',linestyle='--')
ax.plot(anglesHVL5,sigHVL5,color='k',linestyle='-.')
ax.plot(anglesVVL5,sigVVL5,color='k',linestyle=':')
ax.plot(anglesHHS5,sigHHS5,color='r',linestyle='--')
ax.plot(anglesHVS5,sigHVS5,label='S,HV',color='r',linestyle='-.')
ax.plot(anglesVVS5,sigVVS5,color='r',linestyle=':')
ax.plot(anglesHHC5,sigHHC5,color='b',linestyle='--')
ax.plot(anglesHVC5,sigHVC5,color='b',linestyle='-.')
ax.plot(anglesVVC5,sigVVC5,label='C,VV',color='b',linestyle=':')
ax.legend()
ax.set_xlim(0,80)
ax.set_ylim(-40,10)
218/1: %matplotlib inline
218/2:
from scipy import *
from matplotlib.pyplot import *
218/3: c_val=1+2j
218/4: print (c_val)
218/5: print (type(c_val))
218/6: print (shape(c_val))
218/7: print (type(c_val))
218/8: print (type(c_val), c_val.real)
218/9: print (type(c_val), c_val.real,c_val.imag)
218/10: print (type(c_val), c_val.real/c_val.imag)
218/11: c_val=1+2*cos(0)*j
218/12: c_val=1+2*cos(0)j
218/13: c_val=1+2*cos(0)*1j
218/14: print (type(c_val), c_val.real/c_val.imag)
218/15:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

###ALBEDO
#0.1 et 0.3
alpha=0.65

###FREQUENCE en bandes L,S,C
#1.23e9,3e9,5.3e9
f=1.23e9

###angle d'incidence
#20,30,40 deg
teta1=30

###TOW, epaisseur optique de la vegetation
tow=linspace(0,1.5,1001)

#donnees entrees
rob=1.33
ros=2.66
C=19./100
SAL=6
T=23
S=17.16/100
eps0=8.854e-12
ewinf=4.9
epss=4.7
teta=teta1*pi/180#angle d'incidence en radian
smv=5# humidite volumique en pour cent
sm=smv/100#humidite volumique 
rugos=1.5 # hauteur de rougosite en cm
#nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


# calcul cte dielectrique DOBSON
#eau saline 

a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

#towpi=2*PI*tow*/
#towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
towpi=2*pi*tow
sigeff=-1.645+1.939*rob-2.256*S+1.594*C
betar=1.275-0.519*S-0.152*C
betai=1.338-0.603*S-0.166*C
l=towpi*f
c=(ew0-ewinf)/(1+l**2)
#epsfw=epsfwr-j*epsfwi
epsfwr=ewinf+c
epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
#epsfwi=valeur absolue de (-epsfwi)
m=epss**alpha
eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
eps1i=(sm**betai)*(epsfwi**alpha)

# cte dielectrique du sol
p=1/alpha
epsr=eps1r**p
epsi=eps1i**p

#MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
#FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

#calcul de reflectivite  fresnel
eps=epsr+epsi*1j
EPS1=eps**0.5
EPS1r=EPS1.real
EPS1i=EPS1.imag
Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
gama1=abs(Z)
gama0=gama1**2
#calcul de reflectivite  fresnel polar H

z1=eps-sin(teta)**2
Z1=z1**0.5
Z1r=Z1.real
Z1i=Z1.imag
gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
gamah=gamah1**2

#calcul de la reflectivite de fresnel polar V
num=eps*cos(teta)-Z1
den=eps*cos(teta)+Z1
gamav1=abs(num/den)
gamav=gamav1**2

#somme gamah+gamav
Somme=gamah+gamav

#calul de la reflectivite de fresnel au nadir

eps=epsr+epsi*1j
EPSn=eps**0.5
EPSnr=EPSn.real
EPSni=EPSn.imag
Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

gaman=abs(Zn) #gama0
gama0=gaman**2

GAMA0=(gama0*3)**(-1)

g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
phi=(2.0*teta/pi)**(GAMA0)
racP=(1.0-phi*exp(-ks))
rap=(((cos(teta))**3)/racP)
sig1vv=g*(rap*Somme)
sig1hh=g*racP*((cos(teta))**3)*Somme
q=0.23*(gama0**0.5)*(1-exp(-ks))
sig1hv=q*sig1vv
SIGVV=(10.)*log10(sig1vv)
SIGHH=(10.)*log10(sig1hh)
SIGHV=(10.)*log10(sig1hv)
218/16: print (SIGVV)
218/17: print (SIGHV)
218/18: print (SIGHH)
218/19: plot(tow, SIGVV)
218/20:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

###ALBEDO
#0.1 et 0.3
alpha=0.65

###FREQUENCE en bandes L,S,C
#1.23e9,3e9,5.3e9
f=1.23e9

###angle d'incidence
#20,30,40 deg
teta1=30

###TOW, epaisseur optique de la vegetation
tow=logspace(0,1.5,1001)

#donnees entrees
rob=1.33
ros=2.66
C=19./100
SAL=6
T=23
S=17.16/100
eps0=8.854e-12
ewinf=4.9
epss=4.7
teta=teta1*pi/180#angle d'incidence en radian
smv=5# humidite volumique en pour cent
sm=smv/100#humidite volumique 
rugos=1.5 # hauteur de rougosite en cm
#nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


# calcul cte dielectrique DOBSON
#eau saline 

a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

#towpi=2*PI*tow*/
#towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
towpi=2*pi*tow
sigeff=-1.645+1.939*rob-2.256*S+1.594*C
betar=1.275-0.519*S-0.152*C
betai=1.338-0.603*S-0.166*C
l=towpi*f
c=(ew0-ewinf)/(1+l**2)
#epsfw=epsfwr-j*epsfwi
epsfwr=ewinf+c
epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
#epsfwi=valeur absolue de (-epsfwi)
m=epss**alpha
eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
eps1i=(sm**betai)*(epsfwi**alpha)

# cte dielectrique du sol
p=1/alpha
epsr=eps1r**p
epsi=eps1i**p

#MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
#FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

#calcul de reflectivite  fresnel
eps=epsr+epsi*1j
EPS1=eps**0.5
EPS1r=EPS1.real
EPS1i=EPS1.imag
Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
gama1=abs(Z)
gama0=gama1**2
#calcul de reflectivite  fresnel polar H

z1=eps-sin(teta)**2
Z1=z1**0.5
Z1r=Z1.real
Z1i=Z1.imag
gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
gamah=gamah1**2

#calcul de la reflectivite de fresnel polar V
num=eps*cos(teta)-Z1
den=eps*cos(teta)+Z1
gamav1=abs(num/den)
gamav=gamav1**2

#somme gamah+gamav
Somme=gamah+gamav

#calul de la reflectivite de fresnel au nadir

eps=epsr+epsi*1j
EPSn=eps**0.5
EPSnr=EPSn.real
EPSni=EPSn.imag
Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

gaman=abs(Zn) #gama0
gama0=gaman**2

GAMA0=(gama0*3)**(-1)

g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
phi=(2.0*teta/pi)**(GAMA0)
racP=(1.0-phi*exp(-ks))
rap=(((cos(teta))**3)/racP)
sig1vv=g*(rap*Somme)
sig1hh=g*racP*((cos(teta))**3)*Somme
q=0.23*(gama0**0.5)*(1-exp(-ks))
sig1hv=q*sig1vv
SIGVV=(10.)*log10(sig1vv)
SIGHH=(10.)*log10(sig1hh)
SIGHV=(10.)*log10(sig1hv)
218/21: plot(tow, SIGVV)
218/22: print(logspace(-inf,0.3,10))
218/23: print(logspace(-1e5,0.3,10))
218/24:
tows=logspace(-1e5,0.3,10)
print(tows)
218/25:
tows=logspace(-1e5,0.3,10)
print(tows[0])
218/26:
tows=logspace(-1e5,0.3,10)
print(tows[1])
218/27:
tows=logspace(-1e5,0.3,10)
print(tows[2])
218/28:
tows=logspace(-1e5,0.3,10)
print(tows[1]-tows[0])
218/29:
tows=logspace(-1e5,0.30000,10)
print(tows[1]-tows[0])
218/30:
tows=logspace(-1e4,0.3,10)
print(tows[1]-tows[0])
218/31:
tows=logspace(-1e4,0.3,10)
print(tows[1]-tows[0])
print (tows)
218/32:
tows=logspace(-1e4,0.2,10)
print(tows[1]-tows[0])
print (tows)
218/33:
tows=logspace(-1e4,0.18,10)
print(tows[1]-tows[0])
print (tows)
218/34:
tows=logspace(-1e4,0.175,10)
print(tows[1]-tows[0])
print (tows)
218/35:
tows=logspace(-1e2,0.175,10)
print(tows[1]-tows[0])
print (tows)
218/36:
tows=logspace(-1,0.175,10)
print(tows[1]-tows[0])
print (tows)
218/37:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

###ALBEDO
#0.1 et 0.3
alpha=0.65

###FREQUENCE en bandes L,S,C
#1.23e9,3e9,5.3e9
f=1.23e9

###angle d'incidence
#20,30,40 deg
teta1=30

###TOW, epaisseur optique de la vegetation
tow=logspace(-1,0.175,10)

#donnees entrees
rob=1.33
ros=2.66
C=19./100
SAL=6
T=23
S=17.16/100
eps0=8.854e-12
ewinf=4.9
epss=4.7
teta=teta1*pi/180#angle d'incidence en radian
smv=5# humidite volumique en pour cent
sm=smv/100#humidite volumique 
rugos=1.5 # hauteur de rougosite en cm
#nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


# calcul cte dielectrique DOBSON
#eau saline 

a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

#towpi=2*PI*tow*/
#towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
towpi=2*pi*tow
sigeff=-1.645+1.939*rob-2.256*S+1.594*C
betar=1.275-0.519*S-0.152*C
betai=1.338-0.603*S-0.166*C
l=towpi*f
c=(ew0-ewinf)/(1+l**2)
#epsfw=epsfwr-j*epsfwi
epsfwr=ewinf+c
epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
#epsfwi=valeur absolue de (-epsfwi)
m=epss**alpha
eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
eps1i=(sm**betai)*(epsfwi**alpha)

# cte dielectrique du sol
p=1/alpha
epsr=eps1r**p
epsi=eps1i**p

#MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
#FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

#calcul de reflectivite  fresnel
eps=epsr+epsi*1j
EPS1=eps**0.5
EPS1r=EPS1.real
EPS1i=EPS1.imag
Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
gama1=abs(Z)
gama0=gama1**2
#calcul de reflectivite  fresnel polar H

z1=eps-sin(teta)**2
Z1=z1**0.5
Z1r=Z1.real
Z1i=Z1.imag
gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
gamah=gamah1**2

#calcul de la reflectivite de fresnel polar V
num=eps*cos(teta)-Z1
den=eps*cos(teta)+Z1
gamav1=abs(num/den)
gamav=gamav1**2

#somme gamah+gamav
Somme=gamah+gamav

#calul de la reflectivite de fresnel au nadir

eps=epsr+epsi*1j
EPSn=eps**0.5
EPSnr=EPSn.real
EPSni=EPSn.imag
Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

gaman=abs(Zn) #gama0
gama0=gaman**2

GAMA0=(gama0*3)**(-1)

g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
phi=(2.0*teta/pi)**(GAMA0)
racP=(1.0-phi*exp(-ks))
rap=(((cos(teta))**3)/racP)
sig1vv=g*(rap*Somme)
sig1hh=g*racP*((cos(teta))**3)*Somme
q=0.23*(gama0**0.5)*(1-exp(-ks))
sig1hv=q*sig1vv
SIGVV=(10.)*log10(sig1vv)
SIGHH=(10.)*log10(sig1hh)
SIGHV=(10.)*log10(sig1hv)
218/38: plot(tow, SIGVV)
218/39: print (SIGHH)
218/40: print (SIGVV)
218/41:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

###ALBEDO
#0.1 et 0.3
alpha=0.65

###FREQUENCE en bandes L,S,C
#1.23e9,3e9,5.3e9
f=1.23e9

###angle d'incidence
#20,30,40 deg
teta1=30

###TOW, epaisseur optique de la vegetation
#tow=logspace(-1,0.175,1001)
tow=linspace(0,1.5,1001)

#donnees entrees
rob=1.33
ros=2.66
C=19./100
SAL=6
T=23
S=17.16/100
eps0=8.854e-12
ewinf=4.9
epss=4.7
teta=teta1*pi/180#angle d'incidence en radian
smv=5# humidite volumique en pour cent
sm=smv/100#humidite volumique 
rugos=1.5 # hauteur de rougosite en cm
#nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


# calcul cte dielectrique DOBSON
#eau saline 

a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

#towpi=2*PI*tow*/
#towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
towpi=2*pi*tow
sigeff=-1.645+1.939*rob-2.256*S+1.594*C
betar=1.275-0.519*S-0.152*C
betai=1.338-0.603*S-0.166*C
l=towpi*f
c=(ew0-ewinf)/(1+l**2)
#epsfw=epsfwr-j*epsfwi
epsfwr=ewinf+c
epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
#epsfwi=valeur absolue de (-epsfwi)
m=epss**alpha
eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
eps1i=(sm**betai)*(epsfwi**alpha)

# cte dielectrique du sol
p=1/alpha
epsr=eps1r**p
epsi=eps1i**p

#MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
#FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

#calcul de reflectivite  fresnel
eps=epsr+epsi*1j
EPS1=eps**0.5
EPS1r=EPS1.real
EPS1i=EPS1.imag
Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
gama1=abs(Z)
gama0=gama1**2
#calcul de reflectivite  fresnel polar H

z1=eps-sin(teta)**2
Z1=z1**0.5
Z1r=Z1.real
Z1i=Z1.imag
gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
gamah=gamah1**2

#calcul de la reflectivite de fresnel polar V
num=eps*cos(teta)-Z1
den=eps*cos(teta)+Z1
gamav1=abs(num/den)
gamav=gamav1**2

#somme gamah+gamav
Somme=gamah+gamav

#calul de la reflectivite de fresnel au nadir

eps=epsr+epsi*1j
EPSn=eps**0.5
EPSnr=EPSn.real
EPSni=EPSn.imag
Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

gaman=abs(Zn) #gama0
gama0=gaman**2

GAMA0=(gama0*3)**(-1)

g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
phi=(2.0*teta/pi)**(GAMA0)
racP=(1.0-phi*exp(-ks))
rap=(((cos(teta))**3)/racP)
sig1vv=g*(rap*Somme)
sig1hh=g*racP*((cos(teta))**3)*Somme
q=0.23*(gama0**0.5)*(1-exp(-ks))
sig1hv=q*sig1vv
SIGVV=(10.)*log10(sig1vv)
SIGHH=(10.)*log10(sig1hh)
SIGHV=(10.)*log10(sig1hv)
218/42: plot(tow, SIGVV)
218/43: print (SIGVV)
218/44:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

###ALBEDO
#0.1 et 0.3
alpha=0.65

###FREQUENCE en bandes L,S,C
#1.23e9,3e9,5.3e9
f=1.23e9

###angle d'incidence
#20,30,40 deg
teta1=30

###TOW, epaisseur optique de la vegetation
tow=logspace(-1,0.175,1001)
#tow=linspace(0,1.5,1001)

#donnees entrees
rob=1.33
ros=2.66
C=19./100
SAL=6
T=23
S=17.16/100
eps0=8.854e-12
ewinf=4.9
epss=4.7
teta=teta1*pi/180#angle d'incidence en radian
smv=5# humidite volumique en pour cent
sm=smv/100#humidite volumique 
rugos=1.5 # hauteur de rougosite en cm
#nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


# calcul cte dielectrique DOBSON
#eau saline 

a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

#towpi=2*PI*tow*/
#towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
towpi=2*pi*tow
sigeff=-1.645+1.939*rob-2.256*S+1.594*C
betar=1.275-0.519*S-0.152*C
betai=1.338-0.603*S-0.166*C
l=towpi*f
c=(ew0-ewinf)/(1+l**2)
#epsfw=epsfwr-j*epsfwi
epsfwr=ewinf+c
epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
#epsfwi=valeur absolue de (-epsfwi)
m=epss**alpha
eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
eps1i=(sm**betai)*(epsfwi**alpha)

# cte dielectrique du sol
p=1/alpha
epsr=eps1r**p
epsi=eps1i**p

#MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
#FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

#calcul de reflectivite  fresnel
eps=epsr+epsi*1j
EPS1=eps**0.5
EPS1r=EPS1.real
EPS1i=EPS1.imag
Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
gama1=abs(Z)
gama0=gama1**2
#calcul de reflectivite  fresnel polar H

z1=eps-sin(teta)**2
Z1=z1**0.5
Z1r=Z1.real
Z1i=Z1.imag
gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
gamah=gamah1**2

#calcul de la reflectivite de fresnel polar V
num=eps*cos(teta)-Z1
den=eps*cos(teta)+Z1
gamav1=abs(num/den)
gamav=gamav1**2

#somme gamah+gamav
Somme=gamah+gamav

#calul de la reflectivite de fresnel au nadir

eps=epsr+epsi*1j
EPSn=eps**0.5
EPSnr=EPSn.real
EPSni=EPSn.imag
Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

gaman=abs(Zn) #gama0
gama0=gaman**2

GAMA0=(gama0*3)**(-1)

g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
phi=(2.0*teta/pi)**(GAMA0)
racP=(1.0-phi*exp(-ks))
rap=(((cos(teta))**3)/racP)
sig1vv=g*(rap*Somme)
sig1hh=g*racP*((cos(teta))**3)*Somme
q=0.23*(gama0**0.5)*(1-exp(-ks))
sig1hv=q*sig1vv
SIGVV=(10.)*log10(sig1vv)
SIGHH=(10.)*log10(sig1hh)
SIGHV=(10.)*log10(sig1hv)
218/45: plot(tow, SIGVV)
218/46: print (SIGVV)
218/47:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

###ALBEDO
#0.1 et 0.3
alpha=0.65

###FREQUENCE en bandes L,S,C
#1.23e9,3e9,5.3e9
f=1.23e9

###angle d'incidence
#20,30,40 deg
teta1=30

###TOW, epaisseur optique de la vegetation
tow=logspace(-0.5,0.175,1001)
#tow=linspace(0,1.5,1001)

#donnees entrees
rob=1.33
ros=2.66
C=19./100
SAL=6
T=23
S=17.16/100
eps0=8.854e-12
ewinf=4.9
epss=4.7
teta=teta1*pi/180#angle d'incidence en radian
smv=5# humidite volumique en pour cent
sm=smv/100#humidite volumique 
rugos=1.5 # hauteur de rougosite en cm
#nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


# calcul cte dielectrique DOBSON
#eau saline 

a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

#towpi=2*PI*tow*/
#towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
towpi=2*pi*tow
sigeff=-1.645+1.939*rob-2.256*S+1.594*C
betar=1.275-0.519*S-0.152*C
betai=1.338-0.603*S-0.166*C
l=towpi*f
c=(ew0-ewinf)/(1+l**2)
#epsfw=epsfwr-j*epsfwi
epsfwr=ewinf+c
epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
#epsfwi=valeur absolue de (-epsfwi)
m=epss**alpha
eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
eps1i=(sm**betai)*(epsfwi**alpha)

# cte dielectrique du sol
p=1/alpha
epsr=eps1r**p
epsi=eps1i**p

#MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
#FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

#calcul de reflectivite  fresnel
eps=epsr+epsi*1j
EPS1=eps**0.5
EPS1r=EPS1.real
EPS1i=EPS1.imag
Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
gama1=abs(Z)
gama0=gama1**2
#calcul de reflectivite  fresnel polar H

z1=eps-sin(teta)**2
Z1=z1**0.5
Z1r=Z1.real
Z1i=Z1.imag
gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
gamah=gamah1**2

#calcul de la reflectivite de fresnel polar V
num=eps*cos(teta)-Z1
den=eps*cos(teta)+Z1
gamav1=abs(num/den)
gamav=gamav1**2

#somme gamah+gamav
Somme=gamah+gamav

#calul de la reflectivite de fresnel au nadir

eps=epsr+epsi*1j
EPSn=eps**0.5
EPSnr=EPSn.real
EPSni=EPSn.imag
Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

gaman=abs(Zn) #gama0
gama0=gaman**2

GAMA0=(gama0*3)**(-1)

g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
phi=(2.0*teta/pi)**(GAMA0)
racP=(1.0-phi*exp(-ks))
rap=(((cos(teta))**3)/racP)
sig1vv=g*(rap*Somme)
sig1hh=g*racP*((cos(teta))**3)*Somme
q=0.23*(gama0**0.5)*(1-exp(-ks))
sig1hv=q*sig1vv
SIGVV=(10.)*log10(sig1vv)
SIGHH=(10.)*log10(sig1hh)
SIGHV=(10.)*log10(sig1hv)
218/48: plot(tow, SIGVV)
218/49: print (SIGVV)
218/50:
print (SIGVV)
print (tow)
218/51:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

###ALBEDO
#0.1 et 0.3
alpha=0.65

###FREQUENCE en bandes L,S,C
#1.23e9,3e9,5.3e9
f=1.23e9

###angle d'incidence
#20,30,40 deg
teta1=30

###TOW, epaisseur optique de la vegetation
tow=logspace(-2,0.175,1001)
#tow=linspace(0,1.5,1001)

#donnees entrees
rob=1.33
ros=2.66
C=19./100
SAL=6
T=23
S=17.16/100
eps0=8.854e-12
ewinf=4.9
epss=4.7
teta=teta1*pi/180#angle d'incidence en radian
smv=5# humidite volumique en pour cent
sm=smv/100#humidite volumique 
rugos=1.5 # hauteur de rougosite en cm
#nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


# calcul cte dielectrique DOBSON
#eau saline 

a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

#towpi=2*PI*tow*/
#towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
towpi=2*pi*tow
sigeff=-1.645+1.939*rob-2.256*S+1.594*C
betar=1.275-0.519*S-0.152*C
betai=1.338-0.603*S-0.166*C
l=towpi*f
c=(ew0-ewinf)/(1+l**2)
#epsfw=epsfwr-j*epsfwi
epsfwr=ewinf+c
epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
#epsfwi=valeur absolue de (-epsfwi)
m=epss**alpha
eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
eps1i=(sm**betai)*(epsfwi**alpha)

# cte dielectrique du sol
p=1/alpha
epsr=eps1r**p
epsi=eps1i**p

#MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
#FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

#calcul de reflectivite  fresnel
eps=epsr+epsi*1j
EPS1=eps**0.5
EPS1r=EPS1.real
EPS1i=EPS1.imag
Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
gama1=abs(Z)
gama0=gama1**2
#calcul de reflectivite  fresnel polar H

z1=eps-sin(teta)**2
Z1=z1**0.5
Z1r=Z1.real
Z1i=Z1.imag
gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
gamah=gamah1**2

#calcul de la reflectivite de fresnel polar V
num=eps*cos(teta)-Z1
den=eps*cos(teta)+Z1
gamav1=abs(num/den)
gamav=gamav1**2

#somme gamah+gamav
Somme=gamah+gamav

#calul de la reflectivite de fresnel au nadir

eps=epsr+epsi*1j
EPSn=eps**0.5
EPSnr=EPSn.real
EPSni=EPSn.imag
Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

gaman=abs(Zn) #gama0
gama0=gaman**2

GAMA0=(gama0*3)**(-1)

g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
phi=(2.0*teta/pi)**(GAMA0)
racP=(1.0-phi*exp(-ks))
rap=(((cos(teta))**3)/racP)
sig1vv=g*(rap*Somme)
sig1hh=g*racP*((cos(teta))**3)*Somme
q=0.23*(gama0**0.5)*(1-exp(-ks))
sig1hv=q*sig1vv
SIGVV=(10.)*log10(sig1vv)
SIGHH=(10.)*log10(sig1hh)
SIGHV=(10.)*log10(sig1hv)
218/52: plot(tow, SIGVV)
218/53:
plot(tow, SIGVV)
ylim(-23,-19)
218/54:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

###ALBEDO
#0.1 et 0.3
alpha=0.65

###FREQUENCE en bandes L,S,C
#1.23e9,3e9,5.3e9
f=1.23e9

###angle d'incidence
#20,30,40 deg
teta1=30

###TOW, epaisseur optique de la vegetation
tow=logspace(-4,0.175,1001)
#tow=linspace(0,1.5,1001)

#donnees entrees
rob=1.33
ros=2.66
C=19./100
SAL=6
T=23
S=17.16/100
eps0=8.854e-12
ewinf=4.9
epss=4.7
teta=teta1*pi/180#angle d'incidence en radian
smv=5# humidite volumique en pour cent
sm=smv/100#humidite volumique 
rugos=1.5 # hauteur de rougosite en cm
#nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


# calcul cte dielectrique DOBSON
#eau saline 

a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

#towpi=2*PI*tow*/
#towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
towpi=2*pi*tow
sigeff=-1.645+1.939*rob-2.256*S+1.594*C
betar=1.275-0.519*S-0.152*C
betai=1.338-0.603*S-0.166*C
l=towpi*f
c=(ew0-ewinf)/(1+l**2)
#epsfw=epsfwr-j*epsfwi
epsfwr=ewinf+c
epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
#epsfwi=valeur absolue de (-epsfwi)
m=epss**alpha
eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
eps1i=(sm**betai)*(epsfwi**alpha)

# cte dielectrique du sol
p=1/alpha
epsr=eps1r**p
epsi=eps1i**p

#MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
#FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

#calcul de reflectivite  fresnel
eps=epsr+epsi*1j
EPS1=eps**0.5
EPS1r=EPS1.real
EPS1i=EPS1.imag
Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
gama1=abs(Z)
gama0=gama1**2
#calcul de reflectivite  fresnel polar H

z1=eps-sin(teta)**2
Z1=z1**0.5
Z1r=Z1.real
Z1i=Z1.imag
gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
gamah=gamah1**2

#calcul de la reflectivite de fresnel polar V
num=eps*cos(teta)-Z1
den=eps*cos(teta)+Z1
gamav1=abs(num/den)
gamav=gamav1**2

#somme gamah+gamav
Somme=gamah+gamav

#calul de la reflectivite de fresnel au nadir

eps=epsr+epsi*1j
EPSn=eps**0.5
EPSnr=EPSn.real
EPSni=EPSn.imag
Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

gaman=abs(Zn) #gama0
gama0=gaman**2

GAMA0=(gama0*3)**(-1)

g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
phi=(2.0*teta/pi)**(GAMA0)
racP=(1.0-phi*exp(-ks))
rap=(((cos(teta))**3)/racP)
sig1vv=g*(rap*Somme)
sig1hh=g*racP*((cos(teta))**3)*Somme
q=0.23*(gama0**0.5)*(1-exp(-ks))
sig1hv=q*sig1vv
SIGVV=(10.)*log10(sig1vv)
SIGHH=(10.)*log10(sig1hh)
SIGHV=(10.)*log10(sig1hv)
218/55:
plot(tow, SIGVV)
ylim(-23,-19)
218/56:
print (SIGVV)
print (tow)
218/57:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

###ALBEDO
#0.1 et 0.3
alpha=0.65

###FREQUENCE en bandes L,S,C
#1.23e9,3e9,5.3e9
f=1.23e9

###angle d'incidence
#20,30,40 deg
teta1=30

###TOW, epaisseur optique de la vegetation
tow=logspace(-4,-3,1001)
#tow=linspace(0,1.5,1001)

#donnees entrees
rob=1.33
ros=2.66
C=19./100
SAL=6
T=23
S=17.16/100
eps0=8.854e-12
ewinf=4.9
epss=4.7
teta=teta1*pi/180#angle d'incidence en radian
smv=5# humidite volumique en pour cent
sm=smv/100#humidite volumique 
rugos=1.5 # hauteur de rougosite en cm
#nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


# calcul cte dielectrique DOBSON
#eau saline 

a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

#towpi=2*PI*tow*/
#towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
towpi=2*pi*tow
sigeff=-1.645+1.939*rob-2.256*S+1.594*C
betar=1.275-0.519*S-0.152*C
betai=1.338-0.603*S-0.166*C
l=towpi*f
c=(ew0-ewinf)/(1+l**2)
#epsfw=epsfwr-j*epsfwi
epsfwr=ewinf+c
epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
#epsfwi=valeur absolue de (-epsfwi)
m=epss**alpha
eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
eps1i=(sm**betai)*(epsfwi**alpha)

# cte dielectrique du sol
p=1/alpha
epsr=eps1r**p
epsi=eps1i**p

#MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
#FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

#calcul de reflectivite  fresnel
eps=epsr+epsi*1j
EPS1=eps**0.5
EPS1r=EPS1.real
EPS1i=EPS1.imag
Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
gama1=abs(Z)
gama0=gama1**2
#calcul de reflectivite  fresnel polar H

z1=eps-sin(teta)**2
Z1=z1**0.5
Z1r=Z1.real
Z1i=Z1.imag
gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
gamah=gamah1**2

#calcul de la reflectivite de fresnel polar V
num=eps*cos(teta)-Z1
den=eps*cos(teta)+Z1
gamav1=abs(num/den)
gamav=gamav1**2

#somme gamah+gamav
Somme=gamah+gamav

#calul de la reflectivite de fresnel au nadir

eps=epsr+epsi*1j
EPSn=eps**0.5
EPSnr=EPSn.real
EPSni=EPSn.imag
Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

gaman=abs(Zn) #gama0
gama0=gaman**2

GAMA0=(gama0*3)**(-1)

g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
phi=(2.0*teta/pi)**(GAMA0)
racP=(1.0-phi*exp(-ks))
rap=(((cos(teta))**3)/racP)
sig1vv=g*(rap*Somme)
sig1hh=g*racP*((cos(teta))**3)*Somme
q=0.23*(gama0**0.5)*(1-exp(-ks))
sig1hv=q*sig1vv
SIGVV=(10.)*log10(sig1vv)
SIGHH=(10.)*log10(sig1hh)
SIGHV=(10.)*log10(sig1hv)
218/58:
plot(tow, SIGVV)
ylim(-23,-19)
218/59:
print (SIGVV)
print (tow)
218/60:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

###ALBEDO
#0.1 et 0.3
alpha=0.65

###FREQUENCE en bandes L,S,C
#1.23e9,3e9,5.3e9
f=1.23e9

###angle d'incidence
#20,30,40 deg
teta1=30

###TOW, epaisseur optique de la vegetation
tow=logspace(-4,1,1001)
#tow=linspace(0,1.5,1001)

#donnees entrees
rob=1.33
ros=2.66
C=19./100
SAL=6
T=23
S=17.16/100
eps0=8.854e-12
ewinf=4.9
epss=4.7
teta=teta1*pi/180#angle d'incidence en radian
smv=5# humidite volumique en pour cent
sm=smv/100#humidite volumique 
rugos=1.5 # hauteur de rougosite en cm
#nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


# calcul cte dielectrique DOBSON
#eau saline 

a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

#towpi=2*PI*tow*/
#towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
towpi=2*pi*tow
sigeff=-1.645+1.939*rob-2.256*S+1.594*C
betar=1.275-0.519*S-0.152*C
betai=1.338-0.603*S-0.166*C
l=towpi*f
c=(ew0-ewinf)/(1+l**2)
#epsfw=epsfwr-j*epsfwi
epsfwr=ewinf+c
epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
#epsfwi=valeur absolue de (-epsfwi)
m=epss**alpha
eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
eps1i=(sm**betai)*(epsfwi**alpha)

# cte dielectrique du sol
p=1/alpha
epsr=eps1r**p
epsi=eps1i**p

#MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
#FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

#calcul de reflectivite  fresnel
eps=epsr+epsi*1j
EPS1=eps**0.5
EPS1r=EPS1.real
EPS1i=EPS1.imag
Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
gama1=abs(Z)
gama0=gama1**2
#calcul de reflectivite  fresnel polar H

z1=eps-sin(teta)**2
Z1=z1**0.5
Z1r=Z1.real
Z1i=Z1.imag
gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
gamah=gamah1**2

#calcul de la reflectivite de fresnel polar V
num=eps*cos(teta)-Z1
den=eps*cos(teta)+Z1
gamav1=abs(num/den)
gamav=gamav1**2

#somme gamah+gamav
Somme=gamah+gamav

#calul de la reflectivite de fresnel au nadir

eps=epsr+epsi*1j
EPSn=eps**0.5
EPSnr=EPSn.real
EPSni=EPSn.imag
Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

gaman=abs(Zn) #gama0
gama0=gaman**2

GAMA0=(gama0*3)**(-1)

g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
phi=(2.0*teta/pi)**(GAMA0)
racP=(1.0-phi*exp(-ks))
rap=(((cos(teta))**3)/racP)
sig1vv=g*(rap*Somme)
sig1hh=g*racP*((cos(teta))**3)*Somme
q=0.23*(gama0**0.5)*(1-exp(-ks))
sig1hv=q*sig1vv
SIGVV=(10.)*log10(sig1vv)
SIGHH=(10.)*log10(sig1hh)
SIGHV=(10.)*log10(sig1hv)
218/61:
plot(tow, SIGVV)
ylim(-23,-19)
218/62:
print (SIGVV)
print (tow)
218/63:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

###ALBEDO
#0.1 et 0.3
alpha=0.65

###FREQUENCE en bandes L,S,C
#1.23e9,3e9,5.3e9
f=1.23e9

###angle d'incidence
#20,30,40 deg
teta1=30

###TOW, epaisseur optique de la vegetation
tow=logspace(-8,1,1001)
#tow=linspace(0,1.5,1001)

#donnees entrees
rob=1.33
ros=2.66
C=19./100
SAL=6
T=23
S=17.16/100
eps0=8.854e-12
ewinf=4.9
epss=4.7
teta=teta1*pi/180#angle d'incidence en radian
smv=5# humidite volumique en pour cent
sm=smv/100#humidite volumique 
rugos=1.5 # hauteur de rougosite en cm
#nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


# calcul cte dielectrique DOBSON
#eau saline 

a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

#towpi=2*PI*tow*/
#towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
towpi=2*pi*tow
sigeff=-1.645+1.939*rob-2.256*S+1.594*C
betar=1.275-0.519*S-0.152*C
betai=1.338-0.603*S-0.166*C
l=towpi*f
c=(ew0-ewinf)/(1+l**2)
#epsfw=epsfwr-j*epsfwi
epsfwr=ewinf+c
epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
#epsfwi=valeur absolue de (-epsfwi)
m=epss**alpha
eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
eps1i=(sm**betai)*(epsfwi**alpha)

# cte dielectrique du sol
p=1/alpha
epsr=eps1r**p
epsi=eps1i**p

#MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
#FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

#calcul de reflectivite  fresnel
eps=epsr+epsi*1j
EPS1=eps**0.5
EPS1r=EPS1.real
EPS1i=EPS1.imag
Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
gama1=abs(Z)
gama0=gama1**2
#calcul de reflectivite  fresnel polar H

z1=eps-sin(teta)**2
Z1=z1**0.5
Z1r=Z1.real
Z1i=Z1.imag
gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
gamah=gamah1**2

#calcul de la reflectivite de fresnel polar V
num=eps*cos(teta)-Z1
den=eps*cos(teta)+Z1
gamav1=abs(num/den)
gamav=gamav1**2

#somme gamah+gamav
Somme=gamah+gamav

#calul de la reflectivite de fresnel au nadir

eps=epsr+epsi*1j
EPSn=eps**0.5
EPSnr=EPSn.real
EPSni=EPSn.imag
Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

gaman=abs(Zn) #gama0
gama0=gaman**2

GAMA0=(gama0*3)**(-1)

g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
phi=(2.0*teta/pi)**(GAMA0)
racP=(1.0-phi*exp(-ks))
rap=(((cos(teta))**3)/racP)
sig1vv=g*(rap*Somme)
sig1hh=g*racP*((cos(teta))**3)*Somme
q=0.23*(gama0**0.5)*(1-exp(-ks))
sig1hv=q*sig1vv
SIGVV=(10.)*log10(sig1vv)
SIGHH=(10.)*log10(sig1hh)
SIGHV=(10.)*log10(sig1hv)
218/64:
plot(tow, SIGVV)
ylim(-23,-19)
218/65:
print (SIGVV)
print (tow)
218/66:
print (SIGHV)
print (tow)
218/67:
print (SIGHH)
print (tow)
218/68:
print (SIGVV)
print (tow)
218/69:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

###ALBEDO
#0.1 et 0.3
alpha=0.65

###FREQUENCE en bandes L,S,C
#1.23e9,3e9,5.3e9
f=3e9

###angle d'incidence
#20,30,40 deg
teta1=30

###TOW, epaisseur optique de la vegetation
tow=logspace(-8,1,1001)
#tow=linspace(0,1.5,1001)

#donnees entrees
rob=1.33
ros=2.66
C=19./100
SAL=6
T=23
S=17.16/100
eps0=8.854e-12
ewinf=4.9
epss=4.7
teta=teta1*pi/180#angle d'incidence en radian
smv=5# humidite volumique en pour cent
sm=smv/100#humidite volumique 
rugos=1.5 # hauteur de rougosite en cm
#nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


# calcul cte dielectrique DOBSON
#eau saline 

a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

#towpi=2*PI*tow*/
#towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
towpi=2*pi*tow
sigeff=-1.645+1.939*rob-2.256*S+1.594*C
betar=1.275-0.519*S-0.152*C
betai=1.338-0.603*S-0.166*C
l=towpi*f
c=(ew0-ewinf)/(1+l**2)
#epsfw=epsfwr-j*epsfwi
epsfwr=ewinf+c
epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
#epsfwi=valeur absolue de (-epsfwi)
m=epss**alpha
eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
eps1i=(sm**betai)*(epsfwi**alpha)

# cte dielectrique du sol
p=1/alpha
epsr=eps1r**p
epsi=eps1i**p

#MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
#FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

#calcul de reflectivite  fresnel
eps=epsr+epsi*1j
EPS1=eps**0.5
EPS1r=EPS1.real
EPS1i=EPS1.imag
Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
gama1=abs(Z)
gama0=gama1**2
#calcul de reflectivite  fresnel polar H

z1=eps-sin(teta)**2
Z1=z1**0.5
Z1r=Z1.real
Z1i=Z1.imag
gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
gamah=gamah1**2

#calcul de la reflectivite de fresnel polar V
num=eps*cos(teta)-Z1
den=eps*cos(teta)+Z1
gamav1=abs(num/den)
gamav=gamav1**2

#somme gamah+gamav
Somme=gamah+gamav

#calul de la reflectivite de fresnel au nadir

eps=epsr+epsi*1j
EPSn=eps**0.5
EPSnr=EPSn.real
EPSni=EPSn.imag
Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

gaman=abs(Zn) #gama0
gama0=gaman**2

GAMA0=(gama0*3)**(-1)

g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
phi=(2.0*teta/pi)**(GAMA0)
racP=(1.0-phi*exp(-ks))
rap=(((cos(teta))**3)/racP)
sig1vv=g*(rap*Somme)
sig1hh=g*racP*((cos(teta))**3)*Somme
q=0.23*(gama0**0.5)*(1-exp(-ks))
sig1hv=q*sig1vv
SIGVV=(10.)*log10(sig1vv)
SIGHH=(10.)*log10(sig1hh)
SIGHV=(10.)*log10(sig1hv)
218/70:
plot(tow, SIGVV)
ylim(-23,-19)
218/71:
plot(tow, SIGVV)
#ylim(-23,-19)
218/72:
print (SIGVV)
print (tow)
218/73:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

###ALBEDO
#0.1 et 0.3
alpha=0.65

###FREQUENCE en bandes L,S,C
#1.23e9,3e9,5.3e9
f=3e9

###angle d'incidence
#20,30,40 deg
teta1=30

###TOW, epaisseur optique de la vegetation
tow=logspace(-8,0.175,1001)
#tow=linspace(0,1.5,1001)

#donnees entrees
rob=1.33
ros=2.66
C=19./100
SAL=6
T=23
S=17.16/100
eps0=8.854e-12
ewinf=4.9
epss=4.7
teta=teta1*pi/180#angle d'incidence en radian
smv=5# humidite volumique en pour cent
sm=smv/100#humidite volumique 
rugos=1.5 # hauteur de rougosite en cm
#nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


# calcul cte dielectrique DOBSON
#eau saline 

a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

#towpi=2*PI*tow*/
#towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
towpi=2*pi*tow
sigeff=-1.645+1.939*rob-2.256*S+1.594*C
betar=1.275-0.519*S-0.152*C
betai=1.338-0.603*S-0.166*C
l=towpi*f
c=(ew0-ewinf)/(1+l**2)
#epsfw=epsfwr-j*epsfwi
epsfwr=ewinf+c
epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
#epsfwi=valeur absolue de (-epsfwi)
m=epss**alpha
eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
eps1i=(sm**betai)*(epsfwi**alpha)

# cte dielectrique du sol
p=1/alpha
epsr=eps1r**p
epsi=eps1i**p

#MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
#FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

#calcul de reflectivite  fresnel
eps=epsr+epsi*1j
EPS1=eps**0.5
EPS1r=EPS1.real
EPS1i=EPS1.imag
Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
gama1=abs(Z)
gama0=gama1**2
#calcul de reflectivite  fresnel polar H

z1=eps-sin(teta)**2
Z1=z1**0.5
Z1r=Z1.real
Z1i=Z1.imag
gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
gamah=gamah1**2

#calcul de la reflectivite de fresnel polar V
num=eps*cos(teta)-Z1
den=eps*cos(teta)+Z1
gamav1=abs(num/den)
gamav=gamav1**2

#somme gamah+gamav
Somme=gamah+gamav

#calul de la reflectivite de fresnel au nadir

eps=epsr+epsi*1j
EPSn=eps**0.5
EPSnr=EPSn.real
EPSni=EPSn.imag
Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

gaman=abs(Zn) #gama0
gama0=gaman**2

GAMA0=(gama0*3)**(-1)

g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
phi=(2.0*teta/pi)**(GAMA0)
racP=(1.0-phi*exp(-ks))
rap=(((cos(teta))**3)/racP)
sig1vv=g*(rap*Somme)
sig1hh=g*racP*((cos(teta))**3)*Somme
q=0.23*(gama0**0.5)*(1-exp(-ks))
sig1hv=q*sig1vv
SIGVV=(10.)*log10(sig1vv)
SIGHH=(10.)*log10(sig1hh)
SIGHV=(10.)*log10(sig1hv)
218/74:
plot(tow, SIGVV)
#ylim(-23,-19)
218/75:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

###ALBEDO
#0.1 et 0.3
alpha=0.65

###FREQUENCE en bandes L,S,C
#1.23e9,3e9,5.3e9
f=3e9

###angle d'incidence
#20,30,40 deg
teta1=30

###tau=TOW, epaisseur optique de la vegetation
#tow=logspace(-8,0.175,1001)
tow=linspace(0,1.5,1001)

#donnees entrees
rob=1.33
ros=2.66
C=19./100
SAL=6
T=23
S=17.16/100
eps0=8.854e-12
ewinf=4.9
epss=4.7
teta=teta1*pi/180#angle d'incidence en radian
smv=5# humidite volumique en pour cent
sm=smv/100#humidite volumique 
rugos=1.5 # hauteur de rougosite en cm
#nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


# calcul cte dielectrique DOBSON
#eau saline 

a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

#towpi=2*PI*tow*/
#towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
towpi=2*pi*tow
sigeff=-1.645+1.939*rob-2.256*S+1.594*C
betar=1.275-0.519*S-0.152*C
betai=1.338-0.603*S-0.166*C
l=towpi*f
c=(ew0-ewinf)/(1+l**2)
#epsfw=epsfwr-j*epsfwi
epsfwr=ewinf+c
epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
#epsfwi=valeur absolue de (-epsfwi)
m=epss**alpha
eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
eps1i=(sm**betai)*(epsfwi**alpha)

# cte dielectrique du sol
p=1/alpha
epsr=eps1r**p
epsi=eps1i**p

#MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
#FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

#calcul de reflectivite  fresnel
eps=epsr+epsi*1j
EPS1=eps**0.5
EPS1r=EPS1.real
EPS1i=EPS1.imag
Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
gama1=abs(Z)
gama0=gama1**2

#calcul de reflectivite  fresnel polar H
z1=eps-sin(teta)**2
Z1=z1**0.5
Z1r=Z1.real
Z1i=Z1.imag
gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
gamah=gamah1**2

#calcul de la reflectivite de fresnel polar V
num=eps*cos(teta)-Z1
den=eps*cos(teta)+Z1
gamav1=abs(num/den)
gamav=gamav1**2

#somme gamah+gamav
Somme=gamah+gamav

#calul de la reflectivite de fresnel au nadir

EPSn=eps**0.5
EPSnr=EPSn.real
EPSni=EPSn.imag
Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

gaman=abs(Zn) 

#gama0
gama0=gaman**2

GAMA0=(gama0*3)**(-1)

g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
phi=(2.0*teta/pi)**(GAMA0)
racP=(1.0-phi*exp(-ks))
rap=(((cos(teta))**3)/racP)
sig1vv=g*(rap*Somme)
sig1hh=g*racP*((cos(teta))**3)*Somme
q=0.23*(gama0**0.5)*(1-exp(-ks))
sig1hv=q*sig1vv
SIGVV=(10.)*log10(sig1vv)
SIGHH=(10.)*log10(sig1hh)
SIGHV=(10.)*log10(sig1hv)
218/76:
plot(tow, sig1vv)
#ylim(-23,-19)
218/77:
#db plot
plot(tow, sig1vv)
#ylim(-23,-19)
218/78:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

###ALBEDO
#0.1 et 0.3
alpha=0.65

###FREQUENCE en bandes L,S,C
#1.23e9,3e9,5.3e9
f=3e9

###angle d'incidence
#20,30,40 deg
teta1=30

###tau=TOW, epaisseur optique de la vegetation
tow=logspace(-8,0.175,1001)
#tow=linspace(0,1.5,1001)

#donnees entrees
rob=1.33
ros=2.66
C=19./100
SAL=6
T=23
S=17.16/100
eps0=8.854e-12
ewinf=4.9
epss=4.7
teta=teta1*pi/180#angle d'incidence en radian
smv=5# humidite volumique en pour cent
sm=smv/100#humidite volumique 
rugos=1.5 # hauteur de rougosite en cm
#nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


# calcul cte dielectrique DOBSON
#eau saline 

a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

#towpi=2*PI*tow*/
#towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
towpi=2*pi*tow
sigeff=-1.645+1.939*rob-2.256*S+1.594*C
betar=1.275-0.519*S-0.152*C
betai=1.338-0.603*S-0.166*C
l=towpi*f
c=(ew0-ewinf)/(1+l**2)
#epsfw=epsfwr-j*epsfwi
epsfwr=ewinf+c
epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
#epsfwi=valeur absolue de (-epsfwi)
m=epss**alpha
eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
eps1i=(sm**betai)*(epsfwi**alpha)

# cte dielectrique du sol
p=1/alpha
epsr=eps1r**p
epsi=eps1i**p

#MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
#FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

#calcul de reflectivite  fresnel
eps=epsr+epsi*1j
EPS1=eps**0.5
EPS1r=EPS1.real
EPS1i=EPS1.imag
Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
gama1=abs(Z)
gama0=gama1**2

#calcul de reflectivite  fresnel polar H
z1=eps-sin(teta)**2
Z1=z1**0.5
Z1r=Z1.real
Z1i=Z1.imag
gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
gamah=gamah1**2

#calcul de la reflectivite de fresnel polar V
num=eps*cos(teta)-Z1
den=eps*cos(teta)+Z1
gamav1=abs(num/den)
gamav=gamav1**2

#somme gamah+gamav
Somme=gamah+gamav

#calul de la reflectivite de fresnel au nadir

EPSn=eps**0.5
EPSnr=EPSn.real
EPSni=EPSn.imag
Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

gaman=abs(Zn) 

#gama0
gama0=gaman**2

GAMA0=(gama0*3)**(-1)

g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
phi=(2.0*teta/pi)**(GAMA0)
racP=(1.0-phi*exp(-ks))
rap=(((cos(teta))**3)/racP)
sig1vv=g*(rap*Somme)
sig1hh=g*racP*((cos(teta))**3)*Somme
q=0.23*(gama0**0.5)*(1-exp(-ks))
sig1hv=q*sig1vv
SIGVV=(10.)*log10(sig1vv)
SIGHH=(10.)*log10(sig1hh)
SIGHV=(10.)*log10(sig1hv)
218/79:
#db plot
plot(tow, sig1vv)
#ylim(-23,-19)
218/80:
print (SIGVV, sig1vv)
print (tow)
218/81:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

###ALBEDO
#0.1 et 0.3
alpha=0.65

###FREQUENCE en bandes L,S,C
#1.23e9,3e9,5.3e9
f=3e9

###angle d'incidence
#20,30,40 deg
teta1=30

###tau=TOW, epaisseur optique de la vegetation
tow=logspace(log(1e-5),log(1.5),1001)
#tow=linspace(0,1.5,1001)

#donnees entrees
rob=1.33
ros=2.66
C=19./100
SAL=6
T=23
S=17.16/100
eps0=8.854e-12
ewinf=4.9
epss=4.7
teta=teta1*pi/180#angle d'incidence en radian
smv=5# humidite volumique en pour cent
sm=smv/100#humidite volumique 
rugos=1.5 # hauteur de rougosite en cm
#nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


# calcul cte dielectrique DOBSON
#eau saline 

a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

#towpi=2*PI*tow*/
#towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
towpi=2*pi*tow
sigeff=-1.645+1.939*rob-2.256*S+1.594*C
betar=1.275-0.519*S-0.152*C
betai=1.338-0.603*S-0.166*C
l=towpi*f
c=(ew0-ewinf)/(1+l**2)
#epsfw=epsfwr-j*epsfwi
epsfwr=ewinf+c
epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
#epsfwi=valeur absolue de (-epsfwi)
m=epss**alpha
eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
eps1i=(sm**betai)*(epsfwi**alpha)

# cte dielectrique du sol
p=1/alpha
epsr=eps1r**p
epsi=eps1i**p

#MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
#FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

#calcul de reflectivite  fresnel
eps=epsr+epsi*1j
EPS1=eps**0.5
EPS1r=EPS1.real
EPS1i=EPS1.imag
Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
gama1=abs(Z)
gama0=gama1**2

#calcul de reflectivite  fresnel polar H
z1=eps-sin(teta)**2
Z1=z1**0.5
Z1r=Z1.real
Z1i=Z1.imag
gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
gamah=gamah1**2

#calcul de la reflectivite de fresnel polar V
num=eps*cos(teta)-Z1
den=eps*cos(teta)+Z1
gamav1=abs(num/den)
gamav=gamav1**2

#somme gamah+gamav
Somme=gamah+gamav

#calul de la reflectivite de fresnel au nadir

EPSn=eps**0.5
EPSnr=EPSn.real
EPSni=EPSn.imag
Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

gaman=abs(Zn) 

#gama0
gama0=gaman**2

GAMA0=(gama0*3)**(-1)

g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
phi=(2.0*teta/pi)**(GAMA0)
racP=(1.0-phi*exp(-ks))
rap=(((cos(teta))**3)/racP)
sig1vv=g*(rap*Somme)
sig1hh=g*racP*((cos(teta))**3)*Somme
q=0.23*(gama0**0.5)*(1-exp(-ks))
sig1hv=q*sig1vv
SIGVV=(10.)*log10(sig1vv)
SIGHH=(10.)*log10(sig1hh)
SIGHV=(10.)*log10(sig1hv)
218/82:
#db plot
plot(tow, sig1vv)
#ylim(-23,-19)
218/83:
print (SIGVV, sig1vv)
print (tow)
218/84:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

###ALBEDO
#0.1 et 0.3
alpha=0.65

###FREQUENCE en bandes L,S,C
#1.23e9,3e9,5.3e9
f=3e9

###angle d'incidence
#20,30,40 deg
teta1=30

###tau=TOW, epaisseur optique de la vegetation
tow=logspace(log(1e-5)/log(10),log(1.5)/log(10),1001)
#tow=linspace(0,1.5,1001)

#donnees entrees
rob=1.33
ros=2.66
C=19./100
SAL=6
T=23
S=17.16/100
eps0=8.854e-12
ewinf=4.9
epss=4.7
teta=teta1*pi/180#angle d'incidence en radian
smv=5# humidite volumique en pour cent
sm=smv/100#humidite volumique 
rugos=1.5 # hauteur de rougosite en cm
#nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


# calcul cte dielectrique DOBSON
#eau saline 

a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

#towpi=2*PI*tow*/
#towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
towpi=2*pi*tow
sigeff=-1.645+1.939*rob-2.256*S+1.594*C
betar=1.275-0.519*S-0.152*C
betai=1.338-0.603*S-0.166*C
l=towpi*f
c=(ew0-ewinf)/(1+l**2)
#epsfw=epsfwr-j*epsfwi
epsfwr=ewinf+c
epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
#epsfwi=valeur absolue de (-epsfwi)
m=epss**alpha
eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
eps1i=(sm**betai)*(epsfwi**alpha)

# cte dielectrique du sol
p=1/alpha
epsr=eps1r**p
epsi=eps1i**p

#MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
#FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

#calcul de reflectivite  fresnel
eps=epsr+epsi*1j
EPS1=eps**0.5
EPS1r=EPS1.real
EPS1i=EPS1.imag
Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
gama1=abs(Z)
gama0=gama1**2

#calcul de reflectivite  fresnel polar H
z1=eps-sin(teta)**2
Z1=z1**0.5
Z1r=Z1.real
Z1i=Z1.imag
gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
gamah=gamah1**2

#calcul de la reflectivite de fresnel polar V
num=eps*cos(teta)-Z1
den=eps*cos(teta)+Z1
gamav1=abs(num/den)
gamav=gamav1**2

#somme gamah+gamav
Somme=gamah+gamav

#calul de la reflectivite de fresnel au nadir

EPSn=eps**0.5
EPSnr=EPSn.real
EPSni=EPSn.imag
Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

gaman=abs(Zn) 

#gama0
gama0=gaman**2

GAMA0=(gama0*3)**(-1)

g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
phi=(2.0*teta/pi)**(GAMA0)
racP=(1.0-phi*exp(-ks))
rap=(((cos(teta))**3)/racP)
sig1vv=g*(rap*Somme)
sig1hh=g*racP*((cos(teta))**3)*Somme
q=0.23*(gama0**0.5)*(1-exp(-ks))
sig1hv=q*sig1vv
SIGVV=(10.)*log10(sig1vv)
SIGHH=(10.)*log10(sig1hh)
SIGHV=(10.)*log10(sig1hv)
218/85:
#db plot
plot(tow, sig1vv)
#ylim(-23,-19)
218/86:
print (SIGVV, sig1vv)
print (tow)
218/87:
#db plot
plot(tow, sig1vv)
xlim(0,0.001)
218/88:
#db plot
plot(tow, sig1vv)
xlim(0,0.0001)
218/89:
#db plot
plot(tow, sig1vv)
xscale('log')
xlim(0,0.0001)
218/90:
#db plot
plot(tow, sig1vv)
xscale('log')
#xlim(0,0.0001)
218/91:
#db plot
figm,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(tow, sig1vv,label='VV')
ax.plot(tow, sig1hv,label='VV')
ax.plot(tow, sig1hh,label='VV')
xscale('log')
#xlim(0,0.0001)
218/92:
#db plot of reflectivity
figm,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(tow, sig1vv,label='VV')
ax.plot(tow, sig1hv,label='VV')
ax.plot(tow, sig1hh,label='VV')
xscale('log')
#xlim(0,0.0001)
218/93:
#db plot of reflectivity
figm,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(tow, sig1vv,label='VV')
ax.plot(tow, sig1hv,label='HV')
ax.plot(tow, sig1hh,label='HH')
legend()
xscale('log')
#xlim(0,0.0001)
218/94:
#db plot of reflectivity
figm,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(tow, sig1vv,label='VV')
ax.plot(tow, sig1hv,label='HV')
ax.plot(tow, sig1hh,label='HH')
ax.legend()
xscale('log')
#xlim(0,0.0001)
218/95:
print (sig1vv,sig1hv,sig1hh)
print (tow)
218/96:
print (sig1vv)
print (sig1hv)
print (sig1hh)
218/97:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

###ALBEDO
#0.1 et 0.3
alpha=0.1

###FREQUENCE en bandes L,S,C
#1.23e9,3e9,5.3e9
f=1.23e9

###angle d'incidence
#20,30,40 deg
teta1=20

###humidite volumique en pour cent
smv=10

###tau=TOW, epaisseur optique de la vegetation
tow=logspace(log(1e-5)/log(10),log(1.5)/log(10),1001)
#tow=linspace(0,1.5,1001)

#donnees entrees
rob=1.33
ros=2.66
C=19./100
SAL=6
T=23
S=17.16/100
eps0=8.854e-12
ewinf=4.9
epss=4.7
teta=teta1*pi/180#angle d'incidence en radian
sm=smv/100#humidite volumique 
rugos=1.5 # hauteur de rugosite en cm
#nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


# calcul cte dielectrique DOBSON
#eau saline 
a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

#towpi=2*PI*tow*/
#towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
towpi=2*pi*tow
sigeff=-1.645+1.939*rob-2.256*S+1.594*C
betar=1.275-0.519*S-0.152*C
betai=1.338-0.603*S-0.166*C
l=towpi*f
c=(ew0-ewinf)/(1+l**2)
#epsfw=epsfwr-j*epsfwi
epsfwr=ewinf+c
epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
#epsfwi=valeur absolue de (-epsfwi)
m=epss**alpha
eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
eps1i=(sm**betai)*(epsfwi**alpha)

# cte dielectrique du sol
p=1/alpha
epsr=eps1r**p
epsi=eps1i**p

#MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
#FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

#calcul de reflectivite  fresnel
eps=epsr+epsi*1j
EPS1=eps**0.5
EPS1r=EPS1.real
EPS1i=EPS1.imag
Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
gama1=abs(Z)
gama0=gama1**2

#calcul de reflectivite  fresnel polar H
z1=eps-sin(teta)**2
Z1=z1**0.5
Z1r=Z1.real
Z1i=Z1.imag
gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
gamah=gamah1**2

#calcul de la reflectivite de fresnel polar V
num=eps*cos(teta)-Z1
den=eps*cos(teta)+Z1
gamav1=abs(num/den)
gamav=gamav1**2

#somme gamah+gamav
Somme=gamah+gamav

#calul de la reflectivite de fresnel au nadir

EPSn=eps**0.5
EPSnr=EPSn.real
EPSni=EPSn.imag
Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

gaman=abs(Zn) 

#gama0
gama0=gaman**2
GAMA0=(gama0*3)**(-1)

#equation parameters
g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
phi=(2.0*teta/pi)**(GAMA0)
racP=(1.0-phi*exp(-ks))
rap=(((cos(teta))**3)/racP)
sig1vv=g*(rap*Somme)
sig1hh=g*racP*((cos(teta))**3)*Somme
q=0.23*(gama0**0.5)*(1-exp(-ks))
sig1hv=q*sig1vv
218/98:
#db plot of reflectivity
figm,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(tow, sig1vv,label='VV')
ax.plot(tow, sig1hv,label='HV')
ax.plot(tow, sig1hh,label='HH')
ax.legend()
xscale('log')
#xlim(0,0.0001)
218/99:
print (sig1vv)
print (sig1hv)
print (sig1hh)
218/100:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

###ALBEDO
#0.1 et 0.3
alpha=0.1

###FREQUENCE en bandes L,S,C
#1.23e9,3e9,5.3e9
f=1.23e9

###angle d'incidence
#20,30,40 deg
teta1=20

###humidite volumique en pour cent
smv=10

###tau=TOW, epaisseur optique de la vegetation
tow=logspace(log(1e-3)/log(10),log(1.5)/log(10),1001)
#tow=linspace(0,1.5,1001)

#donnees entrees
rob=1.33
ros=2.66
C=19./100
SAL=6
T=23
S=17.16/100
eps0=8.854e-12
ewinf=4.9
epss=4.7
teta=teta1*pi/180#angle d'incidence en radian
sm=smv/100#humidite volumique 
rugos=1.5 # hauteur de rugosite en cm
#nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


# calcul cte dielectrique DOBSON
#eau saline 
a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

#towpi=2*PI*tow*/
#towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
towpi=2*pi*tow
sigeff=-1.645+1.939*rob-2.256*S+1.594*C
betar=1.275-0.519*S-0.152*C
betai=1.338-0.603*S-0.166*C
l=towpi*f
c=(ew0-ewinf)/(1+l**2)
#epsfw=epsfwr-j*epsfwi
epsfwr=ewinf+c
epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
#epsfwi=valeur absolue de (-epsfwi)
m=epss**alpha
eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
eps1i=(sm**betai)*(epsfwi**alpha)

# cte dielectrique du sol
p=1/alpha
epsr=eps1r**p
epsi=eps1i**p

#MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
#FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

#calcul de reflectivite  fresnel
eps=epsr+epsi*1j
EPS1=eps**0.5
EPS1r=EPS1.real
EPS1i=EPS1.imag
Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
gama1=abs(Z)
gama0=gama1**2

#calcul de reflectivite  fresnel polar H
z1=eps-sin(teta)**2
Z1=z1**0.5
Z1r=Z1.real
Z1i=Z1.imag
gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
gamah=gamah1**2

#calcul de la reflectivite de fresnel polar V
num=eps*cos(teta)-Z1
den=eps*cos(teta)+Z1
gamav1=abs(num/den)
gamav=gamav1**2

#somme gamah+gamav
Somme=gamah+gamav

#calul de la reflectivite de fresnel au nadir

EPSn=eps**0.5
EPSnr=EPSn.real
EPSni=EPSn.imag
Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

gaman=abs(Zn) 

#gama0
gama0=gaman**2
GAMA0=(gama0*3)**(-1)

#equation parameters
g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
phi=(2.0*teta/pi)**(GAMA0)
racP=(1.0-phi*exp(-ks))
rap=(((cos(teta))**3)/racP)
sig1vv=g*(rap*Somme)
sig1hh=g*racP*((cos(teta))**3)*Somme
q=0.23*(gama0**0.5)*(1-exp(-ks))
sig1hv=q*sig1vv
218/101:
#db plot of reflectivity
figm,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(tow, sig1vv,label='VV')
ax.plot(tow, sig1hv,label='HV')
ax.plot(tow, sig1hh,label='HH')
ax.legend()
xscale('log')
#xlim(0,0.0001)
218/102:
print (sig1vv)
print (sig1hv)
print (sig1hh)
218/103:
#db plot of reflectivity
figm,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(tow, sig1vv,label='VV')
#ax.plot(tow, sig1hv,label='HV')
#ax.plot(tow, sig1hh,label='HH')
ax.legend()
xscale('log')
#xlim(0,0.0001)
218/104:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

###ALBEDO
#0.1 et 0.3
alpha=0.1

###FREQUENCE en bandes L,S,C
#1.23e9,3e9,5.3e9
f=1.23e9

###angle d'incidence
#20,30,40 deg
teta1=20

###humidite volumique en pour cent
smv=10

###tau=TOW, epaisseur optique de la vegetation
tow=logspace(log(1e-7)/log(10),log(1.5)/log(10),1001)
#tow=linspace(0,1.5,1001)

#donnees entrees
rob=1.33
ros=2.66
C=19./100
SAL=6
T=23
S=17.16/100
eps0=8.854e-12
ewinf=4.9
epss=4.7
teta=teta1*pi/180#angle d'incidence en radian
sm=smv/100#humidite volumique 
rugos=1.5 # hauteur de rugosite en cm
#nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


# calcul cte dielectrique DOBSON
#eau saline 
a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

#towpi=2*PI*tow*/
#towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
towpi=2*pi*tow
sigeff=-1.645+1.939*rob-2.256*S+1.594*C
betar=1.275-0.519*S-0.152*C
betai=1.338-0.603*S-0.166*C
l=towpi*f
c=(ew0-ewinf)/(1+l**2)
#epsfw=epsfwr-j*epsfwi
epsfwr=ewinf+c
epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
#epsfwi=valeur absolue de (-epsfwi)
m=epss**alpha
eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
eps1i=(sm**betai)*(epsfwi**alpha)

# cte dielectrique du sol
p=1/alpha
epsr=eps1r**p
epsi=eps1i**p

#MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
#FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

#calcul de reflectivite  fresnel
eps=epsr+epsi*1j
EPS1=eps**0.5
EPS1r=EPS1.real
EPS1i=EPS1.imag
Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
gama1=abs(Z)
gama0=gama1**2

#calcul de reflectivite  fresnel polar H
z1=eps-sin(teta)**2
Z1=z1**0.5
Z1r=Z1.real
Z1i=Z1.imag
gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
gamah=gamah1**2

#calcul de la reflectivite de fresnel polar V
num=eps*cos(teta)-Z1
den=eps*cos(teta)+Z1
gamav1=abs(num/den)
gamav=gamav1**2

#somme gamah+gamav
Somme=gamah+gamav

#calul de la reflectivite de fresnel au nadir

EPSn=eps**0.5
EPSnr=EPSn.real
EPSni=EPSn.imag
Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

gaman=abs(Zn) 

#gama0
gama0=gaman**2
GAMA0=(gama0*3)**(-1)

#equation parameters
g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
phi=(2.0*teta/pi)**(GAMA0)
racP=(1.0-phi*exp(-ks))
rap=(((cos(teta))**3)/racP)
sig1vv=g*(rap*Somme)
sig1hh=g*racP*((cos(teta))**3)*Somme
q=0.23*(gama0**0.5)*(1-exp(-ks))
sig1hv=q*sig1vv
218/105:
#db plot of reflectivity
figm,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(tow, sig1vv,label='VV')
#ax.plot(tow, sig1hv,label='HV')
#ax.plot(tow, sig1hh,label='HH')
ax.legend()
xscale('log')
#xlim(0,0.0001)
218/106:
#db plot of reflectivity
figm,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(tow, sig1vv,label='VV')
ax.plot(tow, sig1hv,label='HV')
#ax.plot(tow, sig1hh,label='HH')
ax.legend()
xscale('log')
#xlim(0,0.0001)
218/107:
#db plot of reflectivity
figm,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(tow, sig1vv,label='VV')
#ax.plot(tow, sig1hv,label='HV')
ax.plot(tow, sig1hh,label='HH')
ax.legend()
xscale('log')
#xlim(0,0.0001)
218/108:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

###ALBEDO
#0.1 et 0.3
alpha=0.1

###FREQUENCE en bandes L,S,C
#1.23e9,3e9,5.3e9
f=1.23e9

###angle d'incidence
#20,30,40 deg
teta1=20

###humidite volumique en pour cent
smv=10

###tau=TOW, epaisseur optique de la vegetation
tow=logspace(log(1e-100)/log(10),log(1.5)/log(10),1001)
#tow=linspace(0,1.5,1001)

#donnees entrees
rob=1.33
ros=2.66
C=19./100
SAL=6
T=23
S=17.16/100
eps0=8.854e-12
ewinf=4.9
epss=4.7
teta=teta1*pi/180#angle d'incidence en radian
sm=smv/100#humidite volumique 
rugos=1.5 # hauteur de rugosite en cm
#nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


# calcul cte dielectrique DOBSON
#eau saline 
a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

#towpi=2*PI*tow*/
#towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
towpi=2*pi*tow
sigeff=-1.645+1.939*rob-2.256*S+1.594*C
betar=1.275-0.519*S-0.152*C
betai=1.338-0.603*S-0.166*C
l=towpi*f
c=(ew0-ewinf)/(1+l**2)
#epsfw=epsfwr-j*epsfwi
epsfwr=ewinf+c
epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
#epsfwi=valeur absolue de (-epsfwi)
m=epss**alpha
eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
eps1i=(sm**betai)*(epsfwi**alpha)

# cte dielectrique du sol
p=1/alpha
epsr=eps1r**p
epsi=eps1i**p

#MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
#FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

#calcul de reflectivite  fresnel
eps=epsr+epsi*1j
EPS1=eps**0.5
EPS1r=EPS1.real
EPS1i=EPS1.imag
Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
gama1=abs(Z)
gama0=gama1**2

#calcul de reflectivite  fresnel polar H
z1=eps-sin(teta)**2
Z1=z1**0.5
Z1r=Z1.real
Z1i=Z1.imag
gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
gamah=gamah1**2

#calcul de la reflectivite de fresnel polar V
num=eps*cos(teta)-Z1
den=eps*cos(teta)+Z1
gamav1=abs(num/den)
gamav=gamav1**2

#somme gamah+gamav
Somme=gamah+gamav

#calul de la reflectivite de fresnel au nadir

EPSn=eps**0.5
EPSnr=EPSn.real
EPSni=EPSn.imag
Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

gaman=abs(Zn) 

#gama0
gama0=gaman**2
GAMA0=(gama0*3)**(-1)

#equation parameters
g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
phi=(2.0*teta/pi)**(GAMA0)
racP=(1.0-phi*exp(-ks))
rap=(((cos(teta))**3)/racP)
sig1vv=g*(rap*Somme)
sig1hh=g*racP*((cos(teta))**3)*Somme
q=0.23*(gama0**0.5)*(1-exp(-ks))
sig1hv=q*sig1vv
218/109:
#db plot of reflectivity
figm,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(tow, sig1vv,label='VV')
#ax.plot(tow, sig1hv,label='HV')
ax.plot(tow, sig1hh,label='HH')
ax.legend()
xscale('log')
#xlim(0,0.0001)
218/110:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

###ALBEDO
#0.1 et 0.3
alpha=0.1

###FREQUENCE en bandes L,S,C
#1.23e9,3e9,5.3e9
f=1.23e9

###angle d'incidence
#20,30,40 deg
teta1=20

###humidite volumique en pour cent
smv=10

###tau=TOW, epaisseur optique de la vegetation
tow=logspace(log(1e-10)/log(10),log(1.5)/log(10),1001)
#tow=linspace(0,1.5,1001)

#donnees entrees
rob=1.33
ros=2.66
C=19./100
SAL=6
T=23
S=17.16/100
eps0=8.854e-12
ewinf=4.9
epss=4.7
teta=teta1*pi/180#angle d'incidence en radian
sm=smv/100#humidite volumique 
rugos=1.5 # hauteur de rugosite en cm
#nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


# calcul cte dielectrique DOBSON
#eau saline 
a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

#towpi=2*PI*tow*/
#towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
towpi=2*pi*tow
sigeff=-1.645+1.939*rob-2.256*S+1.594*C
betar=1.275-0.519*S-0.152*C
betai=1.338-0.603*S-0.166*C
l=towpi*f
c=(ew0-ewinf)/(1+l**2)
#epsfw=epsfwr-j*epsfwi
epsfwr=ewinf+c
epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
#epsfwi=valeur absolue de (-epsfwi)
m=epss**alpha
eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
eps1i=(sm**betai)*(epsfwi**alpha)

# cte dielectrique du sol
p=1/alpha
epsr=eps1r**p
epsi=eps1i**p

#MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
#FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

#calcul de reflectivite  fresnel
eps=epsr+epsi*1j
EPS1=eps**0.5
EPS1r=EPS1.real
EPS1i=EPS1.imag
Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
gama1=abs(Z)
gama0=gama1**2

#calcul de reflectivite  fresnel polar H
z1=eps-sin(teta)**2
Z1=z1**0.5
Z1r=Z1.real
Z1i=Z1.imag
gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
gamah=gamah1**2

#calcul de la reflectivite de fresnel polar V
num=eps*cos(teta)-Z1
den=eps*cos(teta)+Z1
gamav1=abs(num/den)
gamav=gamav1**2

#somme gamah+gamav
Somme=gamah+gamav

#calul de la reflectivite de fresnel au nadir

EPSn=eps**0.5
EPSnr=EPSn.real
EPSni=EPSn.imag
Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

gaman=abs(Zn) 

#gama0
gama0=gaman**2
GAMA0=(gama0*3)**(-1)

#equation parameters
g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
phi=(2.0*teta/pi)**(GAMA0)
racP=(1.0-phi*exp(-ks))
rap=(((cos(teta))**3)/racP)
sig1vv=g*(rap*Somme)
sig1hh=g*racP*((cos(teta))**3)*Somme
q=0.23*(gama0**0.5)*(1-exp(-ks))
sig1hv=q*sig1vv
218/111:
#db plot of reflectivity
figm,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(tow, sig1vv,label='VV')
#ax.plot(tow, sig1hv,label='HV')
ax.plot(tow, sig1hh,label='HH')
ax.legend()
xscale('log')
#xlim(0,0.0001)
218/112:
print (sig1vv)
print (sig1hv)
print (sig1hh)
218/113:
#db plot of reflectivity
figm,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(tow, sig1vv,label='VV')
#ax.plot(tow, sig1hv,label='HV')
ax.plot(tow, sig1hh,label='HH')
ax.legend()
xscale('log')
yscale('log')
#xlim(0,0.0001)
218/114:
print (sig1vv)
print (sig1hv)
print (sig1hh)
218/115:
#db plot of reflectivity
figm,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(tow, sig1vv,label='VV')
ax.plot(tow, sig1hv,label='HV')
ax.plot(tow, sig1hh,label='HH')
ax.legend()
xscale('log')
yscale('log')
#xlim(0,0.0001)
218/116:
#db plot of reflectivity
figm,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(tow, sig1vv,label='VV')
ax.plot(tow, sig1hv,label='HV')
ax.plot(tow, sig1hh,label='HH')
ax.legend()
xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/117:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

###ALBEDO
#0.1 et 0.3
alpha=0.1

###FREQUENCE en bandes L,S,C
#1.23e9,3e9,5.3e9
f=1.23e9

###angle d'incidence
#20,30,40 deg
teta1=20

###humidite volumique en pour cent
smv=10

###tau=TOW, epaisseur optique de la vegetation
#tow=logspace(log(1e-10)/log(10),log(1.5)/log(10),1001)
tow=linspace(0,1.5,1001)

#donnees entrees
rob=1.33
ros=2.66
C=19./100
SAL=6
T=23
S=17.16/100
eps0=8.854e-12
ewinf=4.9
epss=4.7
teta=teta1*pi/180#angle d'incidence en radian
sm=smv/100#humidite volumique 
rugos=1.5 # hauteur de rugosite en cm
#nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


# calcul cte dielectrique DOBSON
#eau saline 
a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

#towpi=2*PI*tow*/
#towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
towpi=2*pi*tow
sigeff=-1.645+1.939*rob-2.256*S+1.594*C
betar=1.275-0.519*S-0.152*C
betai=1.338-0.603*S-0.166*C
l=towpi*f
c=(ew0-ewinf)/(1+l**2)
#epsfw=epsfwr-j*epsfwi
epsfwr=ewinf+c
epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
#epsfwi=valeur absolue de (-epsfwi)
m=epss**alpha
eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
eps1i=(sm**betai)*(epsfwi**alpha)

# cte dielectrique du sol
p=1/alpha
epsr=eps1r**p
epsi=eps1i**p

#MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
#FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

#calcul de reflectivite  fresnel
eps=epsr+epsi*1j
EPS1=eps**0.5
EPS1r=EPS1.real
EPS1i=EPS1.imag
Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
gama1=abs(Z)
gama0=gama1**2

#calcul de reflectivite  fresnel polar H
z1=eps-sin(teta)**2
Z1=z1**0.5
Z1r=Z1.real
Z1i=Z1.imag
gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
gamah=gamah1**2

#calcul de la reflectivite de fresnel polar V
num=eps*cos(teta)-Z1
den=eps*cos(teta)+Z1
gamav1=abs(num/den)
gamav=gamav1**2

#somme gamah+gamav
Somme=gamah+gamav

#calul de la reflectivite de fresnel au nadir

EPSn=eps**0.5
EPSnr=EPSn.real
EPSni=EPSn.imag
Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

gaman=abs(Zn) 

#gama0
gama0=gaman**2
GAMA0=(gama0*3)**(-1)

#equation parameters
g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
phi=(2.0*teta/pi)**(GAMA0)
racP=(1.0-phi*exp(-ks))
rap=(((cos(teta))**3)/racP)
sig1vv=g*(rap*Somme)
sig1hh=g*racP*((cos(teta))**3)*Somme
q=0.23*(gama0**0.5)*(1-exp(-ks))
sig1hv=q*sig1vv
218/118:
#db plot of reflectivity
figm,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(tow, sig1vv,label='VV')
ax.plot(tow, sig1hv,label='HV')
ax.plot(tow, sig1hh,label='HH')
ax.legend()
xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/119:
print (sig1vv)
print (sig1hv)
print (sig1hh)
218/120:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

###ALBEDO
#0.1 et 0.3
alpha=0.1

###FREQUENCE en bandes L,S,C
#1.23e9,3e9,5.3e9
f=1.23e9

###angle d'incidence
#20,30,40 deg
teta1=20

###humidite volumique en pour cent
smv=10

###tau=TOW, epaisseur optique de la vegetation
tow=logspace(log(1e-10)/log(10),log(1.5)/log(10),10001)
#tow=linspace(0,1.5,1001)

#donnees entrees
rob=1.33
ros=2.66
C=19./100
SAL=6
T=23
S=17.16/100
eps0=8.854e-12
ewinf=4.9
epss=4.7
teta=teta1*pi/180#angle d'incidence en radian
sm=smv/100#humidite volumique 
rugos=1.5 # hauteur de rugosite en cm
#nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


# calcul cte dielectrique DOBSON
#eau saline 
a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

#towpi=2*PI*tow*/
#towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
towpi=2*pi*tow
sigeff=-1.645+1.939*rob-2.256*S+1.594*C
betar=1.275-0.519*S-0.152*C
betai=1.338-0.603*S-0.166*C
l=towpi*f
c=(ew0-ewinf)/(1+l**2)
#epsfw=epsfwr-j*epsfwi
epsfwr=ewinf+c
epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
#epsfwi=valeur absolue de (-epsfwi)
m=epss**alpha
eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
eps1i=(sm**betai)*(epsfwi**alpha)

# cte dielectrique du sol
p=1/alpha
epsr=eps1r**p
epsi=eps1i**p

#MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
#FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

#calcul de reflectivite  fresnel
eps=epsr+epsi*1j
EPS1=eps**0.5
EPS1r=EPS1.real
EPS1i=EPS1.imag
Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
gama1=abs(Z)
gama0=gama1**2

#calcul de reflectivite  fresnel polar H
z1=eps-sin(teta)**2
Z1=z1**0.5
Z1r=Z1.real
Z1i=Z1.imag
gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
gamah=gamah1**2

#calcul de la reflectivite de fresnel polar V
num=eps*cos(teta)-Z1
den=eps*cos(teta)+Z1
gamav1=abs(num/den)
gamav=gamav1**2

#somme gamah+gamav
Somme=gamah+gamav

#calul de la reflectivite de fresnel au nadir

EPSn=eps**0.5
EPSnr=EPSn.real
EPSni=EPSn.imag
Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

gaman=abs(Zn) 

#gama0
gama0=gaman**2
GAMA0=(gama0*3)**(-1)

#equation parameters
g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
phi=(2.0*teta/pi)**(GAMA0)
racP=(1.0-phi*exp(-ks))
rap=(((cos(teta))**3)/racP)
sig1vv=g*(rap*Somme)
sig1hh=g*racP*((cos(teta))**3)*Somme
q=0.23*(gama0**0.5)*(1-exp(-ks))
sig1hv=q*sig1vv
218/121:
#db plot of reflectivity
figm,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(tow, sig1vv,label='VV')
ax.plot(tow, sig1hv,label='HV')
ax.plot(tow, sig1hh,label='HH')
ax.legend()
xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/122:
#db plot of reflectivity
figm,ax=subplots(figsize=(6,4),dpi=80)
#ax.plot(tow, sig1vv,label='VV')
#ax.plot(tow, sig1hv,label='HV')
#ax.plot(tow, sig1hh,label='HH')
ax.plot(tow, sig1hh-sig1vv,label='HH')
ax.legend()
xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/123:
#db plot of reflectivity
figm,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(tow, sig1vv,label='VV')
#ax.plot(tow, sig1hv,label='HV')
ax.plot(tow, sig1hh,label='HH')
ax.legend()
xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/124:
#db plot of reflectivity
figm,ax=subplots(figsize=(6,4),dpi=180)
ax.plot(tow, sig1vv,label='VV')
#ax.plot(tow, sig1hv,label='HV')
ax.plot(tow, sig1hh,label='HH')
ax.legend()
xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/125:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

def Sigma0(theta,mv,alpha)    

    ###ALBEDO
    #0.1 et 0.3
    alpha=0.1

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    teta1=20

    ###humidite volumique en pour cent
    smv=10

    ###tau=TOW, epaisseur optique de la vegetation
    tow=logspace(log(1e-15)/log(10),log(1.5)/log(10),10001)
    #tow=linspace(0,1.5,1001)

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    return sig1vv,sig1hv,sig1hh
218/126:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique

def Sigma0(teta1,smv,alpha,f):

    ###ALBEDO
    #0.1 et 0.3
    #alpha=0.1

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10

    ###tau=TOW, epaisseur optique de la vegetation
    tow=logspace(log(1e-15)/log(10),log(1.5)/log(10),10001)
    #tow=linspace(0,1.5,1001)

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    return sig1vv,sig1hv,sig1hh
218/127:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique
    
###tau=TOW, epaisseur optique de la vegetation
tow=logspace(log(1e-15)/log(10),log(1.5)/log(10),10001)

def Sigma0(tow,teta1,smv,alpha,f):

    ###ALBEDO
    #0.1 et 0.3
    #alpha=0.1

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    #tow=linspace(0,1.5,1001)

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGVV)
    sigma0_can_HV=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHV)
    sigma0_can_HH=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    
    
    return sigma0_can_VV,sigma0_can_HV,sigma0_can_HH
218/128:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9),label='VV')
#ax.plot(tow, sig1hv,label='HV')
#ax.plot(tow, sig1hh,label='HH')
ax.legend()
xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/129:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique
    
###tau=TOW, epaisseur optique de la vegetation
tow=logspace(log(1e-15)/log(10),log(1.5)/log(10),1001)

def Sigma0(tow,teta1,smv,alpha,f):

    ###ALBEDO
    #0.1 et 0.3
    #alpha=0.1

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    #tow=linspace(0,1.5,1001)

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGVV)
    sigma0_can_HV=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHV)
    sigma0_can_HH=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    
    
    return sigma0_can_VV,sigma0_can_HV,sigma0_can_HH
218/130:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9),label='VV')
#ax.plot(tow, sig1hv,label='HV')
#ax.plot(tow, sig1hh,label='HH')
ax.legend()
xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/131:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='VV')
#ax.plot(tow, sig1hv,label='HV')
#ax.plot(tow, sig1hh,label='HH')
ax.legend()
xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/132:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='VV')
#ax.plot(tow, sig1hv,label='HV')
#ax.plot(tow, sig1hh,label='HH')
ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/133:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='VV')
#ax.plot(tow, sig1hv,label='HV')
#ax.plot(tow, sig1hh,label='HH')
ax.legend()
#xscale('log')
yscale('log')
#xlim(0,0.0001)
218/134:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701
        # calcul de la cte dielectrique
    
###tau=TOW, epaisseur optique de la vegetation
#tow=logspace(log(1e-15)/log(10),log(1.5)/log(10),1001)
tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,alpha,f):

    ###ALBEDO
    #0.1 et 0.3
    #alpha=0.1

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGVV)
    sigma0_can_HV=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHV)
    sigma0_can_HH=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    
    
    return sigma0_can_VV,sigma0_can_HV,sigma0_can_HH
218/135:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='VV')
#ax.plot(tow, sig1hv,label='HV')
#ax.plot(tow, sig1hh,label='HH')
ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/136:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='V V', color=)
#ax.plot(tow, sig1hv,label='HV')
#ax.plot(tow, sig1hh,label='HH')
ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/137:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='V V', color=k)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='H V', color=r)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='H H', color=b)
#ax.plot(tow, sig1hv,label='HV')
#ax.plot(tow, sig1hh,label='HH')
ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/138:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='V V', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='H V', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='H H', color='b')
#ax.plot(tow, sig1hv,label='HV')
#ax.plot(tow, sig1hh,label='HH')
ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/139:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='V V', color='k')
#ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='H V', color='r')
#ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='H H', color='b')
#ax.plot(tow, sig1hv,label='HV')
#ax.plot(tow, sig1hh,label='HH')
ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/140:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='V V', color='k')
#ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='H V', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='H H', color='b')
#ax.plot(tow, sig1hv,label='HV')
#ax.plot(tow, sig1hh,label='HH')
ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/141:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,alpha,f):

    ###ALBEDO
    #0.1 et 0.3
    #alpha=0.1

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow*sec(teta1)))+exp(-2*tow*sec(teta1))*SIGVV)
    sigma0_can_HV=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHV)
    sigma0_can_HH=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    
    
    return sigma0_can_VV,sigma0_can_HV,sigma0_can_HH
218/142:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='V V', color='k')
#ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='H V', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='H H', color='b')
#ax.plot(tow, sig1hv,label='HV')
#ax.plot(tow, sig1hh,label='HH')
ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/143:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,alpha,f):

    ###ALBEDO
    #0.1 et 0.3
    #alpha=0.1

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGVV)
    sigma0_can_HV=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHV)
    sigma0_can_HH=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    
    
    return sigma0_can_VV,sigma0_can_HV,sigma0_can_HH
218/144:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='V V', color='k')
#ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='H V', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='H H', color='b')
#ax.plot(tow, sig1hv,label='HV')
#ax.plot(tow, sig1hh,label='HH')
ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/145:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,4),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='V V', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='H V', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='H H', color='b')
#ax.plot(tow, sig1hv,label='HV')
#ax.plot(tow, sig1hh,label='HH')
ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/146:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(3,1,figsize=(6,4),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='V V', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='H V', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='H H', color='b')
#ax.plot(tow, sig1hv,label='HV')
#ax.plot(tow, sig1hh,label='HH')
ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/147:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(3,1,figsize=(6,4),dpi=80)
ax[0].plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='V V', color='k')
ax[0].plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='H V', color='r')
ax[0].plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='H H', color='b')
#ax.plot(tow, sig1hv,label='HV')
#ax.plot(tow, sig1hh,label='HH')
ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/148:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(3,1,figsize=(6,10),dpi=80)
ax[0].plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='V V', color='k')
ax[0].plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='H V', color='r')
ax[0].plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='H H', color='b')
#ax.plot(tow, sig1hv,label='HV')
#ax.plot(tow, sig1hh,label='HH')
ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/149:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(3,1,figsize=(6,10),dpi=80)
ax[0].plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='V V', color='k')
ax[0].plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='H V', color='r')
ax[0].plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='H H', color='b')
#ax.plot(tow, sig1hv,label='HV')
#ax.plot(tow, sig1hh,label='HH')
ax[0].legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/150:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(3,1,figsize=(6,10),dpi=80)
ax[0].plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='V V', color='k')
ax[0].plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='H V', color='r')
ax[0].plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='H H', color='b')
ax[0].plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='V V', color='k')
ax[0].plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='H V', color='r')
ax[0].plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='H H', color='b')
ax[0].plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='V V', color='k')
ax[0].plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='H V', color='r')
ax[0].plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='H H', color='b')
#ax.plot(tow, sig1hv,label='HV')
#ax.plot(tow, sig1hh,label='HH')
ax[0].legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/151:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,10),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='V V', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='H V', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='H H', color='b')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='V V', color='k')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='H V', color='r')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='H H', color='b')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='V V', color='k')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='H V', color='r')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='H H', color='b')
#ax.plot(tow, sig1hv,label='HV')
#ax.plot(tow, sig1hh,label='HH')
ax[0].legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/152:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,10),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='V V', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='H V', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='H H', color='b')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='V V', color='k')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='H V', color='r')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='H H', color='b')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='V V', color='k')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='H V', color='r')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='H H', color='b')
#ax.plot(tow, sig1hv,label='HV')
#ax.plot(tow, sig1hh,label='HH')
ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/153:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,10),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='V V', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='H V', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='H H', color='b')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='V V', color='k')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='H V', color='r')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='H H', color='b')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='V V', color='k')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='H V', color='r')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='H H', color='b')

ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/154:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,6),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='V V', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='H V', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='H H', color='b')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='V V', color='k')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='H V', color='r')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='H H', color='b')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='V V', color='k')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='H V', color='r')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='H H', color='b')

ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/155:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,6),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='V V', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='H V', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='H H', color='b')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='V V', color='k',linstyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='H V', color='r',linstyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='H H', color='b',linstyle=':')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='V V', color='k',linstyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='H V', color='r',linstyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='H H', color='b',linstyle='--')

ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/156:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,6),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='V V', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='H V', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='H H', color='b')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='V V', color='k',linestyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='H V', color='r',linestyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='H H', color='b',linestyle=':')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='V V', color='k',linestyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='H V', color='r',linestyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='H H', color='b',linestyle='--')

ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/157:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,6),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label=u'20$\deg$  V V', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='  H V', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='  H H', color='b')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='V V', color='k',linestyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='H V', color='r',linestyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='H H', color='b',linestyle=':')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='V V', color='k',linestyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='H V', color='r',linestyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='H H', color='b',linestyle='--')

ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/158:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,6),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='20$\deg$  V V', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='  H V', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='  H H', color='b')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='V V', color='k',linestyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='H V', color='r',linestyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='H H', color='b',linestyle=':')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='V V', color='k',linestyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='H V', color='r',linestyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='H H', color='b',linestyle='--')

ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/159:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,6),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='20$\degree$  V V', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='  H V', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='  H H', color='b')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='V V', color='k',linestyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='H V', color='r',linestyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='H H', color='b',linestyle=':')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='V V', color='k',linestyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='H V', color='r',linestyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='H H', color='b',linestyle='--')

ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/160:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,6),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='20$\degree$  V V', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='  H V', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='  H H', color='b')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='30$\degree$  V V', color='k',linestyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='H V', color='r',linestyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='H H', color='b',linestyle=':')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='40$\degree$  V V', color='k',linestyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='H V', color='r',linestyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='H H', color='b',linestyle='--')

ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/161:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,6),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='20$\degree$  V V', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='     H V', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='     H H', color='b')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='30$\degree$  V V', color='k',linestyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='  H V', color='r',linestyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='H H', color='b',linestyle=':')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='40$\degree$  V V', color='k',linestyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='H V', color='r',linestyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='H H', color='b',linestyle='--')

ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/162:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,6),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='20$\degree$V V', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='     H V', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='     H H', color='b')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='30$\degree$  V V', color='k',linestyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='  H V', color='r',linestyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='H H', color='b',linestyle=':')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='40$\degree$  V V', color='k',linestyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='H V', color='r',linestyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='H H', color='b',linestyle='--')

ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/163:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,6),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='20$\degree$V V', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='      H V', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='      H H', color='b')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='30$\degree$  V V', color='k',linestyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='  H V', color='r',linestyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='H H', color='b',linestyle=':')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='40$\degree$  V V', color='k',linestyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='H V', color='r',linestyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='H H', color='b',linestyle='--')

ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/164:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,6),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='20$\degree$V V', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='      H V', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='      H H', color='b')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='30$\degree$  V V', color='k',linestyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='      H V', color='r',linestyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='      H H', color='b',linestyle=':')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='40$\degree$  V V', color='k',linestyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='     H V', color='r',linestyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='     H H', color='b',linestyle='--')

ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/165:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,6),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='20$\degree$ V V', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='      H V', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='      H H', color='b')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='30$\degree$ V V', color='k',linestyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='      H V', color='r',linestyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='      H H', color='b',linestyle=':')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='40$\degree$ V V', color='k',linestyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='      H V', color='r',linestyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='      H H', color='b',linestyle='--')

ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/166:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,alpha,f):

    ###ALBEDO
    #0.1 et 0.3
    #alpha=0.1

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*sig1vv)
    sigma0_can_HV=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHV)
    sigma0_can_HH=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    
    
    return sigma0_can_VV,sigma0_can_HV,sigma0_can_HH
218/167:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,6),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='20$\degree$ V V', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='      H V', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='      H H', color='b')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='30$\degree$ V V', color='k',linestyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='      H V', color='r',linestyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='      H H', color='b',linestyle=':')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='40$\degree$ V V', color='k',linestyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='      H V', color='r',linestyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='      H H', color='b',linestyle='--')

ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/168:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,alpha,f):

    ###ALBEDO
    #0.1 et 0.3
    #alpha=0.1

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*sig1vv)
    sigma0_can_HV=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*sig1hv)
    sigma0_can_HH=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*sig1hh)
    
    
    
    return sigma0_can_VV,sigma0_can_HV,sigma0_can_HH
218/169:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,6),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='20$\degree$ V V', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='      H V', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='      H H', color='b')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='30$\degree$ V V', color='k',linestyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='      H V', color='r',linestyle=':')
ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='      H H', color='b',linestyle=':')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='40$\degree$ V V', color='k',linestyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='      H V', color='r',linestyle='--')
ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='      H H', color='b',linestyle='--')

ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/170:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,6),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='20$\degree$ V V', color='k')
#ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='      H V', color='r')
#ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='      H H', color='b')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='30$\degree$ V V', color='k',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='      H V', color='r',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='      H H', color='b',linestyle=':')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='40$\degree$ V V', color='k',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='      H V', color='r',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='      H H', color='b',linestyle='--')

ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/171:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,6),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='20$\degree$ HH', color='k')
#ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='      HV', color='r')
#ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='      VV', color='b')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='30$\degree$ HH', color='k',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle=':')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='40$\degree$ HH', color='k',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle='--')

ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/172:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,alpha,f):

    ###ALBEDO
    #0.1 et 0.3
    #alpha=0.1

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*sig1vv)
    sigma0_can_HV=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*sig1hv)
    sigma0_can_HH=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*sig1hh)
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/173:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,6),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='20$\degree$ HH', color='k')
#ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='      HV', color='r')
#ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='      VV', color='b')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='30$\degree$ HH', color='k',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle=':')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='40$\degree$ HH', color='k',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle='--')

ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/174:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,6),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='20$\degree$ HH', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='      HV', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='      VV', color='b')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='30$\degree$ HH', color='k',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle=':')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='40$\degree$ HH', color='k',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle='--')

ax.legend()
#xscale('log')
#yscale('log')
#xlim(0,0.0001)
218/175:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(6,6),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='20$\degree$ HH', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='      HV', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='      VV', color='b')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='30$\degree$ HH', color='k',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle=':')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='40$\degree$ HH', color='k',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle='--')

ax.legend()
218/176:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(3,4),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='20$\degree$ HH', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='      HV', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='      VV', color='b')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='30$\degree$ HH', color='k',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle=':')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='40$\degree$ HH', color='k',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle='--')

ax.legend()
218/177:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(4,3),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='20$\degree$ HH', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='      HV', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='      VV', color='b')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='30$\degree$ HH', color='k',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle=':')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='40$\degree$ HH', color='k',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle='--')

ax.legend()
218/178:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(4,2),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='20$\degree$ HH', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='      HV', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='      VV', color='b')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='30$\degree$ HH', color='k',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle=':')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='40$\degree$ HH', color='k',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle='--')

ax.legend()
218/179:
#SIGMA SIM: theta=20deg, mv=10%, alpha=0.1, freq=1.23e9Hz
xs=linspace(0,1.5,1001)

fig,ax=subplots(figsize=(5,3),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='20$\degree$ HH', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='      HV', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='      VV', color='b')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='30$\degree$ HH', color='k',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle=':')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='40$\degree$ HH', color='k',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle='--')

ax.legend()
218/180:
#SIGMA SIM: freq=1.23e9Hz
xs=tow

fig,ax=subplots(3,3,figsize=(5,3),dpi=80)
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='20$\degree$ HH', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='      HV', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='      VV', color='b')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='30$\degree$ HH', color='k',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle=':')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='40$\degree$ HH', color='k',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle='--')

ax.legend()
218/181:
#SIGMA SIM: freq=1.23e9Hz
xs=tow

fig,ax=subplots(3,3,figsize=(5,3),dpi=80)
ax[0,0].plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='20$\degree$ HH', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='      HV', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='      VV', color='b')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='30$\degree$ HH', color='k',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle=':')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='40$\degree$ HH', color='k',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle='--')

ax.legend()
218/182:
#SIGMA SIM: freq=1.23e9Hz
xs=tow

fig,ax=subplots(30,30,figsize=(5,3),dpi=80)
ax[0,0].plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[0],label='20$\degree$ HH', color='k')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[1],label='      HV', color='r')
ax.plot(xs, Sigma0(tow,20,10,0.1,1.23e9)[2],label='      VV', color='b')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='30$\degree$ HH', color='k',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle=':')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='40$\degree$ HH', color='k',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle='--')

ax.legend()
218/183:
#SIGMA SIM: freq=1.23e9Hz
xs=tow

fig,ax=subplots(3,3,figsize=(15,12),dpi=80)
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,1.23e9)[0],label='20$\degree$ HH', color='k')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,1.23e9)[1],label='      HV', color='r')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,1.23e9)[2],label='      VV', color='b')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='30$\degree$ HH', color='k',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle=':')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='40$\degree$ HH', color='k',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle='--')

ax.legend()
218/184:
#SIGMA SIM: freq=1.23e9Hz
xs=tow

fig,ax=subplots(3,3,figsize=(15,12),dpi=80)
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,1.23e9)[0],label='20$\degree$ HH', color='k')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,1.23e9)[1],label='      HV', color='r')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,1.23e9)[2],label='      VV', color='b')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='30$\degree$ HH', color='k',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle=':')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='40$\degree$ HH', color='k',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle='--')

#ax.legend()
218/185:
#SIGMA SIM: freq=1.23e9Hz
xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,12),dpi=80)
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$ HH', color='k')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='      HV', color='r')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='      VV', color='b')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='30$\degree$ HH', color='k',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle=':')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='40$\degree$ HH', color='k',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle='--')

#ax.legend()
218/186:
#SIGMA SIM: freq=1.23e9Hz
xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=80)
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$ HH', color='k')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='      HV', color='r')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='      VV', color='b')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='30$\degree$ HH', color='k',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle=':')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='40$\degree$ HH', color='k',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle='--')

#ax.legend()
218/187:
#SIGMA SIM: freq=1.23e9Hz
xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$ HH', color='k')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='      HV', color='r')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='      VV', color='b')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[0],label='30$\degree$ HH', color='k',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle=':')
#ax.plot(xs, Sigma0(tow,30,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle=':')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[0],label='40$\degree$ HH', color='k',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[1],label='      HV', color='r',linestyle='--')
#ax.plot(xs, Sigma0(tow,40,10,0.1,1.23e9)[2],label='      VV', color='b',linestyle='--')

#ax.legend()
218/188:
#SIGMA SIM: freq=1.23e9Hz
xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$ HH', color='k')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='      HV', color='r')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='      VV', color='b')

ax[1,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$ HH', color='k')
ax[1,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='      HV', color='r')
ax[1,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='      VV', color='b')


#ax.legend()
218/189:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$ HH', color='k')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='      HV', color='r')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='      VV', color='b')

ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$ HH', color='k')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='      HV', color='r')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='      VV', color='b')


#ax.legend()
218/190:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$ HH', color='b')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='      HV', color='b')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='      VV', color='b')

ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$ HH', color='r')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='      HV', color='r')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='      VV', color='r')


#ax.legend()
218/191:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='30$\degree$', color='b')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='40$\degree$', color='b')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='30$\degree$ ', color='r')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='40$\degree$ ', color='r')


ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$ HH', color='r')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='      HV', color='r')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='      VV', color='r')


#ax.legend()
218/192:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle='--')


ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$ HH', color='r')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='      HV', color='r')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='      VV', color='r')


#ax.legend()
218/193:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle='--')


ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$ HH', color='r')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='      HV', color='r')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='      VV', color='r')


#ax.legend()
218/194:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')


ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$ HH', color='r')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='      HV', color='r')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='      VV', color='r')


#ax.legend()
218/195:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[1,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[2,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[1,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[1,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[1,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[2,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[2,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[2,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/196:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[1,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[1,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[1,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[2,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[2,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[2,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/197:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

ax[1,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[1,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[1,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[2,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[2,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[2,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/198:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

ax[1,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[1,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

ax[1,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

ax[2,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[2,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

ax[2,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/199:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

ax[1,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[1,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

ax[1,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

ax[2,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

ax[2,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

ax[2,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/200:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/201:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/202:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')
ax[0,0].legend()

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/203:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,alpha,f):

    ###ALBEDO
    #0.1 et 0.3
    #alpha=0.1

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1vv)
    sigma0_can_HV=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hv)
    sigma0_can_HH=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hh)
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/204:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')
ax[0,0].legend()

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/205: print (exp(1))
218/206:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,alpha,f):

    ###ALBEDO
    #0.1 et 0.3
    #alpha=0.1

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    SIGVV=(10)*log10(sig1vv)
    SIGHH=(10)*log10(sig1hh)
    SIGHV=(10)*log10(sig1hv)
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV qui sont en dB, donc je pense qu'il faut prendre sig1hh...)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*SIGVV)
    sigma0_can_HV=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*SIGHV)
    sigma0_can_HH=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*SIGHH)
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/207:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')
ax[0,0].legend()

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/208:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,alpha,f):

    ###ALBEDO
    #0.1 et 0.3
    #alpha=0.1

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    SIGVV=(10)*log10(sig1vv)
    SIGHH=(10)*log10(sig1hh)
    SIGHV=(10)*log10(sig1hv)
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV qui sont en dB, donc je pense qu'il faut prendre sig1hh...)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1vv)
    sigma0_can_HV=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hv)
    sigma0_can_HH=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hh)
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/209:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')
ax[0,0].legend()

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
219/1: %matplotlib inline
219/2:
from scipy import *
from matplotlib.pyplot import *
219/3: data_argon=genfromtxt('argon_last.txt')
219/4: data_argon=genfromtxt('spectra/argon_last.txt')
219/5: print data
219/6: print (data)
219/7: print (data_argon)
219/8: print (len(data_argon)
219/9: print (len(data_argon))
219/10:
xs=linspace(0,len(data_argon),len(data_argon))

fig,ax=subplots(1,2,figsize=(6,4), dpi=120)
ax[0].plot(xs, data_argon)
219/11:
xs=linspace(0,len(data_argon),len(data_argon))

fig,ax=subplots(1,2,figsize=(4,6), dpi=120)
ax[0].plot(xs, data_argon)
219/12:
xs=linspace(0,len(data_argon),len(data_argon))

fig,ax=subplots(1,2,figsize=(6,8), dpi=120)
ax[0].plot(xs, data_argon)
219/13:
xs=linspace(0,len(data_argon),len(data_argon))

fig,ax=subplots(1,2,figsize=(6,3), dpi=120)
ax[0].plot(xs, data_argon)
219/14:
xs=linspace(0,len(data_argon),len(data_argon))

fig,ax=subplots(1,2,figsize=(8,3), dpi=120)
ax[0].plot(xs, data_argon)
219/15:
xs=linspace(0,len(data_argon),len(data_argon))

fig,ax=subplots(1,2,figsize=(8,3), dpi=200)
ax[0].plot(xs, data_argon)
219/16:
xs=linspace(0,len(data_argon),len(data_argon))

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, data_argon)
219/17:
xs=linspace(0,len(data_argon),len(data_argon))

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, data_argon)
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
219/18:
xs=linspace(0,len(data_argon),len(data_argon))

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, data_argon)
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
219/19:
xs=linspace(0,len(data_argon),len(data_argon))

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, data_argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
ax[0].legend()
219/20:
xs=linspace(0,len(data_argon),len(data_argon))

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, data_argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
ax[0].legend()

ax[1].plot(xs, data_hg,label='mercury')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/21:
argon=genfromtxt('spectra/argon_last.txt')
hg=genfromtxt('spectra/hg_last.txt')
hg_red=genfromtxt('spectra/Hg_Red_filter.txt')
219/22: print (len(hg))
219/23:
xs=linspace(0,len(data_argon),len(data_argon))

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/24:
xs=linspace(0,len(data_argon),len(data_argon))

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon', linestyle=':')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/25:
xs=linspace(0,len(data_argon),len(data_argon))

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon', linestyle='.')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/26:
xs=linspace(0,len(data_argon),len(data_argon))

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon', linestyle='--')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/27:
xs=linspace(0,len(data_argon),len(data_argon))

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon', linestyle='..')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/28:
xs=linspace(0,len(data_argon),len(data_argon))

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/29:
xs=linspace(0,len(data_argon),len(data_argon))

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/30:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:,-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/31:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/32:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/33:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

da = diff(argon)
np.where(np.sign(da[:-1]) != np.sign(da[1:]))


ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/34:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

da = diff(argon)
print np.where(np.sign(da[:-1]) != np.sign(da[1:]))


ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/35:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

da = diff(argon)
print(np.where(np.sign(da[:-1]) != np.sign(da[1:])))


ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/36:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

da = diff(argon)
print(argon[np.where(np.sign(da[:-1]) != np.sign(da[1:]))[0]+1])


ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/37:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

da = diff(argon)
print(x[np.where(np.sign(da[:-1]) != np.sign(da[1:]))[0]+1])


ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/38:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

da = diff(argon)
print(xs[np.where(np.sign(da[:-1]) != np.sign(da[1:]))[0]+1])


ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/39:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

da = diff(argon)
amax = np.where(np.sign(da[:-1]) != np.sign(da[1:]))[0]+1
print(np.array([xs[amax],argon[amax]]))

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/40:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

da = diff(argon)
amax = np.where(np.sign(da[:-1]) != np.sign(da[1:]))[0]+1
print(np.array([xs[amax],argon[amax]]).T)

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/41:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

da = diff(argon)
amax = np.where(np.sign(da[:-1]) != np.sign(da[1:]))[0]+1
print(np.array([xs[amax],argon[amax]]))

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/42:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

da = diff(argon)
amax = np.where(np.sign(da[:-1]) != np.sign(da[1:]))[0]+1
print(np.array([xs[amax],argon[amax]]).T)

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/43:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

da = diff(argon)
amax = np.where(np.sign(da[:-1]) != np.sign(da[1:]))[0]+1
print(np.sort(np.array([xs[amax],argon[amax]]).T))


ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/44:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

da = diff(argon)
amax = np.where(np.sign(da[:-1]) != np.sign(da[1:]))[0]+1
print(np.sort(np.array([xs[amax],argon[amax]]).T),0)


ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/45:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

da = diff(argon)
amax = np.where(np.sign(da[:-1]) != np.sign(da[1:]))[0]+1
print(np.sort(np.array([xs[amax],argon[amax]]).T,0))


ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/46:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

da = diff(argon)
amax = np.where(np.sign(da[:-1]) != np.sign(da[1:]))[0]+1
print(np.sort(np.array([xs[amax],argon[amax]]).T))


ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/47:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

da = diff(argon)
aind = np.where(np.sign(da[:-1]) != np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
print(amax[amax[:,1].argsort()])


ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/48:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

da = diff(argon)
aind = np.where(np.sign(da[:-1]) != np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
print(amax[amax[:,1].argsort()][:,::-1])


ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/49:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

da = diff(argon)
aind = np.where(np.sign(da[:-1]) != np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
print(amax[amax[:,1].argsort()][::-1])


ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/50:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
print(amax[amax[:,1].argsort()][::-1])


ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/51:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
print(amax[amax[:,1].argsort()][::-1])

print(np.sign(0))
ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/52:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
print(amax[amax[:,1].argsort()][::-1])

print(np.sign(1))
ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/53:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
print(amax[amax[:,1].argsort()][::-1])

print(np.sign(2))
ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/54:
xs=linspace(0,len(data_argon),len(data_argon))
print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/55:
xs=linspace(0,len(data_argon),len(data_argon))
print (len(data_argon))

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/56:
xs=linspace(0,len(data_argon)-1,len(data_argon))
print (len(data_argon))

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/57:
xs=linspace(0,len(data_argon)-1,len(data_argon))
print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/58:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
print(amax[amax[:,1].argsort()][::-1])


ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/59:
xs=arange(252)
print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/60:
xs=arange(len(data_argon))
print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/61:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
print(amax[amax[:,1].argsort()][::-1])


ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/62:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
print(amax[amax[:,1].argsort()][::-1])


ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()

dhg = diff(mercury)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],mercury[hgind]]).T
print(hgmax[hgmax[:,1].argsort()][::-1])
219/63:
fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs[:-1], diff(argon),label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
#ax[0].set_ylim(0)
ax[0].legend()

da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
print(amax[amax[:,1].argsort()][::-1])


ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
print(hgmax[hgmax[:,1].argsort()][::-1])
219/64:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
print(amax[amax[:,1].argsort()][::-1])


dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
print(hgmax[hgmax[:,1].argsort()][::-1])
219/65:
xs=arange(len(data_argon))
#print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/66:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
print(amax[amax[:,1].argsort()][::-1])

max_argonind = amax[amax[:,1].argsort()][::-1]>150

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
print(hgmax[hgmax[:,1].argsort()][::-1])
219/67:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
amax = amax[amax[:,1].argsort()][::-1]

max_argonind = amax[amax[:,1]>150]
print(max_argonind)

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
print(hgmax[hgmax[:,1].argsort()][::-1])
219/68:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
amax = amax[amax[:,1].argsort()][::-1]

max_argonind = amax[amax[:,1]>150]
print(max_argonind[:,0])

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
print(hgmax[hgmax[:,1].argsort()][::-1])
219/69:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
amax = amax[amax[:,1].argsort()][::-1]

max_argonind = amax[amax[:,1]>150,0]
print(max_argonind)

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
print(hgmax[hgmax[:,1].argsort()][::-1])
219/70:
xs=arange(len(data_argon))
#print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].ax_vline(i,linestyle='--')
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/71:
xs=arange(len(data_argon))
#print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--')
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/72:
xs=arange(len(data_argon))
#print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='g')
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/73:
xs=arange(len(data_argon))
#print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='0.5')
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/74:
xs=arange(len(data_argon))
#print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='0.2')
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/75:
xs=arange(len(data_argon))
#print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color=0.2)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/76:
xs=arange(len(data_argon))
#print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#222222')
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/77:
xs=arange(len(data_argon))
#print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#555555')
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/78:
xs=arange(len(data_argon))
#print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#aaaaaa')
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/79:
xs=arange(len(data_argon))
#print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb')
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/80:
xs=arange(len(data_argon))
#print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.1)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/81:
xs=arange(len(data_argon))
#print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.3)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/82:
xs=arange(len(data_argon))
#print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
ax[1].legend()
219/83:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
amax = amax[amax[:,1].argsort()][::-1]
max_argonind = amax[amax[:,1]>150,0]

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
hgmax = hgmax[hgmax[:,1].argsort()][::-1]
max_hgind = hgmax[hgmax[:,1]>150,0]
219/84:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
amax = amax[amax[:,1].argsort()][::-1]
max_argonind = amax[amax[:,1]>150,0]

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
hgmax = hgmax[hgmax[:,1].argsort()][::-1]
max_hgind = hgmax[hgmax[:,1]>150,0]
print (hgmax)
219/85:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
amax = amax[amax[:,1].argsort()][::-1]
max_argonind = amax[amax[:,1]>150,0]

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
hgmax = hgmax[hgmax[:,1].argsort()][::-1]
max_hgind = hgmax[hgmax[:,1]>200,0]
print (hgmax)
219/86:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
amax = amax[amax[:,1].argsort()][::-1]
max_argonind = amax[amax[:,1]>150,0]

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
hgmax = hgmax[hgmax[:,1].argsort()][::-1]
max_hgind = hgmax[hgmax[:,1]>200,0]
print (hgmax_hdind)
219/87:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
amax = amax[amax[:,1].argsort()][::-1]
max_argonind = amax[amax[:,1]>150,0]

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
hgmax = hgmax[hgmax[:,1].argsort()][::-1]
max_hgind = hgmax[hgmax[:,1]>200,0]
print (hgmax_hgind)
219/88:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
amax = amax[amax[:,1].argsort()][::-1]
max_argonind = amax[amax[:,1]>150,0]

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
hgmax = hgmax[hgmax[:,1].argsort()][::-1]
max_hgind = hgmax[hgmax[:,1]>200,0]
print (max_hgind)
219/89:
xs=arange(len(data_argon))
#print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hg_ind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
219/90:
xs=arange(len(data_argon))
#print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
219/91:
xs=arange(len(data_argon))
#print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
219/92:
xs=arange(len(data_argon))
#print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')
219/93:
xs=arange(len(data_argon))
#print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.2)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')
219/94:
xs=arange(len(data_argon))
#print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=1)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')
219/95:
xs=arange(len(data_argon))
#print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.5)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')
219/96:
xs=arange(len(data_argon))
#print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')
219/97:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
amax = amax[amax[:,1].argsort()][::-1]
max_argonind = amax[amax[:,1]>150,0]
print(max_argonind)

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
hgmax = hgmax[hgmax[:,1].argsort()][::-1]
max_hgind = hgmax[hgmax[:,1]>200,0]
print (max_hgind)
219/98:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
amax = amax[amax[:,1].argsort()][::-1]
max_argonind = amax[amax[:,1]>150,0]
print(max_argonind.argsort)

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
hgmax = hgmax[hgmax[:,1].argsort()][::-1]
max_hgind = hgmax[hgmax[:,1]>200,0]
print (max_hgind)
219/99:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
amax = amax[amax[:,1].argsort()][::-1]
max_argonind = amax[amax[:,1]>150,0]
print(max_argonind.argsort())

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
hgmax = hgmax[hgmax[:,1].argsort()][::-1]
max_hgind = hgmax[hgmax[:,1]>200,0]
print (max_hgind)
219/100:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
amax = amax[amax[:,1].argsort()][::-1]
max_argonind = amax[amax[:,1]>150,0]
print(max_argonind.sort())

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
hgmax = hgmax[hgmax[:,1].argsort()][::-1]
max_hgind = hgmax[hgmax[:,1]>200,0]
print (max_hgind)
219/101:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
amax = amax[amax[:,1].argsort()][::-1]
max_argonind = amax[amax[:,1]>150,0]
print(max_argonind)

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
hgmax = hgmax[hgmax[:,1].argsort()][::-1]
max_hgind = hgmax[hgmax[:,1]>200,0]
print (max_hgind)
219/102:
#Calibration graph for lambdas
ar_theo=array([696.50,763.51,772.38,800.62,810.95,840.82,912.10])
219/103:
#Calibration graph for lambdas
ar_theo=array(696.50,763.51,772.38,800.62,810.95,840.82,912.10)
219/104:
#Calibration graph for lambdas
ar_theo=array([696.50,763.51,772.38,800.62,810.95,840.82,912.10])
219/105:
#Calibration graph for lambdas
ar_theo=array([696.50,763.51,772.38,800.62,810.95,840.82,912.10])
hg_theo=array([365.0,404.7,435.8,546.1,577.0,579.1])
219/106:
lambda_theo=genfromtxt('spectra/Spectron.xls', skip_header=4)

print (lambda_theo)
219/107:
lambda_theo=genfromtxt('spectra/Spectron.xls', skip_header=4)

print (lambda_theo)
219/108:
lambda_theo=genfromtxt('spectra/Spectron.xls', skip_header=5)

print (lambda_theo)
219/109:
lambda_theo=genfromtxt('spectra/Spectron.xls', skip_header=50)

print (lambda_theo)
219/110:
lambda_theo=genfromtxt('spectra/Spectron.xls')

print (lambda_theo)
219/111:
lambda_theo=genfromtxt('spectra/Spectron.xls', skip_header=3, delimiter=',,')

print (lambda_theo)
219/112:
lambda_theo=genfromtxt('spectra/Spectron.csv', skip_header=3, delimiter=',,')

print (lambda_theo)
219/113:
lambda_theo=genfromtxt('spectra/Spectron.csv', skip_header=3, delimiter=',')

print (lambda_theo)
219/114:
lambda_theo=genfromtxt('spectra/Spectron.csv', delimiter=',')

print (lambda_theo)
219/115:
lambda_theo=genfromtxt('spectra/Spectron.csv', delimiter=',')

print (lambda_theo)
219/116:
lambda_theo=genfromtxt('spectra/Spectron.csv')

print (lambda_theo)
219/117:
lambda_theo=genfromtxt('spectra/Spectron.csv', delimiter=',')

print (lambda_theo)
219/118:
lambda_theo=genfromtxt('spectra/Spectron.csv', delimiter=',')
lambda_theo[0,0]=1
print (lambda_theo)
219/119:
lambda_theo=genfromtxt('spectra/Spectron.csv', delimiter=',')
lambda_theo[0,0]=1.0
print (lambda_theo)
219/120:
lambda_theo=genfromtxt('spectra/Spectron.csv', delimiter=',')
lambda_theo[0,0]=1.0
print (lambda_theo[0,0])
219/121:
lambda_theo=genfromtxt('spectra/Spectron.csv', delimiter=',')
lambda_theo[0,0]=1
print (lambda_theo[0,0])
219/122:
lambda_theo=genfromtxt('spectra/Spectron.csv', delimiter=',')
#lambda_theo[0,0]=1
print (lambda_theo[0,0])
219/123:
lambda_theo=genfromtxt('spectra/Spectron.csv', delimiter=',')
lambda_theo[0,0]=1
print (lambda_theo[0,0])
219/124:
lambda_theo=genfromtxt('spectra/Spectron.csv', delimiter=',')
lambda_theo[0,0]=1
print (shape(lambda_theo))
219/125:
lambda_theo=genfromtxt('spectra/Spectron.csv', delimiter=',')
lambda_theo[0,0]=1
print (shape(lambda_theo))
219/126:
lambda_theo=genfromtxt('spectra/Spectron.csv', delimiter=',')
lambda_theo[0,0]=1
print (shape(lambda_theo))
219/127:
lambda_theo=genfromtxt('spectra/Spectron.csv', delimiter=',')
lambda_theo[0,0]=1
print (lambda_theo[:,0])
219/128:
lambda_theo=genfromtxt('spectra/Spectron.csv', delimiter=',')
lambda_theo[0,0]=1
print (lambda_theo[:,1])
219/129:
lambda_theo=genfromtxt('spectra/Spectron.csv', delimiter=',')
lambda_theo[0,0]=1
219/130:
fig,ax=subplots()
ax.plot(lambda_theo[:,0],lambda_theo[:,1])
218/210:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,alpha,f):

    ###ALBEDO
    #0.1 et 0.3
    #alpha=0.1

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    SIGVV=(10)*log10(sig1vv)
    SIGHH=(10)*log10(sig1hh)
    SIGHV=(10)*log10(sig1hv)
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV qui sont en dB, donc je pense qu'il faut prendre sig1hh...)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1vv)
    sigma0_can_HV=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hv)
    sigma0_can_HH=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hh)
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/211:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')
ax[0,0].legend()

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/212:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,alpha,f):

    ###ALBEDO
    #0.1 et 0.3
    #alpha=0.1

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    teta=teta1*pi/180#angle d'incidence en radian
    print (teta)
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    SIGVV=(10)*log10(sig1vv)
    SIGHH=(10)*log10(sig1hh)
    SIGHV=(10)*log10(sig1hv)
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV qui sont en dB, donc je pense qu'il faut prendre sig1hh...)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1vv)
    sigma0_can_HV=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hv)
    sigma0_can_HH=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hh)
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/213:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')
ax[0,0].legend()

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/214:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,alpha,f):

    ###ALBEDO
    #0.1 et 0.3
    #alpha=0.1

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    print(EPS1r,EPS1i)
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    SIGVV=(10)*log10(sig1vv)
    SIGHH=(10)*log10(sig1hh)
    SIGHV=(10)*log10(sig1hv)
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV qui sont en dB, donc je pense qu'il faut prendre sig1hh...)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1vv)
    sigma0_can_HV=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hv)
    sigma0_can_HH=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hh)
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/215:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')
ax[0,0].legend()

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/216:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,alpha,f):

    ###ALBEDO
    #0.1 et 0.3
    #alpha=0.1

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    print(type(EPS1r,EPS1i))
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    SIGVV=(10)*log10(sig1vv)
    SIGHH=(10)*log10(sig1hh)
    SIGHV=(10)*log10(sig1hv)
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV qui sont en dB, donc je pense qu'il faut prendre sig1hh...)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1vv)
    sigma0_can_HV=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hv)
    sigma0_can_HH=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hh)
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/217:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')
ax[0,0].legend()

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/218:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,alpha,f):

    ###ALBEDO
    #0.1 et 0.3
    #alpha=0.1

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    print(type(EPS1r))
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    SIGVV=(10)*log10(sig1vv)
    SIGHH=(10)*log10(sig1hh)
    SIGHV=(10)*log10(sig1hv)
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV qui sont en dB, donc je pense qu'il faut prendre sig1hh...)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1vv)
    sigma0_can_HV=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hv)
    sigma0_can_HH=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hh)
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/219:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')
ax[0,0].legend()

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/220:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,alpha,f):

    ###ALBEDO
    #0.1 et 0.3
    #alpha=0.1

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    SIGVV=(10)*log10(sig1vv)
    SIGHH=(10)*log10(sig1hh)
    SIGHV=(10)*log10(sig1hv)
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV qui sont en dB, donc je pense qu'il faut prendre sig1hh...)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1vv)
    sigma0_can_HV=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hv)
    sigma0_can_HH=10*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hh)
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/221:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')
ax[0,0].legend()

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/222:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,alpha,f):

    ###ALBEDO
    #0.1 et 0.3
    #alpha=0.1

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    SIGVV=(10)*log10(sig1vv)
    SIGHH=(10)*log10(sig1hh)
    SIGHV=(10)*log10(sig1hv)
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV qui sont en dB, donc je pense qu'il faut prendre sig1hh...)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1vv)
    sigma0_can_HV=(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hv)
    sigma0_can_HH=(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hh)
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/223:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')
ax[0,0].legend()

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/224:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,alpha,f):

    ###ALBEDO
    #0.1 et 0.3
    #alpha=0.1

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    SIGVV=(10)*log10(sig1vv)
    SIGHH=(10)*log10(sig1hh)
    SIGHV=(10)*log10(sig1hv)
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV qui sont en dB, donc je pense qu'il faut prendre sig1hh...)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*SIGVV)
    sigma0_can_HV=(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*SIGHV)
    sigma0_can_HH=(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*SIGHH)
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/225:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')
ax[0,0].legend()

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/226:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,alpha,f):

    ###ALBEDO
    #0.1 et 0.3
    #alpha=0.1

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    SIGVV=(10)*log10(sig1vv)
    SIGHH=(10)*log10(sig1hh)
    SIGHV=(10)*log10(sig1hv)
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV qui sont en dB, donc je pense qu'il faut prendre sig1hh...)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=(10)*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*SIGVV)
    sigma0_can_HV=(10)*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*SIGHV)
    sigma0_can_HH=(10)*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*SIGHH)
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/227:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')
ax[0,0].legend()

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/228:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,alpha,f):

    ###ALBEDO
    #0.1 et 0.3
    #alpha=0.1

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    SIGVV=(10)*log10(sig1vv)
    SIGHH=(10)*log10(sig1hh)
    SIGHV=(10)*log10(sig1hv)
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV qui sont en dB, donc je pense qu'il faut prendre sig1hh...)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=(10)*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1vv)
    sigma0_can_HV=(10)*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hv)
    sigma0_can_HH=(10)*log10(0.75*alpha*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hh)
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/229:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')
ax[0,0].legend()

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/230:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,omega,f):

    ###ALBEDO
    #0.1 et 0.3
    alpha=0.65

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    SIGVV=(10)*log10(sig1vv)
    SIGHH=(10)*log10(sig1hh)
    SIGHV=(10)*log10(sig1hv)
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV qui sont en dB, donc je pense qu'il faut prendre sig1hh...)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=(10)*log10(0.75*omega*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1vv)
    sigma0_can_HV=(10)*log10(0.75*omega*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hv)
    sigma0_can_HH=(10)*log10(0.75*omega*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hh)
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/231:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')
ax[0,0].legend()

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/232:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,omega,f):

    ###ALBEDO
    #0.1 et 0.3
    alpha=0.65

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    SIGVV=(10)*log10(sig1vv)
    SIGHH=(10)*log10(sig1hh)
    SIGHV=(10)*log10(sig1hv)
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV qui sont en dB, donc je pense qu'il faut prendre sig1hh...)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=(10)*log10(0.75*omega*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1vv)
    sigma0_can_HV=(10)*log10(0.75*omega*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hv)
    sigma0_can_HH=(10)*log10(0.75*omega*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hh)
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/233:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')
ax[0,0].legend()

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/234:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,omega,f):

    ###ALBEDO
    #0.1 et 0.3

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    alpha=0.65
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    SIGVV=(10)*log10(sig1vv)
    SIGHH=(10)*log10(sig1hh)
    SIGHV=(10)*log10(sig1hv)
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV qui sont en dB, donc je pense qu'il faut prendre sig1hh...)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=(10)*log10(0.75*omega*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1vv)
    sigma0_can_HV=(10)*log10(0.75*omega*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hv)
    sigma0_can_HH=(10)*log10(0.75*omega*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hh)
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/235:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,omega,f):

    ###ALBEDO
    #0.1 et 0.3

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    alpha=0.65
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    SIGVV=(10)*log10(sig1vv)
    SIGHH=(10)*log10(sig1hh)
    SIGHV=(10)*log10(sig1hv)
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV qui sont en dB, donc je pense qu'il faut prendre sig1hh...)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=(10)*log10(0.75*omega*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1vv)
    sigma0_can_HV=(10)*log10(0.75*omega*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hv)
    sigma0_can_HH=(10)*log10(0.75*omega*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hh)
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/236:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')
ax[0,0].legend()

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/237:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,omega,f):

    ###ALBEDO
    #0.1 et 0.3

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    alpha=0.65
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    SIGVV=(10)*log10(sig1vv)
    SIGHH=(10)*log10(sig1hh)
    SIGHV=(10)*log10(sig1hv)
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV qui sont en dB, donc je pense qu'il faut prendre sig1hh...)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=(10)*log10(0.75*omega*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1vv)*10
    sigma0_can_HV=(10)*log10(0.75*omega*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hv)
    sigma0_can_HH=(10)*log10(0.75*omega*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hh)
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/238:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

xs=tow
freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')
ax[0,0].legend()

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/239:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,omega,f):

    ###ALBEDO
    #0.1 et 0.3

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    alpha=0.65
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    SIGVV=(10)*log10(sig1vv)
    SIGHH=(10)*log10(sig1hh)
    SIGHV=(10)*log10(sig1hv)
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV qui sont en dB, donc je pense qu'il faut prendre sig1hh...)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=(10)*log10(0.75*omega*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1vv)*100
    sigma0_can_HV=(10)*log10(0.75*omega*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hv)
    sigma0_can_HH=(10)*log10(0.75*omega*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hh)
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/240:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')
ax[0,0].legend()

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/241:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,omega,f):

    ###ALBEDO
    #0.1 et 0.3

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    alpha=0.65
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    SIGVV=(10)*log10(sig1vv)
    SIGHH=(10)*log10(sig1hh)
    SIGHV=(10)*log10(sig1hv)
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV qui sont en dB, donc je pense qu'il faut prendre sig1hh...)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=(10)*log10(0.75*omega*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1vv)*10000
    sigma0_can_HV=(10)*log10(0.75*omega*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hv)
    sigma0_can_HH=(10)*log10(0.75*omega*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hh)
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/242:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')
ax[0,0].legend()

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/243:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,omega,f):

    ###ALBEDO
    #0.1 et 0.3

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    alpha=0.65
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    SIGVV=(10)*log10(sig1vv)
    SIGHH=(10)*log10(sig1hh)
    SIGHV=(10)*log10(sig1hv)
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV qui sont en dB, donc je pense qu'il faut prendre sig1hh...)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    sigma0_can_VV=(0.75*omega*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1vv)
    sigma0_can_HV=(10)*log10(0.75*omega*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hv)
    sigma0_can_HH=(10)*log10(0.75*omega*cos(teta)*(1-exp(-2*tow/cos(teta)))+exp(-2*tow/cos(teta))*sig1hh)
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/244:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')
ax[0,0].legend()

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/245: print (10*log10(1))
218/246: print (10*log10(10))
218/247: print log10(10))
218/248: print (log10(10))
218/249:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,omega,f):

    ###ALBEDO
    #0.1 et 0.3

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    alpha=0.65
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    SIGVV=(10)*log10(sig1vv)
    SIGHH=(10)*log10(sig1hh)
    SIGHV=(10)*log10(sig1hv)
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV qui sont en dB, donc je pense qu'il faut prendre sig1hh...)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    gamma2=exp(-2*tow/cos(teta))
    print gamma2
    
    sigma0_can_VV=(10)*log10(0.75*omega*cos(teta)*(1-gamma2))+gamma2*sig1vv)
    sigma0_can_HV=(10)*log10(0.75*omega*cos(teta)*(1-gamma2))+gamma2*sig1hv)
    sigma0_can_HH=(10)*log10(0.75*omega*cos(teta)*(1-gamma2))+gamma2*sig1hh)
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/250:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')
ax[0,0].legend()

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/251:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,omega,f):

    ###ALBEDO
    #0.1 et 0.3

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    alpha=0.65
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    SIGVV=(10)*log10(sig1vv)
    SIGHH=(10)*log10(sig1hh)
    SIGHV=(10)*log10(sig1hv)
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV qui sont en dB, donc je pense qu'il faut prendre sig1hh...)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    gamma2=exp(-2*tow/cos(teta))
    
    sigma0_can_VV=(10)*log10(0.75*omega*cos(teta)*(1-gamma2))+gamma2*sig1vv)
    sigma0_can_HV=(10)*log10(0.75*omega*cos(teta)*(1-gamma2))+gamma2*sig1hv)
    sigma0_can_HH=(10)*log10(0.75*omega*cos(teta)*(1-gamma2))+gamma2*sig1hh)
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/252:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')
ax[0,0].legend()

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/253:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,omega,f):

    ###ALBEDO
    #0.1 et 0.3

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    alpha=0.65
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    SIGVV=(10)*log10(sig1vv)
    SIGHH=(10)*log10(sig1hh)
    SIGHV=(10)*log10(sig1hv)
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV qui sont en dB, donc je pense qu'il faut prendre sig1hh...)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    gamma2=exp(-2*tow/cos(teta))
    
    sigma0_can_VV=(10)*log10(0.75*omega*cos(teta)*(1-gamma2)+gamma2*sig1vv))
    sigma0_can_HV=(10)*log10(0.75*omega*cos(teta)*(1-gamma2)+gamma2*sig1hv))
    sigma0_can_HH=(10)*log10(0.75*omega*cos(teta)*(1-gamma2)+gamma2*sig1hh))
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/254:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')
ax[0,0].legend()

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
218/255:
#TIRE DU CODE MATLAB POUR SIGMA_0 EN FONCTION DE L'ÉPAISSEUR OPTIQUE DE RAMATA TEL701

tow=linspace(0,1.5,1001)


def Sigma0(tow,teta1,smv,omega,f):

    ###ALBEDO
    #0.1 et 0.3

    ###FREQUENCE en bandes L,S,C
    #1.23e9,3e9,5.3e9
    #f=1.23e9

    ###angle d'incidence
    #20,30,40 deg
    #teta1=20

    ###humidite volumique en pour cent
    #smv=10


    

    #donnees entrees
    rob=1.33
    ros=2.66
    C=19./100
    SAL=6
    T=23
    S=17.16/100
    eps0=8.854e-12
    ewinf=4.9
    epss=4.7
    alpha=0.65
    teta=teta1*pi/180#angle d'incidence en radian
    sm=smv/100#humidite volumique 
    rugos=1.5 # hauteur de rugosite en cm
    #nombre d'onde (2*pi.*f./(3*(10**8))).*(10**-2) en cm-1
    ks=(2*pi*f/(3*(10**8)))*(10**-2)*rugos#adimensionnel


    # calcul cte dielectrique DOBSON
    #eau saline 
    a=1.0+(1.613e-5)*T*SAL-(3.656e-3*SAL)+(3.21e-5*SAL**2)-(4.232e-7)*SAL**3
    ew0=a*(87.134-1.949*0.1*T-(1.276e-2)*T**2+(2.491e-4*T**3))
    b=1.0+(2.282e-5)*T*SAL-7.638e-4*SAL-7.760e-6*SAL**2+(1.105e-8)*SAL**3

    #towpi=2*PI*tow*/
    #towpi=b*((1.1109e-10)-(3.824e-12*T)+(6.938e-14*T**2)-(5.096e-16*T**3))
    towpi=2*pi*tow
    sigeff=-1.645+1.939*rob-2.256*S+1.594*C
    betar=1.275-0.519*S-0.152*C
    betai=1.338-0.603*S-0.166*C
    l=towpi*f
    c=(ew0-ewinf)/(1+l**2)
    #epsfw=epsfwr-j*epsfwi
    epsfwr=ewinf+c
    epsfwi=c*towpi*f+(sigeff*(ros-rob)/2*pi*f*eps0*ros*sm)
    #epsfwi=valeur absolue de (-epsfwi)
    m=epss**alpha
    eps1r=1+(rob/ros)*(m-1)+(sm**betar)*(epsfwr**alpha)-sm
    eps1i=(sm**betai)*(epsfwi**alpha)

    # cte dielectrique du sol
    p=1/alpha
    epsr=eps1r**p
    epsi=eps1i**p

    #MODELE DE OH ET AL. (1992)POUR UNE HUMIDTE ET UNE RUGOSITE DU SOL- 
    #FREQUENCE FIXE, INCIDENCE VARIABLES, POLARISATIN HH, VV ET HV

    #calcul de reflectivite  fresnel
    eps=epsr+epsi*1j
    EPS1=eps**0.5
    EPS1r=EPS1.real
    EPS1i=EPS1.imag
    Z=(1-EPS1r**2-EPS1i**2-(2*EPS1i*1j))/((1+EPS1r)**2+EPS1i**2)
    gama1=abs(Z)
    gama0=gama1**2

    #calcul de reflectivite  fresnel polar H
    z1=eps-sin(teta)**2
    Z1=z1**0.5
    Z1r=Z1.real
    Z1i=Z1.imag
    gamah1=abs((cos(teta)**2-Z1r**2-Z1i**2-(2*cos(teta)*Z1i*1j))/((cos(teta)+Z1r)**2+Z1i**2))
    gamah=gamah1**2

    #calcul de la reflectivite de fresnel polar V
    num=eps*cos(teta)-Z1
    den=eps*cos(teta)+Z1
    gamav1=abs(num/den)
    gamav=gamav1**2

    #somme gamah+gamav
    Somme=gamah+gamav

    #calul de la reflectivite de fresnel au nadir

    EPSn=eps**0.5
    EPSnr=EPSn.real
    EPSni=EPSn.imag
    Zn=(1-EPSnr**2-EPSni**2-(2*EPSni*1j))/((1+EPSnr)**2+EPSni**2)

    gaman=abs(Zn) 

    #gama0
    gama0=gaman**2
    GAMA0=(gama0*3)**(-1)

    #equation parameters
    g=0.7*(1.0-exp(-0.65*(ks**(1.8))))
    phi=(2.0*teta/pi)**(GAMA0)
    racP=(1.0-phi*exp(-ks))
    rap=(((cos(teta))**3)/racP)
    sig1vv=g*(rap*Somme)
    sig1hh=g*racP*((cos(teta))**3)*Somme
    q=0.23*(gama0**0.5)*(1-exp(-ks))
    sig1hv=q*sig1vv
    
    SIGVV=(10)*log10(sig1vv)
    SIGHH=(10)*log10(sig1hh)
    SIGHV=(10)*log10(sig1hv)
    
    ###MAIN EQUATION:  sigma0_can=sigma0_veg+gamma**2*sigma0_sol
    ###gamma**2=e**(-2*tau/cos(theta))
    ###sigma0_sol: donné par le modèle (donc SIGVV, SIGHH, SIGHV qui sont en dB, donc je pense qu'il faut prendre sig1hh...)
    ###sigma0_veg=0.75*alpha*cos(theta)*(1-gamma**2)
    
    ###Main equation output: sigma0_can=10*log10(0.75*alpha*cos(teta1)*(1-exp(-2*tow/cos(teta1)))+exp(-2*tow/cos(teta1))*SIGHH)
    
    gamma2=exp(-2*tow/cos(teta))
    
    sigma0_can_VV=(10)*log10(0.75*omega*cos(teta)*(1-gamma2)+gamma2*sig1vv)
    sigma0_can_HV=(10)*log10(0.75*omega*cos(teta)*(1-gamma2)+gamma2*sig1hv)
    sigma0_can_HH=(10)*log10(0.75*omega*cos(teta)*(1-gamma2)+gamma2*sig1hh)
    
    
    
    return sigma0_can_HH,sigma0_can_HV,sigma0_can_VV
218/256:
#SIGMA SIM: freq=1.23e9Hz
#parameters: tow, angle, smv, w, freq

freq=1.23e9

fig,ax=subplots(3,3,figsize=(15,10),dpi=120)

#HH, smv 10
ax[0,0].plot(tow, Sigma0(tow,20,10,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[0,0].plot(tow, Sigma0(tow,20,10,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,0].plot(tow, Sigma0(tow,30,10,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[0,0].plot(tow, Sigma0(tow,40,10,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')
ax[0,0].legend()

#HV, smv 10
ax[0,1].plot(tow, Sigma0(tow,20,10,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[0,1].plot(tow, Sigma0(tow,20,10,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,1].plot(tow, Sigma0(tow,30,10,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[0,1].plot(tow, Sigma0(tow,40,10,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 10
ax[0,2].plot(tow, Sigma0(tow,20,10,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[0,2].plot(tow, Sigma0(tow,20,10,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[0,2].plot(tow, Sigma0(tow,30,10,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[0,2].plot(tow, Sigma0(tow,40,10,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 20
ax[1,0].plot(tow, Sigma0(tow,20,20,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[1,0].plot(tow, Sigma0(tow,20,20,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,0].plot(tow, Sigma0(tow,30,20,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[1,0].plot(tow, Sigma0(tow,40,20,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 20
ax[1,1].plot(tow, Sigma0(tow,20,20,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[1,1].plot(tow, Sigma0(tow,20,20,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,1].plot(tow, Sigma0(tow,30,20,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[1,1].plot(tow, Sigma0(tow,40,20,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 20
ax[1,2].plot(tow, Sigma0(tow,20,20,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[1,2].plot(tow, Sigma0(tow,20,20,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[1,2].plot(tow, Sigma0(tow,30,20,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[1,2].plot(tow, Sigma0(tow,40,20,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')

#HH, smv 30
ax[2,0].plot(tow, Sigma0(tow,20,30,0.1,freq)[0],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.1,freq)[0],label='30$\degree$', color='b',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.1,freq)[0],label='40$\degree$', color='b',linestyle=':')
ax[2,0].plot(tow, Sigma0(tow,20,30,0.3,freq)[0],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,0].plot(tow, Sigma0(tow,30,30,0.3,freq)[0],label='30$\degree$ ', color='r',linestyle='--')
ax[2,0].plot(tow, Sigma0(tow,40,30,0.3,freq)[0],label='40$\degree$ ', color='r',linestyle=':')

#HV, smv 30
ax[2,1].plot(tow, Sigma0(tow,20,30,0.1,freq)[1],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.1,freq)[1],label='30$\degree$', color='b',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.1,freq)[1],label='40$\degree$', color='b',linestyle=':')
ax[2,1].plot(tow, Sigma0(tow,20,30,0.3,freq)[1],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,1].plot(tow, Sigma0(tow,30,30,0.3,freq)[1],label='30$\degree$ ', color='r',linestyle='--')
ax[2,1].plot(tow, Sigma0(tow,40,30,0.3,freq)[1],label='40$\degree$ ', color='r',linestyle=':')

#VV, smv 30
ax[2,2].plot(tow, Sigma0(tow,20,30,0.1,freq)[2],label='20$\degree$, w=0.1', color='b',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.1,freq)[2],label='30$\degree$', color='b',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.1,freq)[2],label='40$\degree$', color='b',linestyle=':')
ax[2,2].plot(tow, Sigma0(tow,20,30,0.3,freq)[2],label='20$\degree$, w=0.3', color='r',linestyle='-')
ax[2,2].plot(tow, Sigma0(tow,30,30,0.3,freq)[2],label='30$\degree$ ', color='r',linestyle='--')
ax[2,2].plot(tow, Sigma0(tow,40,30,0.3,freq)[2],label='40$\degree$ ', color='r',linestyle=':')




#ax.legend()
219/131: print (lambda_theo)
219/132:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')
219/133:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(350,1100,252)

fig,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(lambdas_nom, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')
219/134:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(350,1100,252)

fig2,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(lambdas_nom, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')
219/135:
#GRAPHS FOR SENSOR NUMBER

# xs=arange(len(data_argon))
# #print (xs)

# fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
# subplots_adjust(wspace=0.3)
# ax[0].plot(xs, argon,label='argon')
# ax[0].set_xlabel('sensor number')
# ax[0].set_ylabel('DN')
# ax[0].set_xlim(0,252)
# ax[0].set_ylim(0)
# for i in max_argonind:
#     ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
# ax[0].legend()

# ax[1].plot(xs, hg,label='mercury', color='red')
# #ax[1].set_xlabel('sensor number')
# #ax[1].set_ylabel('DN')
# ax[1].set_xlim(0,252)
# ax[1].set_ylim(0)
# for i in max_hgind:
#     ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
# ax[1].legend()
# ax[1].set_xlabel('sensor number')
# ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(350,1100,252)

fig2,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(lambdas_nom, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')
219/136:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(350,1100,252)
print (lambdas_nom)

fig2,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(lambdas_nom, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')
219/137:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(350,1100,252)

fig2,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(lambdas_nom, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
#ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')
219/138:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(350,1100,252)

fig2,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
# for i in max_argonind:
#     ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(lambdas_nom, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
#ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
# for i in max_hgind:
#     ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')
219/139:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(350,1100,252)

fig2,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(350,1100)
ax[0].set_ylim(0)
# for i in max_argonind:
#     ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(lambdas_nom, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(350,1100)
ax[1].set_ylim(0)
# for i in max_hgind:
#     ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')
219/140:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
amax = amax[amax[:,1].argsort()][::-1]
max_argonind = amax[amax[:,1]>150,0]
print(max_argonind)

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
hgmax = hgmax[hgmax[:,1].argsort()][::-1]
max_hgind = hgmax[hgmax[:,1]>200,0]
print (max_hgind)
219/141:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(350,1100,252)

fig2,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon')
ax[0].set_xlabel('wavelength (nm)')
ax[0].set_ylabel('DN')
ax[0].set_xlim(350,1100)
ax[0].set_ylim(0)
# for i in max_argonind:
#     ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(lambdas_nom, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(350,1100)
ax[1].set_ylim(0)
# for i in max_hgind:
#     ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('wavelength (nm)')
ax[1].set_ylabel('DN')
219/142:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(350,1100,252)

fig2,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon')
ax[0].set_xlabel('wavelength (nm)')
ax[0].set_ylabel('DN')
ax[0].set_xlim(350,1100)
ax[0].set_ylim(0)
# for i in max_argonind:
#     ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(lambdas_nom, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(350,1100)
ax[1].set_ylim(0)
# for i in max_hgind:
#     ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('wavelength (nm)')
ax[1].set_ylabel('DN')
locator_params(nbins=10)
219/143:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(350,1100,252)

fig2,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon')
ax[0].set_xlabel('wavelength (nm)')
ax[0].set_ylabel('DN')
ax[0].set_xlim(350,1100)
ax[0].set_ylim(0)
# for i in max_argonind:
#     ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()
locator_params(nbins=10)


ax[1].plot(lambdas_nom, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(350,1100)
ax[1].set_ylim(0)
# for i in max_hgind:
#     ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('wavelength (nm)')
ax[1].set_ylabel('DN')
locator_params(nbins=10)
219/144:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(350,1100,252)

fig2,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon')
ax[0].set_xlabel('wavelength (nm)')
ax[0].set_ylabel('DN')
ax[0].set_xlim(350,1100)
ax[0].set_ylim(0)
# for i in max_argonind:
#     ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()
ax[0].locator_params(nbins=10)


ax[1].plot(lambdas_nom, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(350,1100)
ax[1].set_ylim(0)
# for i in max_hgind:
#     ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('wavelength (nm)')
ax[1].set_ylabel('DN')
locator_params(nbins=10)
219/145:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(350,1100,252)

fig2,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon')
ax[0].set_xlabel('wavelength (nm)')
ax[0].set_ylabel('DN')
ax[0].set_xlim(350,1100)
ax[0].set_ylim(0)
# for i in max_argonind:
#     ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()
ax[0].locator_params(nbins=10)


ax[1].plot(lambdas_nom, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(350,1100)
ax[1].set_ylim(0)
# for i in max_hgind:
#     ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('wavelength (nm)')
ax[1].set_ylabel('DN')
ax[1].locator_params(nbins=10)
219/146:
argon=genfromtxt('spectra/argon_start.txt')
hg=genfromtxt('spectra/hg_last.txt')
hg_red=genfromtxt('spectra/Hg_Red_filter.txt')
219/147:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(350,1100,252)

fig2,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon')
ax[0].set_xlabel('wavelength (nm)')
ax[0].set_ylabel('DN')
ax[0].set_xlim(350,1100)
ax[0].set_ylim(0)
# for i in max_argonind:
#     ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()
ax[0].locator_params(nbins=10)


ax[1].plot(lambdas_nom, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(350,1100)
ax[1].set_ylim(0)
# for i in max_hgind:
#     ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('wavelength (nm)')
ax[1].set_ylabel('DN')
ax[1].locator_params(nbins=10)
219/148:
argon=genfromtxt('spectra/argon_last_red_filter.txt')
hg=genfromtxt('spectra/hg_last.txt')
hg_red=genfromtxt('spectra/Hg_Red_filter.txt')
219/149:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(350,1100,252)

fig2,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon')
ax[0].set_xlabel('wavelength (nm)')
ax[0].set_ylabel('DN')
ax[0].set_xlim(350,1100)
ax[0].set_ylim(0)
# for i in max_argonind:
#     ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()
ax[0].locator_params(nbins=10)


ax[1].plot(lambdas_nom, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(350,1100)
ax[1].set_ylim(0)
# for i in max_hgind:
#     ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('wavelength (nm)')
ax[1].set_ylabel('DN')
ax[1].locator_params(nbins=10)
219/150:
argon=genfromtxt('spectra/argon_last.txt')
hg=genfromtxt('spectra/hg_last.txt')
hg_red=genfromtxt('spectra/Hg_Red_filter.txt')
219/151:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(350,1100,252)

fig2,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon')
ax[0].set_xlabel('wavelength (nm)')
ax[0].set_ylabel('DN')
ax[0].set_xlim(350,1100)
ax[0].set_ylim(0)
# for i in max_argonind:
#     ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()
ax[0].locator_params(nbins=10)


ax[1].plot(lambdas_nom, hg,label='mercury', color='red')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(350,1100)
ax[1].set_ylim(0)
# for i in max_hgind:
#     ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('wavelength (nm)')
ax[1].set_ylabel('DN')
ax[1].locator_params(nbins=10)
219/152:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(350,1100,252)

fig2,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon',color='red')
ax[0].set_xlabel('wavelength (nm)')
ax[0].set_ylabel('DN')
ax[0].set_xlim(350,1100)
ax[0].set_ylim(0)
# for i in max_argonind:
#     ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()
ax[0].locator_params(nbins=10)


ax[1].plot(lambdas_nom, hg,label='mercury', color='blue')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(350,1100)
ax[1].set_ylim(0)
# for i in max_hgind:
#     ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('wavelength (nm)')
ax[1].set_ylabel('DN')
ax[1].locator_params(nbins=10)
219/153:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(365,1100,252)

fig2,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon',color='red')
ax[0].set_xlabel('wavelength (nm)')
ax[0].set_ylabel('DN')
ax[0].set_xlim(350,1100)
ax[0].set_ylim(0)
# for i in max_argonind:
#     ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()
ax[0].locator_params(nbins=10)


ax[1].plot(lambdas_nom, hg,label='mercury', color='blue')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(350,1100)
ax[1].set_ylim(0)
# for i in max_hgind:
#     ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('wavelength (nm)')
ax[1].set_ylabel('DN')
ax[1].locator_params(nbins=10)
219/154:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(365,1100,252)

fig2,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon',color='red')
ax[0].set_xlabel('wavelength (nm)')
ax[0].set_ylabel('DN')
ax[0].set_xlim(365,1100)
ax[0].set_ylim(0)
# for i in max_argonind:
#     ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()
ax[0].locator_params(nbins=10)


ax[1].plot(lambdas_nom, hg,label='mercury', color='blue')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(365,1100)
ax[1].set_ylim(0)
# for i in max_hgind:
#     ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('wavelength (nm)')
ax[1].set_ylabel('DN')
ax[1].locator_params(nbins=10)
219/155:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(365,1100,252)

fig2,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon',color='red')
ax[0].set_xlabel('wavelength (nm)')
ax[0].set_ylabel('DN')
ax[0].set_xlim(600,1100)
ax[0].set_ylim(0)
# for i in max_argonind:
#     ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()
ax[0].locator_params(nbins=10)


ax[1].plot(lambdas_nom, hg,label='mercury', color='blue')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(365,1100)
ax[1].set_ylim(0)
# for i in max_hgind:
#     ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('wavelength (nm)')
ax[1].set_ylabel('DN')
ax[1].locator_params(nbins=10)
219/156:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(365,1100,252)

fig2,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon',color='red')
ax[0].set_xlabel('wavelength (nm)')
ax[0].set_ylabel('DN')
ax[0].set_xlim(600,1100)
ax[0].set_ylim(0)
# for i in max_argonind:
#     ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()
ax[0].locator_params(nbins=6)


ax[1].plot(lambdas_nom, hg,label='mercury', color='blue')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(365,1100)
ax[1].set_ylim(0)
# for i in max_hgind:
#     ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('wavelength (nm)')
ax[1].set_ylabel('DN')
ax[1].locator_params(nbins=10)
219/157:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(365,1100,252)

fig2,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon',color='red')
ax[0].set_xlabel('wavelength (nm)')
ax[0].set_ylabel('DN')
ax[0].set_xlim(600,1100)
ax[0].set_ylim(0)
# for i in max_argonind:
#     ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()
ax[0].locator_params(nbins=6)


ax[1].plot(lambdas_nom, hg,label='mercury', color='blue')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
#ax[1].set_xlim(365,1100)
ax[1].set_ylim(0)
# for i in max_hgind:
#     ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('wavelength (nm)')
ax[1].set_ylabel('DN')
ax[1].locator_params(nbins=10)
219/158:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(365,1100,252)

fig2,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon',color='red')
ax[0].set_xlabel('wavelength (nm)')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(600,1100)
ax[0].set_ylim(0)
# for i in max_argonind:
#     ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()
ax[0].locator_params(nbins=6)


ax[1].plot(lambdas_nom, hg,label='mercury', color='blue')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
#ax[1].set_xlim(365,1100)
ax[1].set_ylim(0)
# for i in max_hgind:
#     ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('wavelength (nm)')
ax[1].set_ylabel('DN')
ax[1].locator_params(nbins=10)
219/159:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(365,1100,252)

fig2,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon',color='red')
ax[0].set_xlabel('wavelength (nm)')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(600,1100)
ax[0].set_ylim(0)
# for i in max_argonind:
#     ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()
ax[0].locator_params(nbins=6)


ax[1].plot(lambdas_nom, hg_red,label='mercury', color='blue')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
#ax[1].set_xlim(365,1100)
ax[1].set_ylim(0)
# for i in max_hgind:
#     ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('wavelength (nm)')
ax[1].set_ylabel('DN')
ax[1].locator_params(nbins=10)
219/160:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(365,1100,252)

fig2,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon',color='red')
ax[0].set_xlabel('wavelength (nm)')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(600,1100)
ax[0].set_ylim(0)
# for i in max_argonind:
#     ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()
ax[0].locator_params(nbins=6)


ax[1].plot(lambdas_nom, hg,label='mercury', color='blue')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
#ax[1].set_xlim(365,1100)
ax[1].set_ylim(0)
# for i in max_hgind:
#     ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('wavelength (nm)')
ax[1].set_ylabel('DN')
ax[1].locator_params(nbins=10)
219/161:
argon=genfromtxt('spectra/argon_new1.txt')
hg=genfromtxt('spectra/hg_last.txt')
hg_red=genfromtxt('spectra/Hg_Red_filter.txt')
219/162:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(365,1100,252)

fig2,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon',color='red')
ax[0].set_xlabel('wavelength (nm)')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(600,1100)
ax[0].set_ylim(0)
# for i in max_argonind:
#     ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()
ax[0].locator_params(nbins=6)


ax[1].plot(lambdas_nom, hg,label='mercury', color='blue')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
#ax[1].set_xlim(365,1100)
ax[1].set_ylim(0)
# for i in max_hgind:
#     ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('wavelength (nm)')
ax[1].set_ylabel('DN')
ax[1].locator_params(nbins=10)
219/163:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
amax = amax[amax[:,1].argsort()][::-1]
max_argonind = amax[amax[:,1]>150,0]
print(max_argonind)

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
hgmax = hgmax[hgmax[:,1].argsort()][::-1]
max_hgind = hgmax[hgmax[:,1]>200,0]
print (max_hgind)
219/164:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
amax = amax[amax[:,1].argsort()][::-1]
max_argonind = amax[amax[:,1]>150,0]
print(max_argonind, amax)

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
hgmax = hgmax[hgmax[:,1].argsort()][::-1]
max_hgind = hgmax[hgmax[:,1]>200,0]
print (max_hgind)
219/165:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
amax = amax[amax[:,1].argsort()][::-1]
max_argonind = amax[amax[:,1]>1000,0]
print(max_argonind, amax)

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
hgmax = hgmax[hgmax[:,1].argsort()][::-1]
max_hgind = hgmax[hgmax[:,1]>200,0]
print (max_hgind)
219/166:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
amax = amax[amax[:,1].argsort()][::-1]
max_argonind = amax[amax[:,1]>1000,0]
print(max_argonind)

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
hgmax = hgmax[hgmax[:,1].argsort()][::-1]
max_hgind = hgmax[hgmax[:,1]>200,0]
print (max_hgind)
219/167:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
for i in max_argonind:
    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')

#GRAPHS FOR NOMINAL LAMBDA

lambdas_nom = linspace(365,1100,252)

fig2,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(lambdas_nom, argon,label='argon',color='red')
ax[0].set_xlabel('wavelength (nm)')
ax[0].set_ylabel('DN')
#ax[0].set_xlim(600,1100)
ax[0].set_ylim(0)
# for i in max_argonind:
#     ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()
ax[0].locator_params(nbins=6)


ax[1].plot(lambdas_nom, hg,label='mercury', color='blue')
#ax[1].set_xlabel('sensor number')
#ax[1].set_ylabel('DN')
#ax[1].set_xlim(365,1100)
ax[1].set_ylim(0)
# for i in max_hgind:
#     ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('wavelength (nm)')
ax[1].set_ylabel('DN')
ax[1].locator_params(nbins=10)
219/168:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
amax = amax[amax[:,1].argsort()][::-1]
max_argonind = amax[amax[:,1]>1000,0]
print(max_argonind)

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
hgmax = hgmax[hgmax[:,1].argsort()][::-1]
max_hgind = hgmax[hgmax[:,1]>100,0]
print (max_hgind)
219/169:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
amax = amax[amax[:,1].argsort()][::-1]
max_argonind = amax[amax[:,1]>500,0]
print(max_argonind)

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
hgmax = hgmax[hgmax[:,1].argsort()][::-1]
max_hgind = hgmax[hgmax[:,1]>200,0]
print (max_hgind)
219/170:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    
ax[0].axvline(139,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')
219/171:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    
ax[0].axvline(117,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')
219/172:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    
ax[0].axvline(120,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')
219/173:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    
ax[0].axvline(120,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')


fig1,ax=subplots(figsize=(4,4), dpi=250)
subplots_adjust(wspace=0.3)
ax.plot(linspace(365,1100,252), argon,label='argon', color='red')
ax.set_xlabel('sensor number')
ax.set_ylabel('DN')
ax.set_xlim(0,252)
ax.set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    
ax[0].axvline(120,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()
219/174:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    
ax[0].axvline(120,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')


fig1,ax=subplots(figsize=(4,4), dpi=250)
subplots_adjust(wspace=0.3)
ax.plot(linspace(365,1100,252), argon,label='argon', color='red')
ax.set_xlabel('sensor number')
ax.set_ylabel('DN')
ax.set_xlim(0,252)
ax.set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    
#ax[0].axvline(120,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()
219/175:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    
ax[0].axvline(120,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')


fig1,ax=subplots(figsize=(4,4), dpi=250)
subplots_adjust(wspace=0.3)
ax.plot(linspace(365,1100,252), argon,label='argon', color='red')
ax.set_xlabel('sensor number')
ax.set_ylabel('DN')
ax.set_xlim(0,252)
ax.set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
219/176:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    
ax[0].axvline(120,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')


fig1,ax=subplots(figsize=(4,4), dpi=250)
subplots_adjust(wspace=0.3)
ax.plot(linspace(365,1100,252), argon,label='argon', color='red')
ax.set_xlabel('sensor number')
ax.set_ylabel('DN')
#ax.set_xlim(0,252)
ax.set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
219/177:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    
ax[0].axvline(120,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')


fig1,ax=subplots(figsize=(2,2), dpi=250)
subplots_adjust(wspace=0.3)
ax.plot(linspace(365,1100,252), argon,label='argon', color='red')
ax.set_xlabel('sensor number')
ax.set_ylabel('DN')
#ax.set_xlim(0,252)
ax.set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
219/178:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    
ax[0].axvline(120,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')


fig1,ax=subplots(figsize=(2,2), dpi=100)
subplots_adjust(wspace=0.3)
ax.plot(linspace(365,1100,252), argon,label='argon', color='red')
ax.set_xlabel('sensor number')
ax.set_ylabel('DN')
#ax.set_xlim(0,252)
ax.set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
219/179:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    
ax[0].axvline(120,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')


fig1,ax=subplots(figsize=(2,2), dpi=1000)
subplots_adjust(wspace=0.3)
ax.plot(linspace(365,1100,252), argon,label='argon', color='red')
ax.set_xlabel('sensor number')
ax.set_ylabel('DN')
#ax.set_xlim(0,252)
ax.set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
219/180:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    
ax[0].axvline(120,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')


fig1,ax=subplots(figsize=(4,4), dpi=150)
subplots_adjust(wspace=0.3)
ax.plot(linspace(365,1100,252), argon,label='argon', color='red')
ax.set_xlabel('sensor number')
ax.set_ylabel('DN')
#ax.set_xlim(0,252)
ax.set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
219/181:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    
ax[0].axvline(120,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')


fig1,ax=subplots(figsize=(4,4), dpi=150)
subplots_adjust(wspace=0.3)
ax.plot(linspace(365,1100,252), argon,label='argon', color='red')
ax.set_xlabel('sensor number')
ax.set_ylabel('DN')
ax.set_xlim(660,1100)
ax.set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
219/182:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    
ax[0].axvline(120,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')


fig1,ax=subplots(figsize=(4,4), dpi=150)
subplots_adjust(wspace=0.3)
ax.plot(linspace(365,1100,252), argon,label='argon', color='red')
ax.set_xlabel('sensor number')
ax.set_ylabel('DN')
ax.set_xlim(660,1000)
ax.set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
219/183:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    
ax[0].axvline(135,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')


fig1,ax=subplots(figsize=(4,4), dpi=150)
subplots_adjust(wspace=0.3)
ax.plot(linspace(365,1100,252), argon,label='argon', color='red')
ax.set_xlabel('sensor number')
ax.set_ylabel('DN')
ax.set_xlim(660,1000)
ax.set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
219/184:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    
ax[0].axvline(155,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')


fig1,ax=subplots(figsize=(4,4), dpi=150)
subplots_adjust(wspace=0.3)
ax.plot(linspace(365,1100,252), argon,label='argon', color='red')
ax.set_xlabel('sensor number')
ax.set_ylabel('DN')
ax.set_xlim(660,1000)
ax.set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
219/185:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    
ax[0].axvline(142,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')


fig1,ax=subplots(figsize=(4,4), dpi=150)
subplots_adjust(wspace=0.3)
ax.plot(linspace(365,1100,252), argon,label='argon', color='red')
ax.set_xlabel('sensor number')
ax.set_ylabel('DN')
ax.set_xlim(660,1000)
ax.set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
219/186:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    
ax[0].axvline(139,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')


fig1,ax=subplots(figsize=(4,4), dpi=150)
subplots_adjust(wspace=0.3)
ax.plot(linspace(365,1100,252), argon,label='argon', color='red')
ax.set_xlabel('sensor number')
ax.set_ylabel('DN')
ax.set_xlim(660,1000)
ax.set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
219/187:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    
ax[0].axvline(155,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')


fig1,ax=subplots(figsize=(4,4), dpi=150)
subplots_adjust(wspace=0.3)
ax.plot(linspace(365,1100,252), argon,label='argon', color='red')
ax.set_xlabel('sensor number')
ax.set_ylabel('DN')
ax.set_xlim(660,1000)
ax.set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
219/188:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    
ax[0].axvline(158,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')


fig1,ax=subplots(figsize=(4,4), dpi=150)
subplots_adjust(wspace=0.3)
ax.plot(linspace(365,1100,252), argon,label='argon', color='red')
ax.set_xlabel('sensor number')
ax.set_ylabel('DN')
ax.set_xlim(660,1000)
ax.set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
219/189:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    
ax[0].axvline(168,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')


fig1,ax=subplots(figsize=(4,4), dpi=150)
subplots_adjust(wspace=0.3)
ax.plot(linspace(365,1100,252), argon,label='argon', color='red')
ax.set_xlabel('sensor number')
ax.set_ylabel('DN')
ax.set_xlim(660,1000)
ax.set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
219/190:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    
ax[0].axvline(190,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')


fig1,ax=subplots(figsize=(4,4), dpi=150)
subplots_adjust(wspace=0.3)
ax.plot(linspace(365,1100,252), argon,label='argon', color='red')
ax.set_xlabel('sensor number')
ax.set_ylabel('DN')
ax.set_xlim(660,1000)
ax.set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
219/191: print (lambda_theo)
219/192: print (lambda_theo[120,139,142,155,158,168,190])
219/193: print (lambda_theo[[120,139,142,155,158,168,190]])
219/194: print (lambda_theo[[119,138,141,154,157,167,189]])
219/195:
#GRAPHS FOR SENSOR NUMBER

xs=arange(len(data_argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    
ax[0].axvline(120,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')


fig1,ax=subplots(figsize=(4,4), dpi=150)
subplots_adjust(wspace=0.3)
ax.plot(linspace(365,1100,252), argon,label='argon', color='red')
ax.set_xlabel('sensor number')
ax.set_ylabel('DN')
ax.set_xlim(660,1000)
ax.set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
219/196:
print (lambda_theo[[119,138,141,154,157,167,189]])
print (lambda_theo[0])
219/197:
print (lambda_theo[[119,138,141,154,157,167,189]])
print (lambda_theo[1])
219/198:
print (lambda_theo[[119,138,141,154,157,167,189]])
print (lambda_theo[0])
219/199:
print (lambda_theo[[119,138,141,154,157,167,189]])
print (lambda_theo[0])
print (xs[0])
219/200:
print (lambda_theo[[119,138,141,154,157,167,189]])
print (lambda_theo[1])
219/201:
print (lambda_theo[[119,138,141,154,157,167,189]])
print (lambda_theo[2])
219/202:
print (lambda_theo[[119,138,141,154,157,167,189]])
print (xs[0])
219/203:
print (lambda_theo[[119,138,141,154,157,167,189,190]])
print (xs[0])
219/204:
print (lambda_theo[[119,138,141,154,157,167,189]])
print (xs[0])
219/205:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
amax = amax[amax[:,1].argsort()][::-1]
max_argonind = amax[amax[:,1]>500,0]
print(max_argonind)

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
hgmax = hgmax[hgmax[:,1].argsort()][::-1]
max_hgind = hgmax[hgmax[:,1]>200,0]
print (max_hgind[:-2])
219/206:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
amax = amax[amax[:,1].argsort()][::-1]
max_argonind = amax[amax[:,1]>500,0]
print(max_argonind)

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
hgmax = hgmax[hgmax[:,1].argsort()][::-1]
max_hgind = hgmax[hgmax[:,1]>200,0]
print (max_hgind[:-1])
219/207:
#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
amax = amax[amax[:,1].argsort()][::-1]
max_argonind = amax[amax[:,1]>500,0]
print(max_argonind)

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
hgmax = hgmax[hgmax[:,1].argsort()][::-1]
max_hgind = hgmax[hgmax[:,1]>200,0]
print (max_hgind[:-2])
219/208:
print (lambda_theo[max_hgind[:-2]])
print (xs[0])
219/209:
print (lambda_theo[int(max_hgind[:-2])])
print (xs[0])
219/210:
print (lambda_theo[list(int(max_hgind[:-2]))])
print (xs[0])
219/211:
print (lambda_theo[int(list(max_hgind[:-2]))])
print (xs[0])
219/212:
print (lambda_theo[[12,24,64,76]]
print (xs[0])
219/213:
print (lambda_theo[[12,24,64,76]])
print (xs[0])
222/1: %matplotlib inline
222/2:
from scipy import *
from scipy.optimize import curve_fit
from matplotlib.pyplot import *
222/3:
argon=genfromtxt('spectra/argon_new1.txt')
hg=genfromtxt('spectra/hg_last.txt')
hg_red=genfromtxt('spectra/Hg_Red_filter.txt')
sky_ref=genfromtxt('spectra/Luminance_ciel_ModTran.csv',delimiter=',')[::-1]
sky_ref=sky_ref[:,[1,4]]
sky1=genfromtxt('spectra/ciel1.txt')
sky2=genfromtxt('spectra/ciel2.txt')
skyr=genfromtxt('spectra/cielrouge.txt')
skyg=genfromtxt('spectra/cielvert.txt')
skyb=genfromtxt('spectra/cielbleu.txt')
skyy=genfromtxt('spectra/cieljaune.txt')
222/4: print (sky_ref)
222/5:
#GRAPHS FOR SENSOR NUMBER

#Trouver les max des pics!
da = diff(argon)
aind = np.where(np.sign(da[:-1]) > np.sign(da[1:]))[0]+1
amax = np.array([xs[aind],argon[aind]]).T
amax = amax[amax[:,1].argsort()][::-1]
max_argonind = amax[amax[:,1]>500,0]
print(max_argonind)

dhg = diff(hg)
hgind = np.where(np.sign(dhg[:-1]) > np.sign(dhg[1:]))[0]+1
hgmax = np.array([xs[hgind],hg[hgind]]).T
hgmax = hgmax[hgmax[:,1].argsort()][::-1]
max_hgind = hgmax[hgmax[:,1]>200,0]
print (max_hgind[:-2])


xs=arange(len(argon))
#print (xs)

fig1,ax=subplots(1,2,figsize=(8,3), dpi=250)
subplots_adjust(wspace=0.3)
ax[0].plot(xs, argon,label='argon', color='red')
ax[0].set_xlabel('sensor number')
ax[0].set_ylabel('DN')
ax[0].set_xlim(0,252)
ax[0].set_ylim(0)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    
ax[0].axvline(120,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[0].legend()

ax[1].plot(xs, hg,label='mercury', color='blue')
ax[1].set_xlim(0,252)
ax[1].set_ylim(0)
for i in max_hgind:
    ax[1].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax[1].legend()
ax[1].set_xlabel('sensor number')
ax[1].set_ylabel('DN')


fig1,ax=subplots(figsize=(4,4), dpi=150)
subplots_adjust(wspace=0.3)
ax.plot(linspace(365,1100,252), argon,label='argon', color='red')
ax.set_xlabel('sensor number')
ax.set_ylabel('DN')
ax.set_xlim(660,1000)
#ax.set_ylim(0,500)
#for i in max_argonind:
#    ax[0].axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
    

    
#find peak second order
fig2,ax=subplots()
ax.plot(xs, hg,label='mercury', color='blue')
ax.set_xlim(240)
ax.set_ylim(0,400)
#for i in max_hgind:
#    ax.axvline(i,linestyle='--', color='#bbbbbb',linewidth=0.5)
ax.legend()
ax.set_xlabel('sensor number')
ax.set_ylabel('DN')

print (hg[245])
222/6:
#NDVI graph from LAI dependence
LAI=[0.01,0.1 ,0.5 ,1  ,3  ,6 ]
NDVI=[3,0.101,0.164,0.0.286,0.602,0.837,0.859]

fig,ax=subplots(figsize=(6,3),dpi=150)
ax.plot(LAI, NDVI)
222/7:
#NDVI graph from LAI dependence
LAI=[0.01,0.1 ,0.5 ,1  ,3  ,6 ]
NDVI=[3,0.101,0.164,0.286,0.602,0.837,0.859]

fig,ax=subplots(figsize=(6,3),dpi=150)
ax.plot(LAI, NDVI)
222/8:
#NDVI graph from LAI dependence
LAI=[0.01,0.1 ,0.5 ,1  ,3  ,6 ]
NDVI=[0.101,0.164,0.286,0.602,0.837,0.859]

fig,ax=subplots(figsize=(6,3),dpi=150)
ax.plot(LAI, NDVI)
222/9:
#NDVI graph from LAI dependence
LAI=[0.01,0.1 ,0.5 ,1  ,3  ,6 ]
NDVI=[0.101,0.17,0.286,0.602,0.837,0.859]

fig,ax=subplots(figsize=(6,3),dpi=150)
ax.plot(LAI, NDVI)
222/10:
#NDVI graph from LAI dependence
LAI=[0.01,0.1 ,0.5 ,1  ,3  ,6 ]
NDVI=[0.101,0.19,0.286,0.602,0.837,0.859]

fig,ax=subplots(figsize=(6,3),dpi=150)
ax.plot(LAI, NDVI)
222/11:
#NDVI graph from LAI dependence
LAI=[0.01,0.1 ,0.5 ,1  ,3  ,6 ]
NDVI=[0.101,0.19,0.35,0.602,0.837,0.859]

fig,ax=subplots(figsize=(6,3),dpi=150)
ax.plot(LAI, NDVI)
222/12:
#NDVI graph from LAI dependence
LAI=[0.01,0.1 ,0.5 ,1  ,3  ,6 ]
NDVI=[0.101,0.19,0.39,0.602,0.837,0.859]

fig,ax=subplots(figsize=(6,3),dpi=150)
ax.plot(LAI, NDVI)
222/13:
#NDVI graph from LAI dependence
LAI=[0.01,0.1 ,0.5 ,1  ,3  ,6 ]
NDVI=[0.101,0.19,0.41,0.602,0.837,0.859]

fig,ax=subplots(figsize=(6,3),dpi=150)
ax.plot(LAI, NDVI)
222/14:
#NDVI graph from LAI dependence
LAI=[0.01,0.1 ,0.5 ,1  ,3  ,6 ]
NDVI=[0.101,0.19,0.45,0.602,0.837,0.859]

fig,ax=subplots(figsize=(6,3),dpi=150)
ax.plot(LAI, NDVI)
222/15:
#NDVI graph from LAI dependence
LAI=[0.01,0.1 ,0.5 ,1  ,3  ,6 ]
NDVI=[0.101,0.19,0.45,0.602,0.837,0.859]

fig,ax=subplots(figsize=(6,3),dpi=150)
ax.plot(LAI, NDVI)
ax.set_xlabel('LAI')
ax.set_ylabel('NDVI')
222/16:
#NDVI graph from LAI dependence
LAI=[0.01,0.1 ,0.5 ,1  ,3  ,6 ]
NDVI=[0.101,0.19,0.45,0.602,0.837,0.859]

fig,ax=subplots(figsize=(6,3),dpi=150)
ax.plot(LAI, NDVI)
ax.scatter(LAI, NDVI,color='k')
ax.set_xlabel('LAI')
ax.set_ylabel('NDVI')
222/17:
#NDVI graph from LAI dependence
LAI=[0.01,0.1 ,0.5 ,1  ,3  ,6 ]
NDVI=[0.101,0.19,0.45,0.602,0.837,0.859]

fig,ax=subplots(figsize=(6,3),dpi=150)
ax.plot(LAI, NDVI)
ax.scatter(LAI, NDVI,color='k', s=1)
ax.set_xlabel('LAI')
ax.set_ylabel('NDVI')
222/18:
#NDVI graph from LAI dependence
LAI=[0.01,0.1 ,0.5 ,1  ,3  ,6 ]
NDVI=[0.101,0.19,0.45,0.602,0.837,0.859]

fig,ax=subplots(figsize=(6,3),dpi=150)
ax.plot(LAI, NDVI)
ax.scatter(LAI, NDVI,color='k', s=3)
ax.set_xlabel('LAI')
ax.set_ylabel('NDVI')
222/19:
#NDVI graph from LAI dependence
LAI=[0.01,0.1 ,0.5 ,1  ,3  ,6 ]
NDVI=[0.101,0.19,0.45,0.602,0.837,0.859]

fig,ax=subplots(figsize=(6,3),dpi=150)
ax.plot(LAI, NDVI)
ax.scatter(LAI, NDVI,color='k', s=5)
ax.set_xlabel('LAI')
ax.set_ylabel('NDVI')
222/20:
#NDVI graph from LAI dependence
LAI=[0.01,0.1 ,0.5 ,1  ,3  ,6 ]
NDVI=[0.101,0.19,0.45,0.602,0.837,0.859]

fig,ax=subplots(figsize=(6,3),dpi=150)
ax.plot(LAI, NDVI)
ax.scatter(LAI, NDVI,color='k', s=7)
ax.set_xlabel('LAI')
ax.set_ylabel('NDVI')
222/21:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,11)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
ax[0].scatter(theta,red0,label='632nm',color='r')
ax[0].scatter(theta,NIR0,label='632nm',color='firebrick')



ax[1].scatter(theta,red90,label='632nm',color='r')
ax[1].scatter(theta,NIR90,label='632nm',color='firebrick')
222/22:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
ax[0].scatter(theta,red0,label='632nm',color='r')
ax[0].scatter(theta,NIR0,label='632nm',color='firebrick')



ax[1].scatter(theta,red90,label='632nm',color='r')
ax[1].scatter(theta,NIR90,label='632nm',color='firebrick')
222/23:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
ax[0].scatter(theta,red0,label='632nm',color='r')
ax[0].scatter(theta,nir0,label='632nm',color='firebrick')
ax[0].set_ylim(0,1)



ax[1].scatter(theta,red90,label='632nm',color='r')
ax[1].scatter(theta,nir90,label='632nm',color='firebrick')
ax[1].set_ylim(0,1)
222/24:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
ax[0].scatter(theta,red0,label='632nm',color='r',s=5)
ax[0].scatter(theta,nir0,label='632nm',color='firebrick')
ax[0].set_ylim(0,1)



ax[1].scatter(theta,red90,label='632nm',color='r')
ax[1].scatter(theta,nir90,label='632nm',color='firebrick')
ax[1].set_ylim(0,1)
222/25:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='632nm',color='firebrick')
ax[0].set_ylim(0,1)



ax[1].scatter(theta,red90,label='632nm',color='r')
ax[1].scatter(theta,nir90,label='632nm',color='firebrick')
ax[1].set_ylim(0,1)
222/26:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='632nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)



ax[1].scatter(theta,red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='632nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
222/27:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='632nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].legend()



ax[1].scatter(theta,red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='632nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].legend()
222/28:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].legend()



ax[1].scatter(theta,red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].legend()
222/29:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\theta_v$')
ax[0].legend()



ax[1].scatter(theta,red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].legend()
222/30:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)
ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\theta_v$')
ax[0].legend()



ax[1].scatter(theta,red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].legend()
222/31:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\theta _v$')
ax[0].legend()



ax[1].scatter(theta,red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].legend()
222/32:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()



ax[1].scatter(theta,red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].legend()
222/33:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()



ax[1].scatter(theta,red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].set_xlabel('$\Theta _v$')
ax[1].legend()
222/34:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax[1]=ax.twinx()
ax[1].scatter(theta,red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].set_xlabel('$\Theta _v$')
ax[1].legend()
222/35:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax2=ax.twinx()
ax[1].scatter(theta,red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].set_xlabel('$\Theta _v$')
ax[1].legend()
222/36:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax2=ax[1].twinx()
ax[1].scatter(theta,red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].set_xlabel('$\Theta _v$')
ax[1].legend()
222/37:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax2=ax[1].twinx()
ax[1].scatter(theta,red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax[1].legend()
222/38:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax2=ax[1].twinx()
ax[1].scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax[1].legend()
222/39:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,0.5)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax2=ax[1].twinx()
ax[1].scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.yticks([0,0])

ax[1].legend()
222/40:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,0.5)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax2=ax[1].twinx()
ax[1].scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.xticks([0,0])

ax[1].legend()
222/41:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,0.5)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax2=ax[1].twinx()
ax[1].scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax[1].xticks([0,0])

ax[1].legend()
222/42:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,0.5)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax2=ax[1].twinx()
ax[1].scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax.xticks([0,0])

ax[1].legend()
222/43:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,0.5)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax2=ax[1].twinx()
ax[1].scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax[1].xticks([0,0])

ax[1].legend()
222/44:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,0.5)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax2=ax[1].twinx()
ax[1].scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax.set_xticks([0,0])

ax[1].legend()
222/45:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,0.5)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax2=ax[1].twinx()
ax[1].scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
yticks([0,0])

ax[1].legend()
222/46:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,0.5)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax2=ax[1].twinx()
ax[1].scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
yticks(linspace(0,0.05,6))

ax[1].legend()
222/47:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,0.5)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax2=ax[1].twinx()
ax[1].scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
yticks(linspace(0,0.05,6)*10)

ax[1].legend()
222/48:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,0.5)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax2=ax[1].twinx()
ax[1].scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,0.05,6)*10)

ax[1].legend()
222/49:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,0.5)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax2=ax[1].twinx()
ax[1].scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,0.05,6))

ax[1].legend()
222/50:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax2=ax[1].twinx()
ax[1].scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,0.05,6))

ax[1].legend()
222/51:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,10*nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax2=ax[1].twinx()
ax[1].scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,0.05,6))

ax[1].legend()
222/52:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax2=ax[1].twinx()
ax[1].scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,0.05,6))

ax[1].legend()
222/53:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,1)
ax[1].set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,0.05,6))

ax[1].legend()
222/54:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax2.scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax2.set_ylim(0,1)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,0.05,6))

ax[1].legend()
222/55:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax2.scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax2.set_ylim(0,1)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,0.05,6))

ax[1].legend()
222/56:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax2.scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax2.set_ylim(0,1)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,0.5,6))

ax[1].legend()
222/57:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax2.scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax2.set_ylim(0,1)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,1,6))

ax[1].legend()
222/58:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax2.scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax2.set_ylim(0,1)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,1,6))
ax2.set_xticklabels(linspace(0,0.05,6), fontsize=12)

ax[1].legend()
222/59:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax2.scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax2.set_ylim(0,1)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,1,6))
ax2.set_xticklabels(linspace(0,0.05,6), fontsize=12)

ax[1].set_xlabel('$\Theta _v$')

ax[1].legend()
222/60:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax2.scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax2.set_ylim(0,1)
ax2.set_xlabel('$\Theta _v$')
ax2.set_xlabel('Reflectance')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,1,6))
ax2.set_xticklabels(linspace(0,0.05,6), fontsize=12)

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_xlabel('Reflectance')

ax[1].legend()
222/61:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax2.scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax2.set_ylim(0,1)
ax2.set_xlabel('$\Theta _v$')
ax2.set_ylabel('Reflectance')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,1,6))
ax2.set_xticklabels(linspace(0,0.05,6), fontsize=12)

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax[1].legend()
222/62:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax2.scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax2.set_ylim(0,1)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,1,6))
ax2.set_xticklabels(linspace(0,0.05,6), fontsize=12)

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax[1].legend()
222/63:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax2.scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax2.set_ylim(0,1)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,1,6))
ax2.set_xticklabels(linspace(0,0.05,6), fontsize=12)

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/64:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,*red90,label='632nm',color='r',s=7)
ax2.scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax2.set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,1,6))
ax2.set_xticklabels(linspace(0,0.05,6), fontsize=12)

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/65:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax2.scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax2.set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,1,6))
ax2.set_xticklabels(linspace(0,0.05,6), fontsize=12)

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/66:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax2.scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
#ax2.set_yticks(linspace(0,1,6))
#ax2.set_xticklabels(linspace(0,0.05,6), fontsize=12)

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/67:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax2.scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,1,6))
ax2.set_xticklabels(linspace(0,0.05,6), fontsize=12)

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/68:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax2.scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,0.5,6))
ax2.set_xticklabels(linspace(0,0.05,6), fontsize=12)

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/69:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax2.scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,1,6))
ax2.set_xticklabels(linspace(0,0.05,6), fontsize=12)

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/70:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax2.scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,0.5,6))
ax2.set_xticklabels(linspace(0,0.05,6), fontsize=12)

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/71:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax2.scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,0.5,6), linspace(0,0.05,6))
#ax2.set_xticklabels(, fontsize=12)

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/72:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax2.scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,0.5,6), list(linspace(0,0.05,6)))
#ax2.set_xticklabels(, fontsize=12)

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/73:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax2.scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,0.5,6), list(linspace(0,0.0005,6)))
#ax2.set_xticklabels(, fontsize=12)

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/74:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax2.scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,0.5,6), ['0'])
#ax2.set_xticklabels(, fontsize=12)

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/75:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax2.scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_yticks(linspace(0,0.5,), ['0', '0.02','0.04'])
#ax2.set_xticklabels(, fontsize=12)

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/76:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax2.scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_xticklabels(linspace(0,0.05,6), fontsize=12)

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/77:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax[1].scatter(theta,10*red90,label='632nm',color='r',s=7)
ax2.scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_xticklabels(linspace(0,0.05,6), fontsize=12)

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/78:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax2.scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_xticklabels(linspace(0,0.05,6), fontsize=12)

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/79:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
ax2.set_xticklabels(linspace(0,0.05,6), fontsize=12)

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/80:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params('y', colors='r')
#ax2.set_xticklabels(linspace(0,0.05,6), fontsize=12)

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/81:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
#ax2.tick_params('y', colors='r')
#ax2.set_xticklabels(linspace(0,0.05,6), fontsize=12)

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/82:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params(colors='r')
#ax2.set_xticklabels(linspace(0,0.05,6), fontsize=12)

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/83:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params(colors='r')
ax2.set_xticklabels(linspace(0,0.05,6), fontsize=12)

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/84:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params(colors='r')
ax2.set_xticklabels(linspace(0,0.05,6), fontsize=12)
ax2.set_xticks([0,0.02,0.04])

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/85:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params(colors='r')
ax2.set_xticklabels(linspace(0,0.05,6), fontsize=12)
ax2.set_yticks([0,0.02,0.04])

ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/86:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params(colors='r')
ax2.set_xticklabels(linspace(0,0.05,6), fontsize=12)
ax2.set_yticks([0,0.02,0.04])
ax2.set_ylim(ax[1].get_ylim()[0]*12, ax[1].get_ylim()[1]*12)


ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/87:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params(colors='r')


ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/88:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax[1].set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params(colors='r')


ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/89:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax2.set_ylim(0,0.5)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params(colors='r')


ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/90:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()


ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax2.set_ylim(0,0.05)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params(colors='r')


ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/91:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax1=ax[0].twinx()
ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()
ax1.set_ylim(0,0.05)
ax1.tick_params(colors='r')




ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax2.set_ylim(0,0.05)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params(colors='r')


ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/92:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax1=ax[0].twinx()
ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()
ax1.set_ylim(0,0.1)
ax1.tick_params(colors='r')




ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax2.set_ylim(0,0.05)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params(colors='r')


ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax2.legend()
222/93:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax1=ax[0].twinx()
ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()
ax1.set_ylim(0,0.1)
ax1.tick_params(colors='r')




ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax2.set_ylim(0,0.05)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params(colors='r')


ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax[1].legend()
222/94:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax1=ax[0].twinx()
ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()
ax1.set_ylim(0,0.1)
ax1.tick_params(colors='r')




ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax2.scatter(theta,red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax2.set_ylim(0,0.05)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params(colors='r')


ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax[1].legend()
ax2.legend()
222/95:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax1=ax[0].twinx()
ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()
ax1.set_ylim(0,0.1)
ax1.tick_params(colors='r')




ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax[1].scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax2.set_ylim(0,0.05)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params(colors='r')


ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax[1].legend()
ax2.legend()
222/96:
#BRDF code from fortran file

#LAD=0 and AZ=0
theta=linspace(0,90,10)
red0=array([0.043,0.044,0.047,0.050,0.060,0.059,0.049,0.045,0.046,0.089])
nir0=array([0.463,0.472,0.484,0.502,0.544,0.542,0.493,0.471,0.489,0.739])

#LAD=90 and AZ=0
red90=array([0.020,0.024,0.028,0.031,0.035,0.037,0.037,0.040,0.046,0.049])
nir90=array([0.073,0.139,0.208,0.268,0.329,0.377,0.404,0.433,0.456,0.447])

fig,ax=subplots(2,1,figsize=(8,5),dpi=150)
subplots_adjust(hspace = 0.3)

ax1=ax[0].twinx()
ax[0].scatter(theta,10*red0,label='632nm',color='r',s=7)
ax[0].scatter(theta,nir0,label='851nm',color='firebrick',s=7)
ax[0].set_ylim(0,1)
ax[0].set_xlabel('$\Theta _v$')
ax[0].set_ylabel('Reflectance')
ax[0].legend()
ax1.set_ylim(0,0.1)
ax1.tick_params(colors='r')




ax[1].set_ylim(0,0.5)
ax2=ax[1].twinx()
ax[1].scatter(theta,10*red90,label='632nm',color='r',s=7)
ax[1].scatter(theta,nir90,label='851nm',color='firebrick',s=7)
ax2.set_ylim(0,0.05)
ax2.set_xlabel('$\Theta _v$')
ax2.tick_params(colors='r')


ax[1].set_xlabel('$\Theta _v$')
ax[1].set_ylabel('Reflectance')

ax[1].legend()
225/1:
from matplotlib.pyplot import *
from scipy import *
225/2:
#vars
A=0.38
B=0.084
C=0.025
D=0.034
theta=30/180*pi
lai=linspace(0,8,5)
mv=linspace(0,100,6)



gamma=exp(-2*B*lai/cos(theta))
sigsol=C*exp(D*mv)
sigveg=A*cos(theta)*(1-gamma**2)
sigcan=sigveg+gamma**2*sigsol
225/3:
#vars
A=0.38
B=0.084
C=0.025
D=0.034
theta=30/180*pi
lai=linspace(0,8,5)
mv=linspace(0,100,6)



gamma=exp(-2*B*lai/cos(theta))
sigsol=C*exp(D*mv)
sigveg=A*cos(theta)*(1-gamma**2)

def SigCan(mv,sigveg,gamma,sigsol):
    return sigveg+gamma**2*sigsol
225/4:
fig,ax=subplots()
ax.plot(mv,SigCan(mv,sigveg,gamma,sigsol))
225/5:
fig,ax=subplots()
for item in lai:
    ax.plot(mv,SigCan(mv,sigveg,gamma,sigsol))
225/6:
fig,ax=subplots()
for item in lai:
    ax.plot(mv,SigCan(mv,lai,sigveg,sigsol,B,theta))
225/7:
#vars
A=0.38
B=0.084
C=0.025
D=0.034
theta=30/180*pi
lai=linspace(0,8,5)
mv=linspace(0,100,6)



gamma=exp(-2*B*lai/cos(theta))
sigsol=C*exp(D*mv)
sigveg=A*cos(theta)*(1-gamma**2)

def SigCan(mv,lai,sigveg,sigsol,B,theta):
    return sigveg+(exp(-2*B*lai/cos(theta)))**2*sigsol
225/8:
fig,ax=subplots()
for item in lai:
    ax.plot(mv,SigCan(mv,lai,sigveg,sigsol,B,theta))
225/9:
#vars
A=0.38
B=0.084
C=0.025
D=0.034
theta=30/180*pi
mv=linspace(0,100,6)



gamma=exp(-2*B*lai/cos(theta))
sigsol=C*exp(D*mv)
sigveg=A*cos(theta)*(1-gamma**2)

def SigCan(mv,lai,sigveg,sigsol,B,theta):
    return sigveg+(exp(-2*B*lai/cos(theta)))**2*sigsol
225/10:
fig,ax=subplots()

lai=linspace(0,8,5)
for item in lai:
    ax.plot(mv,SigCan(mv,lai[item],sigveg,sigsol,B,theta))
225/11:
fig,ax=subplots()

lai=linspace(0,8,5)
for item in lai:
    ax.plot(mv,SigCan(mv,item,sigveg,sigsol,B,theta))
225/12:
#vars
A=0.38
B=0.084
C=0.025
D=0.034
theta=30/180*pi
mv=linspace(0,100,6)



def SigCan(mv,lai,sigveg,sigsol,B,theta):
    return A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2)+(exp(-2*B*lai/cos(theta)))**2*C*exp(D*mv)
225/13:
fig,ax=subplots()

lai=linspace(0,8,5)
for item in lai:
    ax.plot(mv,SigCan(mv,item,sigveg,sigsol,B,theta))
225/14:
fig,ax=subplots()

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,sigveg,sigsol,B,theta))
ax.plot(mv,SigCan(mv,2,sigveg,sigsol,B,theta))
ax.plot(mv,SigCan(mv,4,sigveg,sigsol,B,theta))
ax.plot(mv,SigCan(mv,6,sigveg,sigsol,B,theta))
ax.plot(mv,SigCan(mv,8,sigveg,sigsol,B,theta))
225/15:
fig,ax=subplots()

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,sigveg,sigsol,B,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,sigveg,sigsol,B,theta),label=('    :0'))
ax.plot(mv,SigCan(mv,4,sigveg,sigsol,B,theta),label=('    :0'))
ax.plot(mv,SigCan(mv,6,sigveg,sigsol,B,theta),label=('    :0'))
ax.plot(mv,SigCan(mv,8,sigveg,sigsol,B,theta),label=('    :0'))
225/16:
fig,ax=subplots()

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,sigveg,sigsol,B,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,sigveg,sigsol,B,theta),label=('    :0'))
ax.plot(mv,SigCan(mv,4,sigveg,sigsol,B,theta),label=('    :0'))
ax.plot(mv,SigCan(mv,6,sigveg,sigsol,B,theta),label=('    :0'))
ax.plot(mv,SigCan(mv,8,sigveg,sigsol,B,theta),label=('    :0'))

legend()
225/17:
fig,ax=subplots()

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,sigveg,sigsol,B,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,sigveg,sigsol,B,theta),label=('    :0'))
ax.plot(mv,SigCan(mv,4,sigveg,sigsol,B,theta),label=('    :0'))
ax.plot(mv,SigCan(mv,6,sigveg,sigsol,B,theta),label=('    :0'))
ax.plot(mv,SigCan(mv,8,sigveg,sigsol,B,theta),label=('    :0'))

a.legend()
225/18:
fig,ax=subplots()

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,sigveg,sigsol,B,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,sigveg,sigsol,B,theta),label=('    :0'))
ax.plot(mv,SigCan(mv,4,sigveg,sigsol,B,theta),label=('    :0'))
ax.plot(mv,SigCan(mv,6,sigveg,sigsol,B,theta),label=('    :0'))
ax.plot(mv,SigCan(mv,8,sigveg,sigsol,B,theta),label=('    :0'))

ax.legend()
225/19:
fig,ax=subplots()

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,sigveg,sigsol,B,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,sigveg,sigsol,B,theta),label=('     0'))
ax.plot(mv,SigCan(mv,4,sigveg,sigsol,B,theta),label=('     0'))
ax.plot(mv,SigCan(mv,6,sigveg,sigsol,B,theta),label=('     0'))
ax.plot(mv,SigCan(mv,8,sigveg,sigsol,B,theta),label=('     0'))

ax.legend()
225/20:
fig,ax=subplots()

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,sigveg,sigsol,B,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,sigveg,sigsol,B,theta),label=('      0'))
ax.plot(mv,SigCan(mv,4,sigveg,sigsol,B,theta),label=('      0'))
ax.plot(mv,SigCan(mv,6,sigveg,sigsol,B,theta),label=('      0'))
ax.plot(mv,SigCan(mv,8,sigveg,sigsol,B,theta),label=('      0'))

ax.legend()
225/21:
fig,ax=subplots()

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,sigveg,sigsol,B,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,sigveg,sigsol,B,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,sigveg,sigsol,B,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,sigveg,sigsol,B,theta),label=('      6'))
ax.plot(mv,SigCan(mv,8,sigveg,sigsol,B,theta),label=('      8'))

ax.legend()
225/22:
fig,ax=subplots()

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,sigveg,sigsol,B,theta),label=('LAI:0'))
#ax.plot(mv,SigCan(mv,2,sigveg,sigsol,B,theta),label=('      2'))
#ax.plot(mv,SigCan(mv,4,sigveg,sigsol,B,theta),label=('      4'))
#ax.plot(mv,SigCan(mv,6,sigveg,sigsol,B,theta),label=('      6'))
#ax.plot(mv,SigCan(mv,8,sigveg,sigsol,B,theta),label=('      8'))

ax.legend()
225/23:
fig,ax=subplots()

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,sigveg,sigsol,B,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,sigveg,sigsol,B,theta),label=('      2'))
#ax.plot(mv,SigCan(mv,4,sigveg,sigsol,B,theta),label=('      4'))
#ax.plot(mv,SigCan(mv,6,sigveg,sigsol,B,theta),label=('      6'))
#ax.plot(mv,SigCan(mv,8,sigveg,sigsol,B,theta),label=('      8'))

ax.legend()
225/24:
fig,ax=subplots()

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,sigveg,sigsol,B,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,sigveg,sigsol,B,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,sigveg,sigsol,B,theta),label=('      4'))
#ax.plot(mv,SigCan(mv,6,sigveg,sigsol,B,theta),label=('      6'))
#ax.plot(mv,SigCan(mv,8,sigveg,sigsol,B,theta),label=('      8'))

ax.legend()
225/25:
fig,ax=subplots()

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,sigveg,sigsol,B,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,sigveg,sigsol,B,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,sigveg,sigsol,B,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,sigveg,sigsol,B,theta),label=('      6'))
#ax.plot(mv,SigCan(mv,8,sigveg,sigsol,B,theta),label=('      8'))

ax.legend()
225/26:
fig,ax=subplots()

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,sigveg,sigsol,B,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,sigveg,sigsol,B,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,sigveg,sigsol,B,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,sigveg,sigsol,B,theta),label=('      6'))
ax.plot(mv,SigCan(mv,8,sigveg,sigsol,B,theta),label=('      8'))

ax.legend()
225/27:
fig,ax=subplots()

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,sigveg,sigsol,B,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,sigveg,sigsol,B,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,sigveg,sigsol,B,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,sigveg,sigsol,B,theta),label=('      6'))
ax.plot(mv,SigCan(mv,8,sigveg,sigsol,B,theta),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.legend()
225/28:
fig,ax=subplots(figsize=(6,4))

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,sigveg,sigsol,B,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,sigveg,sigsol,B,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,sigveg,sigsol,B,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,sigveg,sigsol,B,theta),label=('      6'))
ax.plot(mv,SigCan(mv,8,sigveg,sigsol,B,theta),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.legend()
225/29:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,sigveg,sigsol,B,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,sigveg,sigsol,B,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,sigveg,sigsol,B,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,sigveg,sigsol,B,theta),label=('      6'))
ax.plot(mv,SigCan(mv,8,sigveg,sigsol,B,theta),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.legend()
225/30:
#vars
A=0.38
B=0.084
C=0.025
D=0.034
theta=30/180*pi
mv=linspace(0,100,60)



def SigCan(mv,lai,sigveg,sigsol,B,theta):
    return A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2)+(exp(-2*B*lai/cos(theta)))**2*C*exp(D*mv)
225/31:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,sigveg,sigsol,B,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,sigveg,sigsol,B,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,sigveg,sigsol,B,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,sigveg,sigsol,B,theta),label=('      6'))
ax.plot(mv,SigCan(mv,8,sigveg,sigsol,B,theta),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.legend()
225/32:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,sigveg,sigsol,B,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,sigveg,sigsol,B,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,sigveg,sigsol,B,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,sigveg,sigsol,B,theta),label=('      6'))
ax.plot(mv,SigCan(mv,8,sigveg,sigsol,B,theta),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.legend()

print (SigCan(mv,8,sigveg,sigsol,B,theta))
225/33:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta),label=('      6'))
ax.plot(mv,SigCan(mv,8,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.legend()
225/34:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,abs(SigCan(mv,0,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('LAI:0'))
ax.plot(mv,abs(SigCan(mv,2,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      2'))
ax.plot(mv,abs(SigCan(mv,4,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      4'))
ax.plot(mv,abs(SigCan(mv,6,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      6'))
ax.plot(mv,abs(SigCan(mv,8,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.legend()
225/35:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,abs(SigCan(mv,0,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('LAI:0'))
ax.plot(mv,abs(SigCan(mv,2,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      2'))
ax.plot(mv,abs(SigCan(mv,4,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      4'))
ax.plot(mv,abs(SigCan(mv,6,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      6'))
ax.plot(mv,abs(SigCan(mv,8,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.legend()

print (abs(SigCan(mv,0,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)))
225/36:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,abs(SigCan(mv,0,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('LAI:0'))
ax.plot(mv,abs(SigCan(mv,2,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      2'))
ax.plot(mv,abs(SigCan(mv,4,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      4'))
ax.plot(mv,abs(SigCan(mv,6,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      6'))
ax.plot(mv,abs(SigCan(mv,8,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.legend()

print (min(abs(SigCan(mv,0,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta))))
225/37:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,abs(SigCan(mv,0,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('LAI:0'))
ax.plot(mv,abs(SigCan(mv,2,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      2'))
ax.plot(mv,abs(SigCan(mv,4,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      4'))
ax.plot(mv,abs(SigCan(mv,6,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      6'))
ax.plot(mv,abs(SigCan(mv,8,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.legend()

print (minarg(abs(SigCan(mv,0,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta))))
225/38:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,abs(SigCan(mv,0,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('LAI:0'))
ax.plot(mv,abs(SigCan(mv,2,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      2'))
ax.plot(mv,abs(SigCan(mv,4,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      4'))
ax.plot(mv,abs(SigCan(mv,6,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      6'))
ax.plot(mv,abs(SigCan(mv,8,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.legend()

print (argmin(abs(SigCan(mv,0,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta))))
225/39:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,abs(SigCan(mv,0,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('LAI:0'))
ax.plot(mv,abs(SigCan(mv,2,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      2'))
ax.plot(mv,abs(SigCan(mv,4,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      4'))
ax.plot(mv,abs(SigCan(mv,6,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      6'))
ax.plot(mv,abs(SigCan(mv,8,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.legend()

print (argmin(abs(SigCan(mv,0,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta))))

print (mv[45])
225/40:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,exp(-2*B*lai[0]/cos(theta)),label=('LAI:0'))
ax.plot(mv,exp(-2*B*lai[1]/cos(theta)),label=('      2'))
ax.plot(mv,exp(-2*B*lai[2]/cos(theta)),label=('      4'))
ax.plot(mv,exp(-2*B*lai[3]/cos(theta)),label=('      6'))
ax.plot(mv,exp(-2*B*lai[4]/cos(theta)),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.legend()
225/41:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,exp(-2*B*lai[0]/cos(theta))**2*C*exp(D*mv),label=('LAI:0'))
ax.plot(mv,exp(-2*B*lai[1]/cos(theta))**2*C*exp(D*mv),label=('      2'))
ax.plot(mv,exp(-2*B*lai[2]/cos(theta))**2*C*exp(D*mv),label=('      4'))
ax.plot(mv,exp(-2*B*lai[3]/cos(theta))**2*C*exp(D*mv),label=('      6'))
ax.plot(mv,exp(-2*B*lai[4]/cos(theta))**2*C*exp(D*mv),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.legend()
225/42:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,exp(-2*B*lai[0]/cos(theta))**2*C*exp(D*mv),label=('LAI:0'))
ax.plot(mv,exp(-2*B*lai[1]/cos(theta))**2*C*exp(D*mv),label=('      2'))
ax.plot(mv,exp(-2*B*lai[2]/cos(theta))**2*C*exp(D*mv),label=('      4'))
ax.plot(mv,exp(-2*B*lai[3]/cos(theta))**2*C*exp(D*mv),label=('      6'))
ax.plot(mv,exp(-2*B*lai[4]/cos(theta))**2*C*exp(D*mv),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\gamma^2\sigma^0_{sol}$')
ax.legend()
225/43:
A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2)

fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(lai,A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2),label=('LAI:0'))
ax.plot(lai,A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2),label=('      2'))
ax.plot(lai,A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2),label=('      4'))
ax.plot(lai,A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2),label=('      6'))
ax.plot(lai,A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\gamma^2\sigma^0_{sol}$')
ax.legend()
225/44:
A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2)

fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(lai,A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2),label=('LAI:0'))
ax.plot(lai,A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2),label=('      2'))
ax.plot(lai,A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2),label=('      4'))
ax.plot(lai,A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2),label=('      6'))
ax.plot(lai,A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{veg}$')
ax.legend()
225/45:
A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2)

fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(lai,A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2),label=('LAI:0'))
ax.plot(lai,A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2),label=('      2'))
ax.plot(lai,A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2),label=('      4'))
ax.plot(lai,A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2),label=('      6'))
ax.plot(lai,A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2),label=('      8'))
ax.set_xlabel('$LAI$')
ax.set_ylabel('$\sigma^0_{veg}$')
ax.legend()
225/46:
A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2)

fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(lai,A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2),label=('LAI:0'))
ax.set_xlabel('$LAI$')
ax.set_ylabel('$\sigma^0_{veg}$')
ax.legend()
225/47:
A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2)

fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(lai,A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2),label=('$\theta=30^{\circ}$'))
ax.set_xlabel('$LAI$')
ax.set_ylabel('$\sigma^0_{veg}$')
ax.legend()
225/48:
A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2)

fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(lai,A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2),label=('$\Theta=30^{\circ}$'))
ax.set_xlabel('$LAI$')
ax.set_ylabel('$\sigma^0_{veg}$')
ax.legend()
225/49:
A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2)

fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(lai,A*(1-(exp(-2*B*lai))**2),label=('$\Theta=0^{\circ}$'))
ax.plot(lai,A*cos(10/180*pi)*(1-(exp(-2*B*lai/cos(10/180*pi)))**2),label=('$\Theta=10^{\circ}$'))
ax.plot(lai,A*cos(20/180*pi)*(1-(exp(-2*B*lai/cos(20/180*pi)))**2),label=('$ 20^{\circ}$'))
ax.plot(lai,A*cos(30/180*pi)*(1-(exp(-2*B*lai/cos(30/180*pi)))**2),label=('$ 30^{\circ}$'))
ax.plot(lai,A*cos(40/180*pi)*(1-(exp(-2*B*lai/cos(40/180*pi)))**2),label=('$ 40^{\circ}$'))
ax.plot(lai,A*cos(50/180*pi)*(1-(exp(-2*B*lai/cos(50/180*pi)))**2),label=('$ 50^{\circ}$'))


ax.set_xlabel('$LAI$')
ax.set_ylabel('$\sigma^0_{veg}$')
ax.legend()
225/50:
A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2)

fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(lai,A*(1-(exp(-2*B*lai))**2),label=('$\Theta=0^{\circ}$'))
ax.plot(lai,A*cos(10/180*pi)*(1-(exp(-2*B*lai/cos(10/180*pi)))**2),label=('$    10^{\circ}$'))
ax.plot(lai,A*cos(20/180*pi)*(1-(exp(-2*B*lai/cos(20/180*pi)))**2),label=('$ 20^{\circ}$'))
ax.plot(lai,A*cos(30/180*pi)*(1-(exp(-2*B*lai/cos(30/180*pi)))**2),label=('$ 30^{\circ}$'))
ax.plot(lai,A*cos(40/180*pi)*(1-(exp(-2*B*lai/cos(40/180*pi)))**2),label=('$ 40^{\circ}$'))
ax.plot(lai,A*cos(50/180*pi)*(1-(exp(-2*B*lai/cos(50/180*pi)))**2),label=('$ 50^{\circ}$'))


ax.set_xlabel('$LAI$')
ax.set_ylabel('$\sigma^0_{veg}$')
ax.legend()
225/51:
A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2)

fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(lai,A*(1-(exp(-2*B*lai))**2),label=('$\Theta=0^{\circ}$'))
ax.plot(lai,A*cos(10/180*pi)*(1-(exp(-2*B*lai/cos(10/180*pi)))**2),label=('$        10^{\circ}$'))
ax.plot(lai,A*cos(20/180*pi)*(1-(exp(-2*B*lai/cos(20/180*pi)))**2),label=('$ 20^{\circ}$'))
ax.plot(lai,A*cos(30/180*pi)*(1-(exp(-2*B*lai/cos(30/180*pi)))**2),label=('$ 30^{\circ}$'))
ax.plot(lai,A*cos(40/180*pi)*(1-(exp(-2*B*lai/cos(40/180*pi)))**2),label=('$ 40^{\circ}$'))
ax.plot(lai,A*cos(50/180*pi)*(1-(exp(-2*B*lai/cos(50/180*pi)))**2),label=('$ 50^{\circ}$'))


ax.set_xlabel('$LAI$')
ax.set_ylabel('$\sigma^0_{veg}$')
ax.legend()
225/52:
A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2)

fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(lai,A*(1-(exp(-2*B*lai))**2),label=('$\Theta=0^{\circ}$'))
ax.plot(lai,A*cos(10/180*pi)*(1-(exp(-2*B*lai/cos(10/180*pi)))**2),label=('$    10^{\circ}$'))
ax.plot(lai,A*cos(20/180*pi)*(1-(exp(-2*B*lai/cos(20/180*pi)))**2),label=('$ 20^{\circ}$'))
ax.plot(lai,A*cos(30/180*pi)*(1-(exp(-2*B*lai/cos(30/180*pi)))**2),label=('$ 30^{\circ}$'))
ax.plot(lai,A*cos(40/180*pi)*(1-(exp(-2*B*lai/cos(40/180*pi)))**2),label=('$ 40^{\circ}$'))
ax.plot(lai,A*cos(50/180*pi)*(1-(exp(-2*B*lai/cos(50/180*pi)))**2),label=('$ 50^{\circ}$'))


ax.set_xlabel('$LAI$')
ax.set_ylabel('$\sigma^0_{veg}$')
ax.legend()
225/53:
A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2)

fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(lai,A*(1-(exp(-2*B*lai))**2),label=('$\Theta=0^{\circ}$'))
ax.plot(lai,A*cos(10/180*pi)*(1-(exp(-2*B*lai/cos(10/180*pi)))**2),label=('$ 10^{\circ}$'))
ax.plot(lai,A*cos(20/180*pi)*(1-(exp(-2*B*lai/cos(20/180*pi)))**2),label=('$ 20^{\circ}$'))
ax.plot(lai,A*cos(30/180*pi)*(1-(exp(-2*B*lai/cos(30/180*pi)))**2),label=('$ 30^{\circ}$'))
ax.plot(lai,A*cos(40/180*pi)*(1-(exp(-2*B*lai/cos(40/180*pi)))**2),label=('$ 40^{\circ}$'))
ax.plot(lai,A*cos(50/180*pi)*(1-(exp(-2*B*lai/cos(50/180*pi)))**2),label=('$ 50^{\circ}$'))


ax.set_xlabel('$LAI$')
ax.set_ylabel('$\sigma^0_{veg}$')
ax.legend()
225/54:
A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2)

fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(lai,A*(1-(exp(-2*B*lai))**2),label=('$\Theta=0^{\circ}$'))
ax.plot(lai,A*cos(10/180*pi)*(1-(exp(-2*B*lai/cos(10/180*pi)))**2),label=('   $ 10^{\circ}$'))
ax.plot(lai,A*cos(20/180*pi)*(1-(exp(-2*B*lai/cos(20/180*pi)))**2),label=('   $ 20^{\circ}$'))
ax.plot(lai,A*cos(30/180*pi)*(1-(exp(-2*B*lai/cos(30/180*pi)))**2),label=('   $ 30^{\circ}$'))
ax.plot(lai,A*cos(40/180*pi)*(1-(exp(-2*B*lai/cos(40/180*pi)))**2),label=('   $ 40^{\circ}$'))
ax.plot(lai,A*cos(50/180*pi)*(1-(exp(-2*B*lai/cos(50/180*pi)))**2),label=('   $ 50^{\circ}$'))


ax.set_xlabel('$LAI$')
ax.set_ylabel('$\sigma^0_{veg}$')
ax.legend()
225/55:
A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2)

fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(lai,A*(1-(exp(-2*B*lai))**2),label=('$\Theta=0^{\circ}$'))
ax.plot(lai,A*cos(10/180*pi)*(1-(exp(-2*B*lai/cos(10/180*pi)))**2),label=('     $ 10^{\circ}$'))
ax.plot(lai,A*cos(20/180*pi)*(1-(exp(-2*B*lai/cos(20/180*pi)))**2),label=('     $ 20^{\circ}$'))
ax.plot(lai,A*cos(30/180*pi)*(1-(exp(-2*B*lai/cos(30/180*pi)))**2),label=('     $ 30^{\circ}$'))
ax.plot(lai,A*cos(40/180*pi)*(1-(exp(-2*B*lai/cos(40/180*pi)))**2),label=('     $ 40^{\circ}$'))
ax.plot(lai,A*cos(50/180*pi)*(1-(exp(-2*B*lai/cos(50/180*pi)))**2),label=('     $ 50^{\circ}$'))


ax.set_xlabel('$LAI$')
ax.set_ylabel('$\sigma^0_{veg}$')
ax.legend()
225/56:
#vars
A=0.38
B=0.084
C=0.025
D=0.034
theta=30/180*pi
mv=linspace(0,100,60)



def SigCan(mv,lai,sigveg,sigsol,theta):
    A=0.38
    B=0.084
    C=0.025
    D=0.034
    return A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2)+(exp(-2*B*lai/cos(theta)))**2*C*exp(D*mv)
225/57:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,sigveg,sigsol,B,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,sigveg,sigsol,B,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,sigveg,sigsol,B,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,sigveg,sigsol,B,theta),label=('      6'))
ax.plot(mv,SigCan(mv,8,sigveg,sigsol,B,theta),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.legend()

print (SigCan(mv,8,sigveg,sigsol,B,theta))
225/58:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,sigveg,sigsol,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,sigveg,sigsol,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,sigveg,sigsol,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,sigveg,sigsol,theta),label=('      6'))
ax.plot(mv,SigCan(mv,8,sigveg,sigsol,theta),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.legend()

print (SigCan(mv,8,sigveg,sigsol,B,theta))
225/59:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,sigveg,sigsol,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,sigveg,sigsol,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,sigveg,sigsol,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,sigveg,sigsol,theta),label=('      6'))
ax.plot(mv,SigCan(mv,8,sigveg,sigsol,theta),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.legend()
225/60:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,sigveg,sigsol,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,sigveg,sigsol,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,sigveg,sigsol,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,sigveg,sigsol,theta),label=('      6'))
ax.plot(mv,SigCan(mv,8,sigveg,sigsol,theta),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.legend()
226/1:
from matplotlib.pyplot import *
from scipy import *
226/2:
#vars
A=0.38
B=0.084
C=0.025
D=0.034
theta=30/180*pi
mv=linspace(0,100,60)



def SigCan(mv,lai,sigveg,sigsol,theta):
    A=0.38
    B=0.084
    C=0.025
    D=0.034
    return A*cos(theta)*(1-(exp(-2*B*lai/cos(theta)))**2)+(exp(-2*B*lai/cos(theta)))**2*C*exp(D*mv)
226/3:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,sigveg,sigsol,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,sigveg,sigsol,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,sigveg,sigsol,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,sigveg,sigsol,theta),label=('      6'))
ax.plot(mv,SigCan(mv,8,sigveg,sigsol,theta),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.legend()
226/4:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,abs(SigCan(mv,0,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('LAI:0'))
ax.plot(mv,abs(SigCan(mv,2,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      2'))
ax.plot(mv,abs(SigCan(mv,4,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      4'))
ax.plot(mv,abs(SigCan(mv,6,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      6'))
ax.plot(mv,abs(SigCan(mv,8,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta)),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.legend()

print (argmin(abs(SigCan(mv,0,sigveg,sigsol,B,theta)-SigCan(mv,8,sigveg,sigsol,B,theta))))

print (mv[45])
226/5:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,exp(-2*B*lai[0]/cos(theta))**2*C*exp(D*mv),label=('LAI:0'))
ax.plot(mv,exp(-2*B*lai[1]/cos(theta))**2*C*exp(D*mv),label=('      2'))
ax.plot(mv,exp(-2*B*lai[2]/cos(theta))**2*C*exp(D*mv),label=('      4'))
ax.plot(mv,exp(-2*B*lai[3]/cos(theta))**2*C*exp(D*mv),label=('      6'))
ax.plot(mv,exp(-2*B*lai[4]/cos(theta))**2*C*exp(D*mv),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\gamma^2\sigma^0_{sol}$')
ax.legend()
226/6:
#vars
A=0.38
B=0.084
C=0.025
D=0.034
theta=30/180*pi
mv=linspace(0,100,60)



def SigCan(mv,lai,sigveg,sigsol,theta):
    A=0.38
    B=0.084
    C=0.025
    D=0.034
    
    gamma2=exp(-2*B*lai/cos(theta))
    sigveg=A*cos(theta)
    sigsol=C*exp(D*mv)
    
    return sigveg*(1-gamma2)+gamma2*sigsol
226/7:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,sigveg,sigsol,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,sigveg,sigsol,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,sigveg,sigsol,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,sigveg,sigsol,theta),label=('      6'))
ax.plot(mv,SigCan(mv,8,sigveg,sigsol,theta),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.legend()
226/8:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,theta),label=('      6'))
ax.plot(mv,SigCan(mv,8,theta),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.legend()
226/9:
#vars
A=0.38
B=0.084
C=0.025
D=0.034
theta=30/180*pi
mv=linspace(0,100,60)



def SigCan(mv,lai,theta):
    A=0.38
    B=0.084
    C=0.025
    D=0.034
    
    gamma2=exp(-2*B*lai/cos(theta))
    sigveg=A*cos(theta)
    sigsol=C*exp(D*mv)
    
    return sigveg*(1-gamma2)+gamma2*sigsol
226/10:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,theta),label=('      6'))
ax.plot(mv,SigCan(mv,8,theta),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.legend()
226/11:
#vars
A=0.38
B=0.084
C=0.025
D=0.034
theta=30/180*pi
mv=linspace(0,100,60)



def SigCan(mv,lai,theta):
    A=0.38
    B=0.084
    C=0.025
    D=0.034
    
    gamma2=exp(-2*B*lai/cos(theta))
    sigveg=A*cos(theta)
    sigsol=C*exp(D*mv)
    
    return 10*log10(sigveg*(1-gamma2)+gamma2*sigsol)
226/12:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,theta),label=('      6'))
ax.plot(mv,SigCan(mv,8,theta),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.legend()
226/13:
#vars
A=0.38
B=0.084
C=0.025
D=0.034
theta=30/180*pi
mv=linspace(0,100,60)



def SigCan(mv,lai,theta):
    A=0.38
    B=0.084
    C=0.025
    D=0.034
    
    gamma2=exp(-2*B*lai/cos(theta))
    sigveg=A*cos(theta)*(1-gamma2)
    sigsol=C*exp(D*mv)
    
    return 10*log10(sigveg+gamma2*sigsol)
226/14:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,theta),label=('      6'))
ax.plot(mv,SigCan(mv,8,theta),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.legend()
226/15:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,theta),label=('      6'))
ax.plot(mv,SigCan(mv,8,theta),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}$')
ax.set_xlim(0,100)
ax.set_ylim(-16.5,0)
ax.legend()
226/16:
fig,ax=subplots(figsize=(6,4),dpi=100)

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,theta),label=('      6'))
ax.plot(mv,SigCan(mv,8,theta),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}(dB)$')
ax.set_xlim(0,100)
ax.set_ylim(-16.5,0)
ax.legend()
226/17:
fig,ax=subplots(figsize=(6,4),dpi=150)

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,theta),label=('      6'))
ax.plot(mv,SigCan(mv,8,theta),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}(dB)$')
ax.set_xlim(0,100)
ax.set_ylim(-16.5,0)
ax.legend()
226/18:
fig,ax=subplots(figsize=(4,3),dpi=150)

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,theta),label=('      6'))
ax.plot(mv,SigCan(mv,8,theta),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}(dB)$')
ax.set_xlim(0,100)
ax.set_ylim(-16.5,0)
ax.legend()
226/19:
fig,ax=subplots(figsize=(6,4),dpi=50)

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,theta),label=('      6'))
ax.plot(mv,SigCan(mv,8,theta),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}(dB)$')
ax.set_xlim(0,100)
ax.set_ylim(-16.5,0)
ax.legend()
226/20:
fig,ax=subplots(figsize=(6,4),dpi=250)

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,theta),label=('      6'))
ax.plot(mv,SigCan(mv,8,theta),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}(dB)$')
ax.set_xlim(0,100)
ax.set_ylim(-16.5,0)
ax.legend()
226/21:
fig,ax=subplots(figsize=(6,4),dpi=150)

lai=linspace(0,8,5)
ax.plot(mv,SigCan(mv,0,theta),label=('LAI:0'))
ax.plot(mv,SigCan(mv,2,theta),label=('      2'))
ax.plot(mv,SigCan(mv,4,theta),label=('      4'))
ax.plot(mv,SigCan(mv,6,theta),label=('      6'))
ax.plot(mv,SigCan(mv,8,theta),label=('      8'))
ax.set_xlabel('$m_v$')
ax.set_ylabel('$\sigma^0_{can}(dB)$')
ax.set_xlim(0,100)
ax.set_ylim(-16.5,0)
ax.legend()
226/22:
#vars
theta=30/180*pi
mv=linspace(0,100,60)

def Gamma_func(theta):
    B=0.084
    return exp(-2*B/cos(theta))

def SigCan(mv,lai,theta):
    A=0.38
    B=0.084
    C=0.025
    D=0.034
    
    gamma2=exp(-2*B*lai/cos(theta))
    sigveg=A*cos(theta)*(1-gamma2)
    sigsol=C*exp(D*mv)
    
    return 10*log10(sigveg+gamma2*sigsol)
226/23:
thetas=linspace(0,90,101)
fig,ax=subplots()
ax.plot(thetas,Gamma_func(thetas))
229/1: which python
229/2: version
229/3: import torch
229/4: import torch
229/5: torch.cuda.is_available()
229/6: a=torch.one(3)
229/7: import torch
229/8: torch.cuda.is_available()
229/9: a=torch.one(3)
229/10: a=torch.ones(3)
229/11:
a=torch.ones(3)
a
229/12:
a=torch.ones(3)
a[0]=5
229/13:
a=torch.ones(3)
a[0]=5
a
229/14:
a=torch.ones(3)
a[0]=5
type(a[0])
229/15:
a=torch.ones(3)
a[0]=5
type(float(a[0]))
229/16:
a=torch.ones(3)
a[0]=5
float(a[0]))
229/17:
a=torch.ones(3)
a[0]=5
float(a[0])
229/18: imshow()
229/19:
import torch
from matplotlib.pyplot import *
229/20: imshow()
229/21: imshow(a)
229/22:
a=torch.ones(3,3)
a[0]=5
float(a[0])
229/23: imshow(a)
229/24:
a=torch.ones(3,3)
a[0]=5
a[0]
229/25: imshow(a)
229/26:
a=torch.ones(5,5)
a[0]=5
a[0]
229/27: imshow(a)
229/28:
a=torch.ones(5,5)
a[0]=5
a
229/29:
a=torch.ones(5,5)
a[0]=random()
a
229/30:
import torch
from matplotlib.pyplot import *
from scipy import *
229/31: torch.cuda.is_available()
229/32:
a=torch.ones(5,5)
a[0]=random()
a
229/33:
a=torch.ones(5,5)
a[0]=random()
a
229/34:
import torch
from matplotlib.pyplot import *
from numpy import *
229/35:
a=torch.ones(5,5)
a[0]=random()
a
229/36:
a=torch.ones(5,5)
a[0]=random(0)
a
229/37:
a=torch.ones(5,5)
a[0]=random(5)
a
229/38:
a=torch.ones(5,5)
a[0]=random(5,5)
a
229/39:
a=torch.ones(5,5)
a[0]=numpy.random(5,5)
a
229/40:
a=torch.ones(5,5)
a
229/41: imshow(a)
229/42:
a=torch.random(5,5)
a
229/43: torch.random
229/44: torch.random()
229/45: a=torch.random()
229/46: a=torch.random(3)
229/47: a=torch.random(3,3)
229/48:
a=torch.rand(5,5)
a
229/49: imshow(a)
229/50:
a=torch.rand(5,5)
a
229/51: imshow(a)
229/52:
a=torch.rand(5,5)
a
imshow(a)
229/53:
a=torch.rand(5,5)
a
imshow(a)
229/54:
a=torch.rand(5,5)
a
imshow(a)
229/55:
a=torch.rand(5,5)
a
imshow(a)
229/56:
a=torch.rand(5,5)
a
imshow(a)
229/57:
a=torch.rand(5,5)
a
imshow(a)
229/58:
a=torch.rand(5,5)
a
imshow(a)
229/59:
a=torch.rand(5,5)
a
imshow(a)
229/60:
a=torch.rand(5,5)
a
imshow(a)
229/61:
a=torch.rand(5,5)
a
imshow(a)
229/62:
a=torch.rand(5,5)
a
imshow(a)
229/63:
a=torch.rand(5,5)
a
imshow(a)
229/64:
a=torch.rand(5,5)
a
imshow(a)
229/65:
a=torch.rand(5,5)
a
imshow(a)
229/66:
a=torch.rand(5,5)
a
imshow(a)
229/67:
a=torch.rand(5,5)
a
imshow(a)
229/68:
a=torch.rand(5,5)
a
imshow(a)
229/69:
a=torch.rand(5,5)
a
imshow(a)
229/70:
a=torch.rand(5,5)
a
imshow(a)
229/71:
a=torch.rand(5,5)
a
imshow(a)
229/72:
a=torch.rand(5,5)
a
imshow(a)
229/73:
a=torch.rand(5,5)
a
imshow(a)
229/74:
a=torch.rand(5,5)
a
imshow(a)
229/75:
a=torch.rand(5,5)
a
imshow(a)
229/76:
a=torch.rand(5,5)
a
imshow(a)
229/77:
a=torch.rand(5,5)
a
imshow(a)
229/78:
a=torch.rand(5,5)
a
imshow(a)
229/79:
a=torch.rand(5,5)
a
imshow(a)
229/80:
a=torch.rand(5,5)
a
imshow(a)
229/81:
a=torch.rand(5,5)
a
imshow(a)
229/82:
a=torch.rand(5,5)
a
imshow(a)
229/83:
a=torch.rand(5,5)
a
imshow(a)
229/84:
a=torch.rand(5,5)
a
imshow(a)
229/85:
a=torch.rand(5,5)
a
imshow(a)
229/86:
a=torch.rand(5,5)
a
imshow(a)
229/87:
a=torch.rand(5,5)
a
imshow(a)
229/88:
a=torch.rand(5,5)
a
imshow(a)
229/89:
a=torch.rand(5,5)
a
imshow(a)
229/90:
a=torch.rand(5,5)
a
imshow(a)
229/91:
a=torch.rand(5,5)
a
imshow(a)
229/92:
a=torch.rand(5,5)
a
imshow(a)
229/93:
a=torch.rand(5,5)
a
imshow(a)
229/94:
a=torch.rand(5,5)
a
imshow(a)
229/95:
a=torch.rand(5,5)
a
imshow(a)
229/96:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
229/97:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
229/98:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
229/99:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
229/100:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
229/101:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
229/102:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
229/103:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
229/104:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
229/105:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
229/106:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
229/107:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
229/108:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
229/109:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
229/110:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
229/111:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
229/112:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
229/113:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
229/114:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
229/115:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
229/116:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
229/117:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
229/118:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
229/119:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
229/120:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
print (mean(a))
229/121:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
print (mean(a,0))
229/122:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
print (a.mean(0))
229/123:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
print (a.mean())
229/124:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
print (a.mean())
229/125:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
print (a.mean())
229/126:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
print (a.mean())
229/127:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
print (a.mean())
229/128:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
print (a.mean())
229/129:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
print (a.mean())
229/130:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
print (a.mean())
229/131:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
print (a.mean())
229/132:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
print (a.mean())
229/133:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
print (a.mean())
229/134:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
print (a.mean(a.shape()
229/135:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
(a.shape()
229/136:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
a.shape()
229/137:
a=torch.rand(5,5)-torch.rand(5,5)
a
imshow(a)
a.shape
229/138:
a=torch.rand(5,5)-torch.rand(500,500)
a
imshow(a)
a.shape
229/139:
a=torch.rand(500,500)
a
imshow(a)
a.shape
229/140:
a=torch.rand(5000,5000)
a
imshow(a)
a.shape
229/141:
a=diff(torch.rand(5000,5000))
a
imshow(a)
a.shape
229/142:
a=diff(torch.rand(5000,5000))-(torch.rand(5000,5000))
a
imshow(a)
a.shape
229/143:
a=diff(torch.rand(5000,5000))-torch.rand(5000,5000)
a
imshow(a)
a.shape
229/144:
a=diff(torch.rand(5000,5000))
a
imshow(a)
a.shape
229/145:
a=diff(torch.rand(5000,5000))
a
imshow(a)
a.type
229/146:
a=diff(torch.rand(5000,5000))
a
imshow(a)
type(a)
229/147:
a=torch.rand(5000,5000)
a
imshow(a)
type(a)
229/148:
cosqm_address='vpn.izana.org:5080/data'
data=genfromtxt(cosqm_address)
229/149:
cosqm_address='vpn.izana.org:5080/data'

import pandas as pd
read = pandas.io.parsers.read_csv("http://....", ...)
229/150:
cosqm_address='vpn.izana.org:5080/data'

import pandas as pd
read = pd.io.parsers.read_csv("http://....", ...)
229/151:
cosqm_address='vpn.izana.org:5080/data'

import pandas as pd
read = pd.io.parsers.read_csv(cosqm_address)
229/152:
cosqm_address='vpn.izana.org:5080/data/'
date='2019/05/01'

import pandas as pd
read = pd.io.parsers.read_csv(cosqm_address)
229/153:
cosqm_address='vpn.izana.org:5080/data/'
date='2019/05/01'
cosqm_adress+=date

import pandas as pd
read = pd.io.parsers.read_csv(cosqm_address)
229/154:
cosqm_address='vpn.izana.org:5080/data/'
date='2019/05/01'
cosqm_address+=date

import pandas as pd
read = pd.io.parsers.read_csv(cosqm_address)
229/155:
cosqm_address='vpn.izana.org:5080/data/'
date='2019/05/01.txt'
cosqm_address+=date

import pandas as pd
read = pd.io.parsers.read_csv(cosqm_address)
229/156:
cosqm_address='vpn.izana.org:5080/data/'
date='2019/05/01.txt'
cosqm_address+=date

import pandas as pd
read = pd.io.parsers.read_csv(cosqm_address)
cosqm_address
229/157:
cosqm_address='vpn.izana.org:5080/data/'
date='2019/05/'
filename='2019-05-23.txt'
cosqm_address+=date+filename


import pandas as pd
read = pd.io.parsers.read_csv(cosqm_address)
cosqm_address
229/158:
cosqm_address='vpn.izana.org:5080/data/'
date='2019/05/'
filename='2019-05-23.txt'
cosqm_address+=date+filename


import pandas as pd
read = pd.io.parsers.read_csv(http://vpn.izana.org:5080/data/2019/05/2019-05-23.txt)
cosqm_address
229/159:
cosqm_address='vpn.izana.org:5080/data/'
date='2019/05/'
filename='2019-05-23.txt'
cosqm_address+=date+filename


import pandas as pd
read = pd.io.parsers.read_csv(vpn.izana.org:5080/data/2019/05/2019-05-23.txt)
cosqm_address
229/160:
cosqm_address='vpn.izana.org:5080/data/'
date='2019/05/'
filename='2019-05-23.txt'
cosqm_address+=date+filename


import pandas as pd
read = pd.io.parsers.read_csv("vpn.izana.org:5080/data/2019/05/2019-05-23.txt")
cosqm_address
229/161:
cosqm_address='vpn.izana.org:5080/data/'
date='2019/05/'
filename='2019-05-23.txt'
cosqm_address+=date+filename


import pandas as pd
read = pd.io.parsers.read_csv("http://vpn.izana.org:5080/data/2019/05/2019-05-23.txt")
cosqm_address
229/162:
cosqm_address='http://vpn.izana.org:5080/data/'
date='2019/05/'
filename='2019-05-23.txt'
cosqm_address+=date+filename


import pandas as pd
read = pd.io.parsers.read_csv(filename)
229/163:
cosqm_address='http://vpn.izana.org:5080/data/'
date='2019/05/'
filename='2019-05-23.txt'
address=cosqm_address+date+filename


import pandas as pd
read = pd.io.parsers.read_csv(address)
229/164: read
229/165:
cosqm_address='http://vpn.izana.org:5080/data/'
date='2019/05/'
filename='2019-05-23.txt'
address=cosqm_address+date+filename


import pandas as pd
cosqm_data = pd.io.parsers.read_csv(address)
229/166: cosqm_data
229/167: shape(cosqm_data)
229/168: type(cosqm_data)
229/169: cosqm_data.dtype
229/170: cosqm_data.dtypes
229/171: cosqm_data[0]
229/172: from urllib.request import urlopen, Request
229/173:
#load file from server test
#from urllib.request import urlopen

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-21.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(sqm3_angular_code)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
229/174:
#load file from server test
#from urllib.request import urlopen

def load_web_data(filepath):
    request = request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-21.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(sqm3_angular_code)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
229/175:
#load file from server test
#from urllib.request import urlopen

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-21.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(sqm3_angular_code)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
229/176: from urllib.request import urlopen, Request
229/177:
#load file from server test
#from urllib.request import urlopen

def load_web_data(filepath):
    request = urllib.request.Request(address)
    data_server = urllib.request.urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-21.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(sqm3_angular_code)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
229/178:
#load file from server test
#from urllib.request import urlopen

def load_web_data(filepath):
    request = Request(address)
    data_server = urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://192.168.0.100/data/2019/07/2019-07-21.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(sqm3_angular_code)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
229/179:
#load file from server test
#from urllib.request import urlopen

def load_web_data(filepath):
    request = Request(address)
    data_server = urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://vpn.izana.org:5080/data/2019/05/2019-05-23.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(sqm3_angular_code)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
229/180:
#load file from server test
#from urllib.request import urlopen

def load_web_data(filepath):
    request = Request(address)
    data_server = urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://vpn.izana.org:5080/data/2019/05/2019-05-23.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0720)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
229/181:
#load file from server test
#from urllib.request import urlopen

def load_web_data(filepath):
    request = Request(address)
    data_server = urlopen(request)
    #data_server=data_server.read().decode('utf-8').split('\n')
    data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    return data_server

address=r'http://vpn.izana.org:5080/data/2019/05/2019-05-30.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0720)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
229/182:
address=r'http://http://161.72.128.52/data/2019/05/2019-05-30.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0720)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
229/183:
address=r'http://161.72.128.52/data/2019/05/2019-05-30.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0720)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
229/184:
address=r'http://161.72.128.52/data/2019/05/2019-05-28.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0720)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
229/185:
address=r'http://161.72.128.52/data/2019/05/2019-05-27.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0720)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
229/186:
address=r'http://161.72.128.52/data/2019/05/2019-05-29.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0720)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
229/187:
address=r'http://161.72.128.52/data/2019/05/2019-05-31.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0720)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
229/188:
address=r'http://161.72.128.52/data/2019/05/2019-06-01.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0720)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
229/189:
address=r'http://161.72.128.52/data/2019/05/2019-06-15.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0720)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
229/190:
address=r'http://161.72.128.52/data/2019/06/2019-06-15.txt'
data0720=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data0720)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data0720[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data0720[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
229/191:
address=r'http://161.72.128.52/data/2019/06/2019-06-15.txt'
data=load_web_data(address)

fig,ax=subplots(1,1,dpi=300,figsize=(4,4))
start=0
stop=len(data)
xs=linspace (0,24,stop-start)

ax.plot(xs+4, -data[start:stop,5], 'k.', markersize=1)
ax.plot(xs+4, -data[start:stop,6], 'y.', markersize=1)
ax.plot(xs+4, -data[start:stop,7], 'r.', markersize=1)
ax.plot(xs+4, -data[start:stop,8], 'g.', markersize=1)
ax.plot(xs+4, -data[start:stop,9], 'b.', markersize=1)
for x in xs:
    ax.axvline(x+4, linewidth=0.2)

#ax.set_xlabel('$Degrees$')
ax.set_ylabel('$Mag/arcsec^2$')
229/192: data
229/193: data.shape
229/194: pwd
229/195: pwd..
239/1:
from scipy import *
from matplotlib.pyplot import *
239/2:
#import picture
path='monticules.png'
ir=imread(path)
imshow(ir)
239/3:
#import picture
path='monticules.png'
ir=imread(path)

ir_mean=mean()


imshow(ir,size=100)
239/4:
#import picture
path='monticules.png'
ir=imread(path)

#ir_mean=mean()


imshow(ir,size=100)
239/5:
#import picture
path='monticules.png'
ir=imread(path)

#ir_mean=mean()


imshow(ir,aspect='auto')
239/6:
#import picture
path='monticules.png'
ir=imread(path)

#ir_mean=mean()

figure(figsize=(10,10))
imshow(ir)
239/7:
#import picture
path='monticules.png'
ir=imread(path)

print (ir)

#ir_mean=mean()

figure(figsize=(10,10))
imshow(ir)
239/8:
#import picture
path='monticules.png'
ir=imread(path)

print (ir.shape)

#ir_mean=mean()

figure(figsize=(10,10))
imshow(ir)
239/9:
#import picture
path='monticules.png'
ir=imread(path)
ir.reshape(1312,1312,3)

print (ir.shape)

#ir_mean=mean()

figure(figsize=(10,10))
imshow(ir)
239/10:
#import picture
path='monticules.png'
ir=imread(path)

print (ir.shape)

#ir_mean=mean()

figure(figsize=(10,10))
imshow(ir)
239/11:
#import picture
path='monticules.png'
ir=imread(path)

ir=ir[:,:,:]
print (ir.shape)

#ir_mean=mean()

figure(figsize=(10,10))
imshow(ir)
239/12:
#import picture
path='monticules.png'
ir=imread(path)

ir=ir[:,:]
print (ir.shape)

#ir_mean=mean()

figure(figsize=(10,10))
imshow(ir)
239/13:
#import picture
path='monticules.png'
ir=imread(path)

ir=ir[:,:-1]
print (ir.shape)

#ir_mean=mean()

figure(figsize=(10,10))
imshow(ir)
239/14:
#import picture
path='monticules.png'
ir=imread(path)

ir=ir[:,:,:-1]
print (ir.shape)

#ir_mean=mean()

figure(figsize=(10,10))
imshow(ir)
239/15:
#import picture
path='monticules.png'
ir=imread(path)

ir=ir[:,:,:-1]
print (ir.shape)
print (ir)

#ir_mean=mean()

figure(figsize=(10,10))
imshow(ir)
239/16:
#import picture
path='monticules.png'
ir=imread(path)

ir=ir[:,:,:-1]
print (ir.shape)
print (ir)

#ir_mean=mean()

figure(figsize=(10,10))
imshow(ir[:,:,0])
239/17:
#import picture
path='monticules.png'
ir=imread(path)

ir=ir[:,:,:-1]
print (ir.shape)
print (ir)

#ir_mean=mean()

figure(figsize=(10,10))
imshow(ir[:,:,0])
colourbar()
239/18:
#import picture
path='monticules.png'
ir=imread(path)

ir=ir[:,:,:-1]
print (ir.shape)
print (ir)

#ir_mean=mean()

figure(figsize=(10,10))
imshow(ir[:,:,0])
colorbar()
239/19:
#import picture
path='monticules.png'
ir=imread(path)

ir=ir[:,:,:-1]
print (ir.shape)
print (ir)

#ir_mean=mean()

figure(figsize=(10,10))
imshow(ir[:,:,0]>0.5)
colorbar()
239/20:
#import picture
path='monticules.png'
ir=imread(path)

ir=ir[:,:,:-1]
print (ir.shape)
print (ir[:,:,0])

#ir_mean=mean()

figure(figsize=(10,10))
imshow(ir[:,:,0]>0.5)
colorbar()
239/21:
#import picture
path='monticules.png'
ir=imread(path)

ir=ir[:,:,:-1]
print (ir.shape)
print (ir[:,:,0])

#ir_mean=mean()

figure(figsize=(10,10))
imshow(ir[:,:,1]>0.5)
colorbar()
239/22:
#import picture
path='monticules.png'
ir=imread(path)

ir=ir[:,:,:-1]
print (ir.shape)
print (ir[:,:,0])

#ir_mean=mean()

figure(figsize=(10,10))
imshow(ir[:,:,2]>0.5)
colorbar()
239/23:
#import picture
path='monticules.png'
ir=imread(path)

ir=ir[:,:,:-1]
print (ir.shape)
print (ir[:,:,0])

#ir_mean=mean()

figure(figsize=(10,10))

threshold=0.8
imshow(ir[:,:,2]>threshold)
colorbar()
239/24:
#import picture
path='monticules.png'
ir=imread(path)

ir=ir[:,:,:-1]
print (ir.shape)
print (ir[:,:,0])

#ir_mean=mean()

figure(figsize=(10,10))

threshold=0.9
imshow(ir[:,:,2]>threshold)
colorbar()
239/25:
#import picture
path='monticules.png'
ir=imread(path)

ir=ir[:,:,:-1]
print (ir.shape)
print (ir[:,:,0])

#ir_mean=mean()

figure(figsize=(10,10))

threshold=0.85
imshow(ir[:,:,2]>threshold)
colorbar()
239/26:
#import picture
path='monticules.png'
ir=imread(path)

ir=ir[:,:,:-1]
print (ir.shape)
print (ir[:,:,0])


figure(figsize=(10,10))

ir_moy=avg(ir,axis=0)>threshold

threshold=0.85
imshow(ir_moy)
colorbar()
239/27:
#import picture
path='monticules.png'
ir=imread(path)

ir=ir[:,:,:-1]
print (ir.shape)
print (ir[:,:,0])


figure(figsize=(10,10))

ir_moy=mean(ir,axis=0)>threshold

threshold=0.85
imshow(ir_moy)
colorbar()
239/28:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis

figure(figsize=(10,10))

ir_moy=mean(ir,axis=0)>threshold    #average on 3 channels

threshold=0.85    #set intensity threshold
imshow(ir_moy)
colorbar()
239/29:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis

figure(figsize=(10,10))

ir_moy=mean(ir,axis=1)>threshold    #average on 3 channels

threshold=0.85    #set intensity threshold
imshow(ir_moy)
colorbar()
239/30:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis

figure(figsize=(10,10))

ir_moy=mean(ir,axis=2)>threshold    #average on 3 channels

threshold=0.85    #set intensity threshold
imshow(ir_moy)
colorbar()
239/31:
a=array([1,2],[3,4])
print (a)

a=a>1.5
a
239/32:
a=array([[1,2],[3,4]])
print (a)

a=a>1.5
a
239/33:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis

figure(figsize=(10,10))

threshold=0.85    #set intensity threshold
ir_thres=ir<==threshold
ir_moy*=ir_thres
ir_moy=mean(ir,axis=2)  #average on 3 channels

imshow(ir_moy)
colorbar()
239/34:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis

figure(figsize=(10,10))

threshold=0.85    #set intensity threshold
ir_thres=ir<=threshold
ir_moy*=ir_thres
ir_moy=mean(ir,axis=2)  #average on 3 channels

imshow(ir_moy)
colorbar()
239/35:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis

figure(figsize=(10,10))

threshold=0.85    #set intensity threshold
ir_thres=ir<=threshold
print(shape(ir_thres,ir_moy))
ir_moy*=ir_thres
ir_moy=mean(ir,axis=2)  #average on 3 channels

print(shape(ir_thres,ir_moy))

imshow(ir_moy)
colorbar()
239/36:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis

figure(figsize=(10,10))

threshold=0.85    #set intensity threshold
ir_thres=ir<=threshold
print(shape(ir_thres,ir_moy))
ir_moy*=ir_thres
ir_moy=mean(ir,axis=2)  #average on 3 channels

print(shape(ir_thres))

print(shape(ir_moy))

imshow(ir_moy)
colorbar()
239/37:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis

figure(figsize=(10,10))

threshold=0.85    #set intensity threshold
ir_thres=ir<=threshold
ir_moy*=ir_thres
ir_moy=mean(ir,axis=2)  #average on 3 channels

print(shape(ir_thres))

print(shape(ir_moy))

imshow(ir_moy)
colorbar()
239/38:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis

figure(figsize=(10,10))

threshold=0.85    #set intensity threshold
ir_thres=ir<=threshold
print(shape(ir_thres))
ir_moy*=ir_thres
ir_moy=mean(ir,axis=2)  #average on 3 channels



print(shape(ir_moy))

imshow(ir_moy)
colorbar()
239/39:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis

figure(figsize=(10,10))


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.85    #set intensity threshold
ir_thres=ir<=threshold
print(shape(ir_thres))
ir_moy*=ir_thres



print(shape(ir_moy))

imshow(ir_moy)
colorbar()
239/40:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.85    #set intensity threshold
ir_thres=ir<=threshold
print(shape(ir_thres))
ir_moy*=ir_thres
print(shape(ir_moy))


figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/41:
a=array([[1,2],[3,4]])
print (a)

a=a>1.5
shape(a
239/42:
a=array([[1,2],[3,4]])
print (a)

a=a>1.5
shape(a)
239/43:
a=array([[1,2],[3,4]])
print (a)

a=a>1.5
type(a)
239/44:
a=array([[1,2],[3,4]])
print (a)

a=a>1.5
a
239/45:
a=array([[1,2],[3,4]])
print (a)

a1=a>1.5
a
239/46:
a=array([[1,2],[3,4]])
print (a)

a1=a>1.5
a,a1
239/47:
a=array([[1,2],[3,4]])
print (a)

a1=a>1.5
a,a1,a*a1
239/48:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.85    #set intensity threshold
ir_thres=ir<=threshold
print(shape(ir_thres))
#ir_moy*=ir_thres
#print(shape(ir_moy))


figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/49:
a=array([[1,2],[3,4]])
print (a)

a1=a>1.5
a*=a1
a,a1,a*a1
239/50:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.85    #set intensity threshold
ir_thres=ir_moy<=threshold
print(shape(ir_thres))
ir_moy*=ir_thres
print(shape(ir_moy))


figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/51:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.90    #set intensity threshold
ir_thres=ir_moy<=threshold
print(shape(ir_thres))
ir_moy*=ir_thres
print(shape(ir_moy))


figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/52:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.30    #set intensity threshold
ir_thres=ir_moy<=threshold
print(shape(ir_thres))
ir_moy*=ir_thres
print(shape(ir_moy))


figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/53:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.50    #set intensity threshold
ir_thres=ir_moy<=threshold
print(shape(ir_thres))
ir_moy*=ir_thres
print(shape(ir_moy))


figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/54:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.70    #set intensity threshold
ir_thres=ir_moy<=threshold
print(shape(ir_thres))
ir_moy*=ir_thres
print(shape(ir_moy))


figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/55:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.70    #set intensity threshold
ir_thres=ir_moy>=threshold
print(shape(ir_thres))
ir_moy*=ir_thres
print(shape(ir_moy))


figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/56:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.70    #set intensity threshold
ir_thres=ir_moy>=threshold
print(shape(ir_thres))
ir_moy*=ir_thres
print(shape(ir_moy))


figure(figsize=(10,10))
contourf(ir_moy)
colorbar()
239/57:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.70    #set intensity threshold
ir_thres=ir_moy>=threshold
print(shape(ir_thres))
ir_moy*=ir_thres
print(shape(ir_moy))


figure(figsize=(10,10))
imshow3e(ir_moy)
colorbar()
239/58:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.70    #set intensity threshold
ir_thres=ir_moy>=threshold
print(shape(ir_thres))
ir_moy*=ir_thres
print(shape(ir_moy))


figure(figsize=(10,10))
imshow3d(ir_moy)
colorbar()
239/59:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.70    #set intensity threshold
ir_thres=ir_moy>=threshold
print(shape(ir_thres))
ir_moy*=ir_thres
print(shape(ir_moy))


figure(figsize=(10,10))
plot_surface(ir_moy)
colorbar()
239/60:
from scipy import *
from matplotlib.pyplot import *
from pylab import *
239/61:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.70    #set intensity threshold
ir_thres=ir_moy>=threshold
print(shape(ir_thres))
ir_moy*=ir_thres
print(shape(ir_moy))


figure(figsize=(10,10))
plot_surface(ir_moy)
colorbar()
239/62:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.70    #set intensity threshold
ir_thres=ir_moy>=threshold
print(shape(ir_thres))
ir_moy*=ir_thres
print(shape(ir_moy))


figure(figsize=(10,10))
imshow(ir_moy, projection='3D')
colorbar()
239/63:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.70    #set intensity threshold
ir_thres=ir_moy>=threshold
print(shape(ir_thres))
ir_moy*=ir_thres
print(shape(ir_moy))


figure(figsize=(10,10))
add_subplot(ir_moy, projection='3D')
colorbar()
239/64:
from scipy import *
from matplotlib.pyplot import *
from pylab import *
from mpl_toolkits.mplot3d import Axes3D
239/65:
from scipy import *
from matplotlib.pyplot import *
from pylab import *
from mpl_toolkits.mplot3d.Axes3D import *
239/66:
from scipy import *
from matplotlib.pyplot import *
from pylab import *
from mpl_toolkits.mplot3d import Axes3D
239/67:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.70    #set intensity threshold
ir_thres=ir_moy>=threshold
print(shape(ir_thres))
ir_moy*=ir_thres
print(shape(ir_moy))


figure(figsize=(10,10))
add_subplot(ir_moy, projection='3D')
colorbar()
239/68:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.70    #set intensity threshold
ir_thres=ir_moy>=threshold
print(shape(ir_thres))
ir_moy*=ir_thres
print(shape(ir_moy))


figure,ax=figure(figsize=(10,10))
ax.add_subplot(ir_moy, projection='3D')
colorbar()
239/69:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.70    #set intensity threshold
ir_thres=ir_moy>=threshold
print(shape(ir_thres))
ir_moy*=ir_thres
print(shape(ir_moy))


fig,ax=figure(figsize=(10,10))
fig.add_subplot(ir_moy, projection='3D')
colorbar()
239/70:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.70    #set intensity threshold
ir_thres=ir_moy>=threshold
print(shape(ir_thres))
ir_moy*=ir_thres
print(shape(ir_moy))


fig=figure(figsize=(10,10))
fig.add_subplot(ir_moy, projection='3D')
colorbar()
239/71:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.70    #set intensity threshold
ir_thres=ir_moy>=threshold
print(shape(ir_thres))
ir_moy*=ir_thres
print(shape(ir_moy))


fig=figure(figsize=(10,10))
fig.add_subplot(ir_moy, projection='3d')
colorbar()
239/72:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.70    #set intensity threshold
ir_thres=ir_moy>=threshold
print(shape(ir_thres))
ir_moy*=ir_thres
print(shape(ir_moy))


fig=figure(figsize=(10,10))
fig.add_subplot(111, projection='3d')
fig.plot_surface(ir_moy)
colorbar()
239/73:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.70    #set intensity threshold
ir_thres=ir_moy>=threshold
print(shape(ir_thres))
ir_moy*=ir_thres
print(shape(ir_moy))


fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')
ax.plot_surface(ir_moy)
colorbar()
239/74:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.70    #set intensity threshold
ir_thres=ir_moy>=threshold
print(shape(ir_thres))
ir_moy*=ir_thres
print(shape(ir_moy))


fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')
ax.plot_surface(1312,1312,ir_moy)
colorbar()
239/75:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.70    #set intensity threshold
ir_thres=ir_moy>=threshold
print(shape(ir_thres))
ir_moy*=ir_thres
print(shape(ir_moy))


fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')
ax.plot_surface(1312,1312,ir_moy)
#colorbar()
239/76:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.70    #set intensity threshold
ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
ir_moy*=ir_thres
#print(shape(ir_moy))


fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')
ax.plot_surface(1312,1312,ir_moy)
#colorbar()
239/77:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.70    #set intensity threshold
ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
ir_moy*=ir_thres
#print(shape(ir_moy))
print (ir_moyé)

fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')
ax.plot_surface(1312,1312,ir_moy)
#colorbar()
239/78:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.70    #set intensity threshold
ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
ir_moy*=ir_thres
#print(shape(ir_moy))
print (ir_moy)

fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')
ax.plot_surface(1312,1312,ir_moy)
#colorbar()
239/79:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis



ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.70    #set intensity threshold
ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
#ir_moy*=ir_thres
#print(shape(ir_moy))
print (ir_moy)

fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')
ax.plot_surface(1312,1312,ir_moy)
#colorbar()
239/80:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=ir
#ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.70    #set intensity threshold
ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
#ir_moy*=ir_thres
#print(shape(ir_moy))
print (ir_moy)

fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')
ax.plot_surface(1312,1312,ir_moy)
#colorbar()
239/81:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.70    #set intensity threshold
ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
#ir_moy*=ir_thres
#print(shape(ir_moy))
print (ir_moy)

fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')
ax.plot_surface(1312,1312,ir_moy)
#colorbar()
239/82:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.20    #set intensity threshold
ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
#ir_moy*=ir_thres
#print(shape(ir_moy))
print (ir_moy)

fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')
ax.plot_surface(1312,1312,ir_moy)
#colorbar()
239/83:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.20    #set intensity threshold
ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
ir_moy*=ir_thres
#print(shape(ir_moy))
print (ir_moy)

fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')
ax.plot_surface(1312,1312,ir_moy)
#colorbar()
239/84:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.20    #set intensity threshold
ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
ir_moy*=ir_thres
#print(shape(ir_moy))
print (ir_moy)

fig=figure(figsize=(10,10))
#ax=fig.add_subplot(111, projection='3d')
ax.plot_surface(1312,1312,ir_moy)
#colorbar()
239/85:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.20    #set intensity threshold
ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
ir_moy*=ir_thres
#print(shape(ir_moy))
print (ir_moy)

fig=figure(figsize=(10,10))
#ax=fig.add_subplot(111, projection='3d')
fig.plot_surface(1312,1312,ir_moy)
#colorbar()
239/86:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.20    #set intensity threshold
ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
ir_moy*=ir_thres
#print(shape(ir_moy))
print (ir_moy)

fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')
ax.plot_surface(1312,1312,ir_moy)
#colorbar()
239/87:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.20    #set intensity threshold
ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
ir_moy*=ir_thres
#print(shape(ir_moy))
print (ir_moy)

fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')
ax.plot_surface(1312,1312,ir_moy)
ax.set_xlim([0,1312])
#colorbar()
239/88:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.20    #set intensity threshold
ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
ir_moy*=ir_thres
#print(shape(ir_moy))
print (ir_moy)

fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')
ax.plot_surface(1312,1312,ir_moy)
ax.set_xlim([0,1312])
ax.set_ylim([0,1312])
#colorbar()
239/89:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.20    #set intensity threshold
ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
ir_moy*=ir_thres
#print(shape(ir_moy))
print (ir_moy)

fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')
ax.plot_surface(1312,1312,ir_moy)
ax.set_xlim([0,1512])
ax.set_ylim([0,1312])
#colorbar()
239/90:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.20    #set intensity threshold
ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
ir_moy*=ir_thres
#print(shape(ir_moy))
print (ir_moy)

fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')
ax.plot_surface(1312,1312,ir_moy)
ax.set_xlim([0,1512])
ax.set_ylim([0,1512])
#colorbar()
239/91:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.20    #set intensity threshold
ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
ir_moy*=ir_thres
#print(shape(ir_moy))
print (ir_moy)

fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')
ax.plot_surface(1312,1312,ir_moy)
ax.set_xlim([-1512,1512])
ax.set_ylim([0,1512])
#colorbar()
239/92:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.20    #set intensity threshold
ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
ir_moy*=ir_thres
#print(shape(ir_moy))
print (ir_moy)

fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')
ax.plot_surface(1312,1312,ir_moy)
ax.set_xlim([-1512,1512])
ax.set_ylim([-1512,1512])
#colorbar()
239/93:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.20    #set intensity threshold
ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
ir_moy*=ir_thres
#print(shape(ir_moy))
print (ir_moy)

fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')
ax.plot_surface(1312,1312,ir_moy)
ax.set_xlim([-1512,1812])
ax.set_ylim([-1512,1512])
#colorbar()
239/94:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.20    #set intensity threshold
ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
ir_moy*=ir_thres
#print(shape(ir_moy))
print (ir_moy)

fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')
ax.plot_surface(1312,1312,ir_moy)
ax.set_xlim([-1512,1812])
ax.set_ylim([-1512,1812])
#colorbar()
239/95:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.20    #set intensity threshold
ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
ir_moy*=ir_thres
#print(shape(ir_moy))
print (ir_moy)

fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')
ax.plot_surface(1312,1312,ir_moy)
ax.set_xlim([-1512,1812])
ax.set_ylim([-1512,2512])
#colorbar()
239/96:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0    #set intensity threshold
ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
ir_moy*=ir_thres
#print(shape(ir_moy))
print (ir_moy)

fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')
ax.plot_surface(1312,1312,ir_moy)
ax.set_xlim([-1512,1812])
ax.set_ylim([-1512,2512])
#colorbar()
239/97:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0    #set intensity threshold
#ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
ir_moy*=ir_thres
#print(shape(ir_moy))
print (ir_moy)

fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')
ax.plot_surface(1312,1312,ir_moy)
ax.set_xlim([-1512,1812])
ax.set_ylim([-1512,2512])
#colorbar()
239/98:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0    #set intensity threshold
#ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
ir_moy*=ir_thres
#print(shape(ir_moy))
print (ir_moy)

fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')

x, y = np.mgrid[0:1312, 0:1312]
ax.plot_surface(x,y,ir_moy)
ax.set_xlim([-1512,1812])
ax.set_ylim([-1512,2512])
#colorbar()
239/99:
a=array([[1,2],[3,4]])
print (a)

a1=a>1.5
a*=a1
a,a1,a*a1
239/100:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0    #set intensity threshold
#ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
ir_moy*=ir_thres
#print(shape(ir_moy))
print (ir_moy)

fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')

x, y = mgrid[0:1312, 0:1312]
ax.plot_surface(x,y,ir_moy)
# ax.set_xlim([-1512,1812])
# ax.set_ylim([-1512,2512])
#colorbar()
239/101: %jupyter inline
239/102: %matplotlib inline
239/103:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0    #set intensity threshold
#ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
ir_moy*=ir_thres
#print(shape(ir_moy))
print (ir_moy)

fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')

x, y = mgrid[0:1312, 0:1312]
ax.plot_surface(x,y,ir_moy)
# ax.set_xlim([-1512,1812])
# ax.set_ylim([-1512,2512])
#colorbar()
239/104:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0    #set intensity threshold
#ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
ir_moy*=ir_thres
#print(shape(ir_moy))
print (ir_moy)

fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')

x, y = mgrid[0:1312, 0:1312]
ax.plot_surface(x,y,ir_moy)
# ax.set_xlim([-1512,1812])
# ax.set_ylim([-1512,2512])
#colorbar()
for angle in range(0, 360):
    ax.view_init(30, angle)
    plt.draw()
    plt.pause(.001)
239/105:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0    #set intensity threshold
#ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
ir_moy*=ir_thres
#print(shape(ir_moy))


fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')

x, y = mgrid[0:1312, 0:1312]
ax.plot_surface(x,y,ir_moy)
# ax.set_xlim([-1512,1812])
# ax.set_ylim([-1512,2512])
#colorbar()
for angle in range(0, 360):
    ax.view_init(30, angle)
    plt.draw()
    plt.pause(.001)
239/106:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0    #set intensity threshold
#ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
ir_moy*=ir_thres
#print(shape(ir_moy))


fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')

x, y = mgrid[0:1312, 0:1312]
ax.plot_surface(x,y,ir_moy)
# ax.set_xlim([-1512,1812])
# ax.set_ylim([-1512,2512])
#colorbar()
for angle in range(0, 360):
    ax.view_init(30, angle)
    plt.draw()
    plt.pause(.001)
#
239/107:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0    #set intensity threshold
#ir_thres=ir_moy>=threshold
#print(shape(ir_thres))
ir_moy*=ir_thres
#print(shape(ir_moy))


fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')

x, y = mgrid[0:1312, 0:1312]
ax.plot_surface(x,y,ir_moy,rstride=1, cstride=1)
# ax.set_xlim([-1512,1812])
# ax.set_ylim([-1512,2512])
#colorbar()
for angle in range(0, 360):
    ax.view_init(30, angle)
    plt.draw()
    plt.pause(.001)
#
239/108:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0    #set intensity threshold
ir_thres=ir_moy>=threshold
ir_moy*=ir_thres


fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')

x, y = mgrid[0:1312, 0:1312]
ax.plot_surface(x,y,ir_moy)
# ax.set_xlim([-1512,1812])
# ax.set_ylim([-1512,2512])
#colorbar()
239/109:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0    #set intensity threshold
ir_thres=ir_moy>=threshold
ir_moy*=sqrt(ir_thres)


fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')

x, y = mgrid[0:1312, 0:1312]
ax.plot_surface(x,y,ir_moy)
# ax.set_xlim([-1512,1812])
# ax.set_ylim([-1512,2512])
#colorbar()
239/110:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0    #set intensity threshold
ir_thres=ir_moy>=threshold
ir_moy=sqrt(ir_moy*ir_thres)


fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')

x, y = mgrid[0:1312, 0:1312]
ax.plot_surface(x,y,ir_moy)
# ax.set_xlim([-1512,1812])
# ax.set_ylim([-1512,2512])
#colorbar()
239/111: 1312*1312
239/112:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0    #set intensity threshold
ir_thres=ir_moy>=threshold
ir_moy=sqrt(ir_moy*ir_thres)


fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')

x, y = mgrid[0:1312, 0:1312]
ax.plot_surface(x,y,ir_moy)
# ax.set_xlim([-1512,1812])
# ax.set_ylim([-1512,2512])
#colorbar()
239/113:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=50    #set intensity threshold
ir_thres=ir_moy>=threshold
ir_moy=ir_moy*ir_thres


fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')

x, y = mgrid[0:1312, 0:1312]
ax.plot_surface(x,y,ir_moy)
# ax.set_xlim([-1512,1812])
# ax.set_ylim([-1512,2512])
#colorbar()
239/114:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.5    #set intensity threshold
ir_thres=ir_moy>=threshold
ir_moy=ir_moy*ir_thres


fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')

x, y = mgrid[0:1312, 0:1312]
ax.plot_surface(x,y,ir_moy)
# ax.set_xlim([-1512,1812])
# ax.set_ylim([-1512,2512])
#colorbar()
239/115:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.5    #set intensity threshold
ir_thres=ir_moy>=threshold
ir_moy=ir_moy*ir_thres


fig=figure(figsize=(10,10))
ax=fig.add_subplot(111, projection='3d')

x, y = mgrid[0:1312, 0:1312]
ax.plot_surface(x,y,ir_moy)
#colorbar()
239/116:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.5    #set intensity threshold
ir_thres=ir_moy>=threshold
ir_moy=ir_moy*ir_thres




fig=figure(figsize=(10,10))
imshow(ir)
#colorbar()
239/117:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.5    #set intensity threshold
ir_thres=ir_moy>=threshold
ir_moy=ir_moy*ir_thres




fig=figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/118:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.8    #set intensity threshold
ir_thres=ir_moy>=threshold
ir_moy=ir_moy*ir_thres




fig=figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/119:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0.7    #set intensity threshold
ir_thres=ir_moy>=threshold
ir_moy=ir_moy*ir_thres




fig=figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/120:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0    #set intensity threshold


while avg(ir_moy)>0.3:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.1



fig=figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/121:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0    #set intensity threshold


while mean(ir_moy)>0.3:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.1



fig=figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/122:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0    #set intensity threshold


while mean(ir_moy)>0.3:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.1

print threshold

fig=figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/123:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)  #average on 3 channels
threshold=0    #set intensity threshold


while mean(ir_moy)>0.3:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.1

print (threshold)

fig=figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/124:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)/2  #average on 3 channels
threshold=0    #set intensity threshold


while mean(ir_moy)>0.3:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.1

print (threshold)

fig=figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/125:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)/1.5  #average on 3 channels
threshold=0    #set intensity threshold


while mean(ir_moy)>0.3:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.1

print (threshold)

fig=figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/126:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)/0.75#average on 3 channels
threshold=0    #set intensity threshold


while mean(ir_moy)>0.3:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.1

print (threshold)

fig=figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/127:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.3:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.1

print (threshold)

fig=figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/128:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.25:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.1

print (threshold)

fig=figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/129:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.2:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.1

print (threshold)

fig=figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/130:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.2:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)

fig=figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/131: 1312/2
239/132:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.2:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


#MAX POOLING on 1312x1312 image
import skimage.measure
skimage.measure.block_reduce(a, (656,656), np.max)

fig=figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/133:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.2:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


#MAX POOLING on 1312x1312 image
import skimage.measure
skimage.measure.block_reduce(ir_moy, (656,656), np.max)

fig=figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/134:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.2:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


#MAX POOLING on 1312x1312 image
import skimage.measure
skimage.measure.block_reduce(ir_moy, (656,656), max)

fig=figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/135:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.2:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


#MAX POOLING on 1312x1312 image
import skimage.measure
skimage.measure.block_reduce(ir_moy, (656,656), amax)

fig=figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/136: sqrt(1312)
239/137:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.2:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


#MAX POOLING on 1312x1312 image
import skimage.measure
skimage.measure.block_reduce(ir_moy, (36,36), amax)

fig=figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/138:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.2:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


#MAX POOLING on 1312x1312 image
import skimage.measure
ir_moyskimage.measure.block_reduce(ir_moy, (36,36), amax)

fig=figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/139:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.2:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


#MAX POOLING on 1312x1312 image
import skimage.measure
ir_maxpool=skimage.measure.block_reduce(ir_moy, (36,36), amax)

fig=figure(figsize=(10,10))
imshow(ir_moy)
colorbar()
239/140:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.2:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


#MAX POOLING on 1312x1312 image
import skimage.measure
ir_maxpool=skimage.measure.block_reduce(ir_moy, (36,36), amax)

fig=figure(figsize=(10,10))
imshow(ir_maxpool)
colorbar()
239/141:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.2:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


#MAX POOLING on 1312x1312 image
import skimage.measure
ir_maxpool=skimage.measure.block_reduce(ir_moy, (60,60), amax)

fig=figure(figsize=(10,10))
imshow(ir_maxpool)
colorbar()
239/142:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.2:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


#MAX POOLING on 1312x1312 image
import skimage.measure
ir_maxpool=skimage.measure.block_reduce(ir_moy, (160,160), amax)

fig=figure(figsize=(10,10))
imshow(ir_maxpool)
colorbar()
239/143:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.2:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


#MAX POOLING on 1312x1312 image
import skimage.measure
ir_maxpool=skimage.measure.block_reduce(ir_moy, (600,600), amax)

fig=figure(figsize=(10,10))
imshow(ir_maxpool)
colorbar()
239/144:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.2:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


#MAX POOLING on 1312x1312 image
import skimage.measure
ir_maxpool=skimage.measure.block_reduce(ir_moy, (2,2), amax)

fig=figure(figsize=(10,10))
imshow(ir_maxpool)
colorbar()
239/145:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.2:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


#MAX POOLING on 1312x1312 image
import skimage.measure
ir_maxpool=skimage.measure.block_reduce(ir_moy, (4,4), amax)

fig=figure(figsize=(10,10))
imshow(ir_maxpool)
colorbar()
239/146:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.2:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


#MAX POOLING on 1312x1312 image
import skimage.measure
ir_maxpool=skimage.measure.block_reduce(ir_moy, (8,8), amax)

fig=figure(figsize=(10,10))
imshow(ir_maxpool)
colorbar()
239/147:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.2:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


#MAX POOLING on 1312x1312 image
import skimage.measure
ir_maxpool=skimage.measure.block_reduce(ir_moy, (10,10), amax)

fig=figure(figsize=(10,10))
imshow(ir_maxpool)
colorbar()
239/148:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.2:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


#MAX POOLING on 1312x1312 image
import skimage.measure
ir_maxpool=skimage.measure.block_reduce(ir_moy, (15,15), amax)

fig=figure(figsize=(10,10))
imshow(ir_maxpool)
colorbar()
239/149:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.2:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


#MAX POOLING on 1312x1312 image
import skimage.measure
ir_maxpool=skimage.measure.block_reduce(ir_moy, (30,30), amax)

fig=figure(figsize=(10,10))
imshow(ir_maxpool)
colorbar()
239/150:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.2:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


#MAX POOLING on 1312x1312 image
import skimage.measure
ir_maxpool=skimage.measure.block_reduce(ir_moy, (10,10), amax)

fig=figure(figsize=(10,10))
imshow(ir_maxpool)
colorbar()
239/151:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.15:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


#MAX POOLING on 1312x1312 image
import skimage.measure
ir_maxpool=skimage.measure.block_reduce(ir_moy, (10,10), amax)

fig=figure(figsize=(10,10))
imshow(ir_maxpool)
colorbar()
239/152:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.1:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


#MAX POOLING on 1312x1312 image
import skimage.measure
ir_maxpool=skimage.measure.block_reduce(ir_moy, (10,10), amax)

fig=figure(figsize=(10,10))
imshow(ir_maxpool)
colorbar()
239/153:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.05:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


#MAX POOLING on 1312x1312 image
import skimage.measure
ir_maxpool=skimage.measure.block_reduce(ir_moy, (10,10), amax)

fig=figure(figsize=(10,10))
imshow(ir_maxpool)
colorbar()
239/154:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.05:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


#MAX POOLING on 1312x1312 image
#import skimage.measure
#ir_maxpool=skimage.measure.block_reduce(ir_moy, (10,10), amax)
#
#fig=figure(figsize=(10,10))
#imshow(ir_maxpool)
#colorbar()
239/155:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.05:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)

imshow(ir_moy)


#MAX POOLING on 1312x1312 image
#import skimage.measure
#ir_maxpool=skimage.measure.block_reduce(ir_moy, (10,10), amax)
#
#fig=figure(figsize=(10,10))
#imshow(ir_maxpool)
#colorbar()
239/156:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.05:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


fig=figure(figsize=(10,10))
imshow(ir_moy)


#MAX POOLING on 1312x1312 image
#import skimage.measure
#ir_maxpool=skimage.measure.block_reduce(ir_moy, (10,10), amax)
#
#fig=figure(figsize=(10,10))
#imshow(ir_maxpool)
#colorbar()
239/157:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.01:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


fig=figure(figsize=(10,10))
imshow(ir_moy)


#MAX POOLING on 1312x1312 image
#import skimage.measure
#ir_maxpool=skimage.measure.block_reduce(ir_moy, (10,10), amax)
#
#fig=figure(figsize=(10,10))
#imshow(ir_maxpool)
#colorbar()
239/158:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.03:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


fig=figure(figsize=(10,10))
imshow(ir_moy)


#MAX POOLING on 1312x1312 image
#import skimage.measure
#ir_maxpool=skimage.measure.block_reduce(ir_moy, (10,10), amax)
#
#fig=figure(figsize=(10,10))
#imshow(ir_maxpool)
#colorbar()
239/159: %matplotlib inline
239/160:
from scipy import *
from matplotlib.pyplot import *
from pylab import *
from mpl_toolkits.mplot3d import Axes3D
239/161:
#import picture
path='monticules.png'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.03:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


fig=figure(figsize=(10,10))
imshow(ir_moy)


#MAX POOLING on 1312x1312 image
#import skimage.measure
#ir_maxpool=skimage.measure.block_reduce(ir_moy, (10,10), amax)
#
#fig=figure(figsize=(10,10))
#imshow(ir_maxpool)
#colorbar()
239/162:
a=array([[1,2],[3,4]])
print (a)

a1=a>1.5
a*=a1
a,a1,a*a1
239/163: sqrt(1312)
239/164:
path='domtar_pics/2019-10-14-USINE_Zone_2_Mosaique.tif.aux1.jpg'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


ir_moy=mean(ir,axis=2)   #average on 3 channels
threshold=0                    #set intensity threshold


while mean(ir_moy)>0.03:
    ir_thres=ir_moy>=threshold
    ir_moy=ir_moy*ir_thres
    threshold+=0.01

print (threshold)


fig=figure(figsize=(10,10))
imshow(ir_moy)
239/165:
path='domtar_pics/2019-10-14-USINE_Zone_2_Mosaique.tif.aux1.jpg'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


# ir_moy=mean(ir,axis=2)   #average on 3 channels
# threshold=0                    #set intensity threshold


# while mean(ir_moy)>0.03:
#     ir_thres=ir_moy>=threshold
#     ir_moy=ir_moy*ir_thres
#     threshold+=0.01

# print (threshold)


fig=figure(figsize=(10,10))
imshow(ir_moy)
239/166:
path='20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


# ir_moy=mean(ir,axis=2)   #average on 3 channels
# threshold=0                    #set intensity threshold


# while mean(ir_moy)>0.03:
#     ir_thres=ir_moy>=threshold
#     ir_moy=ir_moy*ir_thres
#     threshold+=0.01

# print (threshold)


fig=figure(figsize=(10,10))
imshow(ir_moy)
239/167:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


# ir_moy=mean(ir,axis=2)   #average on 3 channels
# threshold=0                    #set intensity threshold


# while mean(ir_moy)>0.03:
#     ir_thres=ir_moy>=threshold
#     ir_moy=ir_moy*ir_thres
#     threshold+=0.01

# print (threshold)


fig=figure(figsize=(10,10))
imshow(ir_moy)
239/168:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
ir=ir[:,:,:-1]    #remove dead axis


# ir_moy=mean(ir,axis=2)   #average on 3 channels
# threshold=0                    #set intensity threshold


# while mean(ir_moy)>0.03:
#     ir_thres=ir_moy>=threshold
#     ir_moy=ir_moy*ir_thres
#     threshold+=0.01

# print (threshold)


fig=figure(figsize=(10,10))
imshow(ir)
239/169:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)

fig=figure(figsize=(10,10))
imshow(ir)
239/170:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
ir=ir[0,0]

fig=figure(figsize=(10,10))
imshow(ir)
239/171:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

#fig=figure(figsize=(10,10))
#imshow(ir)
239/172:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

#fig=figure(figsize=(10,10))
imshow(ir[:,:,0])
239/173:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

#fig=figure(figsize=(10,10))
imshow(ir[:,:,1])
239/174:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

#fig=figure(figsize=(10,10))
imshow(ir[:,:,2])
239/175:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

#fig=figure(figsize=(10,10))
imshow(ir[:,:,3])
239/176:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

fig1=figure(figsize=(10,10))
imshow(ir[:,:,0])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,1])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,2])
239/177:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

fig1=figure(figsize=(10,10))
imshow(ir[:,:,0])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,1])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,2])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,0]-ir[:,:,0])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,1]-ir[:,:,0])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,2]-ir[:,:,0])
239/178:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

fig1=figure(figsize=(10,10))
imshow(ir[:,:,0])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,1])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,2])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,0]-ir[:,:,1])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,1]-ir[:,:,1])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,2]-ir[:,:,1])
239/179:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

fig1=figure(figsize=(10,10))
imshow(ir[:,:,0])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,1])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,2])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,0]-ir[:,:,2])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,1]-ir[:,:,2])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,2]-ir[:,:,2])
239/180:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

fig1=figure(figsize=(10,10))
imshow(ir[:,:,0])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,1])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,2])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,0]-ir[:,:,2])/ir[:,:,2])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,1]-ir[:,:,2])/ir[:,:,2])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,2]-ir[:,:,2])/ir[:,:,2])
239/181:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

fig1=figure(figsize=(10,10))
imshow(ir[:,:,0])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,1])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,2])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,0]-ir[:,:,2])/ir[:,:,1])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,1]-ir[:,:,2])/ir[:,:,1])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,2]-ir[:,:,2])/ir[:,:,1])
239/182:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

fig1=figure(figsize=(10,10))
imshow(ir[:,:,0])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,1])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,2])

fig1=figure(figsize=(10,10))
imshow((ir[:,:,0]-ir[:,:,2])/ir[:,:,1])

fig1=figure(figsize=(10,10))
imshow((ir[:,:,1]-ir[:,:,2])/ir[:,:,1])

fig1=figure(figsize=(10,10))
imshow((ir[:,:,2]-ir[:,:,2])/ir[:,:,1])
239/183:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

fig1=figure(figsize=(10,10))
imshow(ir[:,:,0])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,1])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,2])

fig1=figure(figsize=(10,10))
imshow((ir[:,:,0]-ir[:,:,2])/ir[:,:,2])

fig1=figure(figsize=(10,10))
imshow((ir[:,:,1]-ir[:,:,2])/ir[:,:,2])

fig1=figure(figsize=(10,10))
imshow((ir[:,:,2]-ir[:,:,2])/ir[:,:,2])
239/184:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

fig1=figure(figsize=(10,10))
imshow(ir[:,:,0])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,1])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,2])

fig1=figure(figsize=(10,10))
imshow((ir[:,:,0]-ir[:,:,1])/ir[:,:,2])

fig1=figure(figsize=(10,10))
imshow((ir[:,:,1]-ir[:,:,1])/ir[:,:,2])

fig1=figure(figsize=(10,10))
imshow((ir[:,:,2]-ir[:,:,1])/ir[:,:,2])
239/185:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

fig1=figure(figsize=(10,10))
imshow(ir[:,:,0])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,1])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,2])

fig1=figure(figsize=(10,10))
imshow((ir[:,:,0]-ir[:,:,0])/ir[:,:,2])

fig1=figure(figsize=(10,10))
imshow((ir[:,:,1]-ir[:,:,0])/ir[:,:,2])

fig1=figure(figsize=(10,10))
imshow((ir[:,:,2]-ir[:,:,0])/ir[:,:,2])
239/186:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

fig1=figure(figsize=(10,10))
imshow(ir[:,:,0])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,1])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,2])

fig1=figure(figsize=(10,10))
imshow((ir[:,:,0])/ir[:,:,2])

fig1=figure(figsize=(10,10))
imshow((ir[:,:,1])/ir[:,:,2])

fig1=figure(figsize=(10,10))
imshow((ir[:,:,2])/ir[:,:,2])
239/187:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

fig1=figure(figsize=(10,10))
imshow(ir[:,:,0])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,1])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,2])



#max pooling
import skimage.measure


ir_red_mp=skimage.measure.block_reduce(ir[:,:,0], (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_red_mp)

ir_green_mp=skimage.measure.block_reduce(ir[:,:,1], (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_green_mp)

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)
239/188:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

fig1=figure(figsize=(10,10))
imshow(ir[:,:,0])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,1])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,2])



#max pooling
import skimage.measure


ir_red_mp=skimage.measure.block_reduce(ir[:,:,0], (4,4), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_red_mp)

ir_green_mp=skimage.measure.block_reduce(ir[:,:,1], (4,4), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_green_mp)

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (4,4), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)
239/189:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

fig1=figure(figsize=(10,10))
imshow(ir[:,:,0])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,1])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,2])



#max pooling
import skimage.measure

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (4,4), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)
239/190:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

fig1=figure(figsize=(10,10))
imshow(ir[:,:,0])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,1])

fig1=figure(figsize=(10,10))
imshow(ir[:,:,2])



#max pooling
import skimage.measure

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (4,4), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)
239/191:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,0])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,1])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,2])



#max pooling
import skimage.measure

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (4,4), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)
239/192:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,0])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,1])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,2])



#max pooling
import skimage.measure

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (4,4), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
for i in range(10):
    ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), np.max)
    i++
#ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)
239/193:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,0])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,1])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,2])



#max pooling
import skimage.measure

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (4,4), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
for i in range(10):
    ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), np.max)
    i+=1
#ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)
239/194:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,0])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,1])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,2])



#max pooling
import skimage.measure

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (4,4), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
for i in range(5):
    ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), np.max)
    i+=1
#ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)
239/195:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,0])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,1])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,2])



#max pooling
import skimage.measure

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (4,4), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
for i in range(5):
    ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), np.avg)
    i+=1
#ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)
239/196:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,0])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,1])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,2])



#max pooling
import skimage.measure

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (4,4), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
for i in range(3):
    ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), np.avg)
    i+=1
#ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)
239/197:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,0])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,1])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,2])



#max pooling
import skimage.measure

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (4,4), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
for i in range(3):
    ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), np.average)
    i+=1
#ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)
239/198:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,0])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,1])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,2])



#max pooling
import skimage.measure

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (4,4), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
for i in range(3):
    ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), average)
    i+=1
#ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

fig1=figure(figsize=(10,10))
imshow(rot45(ir_blue_mp))
239/199:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,0])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,1])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,2])



#max pooling
import skimage.measure

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (4,4), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
for i in range(3):
    ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), average)
    i+=1
#ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

fig1=figure(figsize=(10,10))
imshow(ndimage.rotate(ir_blue_mp,45))
239/200:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,0])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,1])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,2])



#max pooling
import skimage.measure

# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (4,4), np.max)
# fig1=figure(figsize=(10,10))
# imshow(ir_blue_mp)

# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
# fig1=figure(figsize=(10,10))
# imshow(ir_blue_mp)

# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
# for i in range(3):
#     ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), average)
#     i+=1
# #ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), np.max)
# fig1=figure(figsize=(10,10))
# imshow(ir_blue_mp)

fig1=figure(figsize=(10,10))
imshow(ndimage.rotate(ir_blue_mp,45))
239/201:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,0])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,1])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,2])



#max pooling
import skimage.measure

# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (4,4), np.max)
# fig1=figure(figsize=(10,10))
# imshow(ir_blue_mp)

# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
# fig1=figure(figsize=(10,10))
# imshow(ir_blue_mp)

# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
# for i in range(3):
#     ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), average)
#     i+=1
# #ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), np.max)
# fig1=figure(figsize=(10,10))
# imshow(ir_blue_mp)

fig1=figure(figsize=(10,10))
imshow(scipy.ndimage.rotate(ir_blue_mp,45))
239/202:
from scipy import *
from matplotlib.pyplot import *
from pylab import *
from mpl_toolkits.mplot3d import Axes3D
239/203:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,0])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,1])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,2])



#max pooling
import skimage.measure
from scipy import ndimage
# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (4,4), np.max)
# fig1=figure(figsize=(10,10))
# imshow(ir_blue_mp)

# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
# fig1=figure(figsize=(10,10))
# imshow(ir_blue_mp)

# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
# for i in range(3):
#     ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), average)
#     i+=1
# #ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), np.max)
# fig1=figure(figsize=(10,10))
# imshow(ir_blue_mp)

fig1=figure(figsize=(10,10))
imshow(ndimage.rotate(ir_blue_mp,45))
239/204:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,0])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,1])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,2])



#max pooling
import skimage.measure
from scipy import ndimage
# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (4,4), np.max)
# fig1=figure(figsize=(10,10))
# imshow(ir_blue_mp)

# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
# fig1=figure(figsize=(10,10))
# imshow(ir_blue_mp)

# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
# for i in range(3):
#     ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), average)
#     i+=1
# #ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), np.max)
# fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

fig1=figure(figsize=(10,10))
imshow(ndimage.rotate(ir_blue_mp,45))
239/205:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,0])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,1])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,2])



#max pooling
import skimage.measure
from scipy import ndimage
# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (4,4), np.max)
# fig1=figure(figsize=(10,10))
# imshow(ir_blue_mp)

# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
# fig1=figure(figsize=(10,10))
# imshow(ir_blue_mp)

# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
# for i in range(3):
#     ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), average)
#     i+=1
# #ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

fig1=figure(figsize=(10,10))
imshow(ndimage.rotate(ir_blue_mp,45))
239/206:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,0])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,1])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,2])



#max pooling
import skimage.measure
from scipy import ndimage
# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (4,4), np.max)
# fig1=figure(figsize=(10,10))
# imshow(ir_blue_mp)

# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
# fig1=figure(figsize=(10,10))
# imshow(ir_blue_mp)

# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
# for i in range(3):
#     ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), average)
#     i+=1
# #ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

fig1=figure(figsize=(10,10))

ir_blue_mp=ndimage.rotate(ir_blue_mp,45))
ir_blue_mp=ndimage.rotate(ir_blue_mp,45))
ir_blue_mp=ndimage.rotate(ir_blue_mp,45))
ir_blue_mp=ndimage.rotate(ir_blue_mp,45))
imshow(ir_blue_mp)
239/207:
path='domtar_pics/20190906_DUDSWELL_ch_121_ZONE4_transparent_mosaic_group11.jpg'
ir=imread(path)
print(shape(ir))

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,0])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,1])

# fig1=figure(figsize=(10,10))
# imshow(ir[:,:,2])



#max pooling
import skimage.measure
from scipy import ndimage
# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (4,4), np.max)
# fig1=figure(figsize=(10,10))
# imshow(ir_blue_mp)

# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
# fig1=figure(figsize=(10,10))
# imshow(ir_blue_mp)

# ir_blue_mp=skimage.measure.block_reduce(ir[:,:,2], (2,2), np.max)
# for i in range(3):
#     ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), average)
#     i+=1
# #ir_blue_mp=skimage.measure.block_reduce(ir_blue_mp, (2,2), np.max)
fig1=figure(figsize=(10,10))
imshow(ir_blue_mp)

fig1=figure(figsize=(10,10))

ir_blue_mp=ndimage.rotate(ir_blue_mp,45)
ir_blue_mp=ndimage.rotate(ir_blue_mp,45)
ir_blue_mp=ndimage.rotate(ir_blue_mp,45)
ir_blue_mp=ndimage.rotate(ir_blue_mp,45)
imshow(ir_blue_mp)
241/1:
from numpy import *
from matplotlib.dates import datestr2num
from matplotlib.pyplot import *
from datetime import datetime
241/2:
##AOD LEVEL 1.5 (no clouds but no calib) data from aeronet for all of year 2019, all bands
#read from columns 4 to 25 (aod 1640 to 340nm)
cols=arange(4, 26)

path='aeronet/lunar_aod/20190101_20191231_Santa_Cruz_Tenerife.lev15'
header=7

#DATA
data_aod=genfromtxt(path, delimiter=',', skip_header=header, usecols=cols)

#remove negative values (-999) and set to 0
non_negs=data_aod>=0
data_aod=non_negs*data_aod


#DATES
dates_str=genfromtxt(path, delimiter=',', skip_header=header, usecols=[0,1], dtype=str)
dates_list=[datetime.strptime(dates, '%d:%m:%Y') for dates in dates_str[:,0]]
times_list=[datetime.strptime(dates, '%H:%M:%S') for dates in dates_str[:,1]]
dates_aod=array([dates_list,times_list])



#BANDS
bands_aod=genfromtxt(path, delimiter=',', skip_header=header-1, skip_footer=len(data_aod), usecols=cols, dtype=str)

#find which bands have no data (take mean of bands and find indices diff. than 0)
means=mean(data_aod, axis=0)
non_empty_aod=array(nonzero(means))

dates_aod
241/3:
#shows graphs for each band (some bands have no data)

nvalues=1000

fig,ax=subplots(dpi=200)
for i in range(len(non_empty_aod[0])):
    ax.plot(arange(nvalues),data_aod[:nvalues,non_empty_aod[0,i]],'.', markersize=2,label=bands_aod[non_empty_aod[0,i]][4:])
    ax.plot(arange(nvalues),data_aod[:nvalues,non_empty_aod[0,i]],linewidth=0.2)

vals=data_aod[:14]
    
ax.legend()
ax.set_ylabel('AOD')
ax.set_title('Date: ' + str(dates_aod[0,0].date()) +' - ' + str(dates_aod[0,-1].date()))
241/4:
###def readfile from web, copied from etalonnage_initial.ipynb and modified a lot
#load file from server test cosqm001
from urllib.request import urlopen, Request

def load_web_data(path):
    try:
        request = Request(path)
        data_server = urlopen(request)
        data_server=loadtxt(data_server, usecols=list(arange(2,17)), unpack=True)
        data_server=swapaxes(data_server,0,1)
        date_server = urlopen(request)
        dates_str=genfromtxt(date_server, delimiter=' ', usecols=[0,1],unpack=True,dtype='str')
        dates_list=[datetime.strptime(dates, '%Y-%m-%d') for dates in dates_str[0,:]]
        times_list=[datetime.strptime(dates, '%H:%M:%S') for dates in dates_str[1,:]]
        dates_cosqm=array([dates_list, times_list])
        dates_cosqm=swapaxes(dates_cosqm,0,1)
        return data_server, dates_cosqm
    except: print('data '+str(path)+' is empty')
    
    
def load_web_data_merge(path1, path2):          #modified with skip on inexistant files
    request1 = Request(path1)
    try:
        data_server11 = urlopen(request1)
        data_server1=loadtxt(data_server11, usecols=list(arange(2,17)), unpack=True)
        data_server1=swapaxes(data_server1,0,1)
        
            #data2 (DAY AFTER)
        request2 = Request(path2)
        try:
            data_server22 = urlopen(request2)
            data_server2=loadtxt(data_server22, usecols=list(arange(2,17)), unpack=True)
            data_server2=swapaxes(data_server2,0,1)
            data_server=concatenate((data_server1,data_server2))    #add both days together
        except: print ('data '+str(path2)+' is empty')
    except: print ('data '+str(path1)+' is empty')
    


    
    #DATES
    request1 = Request(path1)
    try:
        data_server11 = urlopen(request1)
        dates_str11=genfromtxt(data_server11, delimiter=' ', usecols=[0,1],unpack=True,dtype='str')
        dates_list1=[datetime.strptime(dates, '%Y-%m-%d') for dates in dates_str11[0,:]]
        times_list1=[datetime.strptime(dates, '%H:%M:%S') for dates in dates_str11[1,:]]
        dates_cosqm1=array([dates_list1, times_list1])
        dates_cosqm1=swapaxes(dates_cosqm1,0,1)
        
        request2 = Request(path2)
        try:
            data_server22 = urlopen(request2)
            dates_str22=genfromtxt(data_server22, delimiter=' ', usecols=[0,1],unpack=True,dtype='str')
            dates_list2=[datetime.strptime(dates, '%Y-%m-%d') for dates in dates_str22[0,:]]
            times_list2=[datetime.strptime(dates, '%H:%M:%S') for dates in dates_str22[1,:]]
            dates_cosqm2=array([dates_list2, times_list2])
            dates_cosqm2=swapaxes(dates_cosqm2,0,1)
            dates_cosqm=concatenate((dates_cosqm1,dates_cosqm2))    #add both days together 
        
            return data_server, dates_cosqm    #outputs cosqm merged data, and merged dates as 2 datetime objects
        except: print ('data '+str(path2)+' is empty')
    except: print ('date '+str(path1)+' is empty')
241/5:


path=r'http://vpn.izana.org:5080/data/2019/07/2019-07-01.txt'
print (path)
data=load_web_data(path)
print (data)
241/6:
print(data[1][0,0].month)
plot(-data[0][:,5:10])
241/7:
def AutoPlot_day(path1,path2,plot=True):
    try:
        data,dates=load_web_data_merge(path1, path2)
        #find interval for 1 cycle
        start=argmin(data[:int(len(data[:,5])/2),5])
        stop=argmin(data[int(len(data[:,5])/2)+50:,5])+int(len(data[:,5])/2)+50

        #print('start,stop:',start, stop)
        data_trim=data[start:stop]
        dates_trim=dates[start:stop]
        #compute mean for mag higher than 14
        meanval=arange(5.0)
        meanval[0]=ma.masked_where(data_trim[:,5] < 14, data_trim[:,5]).mean()
        meanval[1]=ma.masked_where(data_trim[:,6] < 14, data_trim[:,6]).mean()
        meanval[2]=ma.masked_where(data_trim[:,7] < 14, data_trim[:,7]).mean()
        meanval[3]=ma.masked_where(data_trim[:,8] < 14, data_trim[:,8]).mean()
        meanval[4]=ma.masked_where(data_trim[:,9] < 14, data_trim[:,9]).mean()

        if plot==True:
            fig,ax=subplots(1,1,dpi=180,figsize=(4,4))
            xs=arange(stop)
            ax.plot(xs, -data[:stop,5], 'k.', markersize=1)
            ax.plot(xs, -data[:stop,6], 'r.', markersize=1)
            ax.plot(xs, -data[:stop,7], 'g.', markersize=1)
            ax.plot(xs, -data[:stop,8], 'b.', markersize=1)
            ax.plot(xs, -data[:stop,9], 'y.', markersize=1)
            ax.plot(xs, -data[:stop,5], 'k', linewidth=0.3)
            ax.plot(xs, -data[:stop,6], 'r', linewidth=0.3)
            ax.plot(xs, -data[:stop,7], 'g', linewidth=0.3)
            ax.plot(xs, -data[:stop,8], 'b', linewidth=0.3)
            ax.plot(xs, -data[:stop,9], 'y', linewidth=0.3)        

            textstr = '\n'.join((
            r'mean:',
            r'k =' +str( meanval[0] )[:5],
            r'r =' +str( meanval[1] )[:5],
            r'g =' +str( meanval[2] )[:5],
            r'b =' +str( meanval[3] )[:5],
            r'y =' +str( meanval[4] )[:5]))
            # these are matplotlib.patch.Patch properties
            props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)
            # place a text box in upper left in axes coords
            ax.text(0.3, 0.95, textstr, transform=ax.transAxes, fontsize=10,
                    verticalalignment='top', bbox=props)

            ax.set_xlabel('$Time$')
            ax.set_ylabel('$Mag/arcsec^2$')
            ax.set_xlim(start, stop)

        return (meanval,data_trim),dates_trim
    except:print('AutoPlotDay failed')

def GetMeanMonth(month):
    days_per_month=[31,28,31,30,31,30,31,31,30,31,30,31]
    month_days=days_per_month[month-1]
    
    month_means=list()
    for i in range(month_days):
        #define paths
        day=i+1
        if day<9:
            pathstr1='0'+str(day)
            pathstr2='0'+str(day+1)
            if month<10:
                str_month='0'+str(month)
            else:
                str_month=str(month)
        elif day==9:
            pathstr1=str(0)+str(day)
            pathstr2=str(day+1)
            if month<10:
                str_month='0'+str(month)
            else:
                str_month=str(month)
        else:
            pathstr1=str(day)
            pathstr2=str(day+1)
            if month<10:
                str_month='0'+str(month)
            else:
                str_month=str(month)
        path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
        path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'
        print(path1,path2)
        means=AutoPlot_day(path1,path2,plot=False)
        month_means.append(means)
    
    return month_means
241/8:
month=6
june=GetMeanMonth(month)
241/9: print ((june[9:15][0][0][0]))
241/10: from scipy.optimize import curve_fit
241/11:
test=arange(4000,6500)
test_dates=zeros(len(test))
for i in (test):
    #print(i, dates_aod[0,i],dates_aod[1,i])
    test_dates[i-4000]=dates_aod[0,i].month*30*24*3600+dates_aod[0,i].day*24*3600+dates_aod[1,i].hour*3600+dates_aod[1,i].minute*60+dates_aod[1,i].second
    #print (dates_aod[0,i].month*30*24*3600+dates_aod[0,i].day*24*3600+dates_aod[1,i].hour*3600+dates_aod[1,i].minute*60+dates_aod[1,i].second)
    
plot (test_dates)
241/12:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[31,59,90,120,151,181,212,243,273,304,334,365]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=array[0,i].month*30*24*3600+array[0,i].day*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    print (dates_aod_seconds)
    print (dates[1,0].day, dates_aod[0,5017].day)
    print (dates[1,1].hour, dates_aod[1,5017].hour)
    print ((dates_cosqm_seconds[1]-dates_aod_seconds[1])/24/3600)

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_seconds) or math.fabs(dates_aod_seconds[index] - dates_seconds[idx-1]) < math.fabs(seconds - dates_seconds[idx])):
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    

#TESTING 
    
#july=arange(5016,6339)
july=[5016]
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
    #print('idx=',idx)
    #print('month,day=',dates_aod[0,i].month,dates_aod[0,i].day)
    #print('aod=',dates_aod_seconds[i])
    #print('cosqm=',dates_cosqm[idx])
241/13:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[31,59,90,120,151,181,212,243,273,304,334,365]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=array[0,i].month*30*24*3600+array[0,i].day*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    print (dates_aod_seconds)
    print (dates[1,0].day, dates_aod[0,5017].day)
    print (dates[1,1].hour, dates_aod[1,5017].hour)
    print ((dates_cosqm_seconds[1]-dates_aod_seconds[1])/24/3600)

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_seconds) or math.fabs(dates_aod_seconds[index] - dates_seconds[idx-1]) < math.fabs(seconds - dates_seconds[idx])):
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    

#TESTING 
    
#july=arange(5016,6339)
july=[5016]
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
    #print('idx=',idx)
    #print('month,day=',dates_aod[0,i].month,dates_aod[0,i].day)
    #print('aod=',dates_aod_seconds[i])
    #print('cosqm=',dates_cosqm[idx])
241/14:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[31,59,90,120,151,181,212,243,273,304,334,365]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=array[0,i].month*30*24*3600+array[0,i].day*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    print (dates_aod_seconds)
    print (dates[1,0].day, dates_aod[0,5017].day)
    print (dates[1,1].hour, dates_aod[1,5017].hour)
    print ((dates_cosqm_seconds[1]-dates_aod_seconds[1])/24/3600)

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_cosqm_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_seconds) or math.fabs(dates_aod_seconds[index] - dates_seconds[idx-1]) < math.fabs(seconds - dates_seconds[idx])):
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    

#TESTING 
    
#july=arange(5016,6339)
july=[5016]
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
    #print('idx=',idx)
    #print('month,day=',dates_aod[0,i].month,dates_aod[0,i].day)
    #print('aod=',dates_aod_seconds[i])
    #print('cosqm=',dates_cosqm[idx])
241/15:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[31,59,90,120,151,181,212,243,273,304,334,365]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=array[0,i].month*30*24*3600+array[0,i].day*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    print (dates_aod_seconds)
    print (dates[1,0].day, dates_aod[0,5017].day)
    print (dates[1,1].hour, dates_aod[1,5017].hour)
    print ((dates_cosqm_seconds[1]-dates_aod_seconds[1])/24/3600)

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_cosqm_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_cosqm_seconds) or math.fabs(dates_aod_seconds[index] - dates_seconds[idx-1]) < math.fabs(seconds - dates_seconds[idx])):
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    

#TESTING 
    
#july=arange(5016,6339)
july=[5016]
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
    #print('idx=',idx)
    #print('month,day=',dates_aod[0,i].month,dates_aod[0,i].day)
    #print('aod=',dates_aod_seconds[i])
    #print('cosqm=',dates_cosqm[idx])
241/16:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[31,59,90,120,151,181,212,243,273,304,334,365]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=array[0,i].month*30*24*3600+array[0,i].day*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    print (dates_aod_seconds)
    print (dates[1,0].day, dates_aod[0,5017].day)
    print (dates[1,1].hour, dates_aod[1,5017].hour)
    print ((dates_cosqm_seconds[1]-dates_aod_seconds[1])/24/3600)

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_cosqm_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_cosqm_seconds) or math.fabs(dates_aod_seconds[index] - dates_seconds[idx-1]) < math.fabs(seconds - dates_cosqm_seconds[idx])):
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    

#TESTING 
    
#july=arange(5016,6339)
july=[5016]
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
    #print('idx=',idx)
    #print('month,day=',dates_aod[0,i].month,dates_aod[0,i].day)
    #print('aod=',dates_aod_seconds[i])
    #print('cosqm=',dates_cosqm[idx])
241/17:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[31,59,90,120,151,181,212,243,273,304,334,365]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=array[0,i].month*30*24*3600+array[0,i].day*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    print (dates_aod_seconds)
    print (dates[1,0].day, dates_aod[0,5017].day)
    print (dates[1,1].hour, dates_aod[1,5017].hour)
    print ((dates_cosqm_seconds[1]-dates_aod_seconds[1])/24/3600)

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_cosqm_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_cosqm_seconds) or math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx-1]) < math.fabs(seconds - dates_cosqm_seconds[idx])):
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    

#TESTING 
    
#july=arange(5016,6339)
july=[5016]
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
    #print('idx=',idx)
    #print('month,day=',dates_aod[0,i].month,dates_aod[0,i].day)
    #print('aod=',dates_aod_seconds[i])
    #print('cosqm=',dates_cosqm[idx])
241/18:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[31,59,90,120,151,181,212,243,273,304,334,365]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=array[0,i].month*30*24*3600+array[0,i].day*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    print (dates_aod_seconds)
    print (dates[1,0].day, dates_aod[0,5017].day)
    print (dates[1,1].hour, dates_aod[1,5017].hour)
    print ((dates_cosqm_seconds[1]-dates_aod_seconds[1])/24/3600)

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_cosqm_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_cosqm_seconds) or math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx-1]) < math.fabs(dates_aod_seconds - dates_cosqm_seconds[idx])):
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    

#TESTING 
    
#july=arange(5016,6339)
july=[5016]
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
    #print('idx=',idx)
    #print('month,day=',dates_aod[0,i].month,dates_aod[0,i].day)
    #print('aod=',dates_aod_seconds[i])
    #print('cosqm=',dates_cosqm[idx])
241/19:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[31,59,90,120,151,181,212,243,273,304,334,365]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=array[0,i].month*30*24*3600+array[0,i].day*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    print (dates_aod_seconds)
    print (dates[1,0].day, dates_aod[0,5017].day)
    print (dates[1,1].hour, dates_aod[1,5017].hour)
    print ((dates_cosqm_seconds[1]-dates_aod_seconds[1])/24/3600)

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_cosqm_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_cosqm_seconds) or math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx-1]) < math.fabs(dates_cosqm_seconds - dates_cosqm_seconds[idx])):
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    

#TESTING 
    
#july=arange(5016,6339)
july=[5016]
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
    #print('idx=',idx)
    #print('month,day=',dates_aod[0,i].month,dates_aod[0,i].day)
    #print('aod=',dates_aod_seconds[i])
    #print('cosqm=',dates_cosqm[idx])
241/20:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[31,59,90,120,151,181,212,243,273,304,334,365]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=array[0,i].month*30*24*3600+array[0,i].day*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    print (dates_aod_seconds)
    print (dates[1,0].day, dates_aod[0,5017].day)
    print (dates[1,1].hour, dates_aod[1,5017].hour)
    print ((dates_cosqm_seconds[1]-dates_aod_seconds[1])/24/3600)

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_cosqm_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_cosqm_seconds) or math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx-1]) < math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx])):
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    

#TESTING 
    
#july=arange(5016,6339)
july=[5016]
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
    #print('idx=',idx)
    #print('month,day=',dates_aod[0,i].month,dates_aod[0,i].day)
    #print('aod=',dates_aod_seconds[i])
    #print('cosqm=',dates_cosqm[idx])
241/21:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[31,59,90,120,151,181,212,243,273,304,334,365]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=array[0,i].month*30*24*3600+array[0,i].day*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    print (dates_aod_seconds)
    print (dates[1,0].day, dates_aod[0,5017].day)
    print (dates[1,1].hour, dates_aod[1,5017].hour)
    print ((dates_cosqm_seconds[1]-dates_aod_seconds[1])/24/3600)

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_cosqm_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_cosqm_seconds) or math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx-1]) < math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx])):
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    

#TESTING 
    
#july=arange(5016,6339)
july=[5016]
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
    print('idx=',idx)
    #print('month,day=',dates_aod[0,i].month,dates_aod[0,i].day)
    #print('aod=',dates_aod_seconds[i])
    #print('cosqm=',dates_cosqm[idx])
241/22:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[31,59,90,120,151,181,212,243,273,304,334,365]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=array[0,i].month*30*24*3600+array[0,i].day*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    print (dates_aod_seconds)
    print (dates[1,0].day, dates_aod[0,5017].day)
    print (dates[1,1].hour, dates_aod[1,5017].hour)
    print ((dates_cosqm_seconds[1]-dates_aod_seconds[1])/24/3600)

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_cosqm_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_cosqm_seconds) or math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx-1]) < math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx])):
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    

#TESTING 
    
#july=arange(5016,6339)
july=arange(5016, 5200)
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
    print('idx=',idx)
    #print('month,day=',dates_aod[0,i].month,dates_aod[0,i].day)
    #print('aod=',dates_aod_seconds[i])
    #print('cosqm=',dates_cosqm[idx])
241/23:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[31,59,90,120,151,181,212,243,273,304,334,365]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=array[0,i].month*30*24*3600+array[0,i].day*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    #print (dates_aod_seconds)
    #print (dates[1,0].day, dates_aod[0,5017].day)
    #print (dates[1,1].hour, dates_aod[1,5017].hour)
    #print ((dates_cosqm_seconds[1]-dates_aod_seconds[1])/24/3600)

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_cosqm_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_cosqm_seconds) or math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx-1]) < math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx])):
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    

#TESTING 
    
#july=arange(5016,6339)
july=arange(5016, 5200)
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
    print('idx=',idx)
    print('month,day=',dates_aod[0,i].month,dates_aod[0,i].day)
    print('aod=',dates_aod_seconds[i])
    print('cosqm=',dates_cosqm[idx])
241/24:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[31,59,90,120,151,181,212,243,273,304,334,365]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=array[0,i].month*30*24*3600+array[0,i].day*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    #print (dates_aod_seconds)
    #print (dates[1,0].day, dates_aod[0,5017].day)
    #print (dates[1,1].hour, dates_aod[1,5017].hour)
    #print ((dates_cosqm_seconds[1]-dates_aod_seconds[1])/24/3600)

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_cosqm_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_cosqm_seconds) or math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx-1]) < math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx])):
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    

#TESTING 
    
#july=arange(5016,6339)
july=arange(5016, 5030)
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
    print('idx=',idx)
    print('month,day=',dates_aod[0,i].month,dates_aod[0,i].day)
    print('aod=',dates_aod_seconds[i])
    print('cosqm=',dates_cosqm[idx])
241/25:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[31,59,90,120,151,181,212,243,273,304,334,365]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=days_per_month[array[0,i].month-2]*24*3600+(array[0,i].day-1)*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    
    print ('AERONET')
    print (month, day)
    print (array[1,i].hour, array[1,i].minute, array[1,i].second)
    print (dates_aod_seconds)
    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_cosqm_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_cosqm_seconds) or math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx-1]) < math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx])):
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    
    print ('COSQM')
    print (dates[index,0].month, dates[index,0].day)
    print (dates[index,1].hour, dates[index,1].minute, dates[index,1].second)
    print (dates_cosqm_seconds)    
    
#TESTING 
    
#july=arange(5016,6339)
july=arange(5016, 5030)
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
241/26:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[31,59,90,120,151,181,212,243,273,304,334,365]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=days_per_month[array[0,i].month-2]*24*3600+(array[0,i].day-1)*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_cosqm_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_cosqm_seconds) or math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx-1]) < math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx])):
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    
    print ('AERONET')
    print (month, day)
    print (array[1,i].hour, array[1,i].minute, array[1,i].second)
    print (dates_aod_seconds)    
    
    print ('COSQM')
    print (dates[index,0].month, dates[index,0].day)
    print (dates[index,1].hour, dates[index,1].minute, dates[index,1].second)
    print (dates_cosqm_seconds)    
    
#TESTING 
    
#july=arange(5016,6339)
july=arange(5016, 5024)
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
241/27:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[31,59,90,120,151,181,212,243,273,304,334,365]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=days_per_month[array[0,i].month-2]*24*3600+(array[0,i].day-1)*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_cosqm_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_cosqm_seconds) or math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx-1]) < math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx])):
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    
    print ('AERONET')
    print (month, day)
    print (array[1,i].hour, array[1,i].minute, array[1,i].second)
    print (dates_aod_seconds)    
    
    print ('COSQM')
    print (dates[index,0].month, dates[index,0].day)
    print (dates[index,1].hour, dates[index,1].minute, dates[index,1].second)
    print (dates_cosqm_seconds)    
    
#TESTING 
    
#july=arange(5016,6339)
july=arange(5016, 5024)
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
241/28:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[31,59,90,120,151,181,212,243,273,304,334,365]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=days_per_month[array[0,i].month-2]*24*3600+(array[0,i].day-1)*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_cosqm_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_cosqm_seconds) or math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx-1]) < math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx])):
        
        print ('AERONET')
        print (month, day)
        print (array[1,i].hour, array[1,i].minute, array[1,i].second)
        print (dates_aod_seconds)    
        
        print ('COSQM')
        print (dates[index,0].month, dates[index,0].day)
        print (dates[index,1].hour, dates[index,1].minute, dates[index,1].second)
        print (dates_cosqm_seconds)  
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        print ('AERONET')
        print (month, day)
        print (array[1,i].hour, array[1,i].minute, array[1,i].second)
        print (dates_aod_seconds)    
        
        print ('COSQM')
        print (dates[index,0].month, dates[index,0].day)
        print (dates[index,1].hour, dates[index,1].minute, dates[index,1].second)
        print (dates_cosqm_seconds)  
        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    
  
    
#TESTING 
    
#july=arange(5016,6339)
july=arange(5016, 5024)
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
241/29:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[31,59,90,120,151,181,212,243,273,304,334,365]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=days_per_month[array[0,i].month-2]*24*3600+(array[0,i].day-1)*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_cosqm_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_cosqm_seconds) or math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx-1]) < math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx])):
        
        print ('AERONET')
        print (month, day)
        print (array[1,i].hour, array[1,i].minute, array[1,i].second)
        print (dates_aod_seconds)    
        
        print ('COSQM')
        print (dates[idx,0].month, dates[idx,0].day)
        print (dates[idx,1].hour, dates[idx,1].minute, dates[idx,1].second)
        print (dates_cosqm_seconds)  
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        print ('AERONET')
        print (month, day)
        print (array[1,i].hour, array[1,i].minute, array[1,i].second)
        print (dates_aod_seconds)    
        
        print ('COSQM')
        print (dates[index,0].month, dates[index,0].day)
        print (dates[index,1].hour, dates[index,1].minute, dates[index,1].second)
        print (dates_cosqm_seconds)  
        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    
  
    
#TESTING 
    
#july=arange(5016,6339)
july=arange(5016, 5024)
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
241/30:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[31,59,90,120,151,181,212,243,273,304,334,365]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=days_per_month[array[0,i].month-2]*24*3600+(array[0,i].day-1)*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_cosqm_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_cosqm_seconds) or math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx-1]) < math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx])):
        
        print ('AERONET')
        print (month, day)
        print (array[1,i].hour, array[1,i].minute, array[1,i].second)
        print (dates_aod_seconds)    
        
        print ('COSQM')
        print (dates[idx,0].month, dates[idx,0].day)
        print (dates[idx,1].hour, dates[idx,1].minute, dates[idx,1].second)
        print (dates_cosqm_seconds)  
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        print ('AERONET')
        print (month, day)
        print (array[1,i].hour, array[1,i].minute, array[1,i].second)
        print (dates_aod_seconds)    
        
        print ('COSQM')
        print (dates[idx,0].month, dates[idx,0].day)
        print (dates[idx,1].hour, dates[idx,1].minute, dates[idx,1].second)
        print (dates_cosqm_seconds)  
        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    
  
    
#TESTING 
    
#july=arange(5016,6339)
july=arange(5016, 5024)
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
241/31:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[31,59,90,120,151,181,212,243,273,304,334,365]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=days_per_month[array[0,i].month-2]*24*3600+(array[0,i].day-1)*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_cosqm_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_cosqm_seconds) or math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx-1]) < math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx])):
        
        print ('AERONET')
        print (month, day)
        print (array[1,i].hour, array[1,i].minute, array[1,i].second)
        print (dates_aod_seconds)    
        
        print ('COSQM')
        print (dates[idx,0].month, dates[idx,0].day)
        print (dates[idx,1].hour, dates[idx,1].minute, dates[idx,1].second)
        print (dates_cosqm_seconds)  
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        print ('AERONET')
        print (month, day)
        print (array[1,i].hour, array[1,i].minute, array[1,i].second)
        print (dates_aod_seconds[index])    
        
        print ('COSQM')
        print (dates[idx,0].month, dates[idx,0].day)
        print (dates[idx,1].hour, dates[idx,1].minute, dates[idx,1].second)
        print (dates_cosqm_seconds[idx])  
        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    
  
    
#TESTING 
    
#july=arange(5016,6339)
july=arange(5016, 5024)
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
241/32:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[31,59,90,120,151,181,212,243,273,304,334,365]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=days_per_month[array[0,i].month-2]*24*3600+(array[0,i].day-1)*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_cosqm_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_cosqm_seconds) or math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx-1]) < math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx])):
        
        print ('AERONET')
        print (month, day)
        print (array[1,i].hour, array[1,i].minute, array[1,i].second)
        print (dates_aod_seconds)    
        
        print ('COSQM')
        print (dates[idx,0].month, dates[idx,0].day)
        print (dates[idx,1].hour, dates[idx,1].minute, dates[idx,1].second)
        print (dates_cosqm_seconds)  
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        print ('AERONET')
        print (month, day)
        print (array[1,i].hour, array[1,i].minute, array[1,i].second)
        print (dates_aod_seconds[index])    
        
        print ('COSQM')
        print (dates[idx,0].month, dates[idx,0].day)
        print (dates[idx,1].hour, dates[idx,1].minute, dates[idx,1].second)
        print (dates_cosqm_seconds[idx])  
        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    
  
    
#TESTING 
    
#july=arange(5016,6339)
july=arange(5000, 5010)
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
241/33:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[31,59,90,120,151,181,212,243,273,304,334,365]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=days_per_month[array[0,i].month-2]*24*3600+(array[0,i].day-1)*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_cosqm_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_cosqm_seconds) or math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx-1]) < math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx])):
        
        print ('AERONET')
        print (month, day)
        print (array[1,i].hour, array[1,i].minute, array[1,i].second)
        print (dates_aod_seconds)    
        
        print ('COSQM')
        print (dates[idx,0].month, dates[idx,0].day)
        print (dates[idx,1].hour, dates[idx,1].minute, dates[idx,1].second)
        print (dates_cosqm_seconds)  
        print (idx)
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        print ('AERONET')
        print (month, day)
        print (array[1,i].hour, array[1,i].minute, array[1,i].second)
        print (dates_aod_seconds[index])    
        
        print ('COSQM')
        print (dates[idx,0].month, dates[idx,0].day)
        print (dates[idx,1].hour, dates[idx,1].minute, dates[idx,1].second)
        print (dates_cosqm_seconds[idx])  
        print (idx)

        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    
  
    
#TESTING 
    
#july=arange(5016,6339)
july=arange(5000, 5010)
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
241/34:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[31,59,90,120,151,181,212,243,273,304,334,365]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=days_per_month[array[0,i].month-2]*24*3600+(array[0,i].day-1)*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_cosqm_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_cosqm_seconds) or math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx-1]) < math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx])):
        
        print ('AERONET')
        print (month, day)
        print (array[1,i].hour, array[1,i].minute, array[1,i].second)
        print (dates_aod_seconds)    
        
        print ('COSQM')
        print (dates[idx,0].month, dates[idx,0].day)
        print (dates[idx,1].hour, dates[idx,1].minute, dates[idx,1].second)
        print (dates_cosqm_seconds)  
        print (idx)
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        print ('AERONET')
        print (month, day)
        print (array[1,i].hour, array[1,i].minute, array[1,i].second)
        print (dates_aod_seconds[index])    
        
        print ('COSQM')
        print (dates[idx,0].month, dates[idx,0].day)
        print (dates[idx,1].hour, dates[idx,1].minute, dates[idx,1].second)
        print (dates_cosqm_seconds[idx])  
        print (idx)
        print ('---------------------')

        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    
  
    
#TESTING 
    
#july=arange(5016,6339)
july=arange(5000, 5010)
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
241/35:
test=arange(2000,6500)
test_dates=zeros(len(test))
for i in (test):
    #print(i, dates_aod[0,i],dates_aod[1,i])
    test_dates[i-2000]=dates_aod[0,i].month*30*24*3600+dates_aod[0,i].day*24*3600+dates_aod[1,i].hour*3600+dates_aod[1,i].minute*60+dates_aod[1,i].second
    #print (dates_aod[0,i].month*30*24*3600+dates_aod[0,i].day*24*3600+dates_aod[1,i].hour*3600+dates_aod[1,i].minute*60+dates_aod[1,i].second)
    
plot (test_dates)
241/36:
print ((june[9:15][0][0][0]))
print (len(dates_aod[0]))
241/37:
print ((june[9:15][0][0][0]))
print (len(dates_aod[1]))
241/38:
print ((june[9:15][0][0][0]))
print (dates_aod[1])
241/39:
test=arange(11481)
test_dates=zeros(len(test))
for i in (test):
    #print(i, dates_aod[0,i],dates_aod[1,i])
    test_dates[i]=dates_aod[0,i].month*30*24*3600+dates_aod[0,i].day*24*3600+dates_aod[1,i].hour*3600+dates_aod[1,i].minute*60+dates_aod[1,i].second
    #print (dates_aod[0,i].month*30*24*3600+dates_aod[0,i].day*24*3600+dates_aod[1,i].hour*3600+dates_aod[1,i].minute*60+dates_aod[1,i].second)
    
plot (test_dates)
241/40:
test=arange(11481)
test_dates=zeros(len(test))
for i in (test):
    #print(i, dates_aod[0,i],dates_aod[1,i])
    test_dates[i]=days_per_month[dates_aod[0,i].month-2]*30*24*3600+dates_aod[0,i].day*24*3600+dates_aod[1,i].hour*3600+dates_aod[1,i].minute*60+dates_aod[1,i].second
    #print (dates_aod[0,i].month*30*24*3600+dates_aod[0,i].day*24*3600+dates_aod[1,i].hour*3600+dates_aod[1,i].minute*60+dates_aod[1,i].second)
    
plot (test_dates)
241/41:
test=arange(11481)
test_dates=zeros(len(test))
for i in (test):
    #print(i, dates_aod[0,i],dates_aod[1,i])
    test_dates[i]=days_per_month[dates_aod[0,i].month-1]*30*24*3600+dates_aod[0,i].day*24*3600+dates_aod[1,i].hour*3600+dates_aod[1,i].minute*60+dates_aod[1,i].second
    #print (dates_aod[0,i].month*30*24*3600+dates_aod[0,i].day*24*3600+dates_aod[1,i].hour*3600+dates_aod[1,i].minute*60+dates_aod[1,i].second)
    
plot (test_dates)
241/42:
test=arange(11481)
test_dates=zeros(len(test))
for i in (test):
    #print(i, dates_aod[0,i],dates_aod[1,i])
    test_dates[i]=days_per_month[dates_aod[0,i].month-2]*30*24*3600+dates_aod[0,i].day*24*3600+dates_aod[1,i].hour*3600+dates_aod[1,i].minute*60+dates_aod[1,i].second
    #print (dates_aod[0,i].month*30*24*3600+dates_aod[0,i].day*24*3600+dates_aod[1,i].hour*3600+dates_aod[1,i].minute*60+dates_aod[1,i].second)
    
plot (test_dates)
241/43:
test=arange(11481)
test_dates=zeros(len(test))
for i in (test):
    #print(i, dates_aod[0,i],dates_aod[1,i])
    test_dates[i]=days_per_month[dates_aod[0,i].month-2]*30*24*3600+(dates_aod[0,i].day-1)*24*3600+dates_aod[1,i].hour*3600+dates_aod[1,i].minute*60+dates_aod[1,i].second
    #print (dates_aod[0,i].month*30*24*3600+dates_aod[0,i].day*24*3600+dates_aod[1,i].hour*3600+dates_aod[1,i].minute*60+dates_aod[1,i].second)
    
plot (test_dates)
241/44:
test=arange(11481)
test_dates=zeros(len(test))
for i in (test):
    #print(i, dates_aod[0,i],dates_aod[1,i])
    test_dates[i]=days_per_month[dates_aod[0,i].month-2]*30*24*3600+(dates_aod[0,i].day-1)*24*3600+dates_aod[1,i].hour*3600+dates_aod[1,i].minute*60+dates_aod[1,i].second
    #print (dates_aod[0,i].month*30*24*3600+dates_aod[0,i].day*24*3600+dates_aod[1,i].hour*3600+dates_aod[1,i].minute*60+dates_aod[1,i].second)
    
plot (test_dates)
241/45:
test=arange(11481)
test_dates=zeros(len(test))
for i in (test):
    #print(i, dates_aod[0,i],dates_aod[1,i])
    test_dates[i]=days_per_month[dates_aod[0,i].month-2]*30*24*3600+(dates_aod[0,i].day-1)*24*3600+dates_aod[1,i].hour*3600+dates_aod[1,i].minute*60+dates_aod[1,i].second
    #print (dates_aod[0,i].month*30*24*3600+dates_aod[0,i].day*24*3600+dates_aod[1,i].hour*3600+dates_aod[1,i].minute*60+dates_aod[1,i].second)
    print (test_dates[i])
plot (test_dates)
241/46: days_per_month[array[0,5000].month-2]*24*3600
241/47: days_per_month[dates_aod[0,5000].month-2]*24*3600
241/48: days_per_month[dates_aod[0,5000].month-2]*24
241/49: days_per_month[dates_aod[0,5000].month-2]
241/50: dates_aod[0,5000].month-2
241/51: dates_aod[0,5000].month
241/52: dates_aod[0,5016].month
241/53: dates_aod[0,5015].month
241/54: dates_aod[0,5016].month
241/55: dates_aod[0,0].month-1
241/56: dates_aod[0,0].mont
241/57: dates_aod[0,0].month
241/58: dates_aod[0,0].month-2
241/59: dates_aod[0,0].month-1
241/60: dates_aod[0,0].month-1*24
241/61:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[31,59,90,120,151,181,212,243,273,304,334,365]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=days_per_month[array[0,i].month-2]*24*3600+(array[0,i].day-1)*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day (night)
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_cosqm_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_cosqm_seconds) or math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx-1]) < math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx])):
        
        print ('AERONET')
        print (month, day)
        print (array[1,i].hour, array[1,i].minute, array[1,i].second)
        print (dates_aod_seconds)    
        
        print ('COSQM')
        print (dates[idx,0].month, dates[idx,0].day)
        print (dates[idx,1].hour, dates[idx,1].minute, dates[idx,1].second)
        print (dates_cosqm_seconds)  
        print (idx)
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        print ('AERONET')
        print (month, day)
        print (array[1,i].hour, array[1,i].minute, array[1,i].second)
        print (dates_aod_seconds[index])    
        
        print ('COSQM')
        print (dates[idx,0].month, dates[idx,0].day)
        print (dates[idx,1].hour, dates[idx,1].minute, dates[idx,1].second)
        print (dates_cosqm_seconds[idx])  
        print (idx)
        print ('---------------------')

        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    
  
    
#TESTING 
    
#july=arange(5016,6339)
(july=arange(5000, 5010)
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
241/62: (dates_aod[0,0].month-1)*24
241/63: (dates_aod[0,1].month-1)*24
241/64:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=days_per_month[array[0,i].month-1]*24*3600+(array[0,i].day-1)*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day (night)
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_cosqm_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_cosqm_seconds) or math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx-1]) < math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx])):
        
        print ('AERONET')
        print (month, day)
        print (array[1,i].hour, array[1,i].minute, array[1,i].second)
        print (dates_aod_seconds)    
        
        print ('COSQM')
        print (dates[idx,0].month, dates[idx,0].day)
        print (dates[idx,1].hour, dates[idx,1].minute, dates[idx,1].second)
        print (dates_cosqm_seconds)  
        print (idx)
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        print ('AERONET')
        print (month, day)
        print (array[1,i].hour, array[1,i].minute, array[1,i].second)
        print (dates_aod_seconds[index])    
        
        print ('COSQM')
        print (dates[idx,0].month, dates[idx,0].day)
        print (dates[idx,1].hour, dates[idx,1].minute, dates[idx,1].second)
        print (dates_cosqm_seconds[idx])  
        print (idx)
        print ('---------------------')

        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    
  
    
#TESTING 
    
#july=arange(5016,6339)
(july=arange(5000, 5010)
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
241/65:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=days_per_month[array[0,i].month-1]*24*3600+(array[0,i].day-1)*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day (night)
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_cosqm_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_cosqm_seconds) or math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx-1]) < math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx])):
        
        print ('AERONET')
        print (month, day)
        print (array[1,i].hour, array[1,i].minute, array[1,i].second)
        print (dates_aod_seconds)    
        
        print ('COSQM')
        print (dates[idx,0].month, dates[idx,0].day)
        print (dates[idx,1].hour, dates[idx,1].minute, dates[idx,1].second)
        print (dates_cosqm_seconds)  
        print (idx)
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        print ('AERONET')
        print (month, day)
        print (array[1,i].hour, array[1,i].minute, array[1,i].second)
        print (dates_aod_seconds[index])    
        
        print ('COSQM')
        print (dates[idx,0].month, dates[idx,0].day)
        print (dates[idx,1].hour, dates[idx,1].minute, dates[idx,1].second)
        print (dates_cosqm_seconds[idx])  
        print (idx)
        print ('---------------------')

        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    
  
    
#TESTING 
    
#july=arange(5016,6339)
july=arange(5000, 5001)
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
241/66:
#AOD dates, sorted by month, day and value is total seconds in that day

days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
    
#Define path from month and day of measurement on AOD

def find_closest(array,index):
    
    #define paths
    month=array[0,index].month
    day=array[0,index].day
    if day<9:
        pathstr1='0'+str(day)
        pathstr2='0'+str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr1=str(0)+str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr1=str(day)
        pathstr2=str(day+1)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    path1=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr1+'.txt'
    path2=r'http://vpn.izana.org:5080/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr2+'.txt'

    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array[1]))
    for i in range(len(array[1])):
        dates_aod_seconds[i]=days_per_month[array[0,i].month-1]*24*3600+(array[0,i].day-1)*24*3600+array[1,i].hour*3600+array[1,i].minute*60+array[1,i].second

    
    #Download data from this day (night)
    data,dates=AutoPlot_day(path1,path2,plot=False)
    lenght=len(dates[:,0])-1
    dates_cosqm_seconds=zeros(lenght)
    for i in range(lenght):
        dates_cosqm_seconds[i]=dates[i,0].month*30*24*3600+dates[i,0].day*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

    

    #find nearest time value for cosqm corresponding to aod measurement
    idx = searchsorted(dates_cosqm_seconds, dates_aod_seconds[index], side="left")
    if idx > 0 and (idx == len(dates_cosqm_seconds) or math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx-1]) < math.fabs(dates_aod_seconds[index] - dates_cosqm_seconds[idx])):
        
        print ('AERONET')
        print (month, day)
        print (array[1,i].hour, array[1,i].minute, array[1,i].second)
        print (dates_aod_seconds)    
        
        print ('COSQM')
        print (dates[idx,0].month, dates[idx,0].day)
        print (dates[idx,1].hour, dates[idx,1].minute, dates[idx,1].second)
        print (dates_cosqm_seconds)  
        print (idx)
        return idx-1,dates_cosqm_seconds,dates_aod_seconds,data
    else:
        print ('AERONET')
        print (month, day)
        print (array[1,i].hour, array[1,i].minute, array[1,i].second)
        print (dates_aod_seconds[index])    
        
        print ('COSQM')
        print (dates[idx,0].month, dates[idx,0].day)
        print (dates[idx,1].hour, dates[idx,1].minute, dates[idx,1].second)
        print (dates_cosqm_seconds[idx])  
        print (idx)
        print ('---------------------')

        return idx,dates_cosqm_seconds,dates_aod_seconds,data
    
  
    
#TESTING 
    
#july=arange(5016,6339)
july=arange(5000, 5003)
for i in july:
    idx,dates_cosqm,dates_aod_seconds,data_cosqm=find_closest(dates_aod,i)
242/1: print ('test)
242/2: print ('test')
242/3: import matplotlib.pyplot as pl
242/4: plot()
242/5: pl.plot([1,2,3],[4,5,6])
245/1:
from numpy import *
from matplotlib.dates import datestr2num
from matplotlib.pyplot import *
from datetime import datetime
245/2:
##AOD LEVEL 1.5 (no clouds but no calib) data from aeronet for all of year 2019, all bands
#read from columns 4 to 25 (aod 1640 to 340nm)
cols=arange(4, 26)

path='cosqm_santa_cruz/20190101_20191231_Santa_Cruz_Tenerife.lev15'
header=7

#DATA
data_aod=genfromtxt(path, delimiter=',', skip_header=header, usecols=cols)

#remove negative values (-999) and set to 0
non_negs=data_aod>=0
data_aod=non_negs*data_aod

#DATES
dates_str=genfromtxt(path, delimiter=',', skip_header=header, usecols=[0,1], dtype=str)
dates_list=[datetime.strptime(dates, '%d:%m:%Y') for dates in dates_str[:,0]]
times_list=[datetime.strptime(dates, '%H:%M:%S') for dates in dates_str[:,1]]
dates_aod=array([dates_list,times_list])

#BANDS
bands_aod=genfromtxt(path, delimiter=',', skip_header=header-1, skip_footer=len(data_aod), usecols=cols, dtype=str)

#find which bands have no data (take mean of bands and find indices diff. than 0)
means=mean(data_aod, axis=0)
non_empty_aod=array(nonzero(means))
245/3:
#COSQM Data load function, returns data and dates in tuple

def LoadData(path):
    data_server=loadtxt(path, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    dates_str=genfromtxt(path, delimiter=' ', usecols=[0,1],unpack=True,dtype='str')
    dates_list=[datetime.strptime(dates, '%Y-%m-%d') for dates in dates_str[0,:]]
    times_list=[datetime.strptime(dates, '%H:%M:%S') for dates in dates_str[1,:]]
    dates_cosqm=array([dates_list, times_list])
    dates_cosqm=swapaxes(dates_cosqm,0,1)
    return data_server, dates_cosqm
245/4:
testcosqm=LoadData('cosqm_santa_cruz/vpn.izana.org/data/2019/08/2019-08-15.txt')
plot(testcosqm[0][:,5:9])
print ('varc:',var(testcosqm[0][testcosqm[0][:,5]>16,5]))
print ('varr:',var(testcosqm[0][testcosqm[0][:,6]>16,6]))
print ('varg:',var(testcosqm[0][testcosqm[0][:,7]>16,7]))
print ('varb:',var(testcosqm[0][testcosqm[0][:,8]>16,8]))
print ('vary:',var(testcosqm[0][testcosqm[0][:,9]>16,9]))

figure()
testcosqm=LoadData('cosqm_santa_cruz/vpn.izana.org/data/2019/08/2019-08-16.txt')
plot(testcosqm[0][:,5:9])
print ('varc:',var(testcosqm[0][testcosqm[0][:,5]>16,5]))
print ('varr:',var(testcosqm[0][testcosqm[0][:,6]>16,6]))
print ('varg:',var(testcosqm[0][testcosqm[0][:,7]>16,7]))
print ('varb:',var(testcosqm[0][testcosqm[0][:,8]>16,8]))
print ('vary:',var(testcosqm[0][testcosqm[0][:,9]>16,9]))

figure()
testcosqm=LoadData('cosqm_santa_cruz/vpn.izana.org/data/2019/08/2019-08-17.txt')
plot(testcosqm[0][:,5:9])
print ('varc:',var(testcosqm[0][testcosqm[0][:,5]>16,5]))
print ('varr:',var(testcosqm[0][testcosqm[0][:,6]>16,6]))
print ('varg:',var(testcosqm[0][testcosqm[0][:,7]>16,7]))
print ('varb:',var(testcosqm[0][testcosqm[0][:,8]>16,8]))
print ('vary:',var(testcosqm[0][testcosqm[0][:,9]>16,9]))
245/5:
###FIND CLOSEST TIME VALUES FROM AOD TO COSQM

#increments for months for computing seconds
days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
#Define path from month and day of measurement on AOD
def FindClosest(array1,index):
    
    #define paths
    month=array1[0,index].month
    day=array1[0,index].day
    hour=array1[1,index].hour
        
    #make path string
    if day<9:
        pathstr='0'+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr=str(0)+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr=str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
            
    path=r'cosqm_izana/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr+'.txt'
    print (path)
    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array1[1]))
    for i in range(len(array1[1])):
        dates_aod_seconds[i]=days_per_month[array1[0,i].month-1]*24*3600+(array1[0,i].day-1)*24*3600+array1[1,i].hour*3600+array1[1,i].minute*60+array1[1,i].second
    
    #Download data from this day (night)
    try:
        data,dates=LoadData(path)
        lenght=len(dates[:,0])-1
        dates_cosqm_seconds=zeros(lenght)
        for i in range(lenght):
            dates_cosqm_seconds[i]=days_per_month[dates[i,0].month-1]*24*3600+(array(dates[i,0].day)-1)*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

        #find nearest time value for cosqm corresponding to aod measurement
        idx = abs(dates_cosqm_seconds-dates_aod_seconds[index]).argmin()    
        delta_t=dates_cosqm_seconds[idx]-dates_aod_seconds[index]
        i=index
        print ('delta t= ',delta_t)
        print ('----------------')
    
    except:
        delta_t=1001
        
    if -1000<delta_t<1000:
        cosqm_value1=data[idx]
    else: 
        cosqm_value1=array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

    return cosqm_value1, delta_t
245/6:
indexes=arange(10800,11481)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
245/7:
thresh=17
plot(argwhere(cosqm_value[:,5]>thresh),cosqm_value[(cosqm_value[:,5]>thresh),5],'.')
245/8:
for band in non_empty_aod[0]:
    figure()
    for i in range(5):
        print (band)
#         print(data_aod[5000:5000+len(cosqm_value(:,5)),band])
        plot(data_aod[5000:5000+len(cosqm_value[:][5]),band],-cosqm_value[:][5+i],'.')
245/9:
for band in non_empty_aod[0]:
    figure()
    for i in range(5):
        print (band)
#         print(data_aod[5000:5000+len(cosqm_value(:,5)),band])
        plot(data_aod[5000:5000+len(cosqm_value[:][5]),band],-cosqm_value[:][5+i]>-500,'.')
245/10:
for band in non_empty_aod[0]:
    figure()
    for i in range(5):
        print (band)
#         print(data_aod[5000:5000+len(cosqm_value(:,5)),band])
        plot(data_aod[5000:5000+len(cosqm_value[:][5]),band],-cosqm_value[:][5+i]>-0.1,'.')
245/11:
for band in non_empty_aod[0]:
    figure()
    for i in range(5):
        print (band)
#         print(data_aod[5000:5000+len(cosqm_value(:,5)),band])
        plot(data_aod[5000:5000+len(cosqm_value[:][5]),band],-cosqm_value[:][5+i],'.')
245/12:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData(/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-23.txt)

print(shape(test))
245/13:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData(/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-23.txt)
print(shape(test))
245/14:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-23.txt')
print(shape(test))
245/15:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-23.txt')
print(test)
245/16:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-23.txt')
print(test[0])
245/17:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-23.txt')
plot(test[0])
245/18:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-23.txt')
plot(test[0,0])
245/19:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-23.txt')
plot(test[0][0])
245/20:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-23.txt')
plot(test[0][1])
245/21:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-23.txt')
plot(test[0][2])
245/22:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-23.txt')
plot(test[0][3])
245/23:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-23.txt')
plot(test[0][:,1])
245/24:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-23.txt')
plot(test[0][:,2])
245/25:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-23.txt')
plot(-test[0][:,2])
245/26:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-24.txt')
plot(-test[0][:,2])
245/27:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-25.txt')
plot(-test[0][:,2])
245/28:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-25.txt')
plot(-test[0][:,3])
245/29:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-25.txt')
plot(-test[0][:,4])
245/30:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-25.txt')
plot(-test[0][:,5])
245/31:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-25.txt')
plot(-test[0][:,6])
245/32:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-25.txt')
plot(-test[0][:,7])
245/33:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-25.txt')
plot(-test[0][:,8])
245/34:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-25.txt')
print(test[1])
plot(-test[0][:,8])
245/35:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-25.txt')
print(test[1][:,8])
plot(-test[0][:,8])
245/36:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-25.txt')
print(test[1][0])
plot(-test[0][:,8])
245/37:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-25.txt')
print(test[1][:-1])
plot(-test[0][:,8])
245/38:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-25.txt')
print(test[1][-1])
plot(-test[0][:,8])
245/39:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-25.txt')
print(test[1][0])
print(test[1][-1])
plot(-test[0][:,8])
245/40:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-26.txt')
print(test[1][0])
print(test[1][-1])
plot(-test[0][:,8])
245/41:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-26.txt')
print(test[1][0])
print(test[1][-1])
plot(-test[0][:,8],'.')
245/42:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-26.txt')
print(test[1][0])
print(test[1][-1])
plot(-test[0][:,8],'.-')
245/43:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-26.txt')
print(test[1][0])
print(test[1][-1])
plot(-test[0][:,8],'-.')
245/44:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-26.txt')
print(test[1][0])
print(test[1][-1])
plot(-test[0][:,8],'.-')
245/45:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-27.txt')
print(test[1][0])
print(test[1][-1])
plot(-test[0][:,8],'.-')
245/46:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-26.txt')
print(test[1][0])
print(test[1][-1])
plot(-test[0][:,8],'.-')
245/47:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-28.txt')
print(test[1][0])
print(test[1][-1])
plot(-test[0][:,8],'.-')
245/48:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-29.txt')
print(test[1][0])
print(test[1][-1])
plot(-test[0][:,8],'.-')
245/49:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-29.txt')
print(test[1][0])
print(test[1][-1])
plot(-test[0][:,8],'.-')
245/50:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-29.txt')
print(test[1][0])
print(test[1][-1])
plot(-test[0][:,8],'.-')
245/51:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-01.txt')
print(test[1][0])
print(test[1][-1])
plot(-test[0][:,8],'.-')
245/52:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-05.txt')
print(test[1][0])
print(test[1][-1])
plot(-test[0][:,8],'.-')
245/53:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-10.txt')
print(test[1][0])
print(test[1][-1])
plot(-test[0][:,8],'.-')
245/54:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')
print(test[1][0])
print(test[1][-1])
plot(-test[0][:,8],'.-')
245/55:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-13.txt')
print(test[1][0])
print(test[1][-1])
plot(-test[0][:,8],'.-')
245/56:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-12.txt')
print(test[1][0])
print(test[1][-1])
plot(-test[0][:,8],'.-')
245/57:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')
print(test[1][0])
print(test[1][-1])
plot(-test[0][:,8],'.-')
245/58:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(data, threshold):
    if var(data)>threshold:
        data=0
        
        
#Example

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-10.txt')
print(test[1][0])
print(test[1][-1])
plot(-test[0][:,8],'.-')
247/1: import this
247/2: this
247/3: this??
249/1: ls
249/2: import antigravity
245/59:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2),idx+int(idx_range/2)])>threshold:
        return cosqm_array[idx]=0
        

        
#Example

print (test[0][20,8])

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-10.txt')
print(test[1][0])
print(test[1][-1])
plot(-test[0][:,8],'.-')
245/60:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2),idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
        

        
#Example

print (test[0][20,8])

test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-10.txt')
print(test[1][0])
print(test[1][-1])
plot(-test[0][:,8],'.-')
245/61:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2),idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-10.txt')
plot(-test[0][:,8],'.-')

print (test[0][20,8])

plot(-test[0][:,8],'.-')
245/62:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2),idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-10.txt')
plot(-test[0][:,8],'.-')

print (test[0][20,8])

figure()
plot(-test[0][:,8],'.-')
245/63:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2),idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-10.txt')
plot(-test[0][:,8],'.-')

print (test[0][20,8])

figure()
plot(test[0][:,8],'.-')
245/64:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2),idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-10.txt')
plot(-test[0][:,8],'.-')

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],1,20,4)

figure()
plot(-test[0][:,8],'.-')
245/65:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2),idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-10.txt')
plot(-test[0][:,8],'.-')

print(shape(test[0][:,8]))

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],1,20,4)

figure()
plot(-test[0][:,8],'.-')
245/66:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2),idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-10.txt')
plot(-test[0][:,8],'.-')

print(shape(test[0][:,8][0]))

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],1,20,4)

figure()
plot(-test[0][:,8],'.-')
245/67:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2),idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-10.txt')
plot(-test[0][:,8],'.-')

print(shape(test[0][:,8][1]))

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],1,20,4)

figure()
plot(-test[0][:,8],'.-')
245/68:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2),idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-10.txt')
plot(-test[0][:,8],'.-')

print(test[0][:,8][1])

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],1,20,4)

figure()
plot(-test[0][:,8],'.-')
245/69:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2),idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-10.txt')
plot(-test[0][:,8],'.-')

print(test[0][:,8][0])

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],1,20,4)

figure()
plot(-test[0][:,8],'.-')
245/70:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2),idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-10.txt')
plot(-test[0][:,8],'.-')

print(test[0][:,8][1])

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],1,20,4)

figure()
plot(-test[0][:,8],'.-')
245/71:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2),idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-10.txt')
plot(-test[0][:,8],'.-')

print(test[0][:,8][2])

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],1,20,4)

figure()
plot(-test[0][:,8],'.-')
245/72:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2),idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-10.txt')
plot(-test[0][:,8],'.-')

print(test[0][:,8][3])

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],1,20,4)

figure()
plot(-test[0][:,8],'.-')
245/73:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2),idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-10.txt')
plot(-test[0][:,8],'.-')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],1,20,4)

figure()
plot(-test[0][:,8],'.-')
245/74:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-10.txt')
plot(-test[0][:,8],'.-')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],1,20,4)

figure()
plot(-test[0][:,8],'.-')
245/75:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-10.txt')
plot(-test[0][:,8],'.-')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],15,20,4)

figure()
plot(-test[0][:,8],'.-')
245/76:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-10.txt')
plot(-test[0][:,8],'.-')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],150,20,4)

figure()
plot(-test[0][:,8],'.-')
245/77:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-10.txt')
plot(-test[0][:,8],'.-')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],0.1,20,4)

figure()
plot(-test[0][:,8],'.-')
245/78:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-10.txt')
plot(-test[0][:,8],'.-')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],0.1,20,4)

figure()
plot(-test[0][:,8],'.-')
245/79:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-10.txt')
plot(-test[0][:,8],'.-')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],0.1,20,4)

figure()
plot(-test[0][:,8],'.-')
245/80:
#COSQM Data cloud correction

##Removes complete day of measurements if clouds present, detected by variance higher than threshold

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-10.txt')
plot(-test[0][:,8],'.-')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],0.5,20,4)

figure()
plot(-test[0][:,8],'.-')
245/81:
#COSQM Data cloud correction

##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')
plot(-test[0][:,8],'.-')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],0.5,20,4)

figure()
plot(-test[0][:,8],'.-')
245/82:
#COSQM Data cloud correction

##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')
plot(-test[0][:,8],'.-')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],1,20,4)

figure()
plot(-test[0][:,8],'.-')
245/83:
#COSQM Data cloud correction

##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')
plot(-test[0][:,8],'.-')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],0.5,20,4)

figure()
plot(-test[0][:,8],'.-')
245/84:
#COSQM Data cloud correction

##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')
plot(-test[0][:,8],'.-')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],0.5,25,4)

figure()
plot(-test[0][:,8],'.-')
245/85:
#COSQM Data cloud correction

##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')
plot(-test[0][:,8],'.-')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],0.2,25,4)

figure()
plot(-test[0][:,8],'.-')
245/86:
#COSQM Data cloud correction

##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')
plot(-test[0][:,8],'.-')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],0.1,25,4)

figure()
plot(-test[0][:,8],'.-')
245/87:
#COSQM Data cloud correction

##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')
plot(-test[0][:,8],'.-')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],0.05,25,4)

figure()
plot(-test[0][:,8],'.-')
245/88:
#COSQM Data cloud correction

##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')
plot(-test[0][:,8],'.-')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],0.01,25,4)

figure()
plot(-test[0][:,8],'.-')
245/89:
#COSQM Data cloud correction

##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')
plot(-test[0][:,8],'.-')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][20,8]=CloudCorr(test[0][:,8],0.001,25,4)

figure()
plot(-test[0][:,8],'.-')
245/90:
#COSQM Data cloud correction

##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')
plot(-test[0][:,8],'.-')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][25,8]=CloudCorr(test[0][:,8],0.1,25,4)

figure()
plot(-test[0][:,8],'.-')
245/91:
#COSQM Data cloud correction

##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')
plot(-test[0][:,8],'.-')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][25,8]=CloudCorr(test[0][:,8],0.05,25,4)

figure()
plot(-test[0][:,8],'.-')
245/92:
#COSQM Data cloud correction

##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][25,8]=CloudCorr(test[0][:,8],0.05,25,4)

figure()
plot(-test[0][:,8],'.-')
245/93:
#COSQM Data cloud correction

##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-12.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][25,8]=CloudCorr(test[0][:,8],0.05,25,4)

figure()
plot(-test[0][:,8],'.-')
245/94:
#COSQM Data cloud correction

##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-13.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][25,8]=CloudCorr(test[0][:,8],0.05,25,4)

figure()
plot(-test[0][:,8],'.-')
245/95:
#COSQM Data cloud correction

##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    if var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-14.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][25,8]=CloudCorr(test[0][:,8],0.05,25,4)

figure()
plot(-test[0][:,8],'.-')
245/96:
#COSQM Data cloud correction

##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    var_val=var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])
    print (var_val)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-14.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][25,8]=CloudCorr(test[0][:,8],0.05,25,4)

figure()
plot(-test[0][:,8],'.-')
245/97:
#COSQM Data cloud correction

##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    var_val=var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])
    print (var_val)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-14.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][25,8]=CloudCorr(test[0][:,8],0.1,25,4)

figure()
plot(-test[0][:,8],'.-')
245/98:
#COSQM Data cloud correction

##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    var_val=var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])
    print (var_val)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][25,8]=CloudCorr(test[0][:,8],0.1,25,4)

figure()
plot(-test[0][:,8],'.-')
245/99:
#COSQM Data cloud correction

##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    var_val=var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])
    print (var_val)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][25,8]=CloudCorr(test[0][:,8],0.1,25,10)

figure()
plot(-test[0][:,8],'.-')
245/100:
#COSQM Data cloud correction

##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    var_val=var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])
    print (var_val)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][25,8]=CloudCorr(test[0][:,8],0.1,25,20)

figure()
plot(-test[0][:,8],'.-')
245/101:
#COSQM Data cloud correction

##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    var_val=var(cosqm_array[idx-int(idx_range/2):idx+int(idx_range/2)])
    print (var_val)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][5,8]=CloudCorr(test[0][:,8],0.1,5,20)

figure()
plot(-test[0][:,8],'.-')
245/102:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values



def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    #calculate variance of adjacent values
    
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][5,8]=CloudCorr(test[0][:,8],0.1,5,20)

figure()
plot(-test[0][:,8],'.-')
245/103:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values



def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    #calculate variance of adjacent values
    
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][1,8]=CloudCorr(test[0][:,8],0.1,1,20)

figure()
plot(-test[0][:,8],'.-')
245/104:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values



def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    #calculate variance of adjacent values
    
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][1,8]=CloudCorr(test[0][:,8],0.3,1,20)

figure()
plot(-test[0][:,8],'.-')
245/105:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values



def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    #calculate variance of adjacent values
    
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][1,8]=CloudCorr(test[0][:,8],0.1,1,20)

figure()
plot(-test[0][:,8],'.-')
245/106:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values



def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    #calculate variance of adjacent values
    
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][1,8]=CloudCorr(test[0][:,8],0.1,1,10)

figure()
plot(-test[0][:,8],'.-')
245/107:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values



def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    #calculate variance of adjacent values
    
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][1,8]=CloudCorr(test[0][:,8],0.1,len(test[0][:,8]),10)

figure()
plot(-test[0][:,8],'.-')
245/108:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values



def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    #calculate variance of adjacent values
    
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][1,8]=CloudCorr(test[0][:,8],0.1,len(test[0][:,8]-1),10)

figure()
plot(-test[0][:,8],'.-')
245/109:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values



def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    #calculate variance of adjacent values
    
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][1,8]=CloudCorr(test[0][:,8],0.1,len(test[0][:,8])-1,10)

figure()
plot(-test[0][:,8],'.-')
245/110:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values



def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    #calculate variance of adjacent values
    
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][len(test[0][:,8])-1,8]=CloudCorr(test[0][:,8],0.1,len(test[0][:,8])-1,10)

figure()
plot(-test[0][:,8],'.-')
245/111:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values



def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    #calculate variance of adjacent values
    
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][len(test[0][:,8])-1,8]=CloudCorr(test[0][:,8],0.15,len(test[0][:,8])-1,10)

figure()
plot(-test[0][:,8],'.-')
245/112:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values



def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    #calculate variance of adjacent values
    
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][len(test[0][:,8])-1,8]=CloudCorr(test[0][:,8],0.1,len(test[0][:,8])-1,10)

figure()
plot(-test[0][:,8],'.-')
245/113:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values



def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    #calculate variance of adjacent values
    
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][len(test[0][:,8])-1,8]=CloudCorr(test[0][:,8],0.1,len(test[0][:,8])-3,10)

figure()
plot(-test[0][:,8],'.-')
245/114:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values



def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    #calculate variance of adjacent values
    
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][len(test[0][:,8])-1,8]=CloudCorr(test[0][:,8],0.05,len(test[0][:,8])-3,10)

figure()
plot(-test[0][:,8],'.-')
245/115:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values



def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    #calculate variance of adjacent values
    
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][len(test[0][:,8])-1,8]=CloudCorr(test[0][:,8],0.03,len(test[0][:,8])-3,10)

figure()
plot(-test[0][:,8],'.-')
245/116:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values



def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    #calculate variance of adjacent values
    
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][len(test[0][:,8])-1,8]=CloudCorr(test[0][:,8],0.03,len(test[0][:,8])-3,10)

figure()
plot(-test[0][:,8],'.-')
245/117:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values



def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    #calculate variance of adjacent values
    
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][len(test[0][:,8])-3,8]=CloudCorr(test[0][:,8],0.03,len(test[0][:,8])-3,10)

figure()
plot(-test[0][:,8],'.-')
245/118:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][len(test[0][:,8])-3,8]=CloudCorr(test[0][:,8],0.03,len(test[0][:,8])-3,6)

figure()
plot(-test[0][:,8],'.-')
245/119:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][len(test[0][:,8])-3,8]=CloudCorr(test[0][:,8],0.03,len(test[0][:,8])-3,10)

figure()
plot(-test[0][:,8],'.-')
245/120:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][len(test[0][:,8])-3,8]=CloudCorr(test[0][:,8],0.03,len(test[0][:,8])-3,15)

figure()
plot(-test[0][:,8],'.-')
245/121:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][len(test[0][:,8])-3,8]=CloudCorr(test[0][:,8],0.03,len(test[0][:,8])-3,20)

figure()
plot(-test[0][:,8],'.-')
245/122:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][len(test[0][:,8])-3,8]=CloudCorr(test[0][:,8],0.03,len(test[0][:,8])-3,30)

figure()
plot(-test[0][:,8],'.-')
245/123:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][len(test[0][:,8])-3,8]=CloudCorr(test[0][:,8],0.03,len(test[0][:,8])-3,40)

figure()
plot(-test[0][:,8],'.-')
245/124:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][len(test[0][:,8])-3,8]=CloudCorr(test[0][:,8],0.03,len(test[0][:,8])-3,50)

figure()
plot(-test[0][:,8],'.-')
245/125:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-11.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][len(test[0][:,8])-3,8]=CloudCorr(test[0][:,8],0.03,len(test[0][:,8])-3,30)

figure()
plot(-test[0][:,8],'.-')
245/126:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][len(test[0][:,8])-3,8]=CloudCorr(test[0][:,8],0.03,len(test[0][:,8])-3,10)

figure()
plot(-test[0][:,8],'.-')
245/127:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 0.01mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][len(test[0][:,8])-3,8]=CloudCorr(test[0][:,8],0.01,len(test[0][:,8])-3,15)

figure()
plot(-test[0][:,8],'.-')
245/128:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 0.01mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][len(test[0][:,8])-3,8]=CloudCorr(test[0][:,8],0.01,len(test[0][:,8])-3,150)

figure()
plot(-test[0][:,8],'.-')
245/129:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 0.01mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][len(test[0][:,8])-3,8]=CloudCorr(test[0][:,8],0.01,len(test[0][:,8])-3,50)

figure()
plot(-test[0][:,8],'.-')
245/130:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 0.01mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][len(test[0][:,8])-3,8]=CloudCorr(test[0][:,8],0.01,len(test[0][:,8])-3,70)

figure()
plot(-test[0][:,8],'.-')
245/131:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 0.01mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][len(test[0][:,8])-3,8]=CloudCorr(test[0][:,8],0.01,len(test[0][:,8])-3,10)

figure()
plot(-test[0][:,8],'.-')
245/132:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 0.01mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][140,8]=CloudCorr(test[0][:,8],0.01,140,10)

figure()
plot(-test[0][:,8],'.-')
245/133:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 0.01mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][140,8]=CloudCorr(test[0][:,8],0.01,140,10)

figure()
plot(-test[0][:,8],'.-')
245/134:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 0.01mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][140,8]=CloudCorr(test[0][:,8],0.01,140,5)

figure()
plot(-test[0][:,8],'.-')
245/135:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 0.01mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][140,8]=CloudCorr(test[0][:,8],0.01,140,3)

figure()
plot(-test[0][:,8],'.-')
245/136:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 0.01mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][140,8]=CloudCorr(test[0][:,8],0.01,140,2)

figure()
plot(-test[0][:,8],'.-')
245/137:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 0.01mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][140,8]=CloudCorr(test[0][:,8],0.01,140,1)

figure()
plot(-test[0][:,8],'.-')
245/138:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 0.01mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][140,8]=CloudCorr(test[0][:,8],0.01,140,30)

figure()
plot(-test[0][:,8],'.-')
245/139:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 0.01mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][100,8]=CloudCorr(test[0][:,8],0.01,100,6)

figure()
plot(-test[0][:,8],'.-')
245/140:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 0.01mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][100,8]=CloudCorr(test[0][:,8],0.01,100,4)

figure()
plot(-test[0][:,8],'.-')
245/141:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 0.01mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][100,8]=CloudCorr(test[0][:,8],0.01,100,5)

figure()
plot(-test[0][:,8],'.-')
245/142:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 0.01mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][100,8]=CloudCorr(test[0][:,8],0.01,100,6)

figure()
plot(-test[0][:,8],'.-')
245/143:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 0.01mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print(test[0][:,8][4])

print (test[0][20,8])
test[0][100,8]=CloudCorr(test[0][:,8],0.01,100,6)

figure()
plot(-test[0][:,8],'.-')
xlim(90,110)
245/144:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print (var_val)
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 0.01mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print (test[0][20,8])
test[0][100,8]=CloudCorr(test[0][:,8],0.01,100,6)

figure()
plot(-test[0][:,8],'.-')
xlim(90,110)
245/145:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    print ('var:',var_val)
    print ('val left:',cosqm_array[idx-left])
    print ('val right:',cosqm_array[idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 0.01mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print (test[0][20,8])
test[0][100,8]=CloudCorr(test[0][:,8],0.01,100,6)

figure()
plot(-test[0][:,8],'.-')
xlim(90,110)
245/146:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    print ('var:',var_val)
    print ('val left:',cosqm_array[idx-left])
    print ('val right:',cosqm_array[idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 0.01mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print (test[0][20,8])
test[0][100,8]=CloudCorr(test[0][:,8],0.01,100,6)

figure()
plot(-test[0][:,8],'.-')
xlim(90,110)
245/147:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    print ('var:',var_val)
    print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 0.01mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print (test[0][20,8])
test[0][100,8]=CloudCorr(test[0][:,8],0.01,100,6)

figure()
plot(-test[0][:,8],'.-')
xlim(90,110)
245/148:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    print ('var:',var_val)
    print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 0.1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print (test[0][20,8])
test[0][100,8]=CloudCorr(test[0][:,8],0.1,100,6)

figure()
plot(-test[0][:,8],'.-')
xlim(90,110)
245/149:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    print ('var:',var_val)
    print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print (test[0][20,8])
test[0][100,8]=CloudCorr(test[0][:,8],1,100,6)

figure()
plot(-test[0][:,8],'.-')
xlim(90,110)
245/150:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    print ('var:',var_val)
    print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print (test[0][20,8])
test[0][110,8]=CloudCorr(test[0][:,8],1,110,6)

figure()
plot(-test[0][:,8],'.-')
xlim(90,110)
245/151:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    print ('var:',var_val)
    print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print (test[0][20,8])
test[0][110,8]=CloudCorr(test[0][:,8],1,110,6)

figure()
plot(-test[0][:,8],'.-')
245/152:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    print ('var:',var_val)
    print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
print (test[0][20,8])
test[0][i,8]=CloudCorr(test[0][:,8],1,i,6)

figure()
plot(-test[0][:,8],'.-')
plot(-test[0][i,8],'.','r')
245/153:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    print ('var:',var_val)
    print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
print (test[0][20,8])
test[0][i,8]=CloudCorr(test[0][:,8],1,i,6)

figure()
plot(-test[0][:,8],'.-')
plot(-test[0][i,8],'.','red')
245/154:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    print ('var:',var_val)
    print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
print (test[0][20,8])
test[0][i,8]=CloudCorr(test[0][:,8],1,i,6)

figure()
plot(-test[0][:,8],'.-')
plot(-test[0][i,8],'.',color='red')
245/155:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    print ('var:',var_val)
    print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
print (test[0][20,8])
test[0][i,8]=CloudCorr(test[0][:,8],1,i,6)

figure()
plot(-test[0][:,8],'.-')
plot(i,-test[0][i,8],'.',color='red')
245/156:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    print ('var:',var_val)
    print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
print (test[0][20,8])
test[0][i,8]=CloudCorr(test[0][:,8],1,i,6)

figure()
plot(-test[0][:,8],'.-')
plot(i,-test[0][i,8],'.',color='red',size=5)
245/157:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    print ('var:',var_val)
    print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
print (test[0][20,8])
test[0][i,8]=CloudCorr(test[0][:,8],1,i,6)

figure()
plot(-test[0][:,8],'.-')
plot(i,-test[0][i,8],'.',color='red',markersize=5)
245/158:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    print ('var:',var_val)
    print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
print (test[0][20,8])
test[0][i,8]=CloudCorr(test[0][:,8],1,i,6)

figure()
plot(-test[0][:,8],'.-')
plot(i,-test[0][i,8],'.',color='red',markersize=15)
245/159:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    print ('var:',var_val)
    print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
print (test[0][20,8])
test[0][i,8]=CloudCorr(test[0][:,8],1,i,6)

figure()
plot(-test[0][:,8],'.-')
plot(i,-test[0][i,8],'.',color='red',markersize=10)
245/160:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    print ('var:',var_val)
    print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
print (test[0][20,8])
test[0][i,8]=CloudCorr(test[0][:,8],1,i,12)

figure()
plot(-test[0][:,8],'.-')
plot(i,-test[0][i,8],'.',color='red',markersize=10)
245/161:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    print ('var:',var_val)
    print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
print (test[0][20,8])
test[0][i,8]=CloudCorr(test[0][:,8],1,i,20)

figure()
plot(-test[0][:,8],'.-')
plot(i,-test[0][i,8],'.',color='red',markersize=10)
245/162:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    print ('var:',var_val)
    print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
print (test[0][20,8])
test[0][i,8]=CloudCorr(test[0][:,8],1,i,15)

figure()
plot(-test[0][:,8],'.-')
plot(i,-test[0][i,8],'.',color='red',markersize=10)
245/163:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    print ('var:',var_val)
    print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
print (test[0][20,8])
test[0][i,8]=CloudCorr(test[0][:,8],1,i,20)

figure()
plot(-test[0][:,8],'.-')
plot(i,-test[0][i,8],'.',color='red',markersize=10)
245/164:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    print ('var:',var_val)
    print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
print (test[0][20,8])

for value in test[0][:,8]:
    value=CloudCorr(value,1,i,20)

figure()
plot(-test[0][:,8],'.-')
plot(i,-test[0][i,8],'.',color='red',markersize=10)
245/165:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    print ('var:',var_val)
    print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
print (test[0][20,8])

for value in test[0][:,8]:
    value=CloudCorr(test[0][:,8],1,i,20)

figure()
plot(-test[0][:,8],'.-')
plot(i,-test[0][i,8],'.',color='red',markersize=10)
245/166:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    print ('var:',var_val)
    print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
print (test[0][20,8])

for i in len(test[0][:,8]):
    test[0][i,8]=CloudCorr(test[0][:,8],1,i,20)

figure()
plot(-test[0][:,8],'.-')
plot(i,-test[0][i,8],'.',color='red',markersize=10)
245/167:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    print ('var:',var_val)
    print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
print (test[0][20,8])

for i in range(len(test[0][:,8])):
    test[0][i,8]=CloudCorr(test[0][:,8],1,i,20)

figure()
plot(-test[0][:,8],'.-')
plot(i,-test[0][i,8],'.',color='red',markersize=10)
245/168:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

for i in range(len(test[0][:,8])):
    test[0][i,8]=CloudCorr(test[0][:,8],1,i,20)

figure()
plot(-test[0][:,8],'.-')
plot(i,-test[0][i,8],'.',color='red',markersize=10)
245/169:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1,i,20)

figure()
plot(-test[0][:,8],'.-')
plot(i,-test[0][i,8],'.',color='red',markersize=10)
245/170:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1,i,20)

figure()
plot(-test1,'.-')
plot(i,-test1,'.',color='red',markersize=10)
245/171:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1,i,20)

figure()
plot(-test1,'.-')
245/172:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],3,i,20)

figure()
plot(-test1,'.-')
245/173:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],2,i,20)

figure()
plot(-test1,'.-')
245/174:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],3,i,20)

figure()
plot(-test1,'.-')
245/175:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],2,i,20)

figure()
plot(-test1,'.-')
245/176:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],2,i,10)

figure()
plot(-test1,'.-')
245/177:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1,i,10)

figure()
plot(-test1,'.-')
245/178:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,10)

figure()
plot(-test1,'.-')
245/179:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=std(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.8,i,10)

figure()
plot(-test1,'.-')
245/180:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.8,i,10)

figure()
plot(-test1,'.-')
245/181:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[len(test1)-i]=CloudCorr(test[0][:,8],1.8,i,10)

figure()
plot(-test1,'.-')
245/182:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[len(test1)-i-1]=CloudCorr(test[0][:,8],1.8,i,10)

figure()
plot(-test1,'.-')
245/183:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.8,i,10)

figure()
plot(-test1,'.-')
245/184:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],2,i,10)

figure()
plot(-test1,'.-')
245/185:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],5,i,10)

figure()
plot(-test1,'.-')
245/186:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],4,i,10)

figure()
plot(-test1,'.-')
245/187:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],3,i,10)

figure()
plot(-test1,'.-')
245/188:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],2.8,i,10)

figure()
plot(-test1,'.-')
245/189:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],2.5,i,10)

figure()
plot(-test1,'.-')
245/190:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],2,i,10)

figure()
plot(-test1,'.-')
245/191:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1,i,10)

figure()
plot(-test1,'.-')
245/192:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.5,i,10)

figure()
plot(-test1,'.-')
245/193:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],4,i,10)

figure()
plot(-test1,'.-')
245/194:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],3.8,i,10)

figure()
plot(-test1,'.-')
245/195:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],3.9,i,10)

figure()
plot(-test1,'.-')
245/196:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],3.5,i,10)

figure()
plot(-test1,'.-')
245/197:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],3.3,i,10)

figure()
plot(-test1,'.-')
245/198:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],3.4,i,10)

figure()
plot(-test1,'.-')
245/199:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],3.35,i,10)

figure()
plot(-test1,'.-')
245/200:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],3.32,i,10)

figure()
plot(-test1,'.-')
245/201:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],3.31,i,10)

figure()
plot(-test1,'.-')
245/202:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],3.305,i,10)

figure()
plot(-test1,'.-')
245/203:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],3.308,i,10)

figure()
plot(-test1,'.-')
245/204:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],3.307,i,10)

figure()
plot(-test1,'.-')
245/205:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],3.3065,i,10)

figure()
plot(-test1,'.-')
245/206:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],3.3065,i,5)

figure()
plot(-test1,'.-')
245/207:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],3,i,5)

figure()
plot(-test1,'.-')
245/208:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],2,i,5)

figure()
plot(-test1,'.-')
245/209:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],4,i,5)

figure()
plot(-test1,'.-')
245/210:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1,i,5)

figure()
plot(-test1,'.-')
245/211:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

i=115
#print (test[0][20,8])

test1=copy(test[0][:,8])
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,5)

figure()
plot(-test1,'.-')
245/212:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=copy(test[0][:,8])
print(test1)
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,5)

figure()
plot(-test1,'.-')
245/213:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

print(test1)
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,5)

figure()
plot(-test1,'.-')
245/214:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')


for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,5)

figure()
plot(-test1,'.-')
245/215:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')


for i in range(len(test[0][:,8])):
    test2[i]=CloudCorr(test[0][:,8],1.5,i,5)

figure()
plot(-test1,'.-')
245/216:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')


for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,5)

figure()
plot(-test1,'.-')
250/1:
from numpy import *
from matplotlib.dates import datestr2num
from matplotlib.pyplot import *
from datetime import datetime
250/2:
##AOD LEVEL 1.5 (no clouds but no calib) data from aeronet for all of year 2019, all bands

#Day format changed from 06-11: full night to split at midnight

#read from columns 4 to 25 (aod 1640 to 340nm)
cols=arange(4, 26)

path='cosqm_santa_cruz/20190101_20191231_Santa_Cruz_Tenerife.lev15'
header=7

#DATA
data_aod=genfromtxt(path, delimiter=',', skip_header=header, usecols=cols)

#remove negative values (-999) and set to 0
non_negs=data_aod>=0
data_aod=non_negs*data_aod

#DATES
dates_str=genfromtxt(path, delimiter=',', skip_header=header, usecols=[0,1], dtype=str)
dates_list=[datetime.strptime(dates, '%d:%m:%Y') for dates in dates_str[:,0]]
times_list=[datetime.strptime(dates, '%H:%M:%S') for dates in dates_str[:,1]]
dates_aod=array([dates_list,times_list])

#BANDS
bands_aod=genfromtxt(path, delimiter=',', skip_header=header-1, skip_footer=len(data_aod), usecols=cols, dtype=str)

#find which bands have no data (take mean of bands and find indices diff. than 0)
means=mean(data_aod, axis=0)
non_empty_aod=array(nonzero(means))
250/3:
#COSQM Data load function, returns data and dates in tuple

def LoadData(path):
    data_server=loadtxt(path, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    dates_str=genfromtxt(path, delimiter=' ', usecols=[0,1],unpack=True,dtype='str')
    dates_list=[datetime.strptime(dates, '%Y-%m-%d') for dates in dates_str[0,:]]
    times_list=[datetime.strptime(dates, '%H:%M:%S') for dates in dates_str[1,:]]
    dates_cosqm=array([dates_list, times_list])
    dates_cosqm=swapaxes(dates_cosqm,0,1)
    return data_server, dates_cosqm
250/4:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')


for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,5)

figure()
plot(-test1,'.-')
250/5:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,5)

figure()
plot(-test1,'.-')
250/6:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],2,i,5)

figure()
plot(-test1,'.-')
250/7:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1,i,5)

figure()
plot(-test1,'.-')
250/8:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.5,i,5)

figure()
plot(-test1,'.-')
250/9:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,5)

figure()
plot(-test1,'.-')
250/10:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.001,i,5)

figure()
plot(-test1,'.-')
250/11:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.0001,i,5)

figure()
plot(-test1,'.-')
250/12:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.1,i,5)

figure()
plot(-test1,'.-')
250/13:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.1,i,5)

figure()
plot(-test1,'.-')
plot(gradient(-test1))
250/14:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1,i,5)

figure()
plot(-test1,'.-')
plot(gradient(-test1))
250/15:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],2,i,5)

figure()
plot(-test1,'.-')
plot(gradient(-test1))
250/16:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,5)

figure()
plot(-test1,'.-')
plot(gradient(-test1))
250/17:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,5)

figure()
plot(-test1,'.-')
plot(var(-test1))
250/18:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,5)

print(var(test1))
    
figure()
plot(-test1,'.-')
plot(var(-test1))
250/19:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,5)

print(var(test1))
    
figure()
plot(-test1,'.-')
plot(var(-test1),'.')
250/20:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,5)

print(var(test1))
    
figure()
plot(-test1,'.-')
plot(var(-test1),'-')
250/21:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,5)

print(var(test1))
    
figure()
plot(-test1,'.-')
plot(var(-test1),'--')
250/22:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,5)

print(var(test1))
    
figure()
plot(-test1,'.-')
plot(var(-test1),'.')
250/23:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,6)

print(var(test1))
    
figure()
plot(-test1,'.-')
plot(var(-test1),'.')
250/24:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,7)

print(var(test1))
    
figure()
plot(-test1,'.-')
plot(var(-test1),'.')
250/25:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,8)

print(var(test1))
    
figure()
plot(-test1,'.-')
plot(var(-test1),'.')
250/26:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,9)

print(var(test1))
    
figure()
plot(-test1,'.-')
plot(var(-test1),'.')
250/27:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,10)

print(var(test1))
    
figure()
plot(-test1,'.-')
plot(var(-test1),'.')
250/28:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,11)

print(var(test1))
    
figure()
plot(-test1,'.-')
plot(var(-test1),'.')
250/29:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,10)

print(var(test1))
    
figure()
plot(-test1,'.-')
plot(var(-test1),'.')
250/30:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,6)

print(var(test1))
    
figure()
plot(-test1,'.-')
plot(var(-test1),'.')
250/31:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,4)

print(var(test1))
    
figure()
plot(-test1,'.-')
plot(var(-test1),'.')
250/32:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-16.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,4)

print(var(test1))
    
figure()
plot(-test1,'.-')
plot(var(-test1),'.')
250/33:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-16.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,10)

print(var(test1))
    
figure()
plot(-test1,'.-')
plot(var(-test1),'.')
250/34:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-16.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1.5,i,6)

print(var(test1))
    
figure()
plot(-test1,'.-')
plot(var(-test1),'.')
250/35:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-16.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1,i,6)

print(var(test1))
    
figure()
plot(-test1,'.-')
plot(var(-test1),'.')
250/36:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-16.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1,i,6)

print(var(test1))
    
ax1,ax2=subplots(1,2)
ax1.plot(-test1,'.-')
ax2.plot(var(-test1),'.')
250/37:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-16.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1,i,6)

print(var(test1))
    
fig,ax=subplots(1,2)
ax[0].plot(-test1,'.-')
ax[1].plot(var(-test1),'.')
250/38:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-16.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,size=[3,4])
ax[0].plot(-test1,'.-')
ax[1].plot(var(-test1),'.')
250/39:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-16.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,size=(3,4))
ax[0].plot(-test1,'.-')
ax[1].plot(var(-test1),'.')
250/40:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-16.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(3,4))
ax[0].plot(-test1,'.-')
ax[1].plot(var(-test1),'.')
250/41:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-16.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(3,6))
ax[0].plot(-test1,'.-')
ax[1].plot(var(-test1),'.')
250/42:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-16.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(6,4))
ax[0].plot(-test1,'.-')
ax[1].plot(var(-test1),'.')
250/43:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-16.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(10,4))
ax[0].plot(-test1,'.-')
ax[1].plot(var(-test1),'.')
250/44:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-16.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[1].plot(var(-test1),'.')
250/45:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-16.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[1].plot(var(-test1),'.')
250/46:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-16.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[len(test[0][:,8])-i]=CloudCorr(test[0][:,8],1,len(test[0][:,8])-i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[1].plot(var(-test1),'.')
250/47:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-16.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[len(test[0][:,8])-i-1]=CloudCorr(test[0][:,8],1,len(test[0][:,8])-i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[1].plot(var(-test1),'.')
250/48:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-16.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[len(test[0][:,8])-i-1]=CloudCorr(test[0][:,8],1,len(test[0][:,8])-i-1,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[1].plot(var(-test1),'.')
250/49:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-17.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[1].plot(var(-test1),'.')
250/50:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-17.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.5,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[1].plot(var(-test1),'.')
250/51:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-17.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.1,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[1].plot(var(-test1),'.')
250/52:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-17.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.0.5,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[1].plot(var(-test1),'.')
250/53:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-17.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[1].plot(var(-test1),'.')
250/54:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-17.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[1].plot(var(-test1),'.')
250/55:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-17.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],2,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[1].plot(var(-test1),'.')
250/56:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=cosqm_array[idx]
    print(test)
    if var_val>threshold:
        cosqm_array[idx]=0
        print (test)
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-17.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],2,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[1].plot(var(-test1),'.')
250/57:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array[idx])
    print(test)
    if var_val>threshold:
        cosqm_array[idx]=0
        print (test)
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-17.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],2,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[1].plot(var(-test1),'.')
250/58:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array[idx])
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-17.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],2,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/59:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array[idx])
    if var_val>threshold:
        cosqm_array[idx]=0
        return cosqm_array[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-17.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/60:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array[idx])
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-17.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/61:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-17.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],1,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/62:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-17.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.5,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/63:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-17.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.3,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/64:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-17.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.2,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/65:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-17.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.1,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/66:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-17.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test[0][i,8]=CloudCorr(test[0][:,8],0.1,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/67:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-17.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test[0][i,8]=CloudCorr(test[0][:,8],0.1,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
#ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/68:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-17.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1=CloudCorr(test[0][:,8],0.1,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
#ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/69:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-17.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1=CloudCorr(test[0][:,8],0.1,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/70:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-17.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.1,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/71:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-17.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/72:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-18.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/73:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-19.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/74:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-20.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/75:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-21.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,6)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/76:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-21.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,10)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/77:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-20.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,10)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/78:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-19.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,10)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/79:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-18.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,10)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/80:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-16.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,10)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/81:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,10)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/82:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-14.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,10)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/83:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-21.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,10)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/84:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-28.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,10)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/85:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-27.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,10)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/86:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-20.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,10)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/87:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-13.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,10)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/88:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-6.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,10)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/89:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-06.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,10)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/90:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/07/2019-07-01.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,10)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/91:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/07/2019-07-07.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,10)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/92:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/07/2019-07-08.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,10)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/93:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/07/2019-07-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,10)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/94:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/07/2019-07-22.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,10)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/95:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a threshold of approx 1mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/07/2019-07-29.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,10)

print(var(test1))
    
fig,ax=subplots(1,2,figsize=(15,4))
ax[0].plot(-test1,'.-')
ax[0].plot(-test[0][:,8])
ax[1].plot(var(-test1),'.')
250/96:
###FIND CLOSEST TIME VALUES FROM AOD TO COSQM

#increments for months for computing seconds
days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
#Define path from month and day of measurement on AOD
def FindClosest(array1,index):
    
    #define paths
    month=array1[0,index].month
    day=array1[0,index].day
    hour=array1[1,index].hour
        
    #make path string
    if day<9:
        pathstr='0'+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr=str(0)+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr=str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
            
    path=r'cosqm_izana/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr+'.txt'
    print (path)
    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array1[1]))
    for i in range(len(array1[1])):
        dates_aod_seconds[i]=days_per_month[array1[0,i].month-1]*24*3600+(array1[0,i].day-1)*24*3600+array1[1,i].hour*3600+array1[1,i].minute*60+array1[1,i].second
    
    #Download data from this day (night)
    try:
        data,dates=LoadData(path)
        lenght=len(dates[:,0])-1
        dates_cosqm_seconds=zeros(lenght)
        for i in range(lenght):
            dates_cosqm_seconds[i]=days_per_month[dates[i,0].month-1]*24*3600+(array(dates[i,0].day)-1)*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

        #find nearest time value for cosqm corresponding to aod measurement
        idx = abs(dates_cosqm_seconds-dates_aod_seconds[index]).argmin()    
        delta_t=dates_cosqm_seconds[idx]-dates_aod_seconds[index]
        i=index
        print ('delta t= ',delta_t)
        print ('----------------')
    
    except:
        delta_t=1001
        
    if -1000<delta_t<1000:
        cosqm_value1=data[idx]
        cosqm_value2=copy(cosqm_value1)
        cosqm_value2=CloudCorr(data[:,8],0.05,idx,10)
    else: 
        cosqm_value2=array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

    return cosqm_value2, delta_t
250/97:
#Load appropriate data from aod to corresponding cosqm values

indexes=arange(10800,10820)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
250/98:
#Load appropriate data from aod to corresponding cosqm values

indexes=arange(10800,10820)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
250/99:
plot(data_aod[7548:16000,17],cosqm_value[900:16000-6648,5],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/100:
plot(data_aod[10800,10820,17],cosqm_value[10800,10820],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/101:
plot(data_aod[10800:10820,17],cosqm_value[10800:10820],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/102:
plot(data_aod[10800:10820,17],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/103:
print (cosqm_value)
plot(data_aod[10800:10820,17],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/104:
print (cosqm_value)
plot(data_aod[10800:10820,17],cosqm_value,'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/105:
print (len(cosqm_value),len(data_aod[10800:10820,17]))
plot(data_aod[10800:10820,17],cosqm_value,'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/106:
print (len(cosqm_value),len(data_aod[10800:10820,17]))
plot(data_aod[:,17],cosqm_value,'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/107:
#Load appropriate data from aod to corresponding cosqm values

indexes=arange(10800,11000)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
250/108:
print (len(cosqm_value),len(data_aod[10800:10820,17]))
plot(data_aod[:,17],cosqm_value,'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/109:
print (len(cosqm_value),len(data_aod[10800:11000,17]))
plot(data_aod[:,17],cosqm_value,'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/110:
print (len(cosqm_value),len(data_aod[10800:11000,17]))
plot(data_aod[10800:11000,17],cosqm_value,'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/111:
print (len(cosqm_value),len(data_aod[10800:11000,17]))
plot(data_aod[10800:11000,16],cosqm_value,'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/112:
print (len(cosqm_value),len(data_aod[10800:11000,17]))
plot(data_aod[10800:11000,1],cosqm_value,'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/113:
print (len(cosqm_value),len(data_aod[10800:11000,17]))
plot(data_aod[10800:11000,2],cosqm_value,'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/114:
print (len(cosqm_value),len(data_aod[10800:11000,17]))


plot(data_aod[10800:11000,2],cosqm_value>0,'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/115:
print (len(data_aod[10800:11000,2]),len(cosqm_value>0))


plot(data_aod[10800:11000,2],cosqm_value>0,'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/116:
print (len(data_aod[10800:11000,2]),len(cosqm_value>0))


plot(data_aod[10800:11000,2],cosqm_value[arg(cosqm_value>0)],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/117:
print (len(data_aod[10800:11000,2]),len(cosqm_value>0))


plot(data_aod[10800:11000,2],cosqm_value[argwhere(cosqm_value>0)],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/118:
print (len(data_aod[10800:11000,2]),len(cosqm_value>0))


plot(data_aod[10800:11000,2],cosqm_value[where(cosqm_value>0)],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/119:
print (len(data_aod[10800:11000,2]),len(cosqm_value>0))


plot(data_aod[10800+where(cosqm_value>0),2],cosqm_value[where(cosqm_value>0)],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/120:
print (len(data_aod[10800:11000,2]),len(cosqm_value>0))


plot(data_aod[where(cosqm_value>0)+10800,2],cosqm_value[where(cosqm_value>0)],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/121:
print (len(data_aod[10800:11000,2]),len(cosqm_value>0))


plot(data_aod[array(where(cosqm_value>0))+10800,2],cosqm_value[where(cosqm_value>0)],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/122:
print (len(data_aod[10800:11000,2]),len(cosqm_value>0))
print (array(where(cosqm_value>0))+10800)


plot(data_aod[array(where(cosqm_value>0))+10800,2],cosqm_value[where(cosqm_value>0)],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/123:
print (len(data_aod[10800:11000,2]),len(cosqm_value>0))
print (array(where(cosqm_value>0)).resize+10800)


plot(data_aod[array(where(cosqm_value>0))+10800,2],cosqm_value[where(cosqm_value>0)],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/124:
print (len(data_aod[10800:11000,2]),len(cosqm_value>0))
print (array(where(cosqm_value>0)).resize()+10800)


plot(data_aod[array(where(cosqm_value>0))+10800,2],cosqm_value[where(cosqm_value>0)],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/125:
print (len(data_aod[10800:11000,2]),len(cosqm_value>0))
print (array(where(cosqm_value>0)).resize(1)+10800)


plot(data_aod[array(where(cosqm_value>0))+10800,2],cosqm_value[where(cosqm_value>0)],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/126:
print (len(data_aod[10800:11000,2]),len(cosqm_value>0))
print (array(where(cosqm_value>0)).resize(0,1)+10800)


plot(data_aod[array(where(cosqm_value>0))+10800,2],cosqm_value[where(cosqm_value>0)],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/127:
print (len(data_aod[10800:11000,2]),len(cosqm_value>0))
print (array(where(cosqm_value>0)).resize((0,1))+10800)


plot(data_aod[array(where(cosqm_value>0))+10800,2],cosqm_value[where(cosqm_value>0)],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/128:
print (len(data_aod[10800:11000,2]),len(cosqm_value>0))
print (array(where(cosqm_value>0)).reshape()+10800)


plot(data_aod[array(where(cosqm_value>0))+10800,2],cosqm_value[where(cosqm_value>0)],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/129:
print (len(data_aod[10800:11000,2]),len(cosqm_value>0))
print (array(where(cosqm_value>0)).reshape+10800)


plot(data_aod[array(where(cosqm_value>0))+10800,2],cosqm_value[where(cosqm_value>0)],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/130:
print (len(data_aod[10800:11000,2]),len(cosqm_value>0))
print (array(where(cosqm_value>0)).reshape(1)+10800)


plot(data_aod[array(where(cosqm_value>0))+10800,2],cosqm_value[where(cosqm_value>0)],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/131:
print (len(data_aod[10800:11000,2]),len(cosqm_value>0))
print (array(where(cosqm_value>0)).transpose+10800)


plot(data_aod[array(where(cosqm_value>0))+10800,2],cosqm_value[where(cosqm_value>0)],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/132:
print (len(data_aod[10800:11000,2]),len(cosqm_value>0))
print (array(where(cosqm_value>0)).transpose()+10800)


plot(data_aod[array(where(cosqm_value>0))+10800,2],cosqm_value[where(cosqm_value>0)],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/133:
print (len(data_aod[10800:11000,2]),len(cosqm_value>0))
print (array(where(cosqm_value>0))+10800)


plot(data_aod[array(where(cosqm_value>0))+10800,2],cosqm_value[where(cosqm_value>0)],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/134:
print (len(data_aod[10800:11000,2]),len(cosqm_value>0))
print (array(where(cosqm_value>0))+10800)


plot(data_aod[list(array(where(cosqm_value>0))+10800),2],cosqm_value[where(cosqm_value>0)],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/135:
print (len(data_aod[10800:11000,2]),len(cosqm_value>0))
print (array(where(cosqm_value>0))+10800)


plot(data_aod[array(where(cosqm_value>0))[0]+10800,2],cosqm_value[where(cosqm_value>0)],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/136:
###FIND CLOSEST TIME VALUES FROM AOD TO COSQM

#increments for months for computing seconds
days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
#Define path from month and day of measurement on AOD
def FindClosest(array1,index):
    
    #define paths
    month=array1[0,index].month
    day=array1[0,index].day
    hour=array1[1,index].hour
        
    #make path string
    if day<9:
        pathstr='0'+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr=str(0)+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr=str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
            
    path=r'cosqm_izana/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr+'.txt'
    print (path)
    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array1[1]))
    for i in range(len(array1[1])):
        dates_aod_seconds[i]=days_per_month[array1[0,i].month-1]*24*3600+(array1[0,i].day-1)*24*3600+array1[1,i].hour*3600+array1[1,i].minute*60+array1[1,i].second
    
    #Download data from this day (night)
    try:
        data,dates=LoadData(path)
        lenght=len(dates[:,0])-1
        dates_cosqm_seconds=zeros(lenght)
        for i in range(lenght):
            dates_cosqm_seconds[i]=days_per_month[dates[i,0].month-1]*24*3600+(array(dates[i,0].day)-1)*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

        #find nearest time value for cosqm corresponding to aod measurement
        idx = abs(dates_cosqm_seconds-dates_aod_seconds[index]).argmin()    
        delta_t=dates_cosqm_seconds[idx]-dates_aod_seconds[index]
        i=index
        print ('delta t= ',delta_t)
        print ('----------------')
    
    except:
        delta_t=1001
        
    if -1000<delta_t<1000:
        cosqm_value1=data[idx]
        cosqm_value2=copy(cosqm_value1)
        cosqm_value2=CloudCorr(data[:,8],0.05,idx,20)
    else: 
        cosqm_value2=array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

    return cosqm_value2, delta_t
250/137:
###FIND CLOSEST TIME VALUES FROM AOD TO COSQM

#increments for months for computing seconds
days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
#Define path from month and day of measurement on AOD
def FindClosest(array1,index):
    
    #define paths
    month=array1[0,index].month
    day=array1[0,index].day
    hour=array1[1,index].hour
        
    #make path string
    if day<9:
        pathstr='0'+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr=str(0)+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr=str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
            
    path=r'cosqm_izana/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr+'.txt'
    print (path)
    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array1[1]))
    for i in range(len(array1[1])):
        dates_aod_seconds[i]=days_per_month[array1[0,i].month-1]*24*3600+(array1[0,i].day-1)*24*3600+array1[1,i].hour*3600+array1[1,i].minute*60+array1[1,i].second
    
    #Download data from this day (night)
    try:
        data,dates=LoadData(path)
        lenght=len(dates[:,0])-1
        dates_cosqm_seconds=zeros(lenght)
        for i in range(lenght):
            dates_cosqm_seconds[i]=days_per_month[dates[i,0].month-1]*24*3600+(array(dates[i,0].day)-1)*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

        #find nearest time value for cosqm corresponding to aod measurement
        idx = abs(dates_cosqm_seconds-dates_aod_seconds[index]).argmin()    
        delta_t=dates_cosqm_seconds[idx]-dates_aod_seconds[index]
        i=index
        print ('delta t= ',delta_t)
        print ('----------------')
    
    except:
        delta_t=1001
        
    if -1000<delta_t<1000:
        cosqm_value1=data[idx]
        cosqm_value2=copy(cosqm_value1)
        cosqm_value2=CloudCorr(data[:,8],0.05,idx,20)
    else: 
        cosqm_value2=array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

    return cosqm_value2, delta_t
250/138:
#Load appropriate data from aod to corresponding cosqm values

indexes=arange(8000,11000)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
250/139:
print (len(data_aod[8000:11000,2]),len(cosqm_value>0))
print (array(where(cosqm_value>0))+10800)


plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')

print ('CORR:')
print ('c:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,0]))
print ('r:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,1]))
print ('g:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,2]))
print ('b:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,5]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,14]))
print ('y:',pearsonr(izana_value[900:16000-6648,8],data_aod[7548:16000,17]))
250/140:
print (len(data_aod[8000:11000,2]),len(cosqm_value>0))
print (array(where(cosqm_value>0))+10800)


plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
250/141: plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
250/142:
#Plot cosqm vs AOD for nonzero values (clouds removed)
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
250/143:
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
250/144:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/08/2019-08-22.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
250/145:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/08/2019-08-22.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
250/146:
print(dates_aod)

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
250/147:
print(shape(dates_aod))
#print(dates_aod[where(dates_aod[0][:]==)])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
250/148:
print(type(dates_aod))
#print(dates_aod[where(dates_aod[0][:]==)])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
250/149:
print(dates_aod[0,2])
#print(dates_aod[where(dates_aod[0][:]==)])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
250/150:
print(dates_aod[:,0])
#print(dates_aod[where(dates_aod[0][:]==)])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
250/151:
print(dates_aod[0,:])
#print(dates_aod[where(dates_aod[0][:]==)])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
250/152:
print(dates_aod[0,:].time)
#print(dates_aod[where(dates_aod[0][:]==)])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
250/153:
print(dates_aod[0,:].time)
#print(dates_aod[where(dates_aod[0][:]==)])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
250/154:
print(dates_aod[0,:].month)
#print(dates_aod[where(dates_aod[0][:]==)])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
250/155:
for i in range(len(dates_aod[0]))
print(dates_aod[0,i].month)
#print(dates_aod[where(dates_aod[0][:]==)])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
250/156:
for i in range(len(dates_aod[0])):
    print(dates_aod[0,i].month)
#print(dates_aod[where(dates_aod[0][:]==)])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
250/157:
first_moon_idx=zeros()
for i in range(len(dates_aod[0])):
    first_moon_idx[i]=where(dates_aod[0,i].month==1)
#print(dates_aod[where(dates_aod[0][:]==)])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
250/158:
for i in range(len(dates_aod[0])):
    print(where(dates_aod[0,i].month==1))
#print(dates_aod[where(dates_aod[0][:]==)])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
250/159:
for i in range(len(dates_aod[0])):
    print(argwhere(dates_aod[0,i].month==1))
#print(dates_aod[where(dates_aod[0][:]==)])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
250/160:
for i in range(len(dates_aod[0])):
    print(argwhere(dates_aod[0,i].month==6))
#print(dates_aod[where(dates_aod[0][:]==)])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
250/161:
for i in range(len(dates_aod[0])):
    print(nonzero(argwhere(dates_aod[0,i].month==6)))
#print(dates_aod[where(dates_aod[0][:]==)])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
250/162:
bla=array([1,2,3])
argwhere(bla==2)
250/163:
bla=array([1,2,3])
type(argwhere(bla==2))
250/164:
bla=array([1,2,3])
shape(argwhere(bla==2))
250/165:
bla=array([1,2,3])
shape(argwhere(bla==2))[0]
250/166:
bla=array([1,2,3])
shape(argwhere(bla==2)[0])
250/167:
bla=array([1,2,3])
shape(argwhere(bla==2)[0,0])
250/168:
bla=array([1,2,3])
argwhere(bla==2)[0,0]
250/169:
bla=array([1,2,3])
argwhere(bla==2)[0]
250/170:
bla=array([1,2,3])
argwhere(bla==2)[0]
250/171:
bla=array([1,2,3])
argwhere(bla==2)[0,0]
250/172:
bla=array([1,2,3])
where(bla==2)
250/173:
bla=array([1,2,3])
where(bla==2)[0,0]
250/174:
bla=array([1,2,3])
argwhere(bla==2)[0,0]
250/175:
bla=array([1,2,3])
argwhere(bla==2)[0,0]

array(where(cosqm_value>0))[0]
250/176:
bla=array([1,2,3])
argwhere(bla==2)[0,0]

cosqm_value[array(where(cosqm_value>0))[0]]
250/177:
bla=array([1,2,3])
argwhere(bla==2)[0,0]

cosqm_value[where(cosqm_value>0)[0]]
250/178:
bla=array([1,2,3])
argwhere(bla==2)[0,0]

cosqm_value[where(cosqm_value>0
250/179:
bla=array([1,2,3])
argwhere(bla==2)[0,0]

cosqm_value[where(cosqm_value>0)]
250/180:
bla=array([1,2,3])
argwhere(bla==2)[0,0]

cosqm_value[where(cosqm_value>0)]
type(where(cosqm_value>0))
250/181:
bla=array([1,2,3])
argwhere(bla==2)[0,0]

cosqm_value[where(cosqm_value>0)]
shape(where(cosqm_value>0))
250/182:
bla=array([1,2,3])
argwhere(bla==2)[0,0]

cosqm_value[where(cosqm_value==0)]
shape(where(cosqm_value>0))
250/183:
bla=array([1,2,3])
argwhere(bla==2)[0,0]

cosqm_value[where(cosqm_value==0)]
shape(where(cosqm_value><==0))
250/184:
bla=array([1,2,3])
argwhere(bla==2)[0,0]

cosqm_value[where(cosqm_value==0)]
shape(where(cosqm_value==0))
250/185:
bla=array([1,2,3])
argwhere(bla==2)[0,0]

cosqm_value[where(cosqm_value==0)]
where(cosqm_value==0))
250/186:
bla=array([1,2,3])
argwhere(bla==2)[0,0]

cosqm_value[where(cosqm_value==0)]
where(cosqm_value==0)
250/187:
bla=array([1,2,3])
argwhere(bla==2)[0,0]

cosqm_value[where(cosqm_value==0)]
cosqm_value[where(cosqm_value==0)]
250/188:
bla=array([1,2,3])
argwhere(bla==2)[0,0]

cosqm_value[where(cosqm_value==0)]
cosqm_value[where(cosqm_value=!0)]
250/189:
bla=array([1,2,3])
argwhere(bla==2)[0,0]

cosqm_value[where(cosqm_value==0)]
cosqm_value[where(cosqm_value!=0)]
250/190:
bla=array([1,2,3])
argwhere(bla==2)[0,0]

cosqm_value[where(cosqm_value==0)]
plot(cosqm_value[where(cosqm_value!=0)])
250/191: plot(cosqm_value[where(cosqm_value!=0)])
250/192: plot(cosqm_value[where(cosqm_value!=0)],'.-')
250/193: plot(cosqm_value,'.-')
250/194:
plot(cosqm_value,'.-')
len(cosqm_value)
250/195:
plot(cosqm_value,'.-')
len(cosqm_value[where(cosqm_value!=0)])
250/196:
###FIND CLOSEST TIME VALUES FROM AOD TO COSQM

#increments for months for computing seconds
days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
#Define path from month and day of measurement on AOD
def FindClosest(array1,index):
    
    #define paths
    month=array1[0,index].month
    day=array1[0,index].day
    hour=array1[1,index].hour
        
    #make path string
    if day<9:
        pathstr='0'+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr=str(0)+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr=str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
            
    path=r'cosqm_izana/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr+'.txt'
    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array1[1]))
    for i in range(len(array1[1])):
        dates_aod_seconds[i]=days_per_month[array1[0,i].month-1]*24*3600+(array1[0,i].day-1)*24*3600+array1[1,i].hour*3600+array1[1,i].minute*60+array1[1,i].second
    
    #Download data from this day (night)
    try:
        data,dates=LoadData(path)
        lenght=len(dates[:,0])-1
        dates_cosqm_seconds=zeros(lenght)
        for i in range(lenght):
            dates_cosqm_seconds[i]=days_per_month[dates[i,0].month-1]*24*3600+(array(dates[i,0].day)-1)*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

        #find nearest time value for cosqm corresponding to aod measurement
        idx = abs(dates_cosqm_seconds-dates_aod_seconds[index]).argmin()    
        delta_t=dates_cosqm_seconds[idx]-dates_aod_seconds[index]
        i=index
        print ('delta t= ',delta_t)
        print ('----------------')
    
    except:
        delta_t=1001
        
    #correct for errors of time matching    
    if -1000<delta_t<1000:
        cosqm_value1=data[idx]
        cosqm_value2=copy(cosqm_value1)
        
        #Cloud correction
        cosqm_value2=CloudCorr(data[:,8],0.02,idx,20)
    else: 
        cosqm_value2=array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

    return cosqm_value2, delta_t
250/197:
#Load appropriate data from aod to corresponding cosqm values

indexes=arange(8000,11000)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
250/198:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array()


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
250/199:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array(0)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
250/200:
plot(cosqm_value,'.-')
len(cosqm_value[where(cosqm_value!=0)])
250/201:
plot(cosqm_value[where(cosqm_value!=0)],'.-')
len(cosqm_value[where(cosqm_value!=0)])
250/202:
plot(cosqm_value[where(cosqm_value!=0 and cosqm_value>18)],'.-')
len(cosqm_value[where(cosqm_value!=0)])
250/203:
plot(cosqm_value[where( cosqm_value>18)],'.-')
len(cosqm_value[where(cosqm_value!=0)])
250/204:
plot(cosqm_value[where(cosqm_value!=0 or cosqm_value>18)],'.-')
len(cosqm_value[where(cosqm_value!=0)])
250/205:
plot(cosqm_value[where(cosqm_value>16)],'.-')
len(cosqm_value[where(cosqm_value!=0)])
250/206:
plot(cosqm_value[where(cosqm_value>16)],'.-')
len(cosqm_value[where(cosqm_value!=0)])
print(dates_aod[0],dates_aod[-1])
250/207:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-05.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
250/208:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-06.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
250/209:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-07.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
250/210:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-08.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
250/211:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-09.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
250/212:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/06/2019-06-10.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
250/213:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/07/2019-07-05.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
250/214:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/07/2019-07-06.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
250/215:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/07/2019-07-07.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
250/216:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/07/2019-07-08.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
250/217:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-03.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
250/218:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-14.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
250/219:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-13.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
250/220:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
250/221:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-16.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
250/222:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-17.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
250/223:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-18.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
252/1:
plot(cosqm_value[where(cosqm_value>16)],'.-')
len(cosqm_value[where(cosqm_value!=0)])
print(dates_aod[0],dates_aod[-1])
252/2:
from numpy import *
from matplotlib.dates import datestr2num
from matplotlib.pyplot import *
from datetime import datetime
252/3:
from numpy import *
from matplotlib.dates import datestr2num
from matplotlib.pyplot import *
from datetime import datetime
252/4:
from numpy import *
from matplotlib.dates import datestr2num
from matplotlib.pyplot import *
from datetime import datetime
252/5:
##AOD LEVEL 1.5 (no clouds but no calib) data from aeronet for all of year 2019, all bands

#Day format changed from 06-11: full night to split at midnight

#read from columns 4 to 25 (aod 1640 to 340nm)
cols=arange(4, 26)

path='cosqm_santa_cruz/20190101_20191231_Santa_Cruz_Tenerife.lev15'
header=7

#DATA
data_aod=genfromtxt(path, delimiter=',', skip_header=header, usecols=cols)

#remove negative values (-999) and set to 0
non_negs=data_aod>=0
data_aod=non_negs*data_aod

#DATES
dates_str=genfromtxt(path, delimiter=',', skip_header=header, usecols=[0,1], dtype=str)
dates_list=[datetime.strptime(dates, '%d:%m:%Y') for dates in dates_str[:,0]]
times_list=[datetime.strptime(dates, '%H:%M:%S') for dates in dates_str[:,1]]
dates_aod=array([dates_list,times_list])

#BANDS
bands_aod=genfromtxt(path, delimiter=',', skip_header=header-1, skip_footer=len(data_aod), usecols=cols, dtype=str)

#find which bands have no data (take mean of bands and find indices diff. than 0)
means=mean(data_aod, axis=0)
non_empty_aod=array(nonzero(means))
252/6:
#COSQM Data load function, returns data and dates in tuple

def LoadData(path):
    data_server=loadtxt(path, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    dates_str=genfromtxt(path, delimiter=' ', usecols=[0,1],unpack=True,dtype='str')
    dates_list=[datetime.strptime(dates, '%Y-%m-%d') for dates in dates_str[0,:]]
    times_list=[datetime.strptime(dates, '%H:%M:%S') for dates in dates_str[1,:]]
    dates_cosqm=array([dates_list, times_list])
    dates_cosqm=swapaxes(dates_cosqm,0,1)
    return data_server, dates_cosqm
252/7:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-18.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
252/8:
###FIND CLOSEST TIME VALUES FROM AOD TO COSQM

#increments for months for computing seconds
days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
#Define path from month and day of measurement on AOD
def FindClosest(array1,index):
    
    #define paths
    month=array1[0,index].month
    day=array1[0,index].day
    hour=array1[1,index].hour
        
    #make path string
    if day<9:
        pathstr='0'+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr=str(0)+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr=str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
            
    path=r'cosqm_izana/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr+'.txt'
    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array1[1]))
    for i in range(len(array1[1])):
        dates_aod_seconds[i]=days_per_month[array1[0,i].month-1]*24*3600+(array1[0,i].day-1)*24*3600+array1[1,i].hour*3600+array1[1,i].minute*60+array1[1,i].second
    
    #Download data from this day (night)
    try:
        data,dates=LoadData(path)
        lenght=len(dates[:,0])-1
        dates_cosqm_seconds=zeros(lenght)
        for i in range(lenght):
            dates_cosqm_seconds[i]=days_per_month[dates[i,0].month-1]*24*3600+(array(dates[i,0].day)-1)*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

        #find nearest time value for cosqm corresponding to aod measurement
        idx = abs(dates_cosqm_seconds-dates_aod_seconds[index]).argmin()    
        delta_t=dates_cosqm_seconds[idx]-dates_aod_seconds[index]
        i=index
        print ('delta t= ',delta_t)
        print ('----------------')
    
    except:
        delta_t=1001
        
    #correct for errors of time matching    
    if -1000<delta_t<1000:
        cosqm_value1=data[idx]
        cosqm_value2=copy(cosqm_value1)
        
        #Cloud correction
        cosqm_value2=CloudCorr(data[:,8],0.02,idx,20)
    else: 
        cosqm_value2=array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

    return cosqm_value2, delta_t
252/9:
###FIND CLOSEST TIME VALUES FROM AOD TO COSQM

#increments for months for computing seconds
days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
#Define path from month and day of measurement on AOD
def FindClosest(array1,index):
    
    #define paths
    month=array1[0,index].month
    day=array1[0,index].day
    hour=array1[1,index].hour
        
    #make path string
    if day<9:
        pathstr='0'+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr=str(0)+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr=str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
            
    path=r'cosqm_izana/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr+'.txt'
    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array1[1]))
    for i in range(len(array1[1])):
        dates_aod_seconds[i]=days_per_month[array1[0,i].month-1]*24*3600+(array1[0,i].day-1)*24*3600+array1[1,i].hour*3600+array1[1,i].minute*60+array1[1,i].second
    
    #Download data from this day (night)
    try:
        data,dates=LoadData(path)
        lenght=len(dates[:,0])-1
        dates_cosqm_seconds=zeros(lenght)
        for i in range(lenght):
            dates_cosqm_seconds[i]=days_per_month[dates[i,0].month-1]*24*3600+(array(dates[i,0].day)-1)*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

        #find nearest time value for cosqm corresponding to aod measurement
        idx = abs(dates_cosqm_seconds-dates_aod_seconds[index]).argmin()    
        delta_t=dates_cosqm_seconds[idx]-dates_aod_seconds[index]
        i=index
        while True:
            clear_output(wait=True)
            print ('delta t= ',delta_t)
    
    except:
        delta_t=1001
        
    #correct for errors of time matching    
    if -1000<delta_t<1000:
        cosqm_value1=data[idx]
        cosqm_value2=copy(cosqm_value1)
        
        #Cloud correction
        cosqm_value2=CloudCorr(data[:,8],0.02,idx,20)
    else: 
        cosqm_value2=array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

    return cosqm_value2, delta_t
252/10:
#Load appropriate data from aod to corresponding cosqm values

indexes=arange(8000,8050)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
252/11:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-18.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
252/12:
from numpy import *
from matplotlib.dates import datestr2num
from matplotlib.pyplot import *
from datetime import datetime
252/13:
##AOD LEVEL 1.5 (no clouds but no calib) data from aeronet for all of year 2019, all bands

#Day format changed from 06-11: full night to split at midnight

#read from columns 4 to 25 (aod 1640 to 340nm)
cols=arange(4, 26)

path='cosqm_santa_cruz/20190101_20191231_Santa_Cruz_Tenerife.lev15'
header=7

#DATA
data_aod=genfromtxt(path, delimiter=',', skip_header=header, usecols=cols)

#remove negative values (-999) and set to 0
non_negs=data_aod>=0
data_aod=non_negs*data_aod

#DATES
dates_str=genfromtxt(path, delimiter=',', skip_header=header, usecols=[0,1], dtype=str)
dates_list=[datetime.strptime(dates, '%d:%m:%Y') for dates in dates_str[:,0]]
times_list=[datetime.strptime(dates, '%H:%M:%S') for dates in dates_str[:,1]]
dates_aod=array([dates_list,times_list])

#BANDS
bands_aod=genfromtxt(path, delimiter=',', skip_header=header-1, skip_footer=len(data_aod), usecols=cols, dtype=str)

#find which bands have no data (take mean of bands and find indices diff. than 0)
means=mean(data_aod, axis=0)
non_empty_aod=array(nonzero(means))
252/14:
#COSQM Data load function, returns data and dates in tuple

def LoadData(path):
    data_server=loadtxt(path, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    dates_str=genfromtxt(path, delimiter=' ', usecols=[0,1],unpack=True,dtype='str')
    dates_list=[datetime.strptime(dates, '%Y-%m-%d') for dates in dates_str[0,:]]
    times_list=[datetime.strptime(dates, '%H:%M:%S') for dates in dates_str[1,:]]
    dates_cosqm=array([dates_list, times_list])
    dates_cosqm=swapaxes(dates_cosqm,0,1)
    return data_server, dates_cosqm
252/15:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-18.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
252/16:
###FIND CLOSEST TIME VALUES FROM AOD TO COSQM

#increments for months for computing seconds
days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
#Define path from month and day of measurement on AOD
def FindClosest(array1,index):
    
    #define paths
    month=array1[0,index].month
    day=array1[0,index].day
    hour=array1[1,index].hour
        
    #make path string
    if day<9:
        pathstr='0'+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr=str(0)+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr=str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
            
    path=r'cosqm_izana/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr+'.txt'
    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array1[1]))
    for i in range(len(array1[1])):
        dates_aod_seconds[i]=days_per_month[array1[0,i].month-1]*24*3600+(array1[0,i].day-1)*24*3600+array1[1,i].hour*3600+array1[1,i].minute*60+array1[1,i].second
    
    #Download data from this day (night)
    try:
        data,dates=LoadData(path)
        lenght=len(dates[:,0])-1
        dates_cosqm_seconds=zeros(lenght)
        for i in range(lenght):
            dates_cosqm_seconds[i]=days_per_month[dates[i,0].month-1]*24*3600+(array(dates[i,0].day)-1)*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

        #find nearest time value for cosqm corresponding to aod measurement
        idx = abs(dates_cosqm_seconds-dates_aod_seconds[index]).argmin()    
        delta_t=dates_cosqm_seconds[idx]-dates_aod_seconds[index]
        i=index
        while True:
            clear_output(wait=True)
            print ('delta t= ',delta_t)
    
    except:
        delta_t=1001
        
    #correct for errors of time matching    
    if -1000<delta_t<1000:
        cosqm_value1=data[idx]
        cosqm_value2=copy(cosqm_value1)
        
        #Cloud correction
        cosqm_value2=CloudCorr(data[:,8],0.02,idx,20)
    else: 
        cosqm_value2=array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

    return cosqm_value2, delta_t
252/17:
#Load appropriate data from aod to corresponding cosqm values

indexes=arange(8000,8050)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
252/18:
#Load appropriate data from aod to corresponding cosqm values

indexes=arange(8000,8050)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
252/19:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array(0)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
252/20:
###FIND CLOSEST TIME VALUES FROM AOD TO COSQM

#increments for months for computing seconds
days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
#Define path from month and day of measurement on AOD
from IPython.display import display, clear_output
def FindClosest(array1,index):
    
    #define paths
    month=array1[0,index].month
    day=array1[0,index].day
    hour=array1[1,index].hour
        
    #make path string
    if day<9:
        pathstr='0'+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr=str(0)+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr=str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
            
    path=r'cosqm_izana/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr+'.txt'
    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array1[1]))
    for i in range(len(array1[1])):
        dates_aod_seconds[i]=days_per_month[array1[0,i].month-1]*24*3600+(array1[0,i].day-1)*24*3600+array1[1,i].hour*3600+array1[1,i].minute*60+array1[1,i].second
    
    #Download data from this day (night)
    try:
        data,dates=LoadData(path)
        lenght=len(dates[:,0])-1
        dates_cosqm_seconds=zeros(lenght)
        for i in range(lenght):
            dates_cosqm_seconds[i]=days_per_month[dates[i,0].month-1]*24*3600+(array(dates[i,0].day)-1)*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

        #find nearest time value for cosqm corresponding to aod measurement
        idx = abs(dates_cosqm_seconds-dates_aod_seconds[index]).argmin()    
        delta_t=dates_cosqm_seconds[idx]-dates_aod_seconds[index]
        i=index
        while True:
            clear_output(wait=True)
            print ('delta t= ',delta_t)
    
    except:
        delta_t=1001
        
    #correct for errors of time matching    
    if -1000<delta_t<1000:
        cosqm_value1=data[idx]
        cosqm_value2=copy(cosqm_value1)
        
        #Cloud correction
        cosqm_value2=CloudCorr(data[:,8],0.02,idx,20)
    else: 
        cosqm_value2=array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

    return cosqm_value2, delta_t
252/21:
#Load appropriate data from aod to corresponding cosqm values

indexes=arange(8000,8050)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
253/1:
from numpy import *
from matplotlib.dates import datestr2num
from matplotlib.pyplot import *
from datetime import datetime
253/2:
##AOD LEVEL 1.5 (no clouds but no calib) data from aeronet for all of year 2019, all bands

#Day format changed from 06-11: full night to split at midnight

#read from columns 4 to 25 (aod 1640 to 340nm)
cols=arange(4, 26)

path='cosqm_santa_cruz/20190101_20191231_Santa_Cruz_Tenerife.lev15'
header=7

#DATA
data_aod=genfromtxt(path, delimiter=',', skip_header=header, usecols=cols)

#remove negative values (-999) and set to 0
non_negs=data_aod>=0
data_aod=non_negs*data_aod

#DATES
dates_str=genfromtxt(path, delimiter=',', skip_header=header, usecols=[0,1], dtype=str)
dates_list=[datetime.strptime(dates, '%d:%m:%Y') for dates in dates_str[:,0]]
times_list=[datetime.strptime(dates, '%H:%M:%S') for dates in dates_str[:,1]]
dates_aod=array([dates_list,times_list])

#BANDS
bands_aod=genfromtxt(path, delimiter=',', skip_header=header-1, skip_footer=len(data_aod), usecols=cols, dtype=str)

#find which bands have no data (take mean of bands and find indices diff. than 0)
means=mean(data_aod, axis=0)
non_empty_aod=array(nonzero(means))
253/3:
#COSQM Data load function, returns data and dates in tuple

def LoadData(path):
    data_server=loadtxt(path, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    dates_str=genfromtxt(path, delimiter=' ', usecols=[0,1],unpack=True,dtype='str')
    dates_list=[datetime.strptime(dates, '%Y-%m-%d') for dates in dates_str[0,:]]
    times_list=[datetime.strptime(dates, '%H:%M:%S') for dates in dates_str[1,:]]
    dates_cosqm=array([dates_list, times_list])
    dates_cosqm=swapaxes(dates_cosqm,0,1)
    return data_server, dates_cosqm
253/4:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-18.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
253/5:
###FIND CLOSEST TIME VALUES FROM AOD TO COSQM

#increments for months for computing seconds
days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
#Define path from month and day of measurement on AOD
from IPython.display import display, clear_output
def FindClosest(array1,index):
    
    #define paths
    month=array1[0,index].month
    day=array1[0,index].day
    hour=array1[1,index].hour
        
    #make path string
    if day<9:
        pathstr='0'+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr=str(0)+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr=str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
            
    path=r'cosqm_izana/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr+'.txt'
    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array1[1]))
    for i in range(len(array1[1])):
        dates_aod_seconds[i]=days_per_month[array1[0,i].month-1]*24*3600+(array1[0,i].day-1)*24*3600+array1[1,i].hour*3600+array1[1,i].minute*60+array1[1,i].second
    
    #Download data from this day (night)
    try:
        data,dates=LoadData(path)
        lenght=len(dates[:,0])-1
        dates_cosqm_seconds=zeros(lenght)
        for i in range(lenght):
            dates_cosqm_seconds[i]=days_per_month[dates[i,0].month-1]*24*3600+(array(dates[i,0].day)-1)*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

        #find nearest time value for cosqm corresponding to aod measurement
        idx = abs(dates_cosqm_seconds-dates_aod_seconds[index]).argmin()    
        delta_t=dates_cosqm_seconds[idx]-dates_aod_seconds[index]
        i=index
        print ('delta t= ',delta_t)
    
    except:
        delta_t=1001
        
    #correct for errors of time matching    
    if -1000<delta_t<1000:
        cosqm_value1=data[idx]
        cosqm_value2=copy(cosqm_value1)
        
        #Cloud correction
        cosqm_value2=CloudCorr(data[:,8],0.02,idx,20)
    else: 
        cosqm_value2=array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

    return cosqm_value2, delta_t
253/6:
#Load appropriate data from aod to corresponding cosqm values

indexes=arange(8000,8005)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
253/7:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array(0)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/1:
from numpy import *
from matplotlib.dates import datestr2num
from matplotlib.pyplot import *
from datetime import datetime
254/2:
##AOD LEVEL 1.5 (no clouds but no calib) data from aeronet for all of year 2019, all bands

#Day format changed from 06-11: full night to split at midnight

#read from columns 4 to 25 (aod 1640 to 340nm)
cols=arange(4, 26)

path='cosqm_santa_cruz/20190101_20191231_Santa_Cruz_Tenerife.lev15'
header=7

#DATA
data_aod=genfromtxt(path, delimiter=',', skip_header=header, usecols=cols)

#remove negative values (-999) and set to 0
non_negs=data_aod>=0
data_aod=non_negs*data_aod

#DATES
dates_str=genfromtxt(path, delimiter=',', skip_header=header, usecols=[0,1], dtype=str)
dates_list=[datetime.strptime(dates, '%d:%m:%Y') for dates in dates_str[:,0]]
times_list=[datetime.strptime(dates, '%H:%M:%S') for dates in dates_str[:,1]]
dates_aod=array([dates_list,times_list])

#BANDS
bands_aod=genfromtxt(path, delimiter=',', skip_header=header-1, skip_footer=len(data_aod), usecols=cols, dtype=str)

#find which bands have no data (take mean of bands and find indices diff. than 0)
means=mean(data_aod, axis=0)
non_empty_aod=array(nonzero(means))
254/3:
#COSQM Data load function, returns data and dates in tuple

def LoadData(path):
    data_server=loadtxt(path, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    dates_str=genfromtxt(path, delimiter=' ', usecols=[0,1],unpack=True,dtype='str')
    dates_list=[datetime.strptime(dates, '%Y-%m-%d') for dates in dates_str[0,:]]
    times_list=[datetime.strptime(dates, '%H:%M:%S') for dates in dates_str[1,:]]
    dates_cosqm=array([dates_list, times_list])
    dates_cosqm=swapaxes(dates_cosqm,0,1)
    return data_server, dates_cosqm
254/4:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-18.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/5:
###FIND CLOSEST TIME VALUES FROM AOD TO COSQM

#increments for months for computing seconds
days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
#Define path from month and day of measurement on AOD
from IPython.display import display, clear_output
def FindClosest(array1,index):
    
    #define paths
    month=array1[0,index].month
    day=array1[0,index].day
    hour=array1[1,index].hour
        
    #make path string
    if day<9:
        pathstr='0'+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr=str(0)+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr=str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
            
    path=r'cosqm_izana/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr+'.txt'
    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array1[1]))
    for i in range(len(array1[1])):
        dates_aod_seconds[i]=days_per_month[array1[0,i].month-1]*24*3600+(array1[0,i].day-1)*24*3600+array1[1,i].hour*3600+array1[1,i].minute*60+array1[1,i].second
    
    #Download data from this day (night)
    try:
        data,dates=LoadData(path)
        lenght=len(dates[:,0])-1
        dates_cosqm_seconds=zeros(lenght)
        for i in range(lenght):
            dates_cosqm_seconds[i]=days_per_month[dates[i,0].month-1]*24*3600+(array(dates[i,0].day)-1)*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

        #find nearest time value for cosqm corresponding to aod measurement
        idx = abs(dates_cosqm_seconds-dates_aod_seconds[index]).argmin()    
        delta_t=dates_cosqm_seconds[idx]-dates_aod_seconds[index]
        i=index
        print ('delta t= ',delta_t)
    
    except:
        delta_t=1001
        
    #correct for errors of time matching    
    if -1000<delta_t<1000:
        cosqm_value1=data[idx]
        cosqm_value2=copy(cosqm_value1)
        
        #Cloud correction
        cosqm_value2=CloudCorr(data[:,8],0.02,idx,20)
    else: 
        cosqm_value2=array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

    return cosqm_value2, delta_t
254/6:
#Load appropriate data from aod to corresponding cosqm values

indexes=arange(8000,8005)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
254/7:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array(0)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/8:
#Load appropriate data from aod to corresponding cosqm values

indexes=arange(8000,8100)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
254/9:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array(0)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/10:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array(0)

for value in dates_aod[0:10]:
    print value


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/11:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array(0)

for value in dates_aod[0:10]:
    print (value)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/12:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array(0)

for value in dates_aod[0,0,0:10]:
    print (value)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/13:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array(0)

for value in dates_aod[0,0:10]:
    print (value)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/14:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array(0)

for value in dates_aod[0,0:10]:
    print (value.month)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/15:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array(0)

for value in dates_aod[0,0:10]:
    print (value.year)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/16:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array(0)

for value in dates_aod[0]:
    print (value.month)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/17:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array(0)

for value in dates_aod[0]:
    i=1


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/18:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array(0)

for value in dates_aod[0]:
    i=0
    month=1
    if value.month[i+1]>value.month[i]:
        moonrise_idx[i]=where(value.month[i+1])

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/19:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array(0)

for value in dates_aod[0]:
    i=0
    month=1
    if value[i+1].month>value[i].month:
        moonrise_idx[i]=where(value.month[i+1])

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/20:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array(0)

for value in dates_aod[0]:
    i=0
    month1=value[i]
    month1=month1.month
    month2=value[i+1]
    month2=month1.month
    if month2>month1:
        moonrise_idx[i]=where(value.month[i+1])

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/21:
var=1
if var<2 or ==0:
    print (var)
254/22:
var=1
if var<2 or == 0:
    print (var)
254/23:
var=1
if var<2 or var== 0:
    print (var)
254/24:
var=1
if var>2 or var== 0:
    print (var)
254/25:
var=1
if var>2 or var== 0:
    print (var)
else: print ('0')
254/26:
var=0
if var>2 or var== 0:
    print (var)
else: print ('0')
254/27:
var=0
if var>2 or var== 0:
    print (var)
else: print ('0')
254/28:
var=0
if var>2 or var==0:
    print (var)
else: print ('0')
254/29:
var=0
if var>2 or var==0:
    print (var)
else: print ('0')
254/30:
var=0
if var>2 or var==0:
    print (var)
else: print ('0')
254/31:
var=0
if var>2 or var==0:
    print (var)
    else: print ('0')
254/32:
var=0
if var>2 or var==0:
    print (var)
else: print ('0')
254/33:
var==0
if var>2 or var==0:
    print (var)
else: print ('0')
254/34:
var==0
print var
if var>2 or var==0:
    print (var)
else: print ('0')
254/35:
var==0
print (var)
if var>2 or var==0:
    print (var)
else: print ('0')
254/36:
var==0
print (var)
if var>2 or var=0:
    print (var)
else: print ('0')
254/37:
var==0
print (var)
if var>2 or var==0:
    print (var)
else: print ('0')
254/38:
var==0
print (var)
if var>2 or var==0:
    print ('1')
else: print ('0')
254/39:
var==0
if var>2 or var==0:
    print ('1')
else: print ('0')
254/40:
var==1
if var>2 or var==0:
    print ('1')
else: print ('0')
254/41:
var==3
if var>2 or var==0:
    print ('1')
else: print ('0')
254/42:
var==2
if var>2 or var==0:
    print ('1')
else: print ('0')
254/43:
var==1
if var>2 or var==0:
    print ('1')
else: print ('0')
254/44:
var=1
if var>2 or var==0:
    print ('1')
else: print ('0')
254/45:
var=0
if var>2 or var==0:
    print ('1')
else: print ('0')
254/46:
var=2
if var>2 or var==0:
    print ('1')
else: print ('0')
254/47:
var=3
if var>2 or var==0:
    print ('1')
else: print ('0')
254/48:
var=4
if var>2 or var==0:
    print ('1')
else: print ('0')
254/49:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array(0)

for value in dates_aod[0]:
    i=0
    day1=value[i]
    day1=day1.day
    day2=value[i+1]
    day2=day2.day
    if day2>day1 or day2<0:
        moonrise_idx[i]=where(value.month[i+1])

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/50:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array(0)

for value in dates_aod[0]:
    i=0
    print (value)
    day1=value[i]
    day1=day1.day
    day2=value[i+1]
    day2=day2.day
    if day2>day1 or day2<0:
        moonrise_idx[i]=where(value.month[i+1])

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/51:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array(0)

for value in dates_aod[0]:
    i=0
    print (type(value))
    day1=value[i]
    day1=day1.day
    day2=value[i+1]
    day2=day2.day
    if day2>day1 or day2<0:
        moonrise_idx[i]=where(value.month[i+1])

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/52:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array(0)

for value in dates_aod[0]:
    i=0
    print (value.day))
    day1=value[i]
    day1=day1.day
    day2=value[i+1]
    day2=day2.day
    if day2>day1 or day2<0:
        moonrise_idx[i]=where(value.month[i+1])

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/53:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array(0)

for value in dates_aod[0]:
    i=0
    print (value.day)
    day1=value[i]
    day1=day1.day
    day2=value[i+1]
    day2=day2.day
    if day2>day1 or day2<0:
        moonrise_idx[i]=where(value.month[i+1])

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/54: dates_aod[0,0]
254/55: dates_aod[0,0].day
254/56:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array(0)

for i in range (len(dates_aod[0])):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=where(value.month[i+1])

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/57:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array(0)

for i in range (len(dates_aod[0])):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=where(day2)

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/58:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array(0)

for i in range (len(dates_aod[0])):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/59:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array(0,100)

for i in range (len(dates_aod[0])):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/60:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array((0,100))

for i in range (len(dates_aod[0])):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/61:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array((len(dates_aod[0])))

for i in range (len(dates_aod[0])):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/62:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array((len(dates_aod[0]),0))

for i in range (len(dates_aod[0])):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/63:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=array((len(dates_aod[0]),0,0))

for i in range (len(dates_aod[0])):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/64:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros((len(dates_aod[0]),))

for i in range (len(dates_aod[0])):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/65:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros((len(dates_aod[0])+1))

for i in range (len(dates_aod[0])):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/66:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros((len(dates_aod[0])+1))

for i in range (len(dates_aod[0])):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/67:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros((len(dates_aod[0])+2))

for i in range (len(dates_aod[0])):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/68:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros((len(dates_aod[0])+2))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/69:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros((len(dates_aod[0])+1))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/70:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros((len(dates_aod[0])))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/71:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros((len(dates_aod[0]))-10)

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/72:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(0)

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/73:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros()

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/74:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(1000)

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/75:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(1024)

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/76:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(1025)

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/77:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(2000)

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/78:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/79:
###FIND CLOSEST TIME VALUES FROM AOD TO COSQM

#increments for months for computing seconds
days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
#Define path from month and day of measurement on AOD
from IPython.display import display, clear_output
def FindClosest(array1,index):
    
    #define paths
    month=array1[0,index].month
    day=array1[0,index].day
    hour=array1[1,index].hour
        
    #make path string
    if day<9:
        pathstr='0'+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr=str(0)+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr=str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
            
    path=r'cosqm_izana/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr+'.txt'
    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array1[1]))
    for i in range(len(array1[1])):
        dates_aod_seconds[i]=days_per_month[array1[0,i].month-1]*24*3600+(array1[0,i].day-1)*24*3600+array1[1,i].hour*3600+array1[1,i].minute*60+array1[1,i].second
    
    #Download data from this day (night)
    try:
        data,dates=LoadData(path)
        lenght=len(dates[:,0])-1
        dates_cosqm_seconds=zeros(lenght)
        for i in range(lenght):
            dates_cosqm_seconds[i]=days_per_month[dates[i,0].month-1]*24*3600+(array(dates[i,0].day)-1)*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

        #find nearest time value for cosqm corresponding to aod measurement
        idx = abs(dates_cosqm_seconds-dates_aod_seconds[index]).argmin()    
        delta_t=dates_cosqm_seconds[idx]-dates_aod_seconds[index]
        i=index
        #print ('delta t= ',delta_t)
    
    except:
        delta_t=1001
        
    #correct for errors of time matching    
    if -1000<delta_t<1000:
        cosqm_value1=data[idx]
        cosqm_value2=copy(cosqm_value1)
        
        #Cloud correction
        cosqm_value2=CloudCorr(data[:,8],0.02,idx,20)
    else: 
        cosqm_value2=array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

    return cosqm_value2, delta_t
254/80:
#Load appropriate data from aod to corresponding cosqm values

indexes=arange(8000,8500)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
254/81:
###FIND CLOSEST TIME VALUES FROM AOD TO COSQM

#increments for months for computing seconds
days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
#Define path from month and day of measurement on AOD
from IPython.display import display, clear_output
def FindClosest(array1,index):
    
    #define paths
    month=array1[0,index].month
    day=array1[0,index].day
    hour=array1[1,index].hour
        
    #make path string
    if day<9:
        pathstr='0'+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr=str(0)+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr=str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
            
    path=r'cosqm_izana/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr+'.txt'
    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array1[1]))
    for i in range(len(array1[1])):
        dates_aod_seconds[i]=days_per_month[array1[0,i].month-1]*24*3600+(array1[0,i].day-1)*24*3600+array1[1,i].hour*3600+array1[1,i].minute*60+array1[1,i].second
    
    #Download data from this day (night)
    try:
        data,dates=LoadData(path)
        lenght=len(dates[:,0])-1
        dates_cosqm_seconds=zeros(lenght)
        for i in range(lenght):
            dates_cosqm_seconds[i]=days_per_month[dates[i,0].month-1]*24*3600+(array(dates[i,0].day)-1)*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

        #find nearest time value for cosqm corresponding to aod measurement
        idx = abs(dates_cosqm_seconds-dates_aod_seconds[index]).argmin()    
        delta_t=dates_cosqm_seconds[idx]-dates_aod_seconds[index]
        i=index
        #print ('delta t= ',delta_t)
    
    except:
        delta_t=1001
        
    #correct for errors of time matching    
    if -1000<delta_t<1000:
        cosqm_value1=data[idx]
        cosqm_value2=copy(cosqm_value1)
        
        #Cloud correction
        cosqm_value2=CloudCorr(data[:,8],0.02,idx,20)
    else: 
        cosqm_value2=array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

    return cosqm_value2, delta_t
254/82:
#Load appropriate data from aod to corresponding cosqm values

indexes=arange(8000,8500)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
254/83:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/84:
from numpy import *
from matplotlib.dates import datestr2num
from matplotlib.pyplot import *
from datetime import datetime
254/85:
##AOD LEVEL 1.5 (no clouds but no calib) data from aeronet for all of year 2019, all bands

#Day format changed from 06-11: full night to split at midnight

#read from columns 4 to 25 (aod 1640 to 340nm)
cols=arange(4, 26)

path='cosqm_santa_cruz/20190101_20191231_Santa_Cruz_Tenerife.lev15'
header=7

#DATA
data_aod=genfromtxt(path, delimiter=',', skip_header=header, usecols=cols)

#remove negative values (-999) and set to 0
non_negs=data_aod>=0
data_aod=non_negs*data_aod

#DATES
dates_str=genfromtxt(path, delimiter=',', skip_header=header, usecols=[0,1], dtype=str)
dates_list=[datetime.strptime(dates, '%d:%m:%Y') for dates in dates_str[:,0]]
times_list=[datetime.strptime(dates, '%H:%M:%S') for dates in dates_str[:,1]]
dates_aod=array([dates_list,times_list])

#BANDS
bands_aod=genfromtxt(path, delimiter=',', skip_header=header-1, skip_footer=len(data_aod), usecols=cols, dtype=str)

#find which bands have no data (take mean of bands and find indices diff. than 0)
means=mean(data_aod, axis=0)
non_empty_aod=array(nonzero(means))
254/86:
#COSQM Data load function, returns data and dates in tuple

def LoadData(path):
    data_server=loadtxt(path, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    dates_str=genfromtxt(path, delimiter=' ', usecols=[0,1],unpack=True,dtype='str')
    dates_list=[datetime.strptime(dates, '%Y-%m-%d') for dates in dates_str[0,:]]
    times_list=[datetime.strptime(dates, '%H:%M:%S') for dates in dates_str[1,:]]
    dates_cosqm=array([dates_list, times_list])
    dates_cosqm=swapaxes(dates_cosqm,0,1)
    return data_server, dates_cosqm
254/87:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-18.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/88:
###FIND CLOSEST TIME VALUES FROM AOD TO COSQM

#increments for months for computing seconds
days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
#Define path from month and day of measurement on AOD
from IPython.display import display, clear_output
def FindClosest(array1,index):
    
    #define paths
    month=array1[0,index].month
    day=array1[0,index].day
    hour=array1[1,index].hour
        
    #make path string
    if day<9:
        pathstr='0'+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr=str(0)+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr=str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
            
    path=r'cosqm_izana/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr+'.txt'
    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array1[1]))
    for i in range(len(array1[1])):
        dates_aod_seconds[i]=days_per_month[array1[0,i].month-1]*24*3600+(array1[0,i].day-1)*24*3600+array1[1,i].hour*3600+array1[1,i].minute*60+array1[1,i].second
    
    #Download data from this day (night)
    try:
        data,dates=LoadData(path)
        lenght=len(dates[:,0])-1
        dates_cosqm_seconds=zeros(lenght)
        for i in range(lenght):
            dates_cosqm_seconds[i]=days_per_month[dates[i,0].month-1]*24*3600+(array(dates[i,0].day)-1)*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

        #find nearest time value for cosqm corresponding to aod measurement
        idx = abs(dates_cosqm_seconds-dates_aod_seconds[index]).argmin()    
        delta_t=dates_cosqm_seconds[idx]-dates_aod_seconds[index]
        i=index
        #print ('delta t= ',delta_t)
    
    except:
        delta_t=1001
        
    #correct for errors of time matching    
    if -1000<delta_t<1000:
        cosqm_value1=data[idx]
        cosqm_value2=copy(cosqm_value1)
        
        #Cloud correction
        cosqm_value2=CloudCorr(data[:,8],0.02,idx,20)
    else: 
        cosqm_value2=array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

    return cosqm_value2, delta_t
254/89:
#Load appropriate data from aod to corresponding cosqm values

indexes=arange(8000,8500)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
254/90:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print (moonrise_idx)


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/91:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print(' '.join(moonrise_idx))


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/92:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print str(moonrise_idx)[1:-1]  


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/93:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print (str(moonrise_idx)[1:-1] ) 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[array(where(cosqm_value>0))[0]+8000,2],cosqm_value[where(cosqm_value>0)],'.')
254/94:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

plot (moonrise_idx) 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx+8000,cosqm_value[where(cosqm_value>0)],'.')
254/95:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

plot (moonrise_idx) 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
#plot(data_aod[moonrise_idx+8000,cosqm_value[where(cosqm_value>0)],'.')
254/96:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

plot (moonrise_idx,'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
#plot(data_aod[moonrise_idx+8000,cosqm_value[where(cosqm_value>0)],'.')
254/97:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

len(moonrise_idx)
plot (moonrise_idx,'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
#plot(data_aod[moonrise_idx+8000,cosqm_value[where(cosqm_value>0)],'.')
254/98:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2<0:
        moonrise_idx[i]=i

print(len(moonrise_idx))
plot (moonrise_idx,'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
#plot(data_aod[moonrise_idx+8000,cosqm_value[where(cosqm_value>0)],'.')
254/99:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

print(len(moonrise_idx))
plot (moonrise_idx,'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
#plot(data_aod[moonrise_idx+8000,cosqm_value[where(cosqm_value>0)],'.')
254/100:
day1=5
day2=6
if day2>day1 or day2-day1<0:
    print(1)
254/101:
day1=5
day2=6
if day2>day1 or day2-day1<0:
    print(1)
else:print(0)
254/102:
day1=5
day2=4
if day2>day1 or day2-day1<0:
    print(1)
else:print(0)
254/103:
day1=31
day2=1
if day2>day1 or day2-day1<0:
    print(1)
else:print(0)
254/104:
day1=4
day2=4
if day2>day1 or day2-day1<0:
    print(1)
else:print(0)
254/105:
day1=4
day2=5
if day2>day1 or day2-day1<0:
    print(1)
else:print(0)
254/106:
day1=5
day2=5
if day2>day1 or day2-day1<0:
    print(1)
else:print(0)
254/107:
day1=31
day2=1
if day2>day1 or day2-day1<0:
    print(1)
else:print(0)
254/108:
day1=7
day2=15
if day2>day1 or day2-day1<0:
    print(1)
else:print(0)
254/109:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

print(len(moonrise_idx))
plot (moonrise_idx[where(moonrise_idx>0)],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
#plot(data_aod[moonrise_idx+8000,cosqm_value[where(cosqm_value>0)],'.')
254/110:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

print(len(moonrise_idx))
plot (moonrise_idx[where(moonrise_idx>0)],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx+8000,cosqm_value[where(cosqm_value>0)],'.')
254/111:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


plot (moonrise_idx[where(moonrise_idx>0)],'.') 
print(moonrise_idx)

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx+8000,cosqm_value[where(cosqm_value>0)],'.')
254/112:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


plot (moonrise_idx[where(moonrise_idx>0)],'.') 
print(moonrise_idx)

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx+8000],cosqm_value[where(cosqm_value>0)],'.')
254/113:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


plot (moonrise_idx[where(moonrise_idx>0)],'.') 
print(moonrise_idx+8000)

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx+8000],cosqm_value[where(cosqm_value>0)],'.')
254/114:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

moonrise_idx=moonrise_idx[where(moonrise_idx>0)]
plot (moonrise_idx[where(moonrise_idx>0)],'.') 
print(moonrise_idx+8000)

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx+8000],cosqm_value[where(cosqm_value>0)],'.')
254/115:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

moonrise_idx=moonrise_idx[where(moonrise_idx>0)]
plot (moonrise_idx[where(moonrise_idx>0)],'.') 
print(moonrise_idx)

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx+8000],cosqm_value[where(cosqm_value>0)],'.')
254/116:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

moonrise_idx=moonrise_idx[where(moonrise_idx>0)]
plot (moonrise_idx[where(moonrise_idx>0)],'.') 
print(moonrise_idx)

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[where(cosqm_value>0)],'.')
254/117:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

moonrise_idx=moonrise_idx[where(moonrise_idx>0)]
plot (moonrise_idx[where(moonrise_idx>0)],'.') 
print(moonrise_idx)

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx>=8000 and moonrise_idx<=8500],cosqm_value[moonrise_idx>=8000 and moonrise_idx<=8500],'.')
254/118:
#Load appropriate data from aod to corresponding cosqm values
start=8000
stop=8500

indexes=arange(start,stop)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
254/119:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

moonrise_idx=moonrise_idx[where(moonrise_idx>0)]
moonrise_idx=
plot (moonrise_idx[where(moonrise_idx>0)],'.') 
print(moonrise_idx)

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/120:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

moonrise_idx=moonrise_idx[where(moonrise_idx>0)]
moonrise_idx=moonrise_idx(where(moonrise_idx>=start and <=stop))
plot (moonrise_idx[where(moonrise_idx>0)],'.') 
print(moonrise_idx)

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/121:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

moonrise_idx=moonrise_idx[where(moonrise_idx>0)]
moonrise_idx=moonrise_idx(where(moonrise_idx>=start and moonrise_idx<=stop))
plot (moonrise_idx[where(moonrise_idx>0)],'.') 
print(moonrise_idx)

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/122:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

print(moonrise_idx)        
moonrise_idx=moonrise_idx[where(moonrise_idx>0)]
moonrise_idx=moonrise_idx(where(moonrise_idx>=start and moonrise_idx<=stop))
plot (moonrise_idx[where(moonrise_idx>0)],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/123:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

print(shape(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>0)]
moonrise_idx=moonrise_idx(where(moonrise_idx>=start and moonrise_idx<=stop))
plot (moonrise_idx[where(moonrise_idx>0)],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/124:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

print(shape(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>0)]
moonrise_idx=moonrise_idx(where(moonrise_idx>=start))
plot (moonrise_idx[where(moonrise_idx>0)],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/125:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

print(shape(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>0)]
moonrise_idx=where(moonrise_idx>=start)
plot (moonrise_idx[where(moonrise_idx>0)],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/126:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>0)]
moonrise_idx=where(moonrise_idx>=start)
plot (moonrise_idx[where(moonrise_idx>0)],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/127:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>0)]
print(where(moonrise_idx>=start))
plot (moonrise_idx[where(moonrise_idx>0)],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/128:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>0)]
print(where(moonrise_idx<=stop))
plot (moonrise_idx[where(moonrise_idx>0)],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/129:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

    
print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>0)]
print(start)
print(where(moonrise_idx<=stop))
plot (moonrise_idx[where(moonrise_idx>0)],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/130:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

    
print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>0)]
print(stop)
print(where(moonrise_idx<=stop))
plot (moonrise_idx[where(moonrise_idx>0)],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/131:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

    
print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>0)]
print(moonrise_idxwhere(moonrise_idx<=stop))
plot (moonrise_idx[where(moonrise_idx>0)],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/132:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

    
print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>0)]
print(moonrise_idx(where(moonrise_idx<=stop)))
plot (moonrise_idx[where(moonrise_idx>0)],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/133:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

    
print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>0)]
print(moonrise_idx(where(moonrise_idx<stop)))
plot (moonrise_idx[where(moonrise_idx>0)],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/134:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

    
print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>0)]
moonrise_idx=moonrise_idx(where(moonrise_idx<stop))
print(moonrise_idx(where(moonrise_idx<stop)))
plot (moonrise_idx[where(moonrise_idx>0)],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/135:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

    
print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx<0)]
moonrise_idx=moonrise_idx(where(moonrise_idx<stop))
print(moonrise_idx(where(moonrise_idx<stop)))
plot (moonrise_idx[where(moonrise_idx>0)],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/136:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

    
print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx<0)]
moonrise_idx=moonrise_idx(where(moonrise_idx<stop))
print(moonrise_idx(where(moonrise_idx<stop)))
plot (moonrise_idx[where(moonrise_idx>0)],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/137:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

    
print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx<0)]
moonrise_idx=moonrise_idx(where(moonrise_idx<100))
print(moonrise_idx(where(moonrise_idx<stop)))
plot (moonrise_idx[where(moonrise_idx>0)],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/138:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

    
print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx<0)]
print(moonrise_idx)
moonrise_idx=moonrise_idx(where(moonrise_idx<100))
print(moonrise_idx(where(moonrise_idx<stop)))
plot (moonrise_idx[where(moonrise_idx>0)],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/139:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

    
print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>0)]
print(moonrise_idx)
moonrise_idx=moonrise_idx(where(moonrise_idx<100))
print(moonrise_idx(where(moonrise_idx<stop)))
plot (moonrise_idx[where(moonrise_idx>0)],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/140:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

    
print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>0)]
print(moonrise_idx)
print(moonrise_idx(where(moonrise_idx<stop)))
plot (moonrise_idx[where(moonrise_idx>0)],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/141:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

    
print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>10)]
print(moonrise_idx)
print(moonrise_idx(where(moonrise_idx<stop)))
plot (moonrise_idx[where(moonrise_idx>0)],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/142:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

    
print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>100)]
print(moonrise_idx)
print(moonrise_idx(where(moonrise_idx<stop)))
plot (moonrise_idx[where(moonrise_idx>0)],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/143:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

    
print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>0)]
print(moonrise_idx)
print(moonrise_idx(where(moonrise_idx<stop)))
plot (moonrise_idx[where(moonrise_idx>0)],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/144:
bla=array([1,2,3])
where(bla=2)
254/145:
bla=array([1,2,3])
where(bla==2)
254/146:
bla=array([1,2,3])
argwhere(bla==2)
254/147:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

    
print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>0)]
print(moonrise_idx)
print(moonrise_idx(where(moonrise_idx<stop))[0])
plot (moonrise_idx[where(moonrise_idx>0)],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/148:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

    
print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>0)[0]]
print(moonrise_idx)
print(moonrise_idx(where(moonrise_idx<stop))[0])
plot (moonrise_idx[where(moonrise_idx>0)][0],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/149:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

    
print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>0)[0]]
print(moonrise_idx)
print(moonrise_idx(where(moonrise_idx<stop)[0]))
plot (moonrise_idx[where(moonrise_idx>0)][0],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/150:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

    
print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>0)[0]]
print(moonrise_idx)
print(moonrise_idx(argwhere(moonrise_idx<stop)[0]))
plot (moonrise_idx[where(moonrise_idx>0)][0],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/151:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

    
print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>0)[0]]
print(moonrise_idx)
print(moonrise_idx(argwhere(moonrise_idx<=stop)[0]))
plot (moonrise_idx[where(moonrise_idx>0)][0],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/152:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

    
print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>0)[0]]
print(moonrise_idx)
print(moonrise_idx(argwhere(moonrise_idx==stop)[0]))
plot (moonrise_idx[where(moonrise_idx>0)][0],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/153:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

    
print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>0)[0]]
print(moonrise_idx)
print(moonrise_idx(argwhere(moonrise_idx<stop)[0]))
plot (moonrise_idx[where(moonrise_idx>0)][0],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/154:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

    
print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>0)[0]]
print(moonrise_idx)
print(moonrise_idx[argwhere(moonrise_idx<stop)]
plot (moonrise_idx[where(moonrise_idx>0)][0],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/155:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i

    
print(type(moonrise_idx))
moonrise_idx=moonrise_idx[where(moonrise_idx>0)[0]]
print(moonrise_idx)
print(moonrise_idx[argwhere(moonrise_idx<stop)])
plot (moonrise_idx[where(moonrise_idx>0)][0],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/156:
bla=array([1,2,3,2,6,7,8,9])
argwhere(bla<7 and bla>2)
254/157:
bla=array([1,2,3,2,6,7,8,9])
argwhere(bla[0]<7 and bla[0]>2)
254/158:
bla=array([1,2,3,2,6,7,8,9])
print(argwhere(bla[0]<7 and bla[0]>2))
254/159:
bla=array([1,2,3,2,6,7,8,9])
print(argwhere(bla[0]<7 and bla[0]>2)[0])
254/160:
bla=array([1,2,3,2,6,7,8,9])
print(argwhere(bla<7 and bla>2))
254/161:
bla=array([1,2,3,2,6,7,8,9])
print(argwhere((bla<7) and (bla>2)))
254/162:
bla=array([1,2,3,2,6,7,8,9])
print(argwhere((bla<7) & (bla>2)))
254/163:
bla=array([1,2,3,2,6,7,8,9])
print(type(argwhere((bla<7) & (bla>2))))
254/164:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=moonrise_idx[where((moonrise_idx>start)&(moonrise_idx<stop))]
plot (moonrise_idx[where(moonrise_idx+8000>8000 and )][0],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/165:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=moonrise_idx[where((moonrise_idx>start)&(moonrise_idx<stop))]
plot (moonrise_idx[where(moonrise_idx][0],'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/166:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=moonrise_idx[where((moonrise_idx>start)&(moonrise_idx<stop))]
plot (moonrise_idx),'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/167:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=moonrise_idx[where((moonrise_idx>start)&(moonrise_idx<stop))]
plot (moonrise_idx,'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/168:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=moonrise_idx[where((moonrise_idx>start)&(moonrise_idx<stop))]+start
plot (moonrise_idx,'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/169:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=moonrise_idx[where((moonrise_idx>start)&(moonrise_idx<stop))]
plot (moonrise_idx,'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/170:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=moonrise_idx[where((moonrise_idx>start)&(moonrise_idx<stop))]+start
plot (moonrise_idx,'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[list(moonrise_idx)],cosqm_value[list(moonrise_idx)],'.')
254/171:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=moonrise_idx[where((moonrise_idx>start)&(moonrise_idx<stop))]+start
plot (moonrise_idx+8000,'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/172:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=moonrise_idx[where((moonrise_idx>start)&(moonrise_idx<stop))]+start
print (moonrise_idx)
plot (moonrise_idx,'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/173:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start
print (moonrise_idx)
plot (moonrise_idx,'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/174:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=moonrise_idx[where((moonrise_idx>=0)&(moonrise_idx<stop-start))]+start
print (moonrise_idx)
plot (moonrise_idx,'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/175:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start
print (moonrise_idx)
plot (moonrise_idx,'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/176:
from numpy import *
from matplotlib.dates import datestr2num
from matplotlib.pyplot import *
style.use(['dark_background'])
from datetime import datetime
254/177:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start
print (moonrise_idx)
plot (moonrise_idx,'.') 


#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/178:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start
print (moonrise_idx)
plot (moonrise_idx,'.') 
print(data_aod[moonrise_idx])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/179:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start
print (moonrise_idx)
plot (moonrise_idx,'.') 
#print(data_aod[moonrise_idx])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/180:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start
print (moonrise_idx)
plot (moonrise_idx,'.') 
#print(data_aod[moonrise_idx])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx[0]],cosqm_value[moonrise_idx],'.')
254/181:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start
print (moonrise_idx)
plot (moonrise_idx,'.') 
#print(data_aod[moonrise_idx])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx[0]],cosqm_value[moonrise_idx[0]],'.')
254/182:
bla=array([1,2,3,2,6,7,8,9])
bla1=array([0,1,2])
bla[bla1]
254/183:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=int(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start)
print (moonrise_idx)
plot (moonrise_idx,'.')
#print(data_aod[moonrise_idx])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/184:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=int(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))])+start
print (moonrise_idx)
plot (moonrise_idx,'.')
#print(data_aod[moonrise_idx])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/185:
bla=array([1,2,3,2,6,7,8,9])
bla1=array([0.,1.,2.])
bla[bla1]
254/186:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (moonrise_idx)
plot (moonrise_idx,'.')
#print(data_aod[moonrise_idx])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/187:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (moonrise_idx)
plot (moonrise_idx,'.')
#print(data_aod[moonrise_idx])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/188:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (moonrise_idx)
#plot (moonrise_idx,'.')
#print(data_aod[moonrise_idx])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/189:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (moonrise_idx)
#plot (moonrise_idx,'.')
#print(data_aod[moonrise_idx])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],'.')
254/190:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (moonrise_idx)
#plot (moonrise_idx,'.')
#print(data_aod[moonrise_idx])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx],'.')
254/191:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (moonrise_idx)
#plot (moonrise_idx,'.')
#print(data_aod[moonrise_idx])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx-8000],'.')
254/192:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (moonrise_idx)

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[moonrise_idx],cosqm_value[moonrise_idx-8000],'.')
254/193:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (moonrise_idx)

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[cosqm_value_idx+8000],cosqm_value[cosqm_value_idx],'.')
254/194:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (moonrise_idx)

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[cosqm_value_idx+8000],cosqm_value[cosqm_value_idx],'.')
254/195:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (moonrise_idx)

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print (cosqm_value_idx)

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[cosqm_value_idx+8000],cosqm_value[cosqm_value_idx],'.')
254/196:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (moonrise_idx)

cosqm_value_idx=where(cosqm_value[moonrise_idx]>0)[0]
print (cosqm_value_idx)

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[cosqm_value_idx+8000],cosqm_value[cosqm_value_idx],'.')
254/197:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (moonrise_idx)

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print (cosqm_value_idx)

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[cosqm_value_idx+8000],cosqm_value[cosqm_value_idx],'.')
254/198:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (moonrise_idx)

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print (cosqm_value[cosqm_value_idx])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[cosqm_value_idx+8000],cosqm_value[cosqm_value_idx],'.')
254/199:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (moonrise_idx)

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print (cosqm_value[where(cosqm_value[cosqm_value_idx]>0)])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[cosqm_value_idx+8000],cosqm_value[cosqm_value_idx],'.')
254/200:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (moonrise_idx)

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print (cosqm_value[where(cosqm_value[cosqm_value_idx]>0)])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[cosqm_value_idx+8000],cosqm_value[cosqm_value_idx],'.')
254/201:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (moonrise_idx)

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print (cosqm_value[where(cosqm_value[cosqm_value_idx]>1)])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[cosqm_value_idx+8000],cosqm_value[cosqm_value_idx],'.')
254/202:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (moonrise_idx)

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print (cosqm_value[where(cosqm_value[cosqm_value_idx]==0)])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[cosqm_value_idx+8000],cosqm_value[cosqm_value_idx],'.')
254/203:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (moonrise_idx)

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print (cosqm_value[where(cosqm_value[cosqm_value_idx]==0-1)])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[cosqm_value_idx+8000],cosqm_value[cosqm_value_idx],'.')
254/204:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (moonrise_idx)

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print (cosqm_value[where(cosqm_value[cosqm_value_idx]==-1)])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[cosqm_value_idx+8000],cosqm_value[cosqm_value_idx],'.')
254/205:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (moonrise_idx)

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print (cosqm_value[where(cosqm_value[cosqm_value_idx]==0)-1])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[cosqm_value_idx+8000],cosqm_value[cosqm_value_idx],'.')
254/206:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (moonrise_idx)

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print (cosqm_value[where(cosqm_value[cosqm_value_idx]==0)])

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[cosqm_value_idx+8000],cosqm_value[cosqm_value_idx],'.')
254/207:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (moonrise_idx)

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[cosqm_value_idx+8000],cosqm_value[cosqm_value_idx],'.')
254/208:
#Load appropriate data from aod to corresponding cosqm values
start=8000
stop=11400

indexes=arange(start,stop)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
254/209:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (moonrise_idx)

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[cosqm_value_idx+8000],cosqm_value[cosqm_value_idx],'.')
254/210:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[cosqm_value_idx+8000],cosqm_value[cosqm_value_idx],'.')
254/211:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[cosqm_value_idx+8000,15],cosqm_value[cosqm_value_idx],'.')
254/212:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[cosqm_value_idx+8000,2],cosqm_value[cosqm_value_idx],'.')
254/213:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[cosqm_value_idx+8000,3],cosqm_value[cosqm_value_idx],'.')
254/214:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[cosqm_value_idx+8000,:],cosqm_value[cosqm_value_idx],'.')
254/215:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data[cosqm_value_idx+8000,:],cosqm_value[cosqm_value_idx],'.')
254/216:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data[cosqm_value_idx+8000],cosqm_value[cosqm_value_idx],'.')
254/217:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data[nonzeros(cosqm_value)+8000],cosqm_value[nonzeros(cosqm_value)],'.')
254/218:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data[nonzero(cosqm_value)+8000],cosqm_value[nonzero(cosqm_value)],'.')
254/219:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data[nonzero(cosqm_value)[0]+8000],cosqm_value[nonzero(cosqm_value)],'.')
254/220:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data[nonzero(cosqm_value)[0]+8000],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/221:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data[nonzero(cosqm_value)+8000],cosqm_value[nonzero(cosqm_value),'.')
254/222:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data[nonzero(cosqm_value)+8000],cosqm_value[nonzero(cosqm_value)],'.')
254/223:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(nonzero(cosqm_value))

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data[nonzero(cosqm_value)+8000],cosqm_value[nonzero(cosqm_value)],'.')
254/224:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(type(nonzero(cosqm_value)))

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data[nonzero(cosqm_value)+8000],cosqm_value[nonzero(cosqm_value)],'.')
254/225:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)))

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data[nonzero(cosqm_value)+8000],cosqm_value[nonzero(cosqm_value)],'.')
254/226:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data[nonzero(cosqm_value)+8000],cosqm_value[nonzero(cosqm_value)],'.')
254/227:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0,0]))

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data[nonzero(cosqm_value)+8000],cosqm_value[nonzero(cosqm_value)],'.')
254/228:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0][0]))

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data[nonzero(cosqm_value)+8000],cosqm_value[nonzero(cosqm_value)],'.')
254/229:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0][1]))

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data[nonzero(cosqm_value)+8000],cosqm_value[nonzero(cosqm_value)],'.')
254/230:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data[nonzero(cosqm_value)+8000],cosqm_value[nonzero(cosqm_value)],'.')
254/231:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data[nonzero(cosqm_value)[0]+8000],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/232:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[nonzero(cosqm_value)[0]+8000],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/233:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[nonzero(cosqm_value)[0]+8000,2],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/234:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[nonzero(cosqm_value)[0]+8000,17],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/235:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[nonzero(cosqm_value)[0]+8000,15],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/236:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[nonzero(cosqm_value)[0]+8000,10],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/237:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[nonzero(cosqm_value)[0]+8000,12],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/238:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[nonzero(cosqm_value)[0]+8000,3],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/239:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))

#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[nonzero(cosqm_value)[0]+8000,5],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/240:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzeros(data_aod[0][0,5])
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[nonzero(cosqm_value)[0]+8000,5],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/241:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzeros(data_aod[0][0,:])
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[nonzero(cosqm_value)[0]+8000,5],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/242:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzeros(data_aod[0][0])
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[nonzero(cosqm_value)[0]+8000,5],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/243:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzeros(data_aod[0])
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[nonzero(cosqm_value)[0]+8000,5],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/244:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzeros(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[nonzero(cosqm_value)[0]+8000,5],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/245:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
plot(data_aod[nonzero(cosqm_value)[0]+8000,5],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/246:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
for idx in aod_idx:
    plot(data_aod[nonzero(cosqm_value)[0]+8000,idx],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/247:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
for idx in aod_idx:
    print(idx)
    plot(data_aod[nonzero(cosqm_value)[0]+8000,idx],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/248:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
for idx in aod_idx:
    print(idx[0])
    plot(data_aod[nonzero(cosqm_value)[0]+8000,idx],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/249:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
for idx in aod_idx:
    print(idx[1])
    plot(data_aod[nonzero(cosqm_value)[0]+8000,idx],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/250:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
for idx in aod_idx[0]:
    print(idx)
    plot(data_aod[nonzero(cosqm_value)[0]+8000,idx],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/251:
###FIND CLOSEST TIME VALUES FROM AOD TO COSQM

#increments for months for computing seconds
days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
#Define path from month and day of measurement on AOD
from IPython.display import display, clear_output
def FindClosest(array1,index):
    
    #define paths
    month=array1[0,index].month
    day=array1[0,index].day
    hour=array1[1,index].hour
        
    #make path string
    if day<9:
        pathstr='0'+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr=str(0)+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr=str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
            
    path=r'cosqm_izana/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr+'.txt'
    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array1[1]))
    for i in range(len(array1[1])):
        dates_aod_seconds[i]=days_per_month[array1[0,i].month-1]*24*3600+(array1[0,i].day-1)*24*3600+array1[1,i].hour*3600+array1[1,i].minute*60+array1[1,i].second
    
    #Download data from this day (night)
    try:
        data,dates=LoadData(path)
        lenght=len(dates[:,0])-1
        dates_cosqm_seconds=zeros(lenght)
        for i in range(lenght):
            dates_cosqm_seconds[i]=days_per_month[dates[i,0].month-1]*24*3600+(array(dates[i,0].day)-1)*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

        #find nearest time value for cosqm corresponding to aod measurement
        idx = abs(dates_cosqm_seconds-dates_aod_seconds[index]).argmin()    
        delta_t=dates_cosqm_seconds[idx]-dates_aod_seconds[index]
        i=index
        #print ('delta t= ',delta_t)
    
    except:
        delta_t=1001
        
    #correct for errors of time matching    
    if -1000<delta_t<1000:
        cosqm_value1=data[idx]
        cosqm_value2=copy(cosqm_value1)
        
        #Cloud correction
        cosqm_value2=CloudCorr(data[:,8],0.01,idx,20)
    else: 
        cosqm_value2=array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

    return cosqm_value2, delta_t
254/252:
#Load appropriate data from aod to corresponding cosqm values
start=8000
stop=10000

indexes=arange(start,stop)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
254/253:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction
for idx in aod_idx[0]:
    print(idx)
    plot(data_aod[nonzero(cosqm_value)[0]+8000,idx],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/254:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,idx[0]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/255:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/256:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0,0]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/257:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][0]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/258:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][1]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/259:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/260:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][3]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/261:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][4]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/262:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][5]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/263:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][6]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/264:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][5]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/265:
###FIND CLOSEST TIME VALUES FROM AOD TO COSQM

#increments for months for computing seconds
days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
#Define path from month and day of measurement on AOD
from IPython.display import display, clear_output
def FindClosest(array1,index):
    
    #define paths
    month=array1[0,index].month
    day=array1[0,index].day
    hour=array1[1,index].hour
        
    #make path string
    if day<9:
        pathstr='0'+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr=str(0)+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr=str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
            
    path=r'cosqm_izana/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr+'.txt'
    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array1[1]))
    for i in range(len(array1[1])):
        dates_aod_seconds[i]=days_per_month[array1[0,i].month-1]*24*3600+(array1[0,i].day-1)*24*3600+array1[1,i].hour*3600+array1[1,i].minute*60+array1[1,i].second
    
    #Download data from this day (night)
    try:
        data,dates=LoadData(path)
        lenght=len(dates[:,0])-1
        dates_cosqm_seconds=zeros(lenght)
        for i in range(lenght):
            dates_cosqm_seconds[i]=days_per_month[dates[i,0].month-1]*24*3600+(array(dates[i,0].day)-1)*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

        #find nearest time value for cosqm corresponding to aod measurement
        idx = abs(dates_cosqm_seconds-dates_aod_seconds[index]).argmin()    
        delta_t=dates_cosqm_seconds[idx]-dates_aod_seconds[index]
        i=index
        #print ('delta t= ',delta_t)
    
    except:
        delta_t=1001
        
    #correct for errors of time matching    
    if -1000<delta_t<1000:
        cosqm_value1=data[idx]
        cosqm_value2=copy(cosqm_value1)
        
        #Cloud correction
        cosqm_value2=CloudCorr(data[:,8],0.005,idx,20)
    else: 
        cosqm_value2=array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

    return cosqm_value2, delta_t
254/266:
#Load appropriate data from aod to corresponding cosqm values
start=7000
stop=10000

indexes=arange(start,stop)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
254/267:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    day1=dates_aod[0,i].day
    day2=dates_aod[0,i+1].day
    if day2>day1 or day2-day1<0:
        moonrise_idx[i]=i


moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][5]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/268:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour1=dates_aod[1,i+1].hour

    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    

        

moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][5]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/269:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour

    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    

        

moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][5]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/270:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour

    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    

        

moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][1]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/271:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour

    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    

        

moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][0]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/272:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour

    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    

        

moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][3]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/273:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour

    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    

        

moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][4]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/274:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour

    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    

        

moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/275:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour

    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    
figure()
plot(data_aod)
plot(data_aod[moonrise_idx],'.', markersize=5,color='r')
plot(data_aod[moonset_idx],'.', markersize=5,color='k')

        

moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/276:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour

    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    
figure()
plot(data_aod)
plot(data_aod[moonrise_idx[0]],'.', markersize=5,color='r')
plot(data_aod[moonset_idx[0]],'.', markersize=5,color='k')

        

moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/277:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour

    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    
figure()
plot(data_aod)
plot(data_aod[moonrise_idx[0]],'.', markersize=5,color='r')
plot(data_aod[moonset_idx[0]],'.', markersize=5,color='k')

        

moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/278:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour

    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    
figure()
plot(data_aod)
plot(data_aod[moonrise_idx,0],'.', markersize=5,color='r')
plot(data_aod[moonset_idx,0],'.', markersize=5,color='k')

        

moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/279:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour

    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    
figure()
plot(data_aod)
plot(data_aod[moonrise_idx][0],'.', markersize=5,color='r')
plot(data_aod[moonset_idx][0],'.', markersize=5,color='k')

        

moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/280:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour

    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    
figure()
plot(data_aod)
plot(data_aod[moonrise_idx[0]],'.', markersize=5,color='r')
plot(data_aod[moonset_idx[0]],'.', markersize=5,color='k')

        

moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/281:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour

    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    
figure()
plot(data_aod)
plot(data_aod[moonrise_idx[0]][0],'.', markersize=5,color='r')
plot(data_aod[moonset_idx[0]][0],'.', markersize=5,color='k')

        

moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/282:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour

    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    
    
print(plot(data_aod[moonrise_idx],'.', markersize=5,color='r'))
figure()
plot(data_aod)
plot(data_aod[moonrise_idx[0]][0],'.', markersize=5,color='r')
plot(data_aod[moonset_idx[0]][0],'.', markersize=5,color='k')

        

moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
print (shape(data_aod))

cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
print(shape(nonzero(cosqm_value)[0]))
aod_idx=nonzero(data_aod[0])
print (aod_idx)
#Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/283:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour

    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    
    
print(plot(data_aod[moonrise_idx],'.', markersize=5,color='r'))
figure()
plot(data_aod)
plot(data_aod[moonrise_idx[0]][0],'.', markersize=5,color='r')
plot(data_aod[moonset_idx[0]][0],'.', markersize=5,color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/284:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour

    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    
    
print(plot(data_aod[moonrise_idx])
figure()
plot(data_aod)
plot(data_aod[moonrise_idx[0]][0],'.', markersize=5,color='r')
plot(data_aod[moonset_idx[0]][0],'.', markersize=5,color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/285:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour

    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    
    
print(plot(data_aod[moonrise_idx]))
figure()
plot(data_aod)
plot(data_aod[moonrise_idx[0]][0],'.', markersize=5,color='r')
plot(data_aod[moonset_idx[0]][0],'.', markersize=5,color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/286:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour

    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    
    
print(plot(data_aod[moonrise_idx[0]]))
figure()
plot(data_aod)
plot(data_aod[moonrise_idx[0]][0],'.', markersize=5,color='r')
plot(data_aod[moonset_idx[0]][0],'.', markersize=5,color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/287:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour

    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    
    
print(plot(data_aod[moonrise_idx][0]))
figure()
plot(data_aod)
plot(data_aod[moonrise_idx[0]][0],'.', markersize=5,color='r')
plot(data_aod[moonset_idx[0]][0],'.', markersize=5,color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/288:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour

    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    
    
print(plot(data_aod[moonrise_idx,0]))
figure()
plot(data_aod)
plot(data_aod[moonrise_idx[0]][0],'.', markersize=5,color='r')
plot(data_aod[moonset_idx[0]][0],'.', markersize=5,color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/289:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour

    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    
print (moonrise_idx)
    
print(plot(data_aod[moonrise_idx]))
figure()
plot(data_aod)
plot(data_aod[moonrise_idx[0]][0],'.', markersize=5,color='r')
plot(data_aod[moonset_idx[0]][0],'.', markersize=5,color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/290:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    print(hour1,hour2)
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    
print (moonrise_idx)
    
print(plot(data_aod[moonrise_idx]))
figure()
plot(data_aod)
plot(data_aod[moonrise_idx[0]][0],'.', markersize=5,color='r')
plot(data_aod[moonset_idx[0]][0],'.', markersize=5,color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
254/291:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-18.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,20)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/292:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-18.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,30)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/293:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-18.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.02,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/294:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-18.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.005,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/295:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-19.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.005,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/296:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-20.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.005,i,30)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/297:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-20.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.005,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/298:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-20.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/299:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-21.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/300:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-22.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/301:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-23.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/302:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-24.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/303:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-25.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/304:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-26.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/305:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-27.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/306:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-28.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/307:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-29.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/308:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-30.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/309:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-09-01.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/310:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-09-02.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/311:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-09-03.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/312:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-09-04.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/313:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-01.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/314:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-02.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/315:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-03.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/316:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-04.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/317:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-05.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/318:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-06.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/319:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-07.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/320:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-08.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/321:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-09.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/322:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-09.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/323:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-10.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/324:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-10.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,30)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/325:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-10.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,20)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/326:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-11.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,20)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/327:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-11.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,30)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/328:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-11.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/329:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-11.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.03,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/330:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-12.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.03,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/331:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-13.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.03,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/332:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-14.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.03,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/333:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.03,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/334:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.05,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/335:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.01,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/336:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.005,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/337:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/338:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-01.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/339:
from numpy import *
from matplotlib.dates import datestr2num
from matplotlib.pyplot import *
style.use(['dark_background'])
plt.rcParams['figure.figsize'] = [10, 5]
plt.rcParams['figure.dpi'] = 300
from datetime import datetime
254/340:
from numpy import *
from matplotlib.dates import datestr2num
from matplotlib.pyplot import *
style.use(['dark_background'])
rcParams['figure.figsize'] = [10, 5]
rcParams['figure.dpi'] = 300
from datetime import datetime
254/341:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-01.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/342:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-02.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/343:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-03.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/344:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/10/2019-10-04.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/345:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-04.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/346:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-03.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/347:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-10.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
254/348:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/1:
from numpy import *
from matplotlib.dates import datestr2num
from matplotlib.pyplot import *
style.use(['dark_background'])
rcParams['figure.figsize'] = [10, 5]
rcParams['figure.dpi'] = 300
from datetime import datetime
255/2:
##AOD LEVEL 1.5 (no clouds but no calib) data from aeronet for all of year 2019, all bands

#Day format changed from 06-11: full night to split at midnight

#read from columns 4 to 25 (aod 1640 to 340nm)
cols=arange(4, 26)

path='cosqm_santa_cruz/20190101_20191231_Santa_Cruz_Tenerife.lev15'
header=7

#DATA
data_aod=genfromtxt(path, delimiter=',', skip_header=header, usecols=cols)

#remove negative values (-999) and set to 0
non_negs=data_aod>=0
data_aod=non_negs*data_aod

#DATES
dates_str=genfromtxt(path, delimiter=',', skip_header=header, usecols=[0,1], dtype=str)
dates_list=[datetime.strptime(dates, '%d:%m:%Y') for dates in dates_str[:,0]]
times_list=[datetime.strptime(dates, '%H:%M:%S') for dates in dates_str[:,1]]
dates_aod=array([dates_list,times_list])

#BANDS
bands_aod=genfromtxt(path, delimiter=',', skip_header=header-1, skip_footer=len(data_aod), usecols=cols, dtype=str)

#find which bands have no data (take mean of bands and find indices diff. than 0)
means=mean(data_aod, axis=0)
non_empty_aod=array(nonzero(means))
255/3:
#COSQM Data load function, returns data and dates in tuple

def LoadData(path):
    data_server=loadtxt(path, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    dates_str=genfromtxt(path, delimiter=' ', usecols=[0,1],unpack=True,dtype='str')
    dates_list=[datetime.strptime(dates, '%Y-%m-%d') for dates in dates_str[0,:]]
    times_list=[datetime.strptime(dates, '%H:%M:%S') for dates in dates_str[1,:]]
    dates_cosqm=array([dates_list, times_list])
    dates_cosqm=swapaxes(dates_cosqm,0,1)
    return data_server, dates_cosqm
255/4:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/5:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    print(hour1,hour2)
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    
print (moonrise_idx)
    
print(plot(data_aod[moonrise_idx]))
figure()
plot(data_aod)
plot(data_aod[moonrise_idx[0]][0],'.', markersize=5,color='r')
plot(data_aod[moonset_idx[0]][0],'.', markersize=5,color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/6:
#Load appropriate data from aod to corresponding cosqm values
start=5000
stop=11400

indexes=arange(start,stop)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
255/7:
#Load appropriate data from aod to corresponding cosqm values
start=5000
stop=11400

indexes=arange(start,stop)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
255/8:
###FIND CLOSEST TIME VALUES FROM AOD TO COSQM

#increments for months for computing seconds
days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
#Define path from month and day of measurement on AOD
from IPython.display import display, clear_output
def FindClosest(array1,index):
    
    #define paths
    month=array1[0,index].month
    day=array1[0,index].day
    hour=array1[1,index].hour
        
    #make path string
    if day<9:
        pathstr='0'+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr=str(0)+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr=str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
            
    path=r'cosqm_izana/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr+'.txt'
    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array1[1]))
    for i in range(len(array1[1])):
        dates_aod_seconds[i]=days_per_month[array1[0,i].month-1]*24*3600+(array1[0,i].day-1)*24*3600+array1[1,i].hour*3600+array1[1,i].minute*60+array1[1,i].second
    
    #Download data from this day (night)
    try:
        data,dates=LoadData(path)
        lenght=len(dates[:,0])-1
        dates_cosqm_seconds=zeros(lenght)
        for i in range(lenght):
            dates_cosqm_seconds[i]=days_per_month[dates[i,0].month-1]*24*3600+(array(dates[i,0].day)-1)*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

        #find nearest time value for cosqm corresponding to aod measurement
        idx = abs(dates_cosqm_seconds-dates_aod_seconds[index]).argmin()    
        delta_t=dates_cosqm_seconds[idx]-dates_aod_seconds[index]
        i=index
        #print ('delta t= ',delta_t)
    
    except:
        delta_t=1001
        
    #correct for errors of time matching    
    if -1000<delta_t<1000:
        cosqm_value1=data[idx]
        cosqm_value2=copy(cosqm_value1)
        
        #Cloud correction
        cosqm_value2=CloudCorr(data[:,8],0.005,idx,40)
    else: 
        cosqm_value2=array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

    return cosqm_value2, delta_t
255/9:
#Load appropriate data from aod to corresponding cosqm values
start=5000
stop=11400

indexes=arange(start,stop)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
255/10:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    print(hour1,hour2)
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    
print (moonrise_idx)
    
print(plot(data_aod[moonrise_idx]))
figure()
plot(data_aod)
plot(data_aod[moonrise_idx[0]][0],'.', markersize=5,color='r')
plot(data_aod[moonset_idx[0]][0],'.', markersize=5,color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/11:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    

    
plot(data_aod[moonrise_idx])
figure()
plot(data_aod)
plot(data_aod[moonrise_idx[0]][0],'.', markersize=5,color='r')
plot(data_aod[moonset_idx[0]][0],'.', markersize=5,color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/12:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    

    
figure()
plot(data_aod)
plot(data_aod[moonrise_idx[0]][0],'.', markersize=5,color='r')
plot(data_aod[moonset_idx[0]][0],'.', markersize=5,color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/13:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    

    
figure()
plot(data_aod)
plot(data_aod[moonrise_idx,'.', markersize=5,color='r')
plot(data_aod[moonset_idx[0]][0],'.', markersize=5,color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/14:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    

    
figure()
plot(data_aod)
plot(data_aod[moonrise_idx,'.',color='r')
plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/15:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    

    
figure()
plot(data_aod)
plot(data_aod[moonrise_idx],'.',color='r')
plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/16:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    

    
figure()
plot(data_aod)
plot(data_aod[moonrise_idx[0]],'.',color='r')
plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/17:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    
print(moonrise_idxidx)
    
    
figure()
plot(data_aod)
plot(data_aod[moonrise_idx[0]],'.',color='r')
plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/18:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    
print(moonrise_idx)
    
    
figure()
plot(data_aod)
plot(data_aod[moonrise_idx[0]],'.',color='r')
plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/19:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    
print(max(moonrise_idx))
    
    
figure()
plot(data_aod)
plot(data_aod[moonrise_idx[0]],'.',color='r')
plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/20:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    
print(nonzero(moonrise_idx))
    
    
figure()
plot(data_aod)
plot(data_aod[moonrise_idx[0]],'.',color='r')
plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/21:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    
print(nonzero(moonrise_idx)+5000)
    
    
figure()
plot(data_aod)
plot(data_aod[moonrise_idx[0]],'.',color='r')
plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/22:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
moonrise_idx=array(moonrise_idx)
print(nonzero(moonrise_idx)+5000)
    
    
figure()
plot(data_aod)
plot(data_aod[moonrise_idx[0]],'.',color='r')
plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/23:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
moonrise_idx=array(moonrise_idx)
type(moonrise_idx)
    
    
figure()
plot(data_aod)
plot(data_aod[moonrise_idx[0]],'.',color='r')
plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/24:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
moonrise_idx=array(moonrise_idx)
type(moonrise_idx)
    
    
figure()
plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/25:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
moonrise_idx=array(moonrise_idx)
type(moonrise_idx)
    
    
figure()
plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/26:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
moonrise_idx=array(moonrise_idx)
type(moonrise_idx)
    
    
figure()
plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/27:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
moonrise_idx=array(moonrise_idx)
type(moonrise_idx)
    
    
figure()
plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/28:
plot(cosqm_value[where(cosqm_value>16)],'.-')
len(cosqm_value[where(cosqm_value!=0)])
print(dates_aod[0],dates_aod[-1])
255/29:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
moonrise_idx=array(moonrise_idx)
print(type(moonrise_idx))
    
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/30:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
moonrise_idx=array(moonrise_idx)
print(type(moonrise_idx))
    
    
figure()
#plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/31:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
moonrise_idx=array(moonrise_idx)
print(shape(moonrise_idx))
    
    
figure()
#plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/32:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
moonrise_idx=array(moonrise_idx)
print(shape(moonrise_idx[0]))
    
    
figure()
#plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/33:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
moonrise_idx=array(moonrise_idx)
print(shape(moonrise_idx[0,0]))
    
    
figure()
#plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/34:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
moonrise_idx=array(moonrise_idx)
print(moonrise_idx[0])
    
    
figure()
#plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/35:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
moonrise_idx=array(moonrise_idx)
print(moonrise_idx[102])
    
    
figure()
#plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/36:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
moonrise_idx=array(moonrise_idx)
print(nonzero(moonrise_idx))
    
    
figure()
#plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/37:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
moonrise_idx=array(moonrise_idx)
print(shape(nonzero(moonrise_idx)))
    
    
figure()
#plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/38:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
moonrise_idx=array(moonrise_idx)
print(shape(nonzero(moonrise_idx))[0])
    
    
figure()
#plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/39:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
moonrise_idx=array(moonrise_idx)
print(shape(nonzero(moonrise_idx))[0,0])
    
    
figure()
#plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/40:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
moonrise_idx=array(moonrise_idx)
print(shape(nonzero(moonrise_idx)[0]))
    
    
figure()
#plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/41:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
moonrise_idx=array(moonrise_idx)
print(shape(nonzero(moonrise_idx)[0,0]))
    
    
figure()
#plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/42:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
moonrise_idx=array(moonrise_idx)
print(shape(nonzero(moonrise_idx)[0][0]))
    
    
figure()
#plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/43:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
moonrise_idx=array(moonrise_idx)
print(shape(nonzero(moonrise_idx)[0]))
    
    
figure()
#plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/44:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(shape(nonzero(moonrise_idx)[0]))
    
    
figure()
#plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/45:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(type(nonzero(moonrise_idx)[0]))
    
    
figure()
#plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/46:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(type(nonzero(moonrise_idx)[0]))
    
    
figure()
#plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/47:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(moonrise_idx)[0])
    
    
figure()
#plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/48:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(moonrise_idx[0])
    
    
figure()
#plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/49:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(shape(moonrise_idx[0]))
    
    
figure()
#plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/50:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(type(moonrise_idx[0]))
    
    
figure()
#plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/51:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(type(moonrise_idx))
    
    
figure()
#plot(data_aod)
#plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/52:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(type(moonrise_idx))
    
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/53:
a=array([0,1,2])
b=array([0,1,2])
255/54:
a=array([0,1,2])
b=array([0,1,2])
c=a*b
255/55:
a=array([0,1,2])
b=array([0,1,2])
c=a*b
print(c)
255/56:
a=array([0,1,2])
b=array([0,1,2])
c=a(b)
print(c)
255/57:
a=array([0,1,2])
b=array([0,1,2])
c=a[b]
print(c)
255/58:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(type(moonrise_idx))
    
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx,'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/59:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(type(moonrise_idx))
    
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/60:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(type(moonrise_idx))
moonrise_idx=asint(moonrise_idx)
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/61:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(type(moonrise_idx))
moonrise_idx=astype(moonrise_idx, int)
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/62:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(type(moonrise_idx))
moonrise_idx=int(moonrise_idx)
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/63:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(type(moonrise_idx))
moonrise_idx=ndarray.astype(moonrise_idx,int)
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/64:
a=array([0,1,2])
b=array([0,1.,2])
c=a[b]
print(c)
255/65:
a=array([0,1,2])
b=array([0,1.,2])
c=a[int(b)]
print(c)
255/66:
a=array([0,1,2])
b=array([0,1.,2])
c=a[b.int]
print(c)
255/67:
a=array([0,1,2])
b=array([0,1.,2])
c=a[b.shpae]
print(c)
255/68:
a=array([0,1,2])
b=array([0,1.,2])
c=a[b.shae]
print(c)
255/69:
a=array([0,1,2])
b=array([0,1.,2])
c=a[b.shape]
print(c)
255/70:
a=array([0,1,2])
b=array([0,1.,2])
c=a[b.shape[0]]
print(c)
255/71:
a=array([0,1,2])
b=array([0,1.,2])
c=a[b.shape[0,0]]
print(c)
255/72:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(type(moonrise_idx))
moonrise_idx=ndarray.astype(non_zero(moonrise_idx,int))
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/73:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(type(moonrise_idx))
moonrise_idx=ndarray.astype(nonzero(moonrise_idx,int))
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/74:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(type(moonrise_idx))
moonrise_idx=ndarray.astype(nonzero(moonrise_idx),int))
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/75:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(type(moonrise_idx))
moonrise_idx=ndarray.astype(nonzero(moonrise_idx),int)
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/76:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(type(moonrise_idx))
moonrise_idx=moonrise_idx.astype(int)
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/77:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(type(moonrise_idx))
moonrise_idx=nonzero(moonrise_idx.astype(int))
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/78:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(type(moonrise_idx))
moonrise_idx=nonzero(moonrise_idx.astype(int))

print(len(moonrise_idx))
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/79:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(type(moonrise_idx))
moonrise_idx=nonzero(moonrise_idx.astype(int))

print(len(moonrise_idx[0]))
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/80:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(type(moonrise_idx))
moonrise_idx=nonzero(moonrise_idx.astype(int))

print(len(moonrise_idx[0]))
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/81:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(type(moonrise_idx))
moonrise_idx=nonzero(moonrise_idx.astype(int))

print(len(moonrise_idx[0]))
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx[0][0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/82:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(type(moonrise_idx))
moonrise_idx=nonzero(moonrise_idx.astype(int))

print(len(moonrise_idx[0]))
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/83:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>12 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(type(moonrise_idx))
moonrise_idx=nonzero(moonrise_idx.astype(int))

print(len(moonrise_idx[0]))
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/84:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>18 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(type(moonrise_idx))
moonrise_idx=nonzero(moonrise_idx.astype(int))

print(len(moonrise_idx[0]))
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/85:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>24 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(type(moonrise_idx))
moonrise_idx=nonzero(moonrise_idx.astype(int))

print(len(moonrise_idx[0]))
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/86:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>24 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        
print(shape(moonrise_idx))
moonrise_idx=nonzero(moonrise_idx.astype(int))

print(len(moonrise_idx[0]))
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/87:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>24 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        

moonrise_idx=nonzero(moonrise_idx.astype(int))
print(shape(moonrise_idx))
print(len(moonrise_idx[0]))
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/88:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>24 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        

moonrise_idx=nonzero(moonrise_idx.astype(int))
print(shape(moonrise_idx))
print(len(moonrise_idx[0]))
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/89:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>24 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
        

moonrise_idx=nonzero(moonrise_idx.astype(int))
print(shape(moonrise_idx))
print(len(moonrise_idx[0]))
    
figure()
#plot(data_aod)
plot(moonrise_idx[0],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/90:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>24 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=nonzero(moonrise_idx.astype(int))
print(shape(moonrise_idx))
print(len(moonrise_idx[0]))
    
figure()
#plot(data_aod)
plot(moonrise_idx[0],'.',color='r')
#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/91:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>24 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=nonzero(moonrise_idx.astype(int))
print(shape(moonrise_idx))
print(len(moonrise_idx[0]))
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx[0]],'.',color='r')
plot(data_aod,'.',color='r')

#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/92:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>24 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=nonzero(moonrise_idx.astype(int))
print(shape(moonrise_idx))
print(len(moonrise_idx[0]))
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx[0]],'.',color='r')
plot(data_aod,'.',color='k')

#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/93:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>24 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=nonzero(moonrise_idx.astype(int))
print(shape(moonrise_idx))
print(len(moonrise_idx[0]))
    
figure()
#plot(data_aod)
plot(data_aod[moonrise_idx[0]],'.',color='r')
plot(data_aod,'.',color='w')

#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/94:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>24 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=nonzero(moonrise_idx.astype(int))+5000
print(shape(moonrise_idx))
print(len(moonrise_idx[0]))

figure()
#plot(data_aod)
plot(data_aod[moonrise_idx[0]],'.',color='r')
plot(data_aod,'.',color='w')

#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/95:
a=array([0,1,2])
b=array([0,1.,2])
c=a[b.shape[0,0]]

print(c)
c=c+5
print(c)
255/96:
a=array([0,1,2])
b=array([0,1.,2])
c=a[b]

print(c)
c=c+5
print(c)
255/97:
a=array([0,1,2])
b=array([0,1,2])
c=a[b]

print(c)
c=c+5
print(c)
255/98:
a=array([0,1,2])
b=array([0,1,2])
c=a[b]

print(c)
c+5
print(c)
255/99:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>24 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))+5000
print(shape(moonrise_idx))
print(len(moonrise_idx[0]))

figure()
#plot(data_aod)
plot(data_aod[moonrise_idx[0]],'.',color='r')
plot(data_aod,'.',color='w')

#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/100:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>24 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))+5000
print(shape(moonrise_idx))
print(len(moonrise_idx[0]))

figure()
#plot(data_aod)
plot(data_aod[moonrise_idx[0][-1]],'.',color='r')
plot(data_aod,'.',color='w')

#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/101:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>24 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))+5000
print(shape(moonrise_idx))
print(len(moonrise_idx[0]))

figure()
#plot(data_aod)
plot(data_aod[moonrise_idx[0]],'.',color='r')
plot(data_aod,'.',color='w')

#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/102:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>24 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print(shape(moonrise_idx))
print(len(moonrise_idx[0]))

figure()
#plot(data_aod)
plot(data_aod[moonrise_idx[0]],'.',color='r')
plot(data_aod,'.',color='w')

#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/103:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>24 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))

figure()
#plot(data_aod)
plot(data_aod[moonrise_idx[0]],'.',color='r')
plot(data_aod,'.',color='w')

#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/104:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))

figure()
#plot(data_aod)
plot(data_aod[moonrise_idx[0]],'.',color='r')
plot(data_aod,'.',color='w')

#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/105:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))

figure()
#plot(data_aod)
plot(data_aod[moonrise_idx[0]],'.',color='r')
plot(data_aod,'.',color='w')

#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/106:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))

figure()
#plot(data_aod)
plot(data_aod[moonrise_idx[0]],cosqm_data[moonrise_idx[0]]'.',color='r')
plot(data_aod,'.',color='w')

#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/107:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))

figure()
#plot(data_aod)
plot(data_aod[moonrise_idx[0]],cosqm_data[moonrise_idx[0]],'.',color='r')
plot(data_aod,'.',color='w')

#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/108:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))

figure()
#plot(data_aod)
plot(data_aod[moonrise_idx[0]],cosqm_value[moonrise_idx[0]],'.',color='r')
plot(data_aod,'.',color='w')

#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/109:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))

figure()
#plot(data_aod)
plot(data_aod[moonrise_idx[0]],cosqm_value[moonrise_idx[0]],'.',color='r')
plot(data_aod,'.',color='w')

#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/110:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))

figure()
#plot(data_aod)
#plot(data_aod[moonrise_idx[0]],cosqm_value[moonrise_idx[0]],'.',color='r')
plot(data_aod,'.',color='w')

#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/111:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))

figure()
#plot(data_aod)
#plot(data_aod[moonrise_idx[0]],cosqm_value[moonrise_idx[0]],'.',color='r')
plot(data_aod[moonrise_idx[0]],'.',color='w')

#plot(data_aod[moonset_idx[0]][0],'.',color='k')

        

# moonrise_idx=ndarray.astype(moonrise_idx[where((moonrise_idx>0)&(moonrise_idx<stop-start))]+start,int)
# print (shape(data_aod))

# cosqm_value_idx=where(cosqm_value[moonrise_idx-8000]>0)[0]
# print(shape(nonzero(cosqm_value)[0]))
# aod_idx=nonzero(data_aod[0])
# print (aod_idx)
# #Plot cosqm vs AOD for nonzero values (clouds removed), but no moon correction

#plot(data_aod[nonzero(cosqm_value)[0]+8000,aod_idx[0][2]],cosqm_value[nonzero(cosqm_value)[0]],'.')
255/112:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))

#plot(data_aod[moonrise_idx[0]],cosqm_value[moonrise_idx[0]],'.',color='r')
plot(nonzero(data_aod[moonrise_idx[0]]),'.',color='w')
255/113:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))

plot(data_aod[moonrise_idx[0]],cosqm_value[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/114:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=nonzero(cosqm_value[moonrise_idx[0]])

plot(data_aod[moonrise_idx[0]],cosqm_value[moonrise_idx[0]],'.',color='r')
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/115:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx[0]]))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero[0]],'.',color='r')
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/116:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx[0]]))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero[0],5],'.',color='r')
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/117:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx[0]]))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero[0,5]],'.',color='r')
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/118:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx[0]]))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero],'.',color='r')
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/119:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx[0]]))
print (type(cosqm_nonzero),shape(cosqm_nonzero),len(cosqm_nonzero))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero],'.',color='r')
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/120:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx[0]]))
print (type(cosqm_nonzero[0]),shape(cosqm_nonzero),len(cosqm_nonzero))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero],'.',color='r')
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/121:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx[0]]))
print (type(cosqm_nonzero[0]),shape(cosqm_nonzero),len(cosqm_nonzero))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero[0]],'.',color='r')
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/122:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx[0]]))
print (type(cosqm_nonzero[0]),shape(cosqm_nonzero),len(cosqm_nonzero))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero],'.',color='r')
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/123:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx[0]]))
print (type(cosqm_nonzero[0]),shape(cosqm_nonzero),len(cosqm_nonzero))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero[0]],'.',color='r')
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/124:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx[0]]))
print (type(cosqm_nonzero[0]),shape(cosqm_nonzero),len(cosqm_nonzero))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero[0,0]],'.',color='r')
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/125:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx[0]]))
print (type(cosqm_nonzero[0]),shape(cosqm_nonzero[0]),len(cosqm_nonzero))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero],'.',color='r')
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/126:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx[0]]))
print (type(cosqm_nonzero[0]),shape(cosqm_nonzero[0,0]),len(cosqm_nonzero))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero],'.',color='r')
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/127:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx[0]]))
print (type(cosqm_nonzero[0]),shape(cosqm_nonzero[0,0]),len(cosqm_nonzero[0]))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero],'.',color='r')
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/128:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx[0]]))
print (cosqm_nonzero[0],shape(cosqm_nonzero[0,0]),len(cosqm_nonzero[0]))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero],'.',color='r')
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/129:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx[0]]))
print (cosqm_nonzero[0],shape(cosqm_nonzero[0,0]),len(cosqm_nonzero[0]))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero],'.',color='r')
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/130:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]])
print (cosqm_nonzero[0],shape(cosqm_nonzero[0,0]),len(cosqm_nonzero[0]))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero],'.',color='r')
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/131:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]])
print (cosqm_nonzero[0],shape(cosqm_nonzero[0),len(cosqm_nonzero[0]))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero],'.',color='r')
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/132:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]])
print (cosqm_nonzero[0],shape(cosqm_nonzero[0]),len(cosqm_nonzero[0]))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero],'.',color='r')
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/133:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]])
print (cosqm_nonzero[0],shape(cosqm_nonzero[0]))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero],'.',color='r')
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/134:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]])
print (cosqm_nonzero[0],shape(cosqm_nonzero[0].astype(int)))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero],'.',color='r')
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/135:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-2):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]])
print (cosqm_nonzero[0],shape(cosqm_nonzero[0].astype(int)))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero.astype(int)],'.',color='r')
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/136:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])-1):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]])
print (cosqm_nonzero[0],shape(cosqm_nonzero[0].astype(int)))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero.astype(int)],'.',color='r')
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/137:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]])
print (cosqm_nonzero[0],shape(cosqm_nonzero[0].astype(int)))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero.astype(int)],'.',color='r')
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/138:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]])
print (cosqm_nonzero[0],shape(cosqm_nonzero[0].astype(int)))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero.astype(int)],'.',color='r')
ylim(10,22)
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/139:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]])
print (cosqm_nonzero[0],shape(cosqm_nonzero[0].astype(int)))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero.astype(int)],'.',color='r')
ylim(20,22)
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/140:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]])
print (cosqm_nonzero[0],shape(cosqm_nonzero[0].astype(int)))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero.astype(int)],'.',color='r')
ylim(21.25,21.5)
#plot(data_aod[moonrise_idx[0]],'.',color='w')
255/141:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))
moonset_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    else: moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
print((moonrise_idx))
print(len(moonrise_idx[0]))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
print (cosqm_nonzero[0],shape(cosqm_nonzero[0].astype(int)))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero],'.',color='r')
255/142:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=[]

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
print (cosqm_nonzero[0],shape(cosqm_nonzero[0].astype(int)))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero],'.',color='r')
255/143:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=[0,0]

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
print (cosqm_nonzero[0],shape(cosqm_nonzero[0].astype(int)))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero],'.',color='r')
255/144:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
print (cosqm_nonzero[0],shape(cosqm_nonzero[0].astype(int)))
plot(data_aod[moonrise_idx[0]],cosqm_value[cosqm_nonzero],'.',color='r')
255/145:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(data_aod[moonrise_idx],cosqm_value[cosqm_nonzero],'.',color='r')
255/146:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(data_aod[moonrise_idx,17],cosqm_value[cosqm_nonzero],'.',color='r')
255/147:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(data_aod[moonrise_idx,2],cosqm_value[cosqm_nonzero],'.',color='r')
255/148:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(data_aod[2,moonrise_idx],cosqm_value[cosqm_nonzero],'.',color='r')
255/149:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(data_aod[moonrise_idx,2],cosqm_value[cosqm_nonzero],'.',color='r')
255/150:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(data_aod[moonrise_idx,2][0],cosqm_value[cosqm_nonzero],'.',color='r')
255/151:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,2][0],'.',color='r')
255/152:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,5][0],'.',color='r')
255/153:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,15][0],'.',color='r')
255/154:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,14][0],'.',color='r')
255/155:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,12][0],'.',color='r')
255/156:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,11][0],'.',color='r')
255/157:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,19][0],'.',color='r')
255/158:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,22][0],'.',color='r')
255/159:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,21][0],'.',color='r')
255/160:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,1][0],'.',color='r')
255/161:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,0][0],'.',color='r')
255/162:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>2 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,2][0],'.',color='r')
255/163:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,2][0],'.',color='r')
255/164:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<-10:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,2][0],'.',color='r')
255/165:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<-23:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,2][0],'.',color='r')
255/166:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<-20:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,2][0],'.',color='r')
255/167:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<-24:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,2][0],'.',color='r')
255/168:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<-28:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,2][0],'.',color='r')
255/169:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<20:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,2][0],'.',color='r')
255/170:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<-20:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,2][0],'.',color='r')
255/171:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,2][0],'.',color='r')
255/172:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1
    elif hour2==hour1:moonset_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,2][0],'.',color='r')
255/173:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,2][0],'.',color='r')
255/174:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,2][0],'.',color='r')

figure()
plot(data_aod[moonrise_idx,2][0])
255/175:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,2][0],'.',color='r')

figure()
plot(data_aod[moonrise_idx,2][0],'.')
255/176:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,2][0],'.',color='r')

figure()
plot(cosqm_value[moonrise_idx[0]],'.')
255/177:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,2][0],'.',color='r')

figure()
plot(cosqm_value[cosqm_value[moonrise_idx[0]]>0],'.')
255/178:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,2][0],'.',color='r')

figure()
plot(cosqm_value[cosqm_value[moonrise_idx[0]]>0][0],'.')
255/179:
a=array([0,1,2])
b=array([0,1,2])
c=a[b]

print(a[a>0])
255/180:
a=array([0,1,2])
b=array([0,1,2])
c=a[b]

print(a[a[b]>0])
255/181:
a=array([0,1,2])
b=array([0,0,0])
c=a[b]

print(a[a[b]>0])
255/182:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,2][0],'.',color='r')

figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/183:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(cosqm_value[moonrise_idx[0]].astype(int))
plot(cosqm_value[cosqm_nonzero],data_aod[moonrise_idx,2][0],'.',color='r')

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/184:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=cosqm_value[moonrise_idx[0]].astype(int)
plot(cosqm_value[cosqm_nonzero],'.',color='r')

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/185:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=cosqm_value[moonrise_idx[0]].astype(int)
plot(cosqm_value[cosqm_nonzero],'.',color='r')

print(dates_aod[0][moonrise_idx])
print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/186:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=cosqm_value[moonrise_idx[0]].astype(int)
plot(cosqm_value[cosqm_nonzero],'.',color='r')

plot(dates_aod[0][moonrise_idx],'.',color='r',markersize=5)
plot(dates_aod[0],color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/187:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=cosqm_value[moonrise_idx[0]].astype(int)

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(dates_aod[0][moonrise_idx],'.',color='r',markersize=5)
plot(dates_aod[0],color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/188:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=cosqm_value[moonrise_idx[0]].astype(int)

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(dates_aod[0][moonrise_idx],'.',color='r',markersize=5)
plot(dates_aod[0],'._',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/189:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=cosqm_value[moonrise_idx[0]].astype(int)

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(dates_aod[0][moonrise_idx],'.',color='r',markersize=5)
plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/190:
from numpy import *
from matplotlib.dates import datestr2num
from matplotlib.pyplot import *
style.use(['dark_background'])
rcParams['figure.figsize'] = [10, 5]
rcParams['figure.dpi'] = 300
from datetime import datetime
255/191:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i+1]=i+1

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=cosqm_value[moonrise_idx[0]].astype(int)

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(dates_aod[0][moonrise_idx],'.',color='r',markersize=5)
plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/192:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=cosqm_value[moonrise_idx[0]].astype(int)

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(dates_aod[0][moonrise_idx],'.',color='r',markersize=5)
plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/193:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=cosqm_value[moonrise_idx[0]].astype(int)

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(dates_aod[0][moonrise_idx],'.',color='r',markersize=5)
#plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/194:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=cosqm_value[moonrise_idx[0]].astype(int)

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(dates_aod[0][moonrise_idx],'.',color='r',markersize=5)
#plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/195:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=cosqm_value[moonrise_idx[0]].astype(int)

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(dates_aod[0][moonrise_idx],'.',color='r',markersize=5)
#plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/196:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=cosqm_value[moonrise_idx[0]].astype(int)
print (len(dates_aod[0][moonrise_idx]))

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(dates_aod[0][moonrise_idx],'.',color='r',markersize=5)
#plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/197:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=cosqm_value[moonrise_idx[0]].astype(int)
print (len(dates_aod[0][moonrise_idx][0]))

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(dates_aod[0][moonrise_idx],'.',color='r',markersize=5)
#plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/198:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=cosqm_value[moonrise_idx[0]].astype(int)
print (len(dates_aod[0][moonrise_idx][0]))

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(dates_aod[0][moonrise_idx][0],'.',color='r',markersize=5)
#plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/199:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))[0]
cosqm_nonzero=cosqm_value[moonrise_idx.astype(int)

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(dates_aod[0][moonrise_idx][0],'.',color='r',markersize=5)
#plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/200:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))[0]
cosqm_nonzero=cosqm_value[moonrise_idx.astype(int)]

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(dates_aod[0][moonrise_idx][0],'.',color='r',markersize=5)
#plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/201:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=cosqm_value[moonrise_idx]

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(dates_aod[0][moonrise_idx][0],'.',color='r',markersize=5)
#plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/202:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=cosqm_value[moonrise_idx]

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(dates_aod[0][moonrise_idx][0],cosqm_value[moonrise_idx[0]],'.',color='r',markersize=5)
#plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/203:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=cosqm_value[moonrise_idx]

print(len(dates_aod[0][moonrise_idx][0],cosqm_value[moonrise_idx[0]]),len(dates_aod[0][moonrise_idx][0],cosqm_value[moonrise_idx[0]]))

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(dates_aod[0][moonrise_idx][0],cosqm_value[moonrise_idx[0]],'.',color='r',markersize=5)
#plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/204:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=cosqm_value[moonrise_idx]

print(len(dates_aod[0][moonrise_idx][0]),len(cosqm_value[moonrise_idx[0]]))

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(dates_aod[0][moonrise_idx][0],cosqm_value[moonrise_idx[0]],'.',color='r',markersize=5)
#plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/205:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=cosqm_value[moonrise_idx]
print (cosqm_nonzero)

print(len(dates_aod[0][moonrise_idx][0]),len(cosqm_value[moonrise_idx[0]]))

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(dates_aod[0][moonrise_idx][0],cosqm_value[moonrise_idx[0]],'.',color='r',markersize=5)
#plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/206:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx])
print (cosqm_nonzero)

print(len(dates_aod[0][moonrise_idx][0]),len(cosqm_value[moonrise_idx[0]]))

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(dates_aod[0][moonrise_idx][0],cosqm_value[moonrise_idx[0]],'.',color='r',markersize=5)
#plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/207:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print (cosqm_nonzero)

print(len(dates_aod[0][moonrise_idx][0]),len(cosqm_value[moonrise_idx[0]]))

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(dates_aod[0][moonrise_idx][0],cosqm_value[moonrise_idx[0]],'.',color='r',markersize=5)
#plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/208:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print (cosqm_nonzero[0])

print(len(dates_aod[0][moonrise_idx][0]),len(cosqm_value[moonrise_idx[0]]))

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(dates_aod[0][moonrise_idx][0],cosqm_value[moonrise_idx[0]],'.',color='r',markersize=5)
#plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/209:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print (cosqm_nonzero[1])

print(len(dates_aod[0][moonrise_idx][0]),len(cosqm_value[moonrise_idx[0]]))

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(dates_aod[0][moonrise_idx][0],cosqm_value[moonrise_idx[0]],'.',color='r',markersize=5)
#plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/210:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print (cosqm_nonzero[1])

print(len(dates_aod[0][moonrise_idx][0]),len(cosqm_value[cosqm_nonzero[0]]))

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(dates_aod[0][moonrise_idx][0],cosqm_value[moonrise_idx[0]],'.',color='r',markersize=5)
#plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/211:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print (cosqm_nonzero[1])

print(len(dates_aod[0][moonrise_idx][0]),len(cosqm_value[cosqm_nonzero[0]]))

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(data_aod[0][moonrise_idx][0],cosqm_value[moonrise_idx[0]],'.',color='r',markersize=5)
#plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/212:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print (cosqm_nonzero[1])

print(len(dates_aod[0][moonrise_idx][0]),len(cosqm_value[cosqm_nonzero[0]]))

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(data_aod[moonrise_idx][0],cosqm_value[moonrise_idx[0]],'.',color='r',markersize=5)
#plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/213:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print (cosqm_nonzero[1])

print(len(dates_aod[0][moonrise_idx][0]),len(cosqm_value[cosqm_nonzero[0]]))

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(data_aod[cosqm_nonzero][0],cosqm_value[moonrise_idx[0]],'.',color='r',markersize=5)
#plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/214:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print (cosqm_nonzero[1])

print(len(data_aod[cosqm_nonzero][0]),len(cosqm_value[cosqm_nonzero[0]]))

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(data_aod[cosqm_nonzero][0],cosqm_value[moonrise_idx[0]],'.',color='r',markersize=5)
#plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/215:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print (cosqm_nonzero[1])

print(len(data_aod[cosqm_nonzero][0]),len(cosqm_value[cosqm_nonzero[0]]))

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(data_aod[cosqm_nonzero][0],cosqm_value[cosqm_nonzero[0]],'.',color='r',markersize=5)
#plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/216:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print (cosqm_nonzero[1])

print(len(data_aod[cosqm_nonzero][0]),len(cosqm_value[cosqm_nonzero[0]]))

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(data_aod[cosqm_nonzero][0],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
#plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/217:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print (cosqm_nonzero[1])

print(len(data_aod[cosqm_nonzero][0]),len(cosqm_value[cosqm_nonzero[0]]))

#plot(cosqm_value[cosqm_nonzero],'.',color='r')
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
#plot(dates_aod[0],'.-',color='b',markersize=5)

print(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])])
figure()
plot(cosqm_value[nonzero(cosqm_value[moonrise_idx[0]])],'.')
255/218:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print (cosqm_nonzero[1])

figure()
plot(data_aod[cosqm_nonzero][1]
     
figure()
plot(cosqm_value[cosqm_nonzero[1]]     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/219:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

figure()
plot(data_aod[cosqm_nonzero][1]
     
figure()
plot(cosqm_value[cosqm_nonzero[1]]     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/220:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

figure()
plot(data_aod[cosqm_nonzero][1])
     
figure()
plot(cosqm_value[cosqm_nonzero[1]])     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/221:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

figure()
plot(data_aod[moonrise_idx][1])
     
figure()
plot(cosqm_value[cosqm_nonzero[1]])     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/222:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

figure()
plot(data_aod[moonrise_idx])
     
figure()
plot(cosqm_value[cosqm_nonzero[1]])     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/223:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

figure()
plot(data_aod[moonrise_idx][0])
     
figure()
plot(cosqm_value[cosqm_nonzero[1]])     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/224:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

figure()
plot(data_aod[moonrise_idx[0]])
     
figure()
plot(cosqm_value[cosqm_nonzero[1]])     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/225:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

figure()
plot(data_aod[moonrise_idx[0]])
     
figure()
plot(cosqm_value[cosqm_nonzero[1]])     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/226:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>4 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

figure()
plot(data_aod[moonrise_idx[0]],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/227:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

figure()
plot(data_aod[moonrise_idx[0]],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/228:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

figure()
plot(data_aod[moonrise_idx[0]],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/229:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonrise_idx[i]=i

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

figure()
plot(data_aod[moonrise_idx[0]],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/230:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1!=0:
        moonrise_idx[i]=i

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

figure()
plot(data_aod[moonrise_idx[0]],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/231:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

figure()
plot(data_aod[moonrise_idx[0]],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/232:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i

moonrise_idx=array(nonzero(moonrise_idx.astype(int)))
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

figure()
plot(data_aod[moonrise_idx[0]],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/233:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx.)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

figure()
plot(data_aod[moonrise_idx[0]],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/234:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

figure()
plot(data_aod[moonrise_idx[0]],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/235:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(len(moonrise_idx),len(cosqm_nonzero))

figure()
plot(data_aod[moonrise_idx[0]],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/236:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(len(moonrise_idx[0]),len(cosqm_nonzero))

figure()
plot(data_aod[moonrise_idx[0]],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/237:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(len(moonrise_idx[0]),len(cosqm_nonzero[0]))

figure()
plot(data_aod[moonrise_idx[0]],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/238:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(len(moonrise_idx[0]),len(cosqm_nonzero[1]))

figure()
plot(data_aod[moonrise_idx[0]],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/239:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(len(moonrise_idx[0]),len(cosqm_nonzero[1]))

figure()
plot(data_aod[cosqm_nonzero[0]],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/240:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(len(moonrise_idx[0]),len(cosqm_nonzero[1]))

figure()
plot(data_aod[cosqm_nonzero[0]],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[0]],'.')     

figure()
plot(data_aod[cosqm_nonzero][0],cosqm_value[cosqm_nonzero[0]],'.',color='r',markersize=5)
255/241:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(len(moonrise_idx[0]),len(cosqm_nonzero[1]))

figure()
plot(data_aod[cosqm_nonzero[1]],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/242:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(len(data_aod[cosqm_nonzero[1]]),len(cosqm_nonzero[1]))

figure()
plot(data_aod[cosqm_nonzero[1]],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/243:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(len(nonzero(data_aod[cosqm_nonzero[1]])),len(cosqm_nonzero[1]))

figure()
plot(data_aod[cosqm_nonzero[1]],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/244:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(len(nonzero(data_aod[cosqm_nonzero[1]])[0]),len(cosqm_nonzero[1]))

figure()
plot(data_aod[cosqm_nonzero[1]],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/245:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(len(nonzero(data_aod[cosqm_nonzero[1]])[0][0]),len(cosqm_nonzero[1]))

figure()
plot(data_aod[cosqm_nonzero[1]],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/246:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(len(nonzero(data_aod[cosqm_nonzero[1]])[0,0]),len(cosqm_nonzero[1]))

figure()
plot(data_aod[cosqm_nonzero[1]],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/247:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(len(nonzero(data_aod[cosqm_nonzero[1]])[0]),len(cosqm_nonzero[1]))

figure()
plot(data_aod[cosqm_nonzero[1]],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/248:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(len(data_aod[cosqm_nonzero[1]]),len(cosqm_nonzero[1]))

figure()
plot(data_aod[cosqm_nonzero[1]],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/249:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(len(data_aod[cosqm_nonzero[1]]),len(cosqm_nonzero[1]))

figure()
plot(data_aod[cosqm_nonzero[1]],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/250:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(len(data_aod[cosqm_nonzero[1],2]),len(cosqm_nonzero[1]))

figure()
plot(data_aod[cosqm_nonzero[1]],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/251:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(len(data_aod[cosqm_nonzero[1],5]),len(cosqm_nonzero[1]))

figure()
plot(data_aod[cosqm_nonzero[1]],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/252:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(len(data_aod[cosqm_nonzero[1],5]),len(cosqm_nonzero[1]))

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero][1],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/253:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(len(data_aod[cosqm_nonzero[1],5]),len(cosqm_nonzero[1]))

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/254:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(len(data_aod[cosqm_nonzero[1],5]),len(cosqm_nonzero[1]))

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1],0],'.',color='r',markersize=5)
255/255:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(len(data_aod[cosqm_nonzero[1],5]),len(cosqm_nonzero[1]))

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[0,cosqm_nonzero[1]],'.',color='r',markersize=5)
255/256:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(len(data_aod[cosqm_nonzero[1],5]),len(cosqm_nonzero[1]))

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/257:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(shape(cosqm_value))

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/258:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[1][:,8])
255/259:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/260:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,2])
255/261:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,5])
255/262:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values


def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
        

        
#Example

#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/263:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(shape(cosqm_value[0]))

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/264:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(cosqm_value[0])

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/265:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(cosqm_value[1])

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/266:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(cosqm_value[:])

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/267:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(cosqm_value[300])

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/268:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot(cosqm_value)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/269:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot(cosqm_value,'.')

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/270:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot(cosqm_value[cosqm_value>0],'.')

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/271:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

len(cosqm_value[cosqm_value>0])

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/272:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

len(cosqm_value[cosqm_value>0])

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/273:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

print(len(cosqm_value[cosqm_value>0]))

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/274:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot(cosqm_value)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/275:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/276:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right,:])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/277:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/278:
###FIND CLOSEST TIME VALUES FROM AOD TO COSQM

#increments for months for computing seconds
days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
#Define path from month and day of measurement on AOD
from IPython.display import display, clear_output
def FindClosest(array1,index):
    
    #define paths
    month=array1[0,index].month
    day=array1[0,index].day
    hour=array1[1,index].hour
        
    #make path string
    if day<9:
        pathstr='0'+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr=str(0)+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr=str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
            
    path=r'cosqm_izana/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr+'.txt'
    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array1[1]))
    for i in range(len(array1[1])):
        dates_aod_seconds[i]=days_per_month[array1[0,i].month-1]*24*3600+(array1[0,i].day-1)*24*3600+array1[1,i].hour*3600+array1[1,i].minute*60+array1[1,i].second
    
    #Download data from this day (night)
    try:
        data,dates=LoadData(path)
        lenght=len(dates[:,0])-1
        dates_cosqm_seconds=zeros(lenght)
        for i in range(lenght):
            dates_cosqm_seconds[i]=days_per_month[dates[i,0].month-1]*24*3600+(array(dates[i,0].day)-1)*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

        #find nearest time value for cosqm corresponding to aod measurement
        idx = abs(dates_cosqm_seconds-dates_aod_seconds[index]).argmin()    
        delta_t=dates_cosqm_seconds[idx]-dates_aod_seconds[index]
        i=index
        #print ('delta t= ',delta_t)
    
    except:
        delta_t=1001
        
    #correct for errors of time matching (range of 1000 difference to trigger)
    if -1000<delta_t<1000:
        cosqm_value1=data[idx]
        cosqm_value2=copy(cosqm_value1)
        
        #Cloud correction
        cosqm_value2=CloudCorr(data,0.005,idx,40)
    else: 
        cosqm_value2=array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

    return cosqm_value2, delta_t
255/279:
#Load appropriate data from aod to corresponding cosqm values
start=5000
stop=5100

indexes=arange(start,stop)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
255/280:
###FIND CLOSEST TIME VALUES FROM AOD TO COSQM

#increments for months for computing seconds
days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
#Define path from month and day of measurement on AOD
from IPython.display import display, clear_output
def FindClosest(array1,index):
    
    #define paths
    month=array1[0,index].month
    day=array1[0,index].day
    hour=array1[1,index].hour
        
    #make path string
    if day<9:
        pathstr='0'+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr=str(0)+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr=str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
            
    path=r'cosqm_izana/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr+'.txt'
    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array1[1]))
    for i in range(len(array1[1])):
        dates_aod_seconds[i]=days_per_month[array1[0,i].month-1]*24*3600+(array1[0,i].day-1)*24*3600+array1[1,i].hour*3600+array1[1,i].minute*60+array1[1,i].second
    
    #Download data from this day (night)
    try:
        data,dates=LoadData(path)
        lenght=len(dates[:,0])-1
        dates_cosqm_seconds=zeros(lenght)
        for i in range(lenght):
            dates_cosqm_seconds[i]=days_per_month[dates[i,0].month-1]*24*3600+(array(dates[i,0].day)-1)*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

        #find nearest time value for cosqm corresponding to aod measurement
        idx = abs(dates_cosqm_seconds-dates_aod_seconds[index]).argmin()    
        delta_t=dates_cosqm_seconds[idx]-dates_aod_seconds[index]
        i=index
        #print ('delta t= ',delta_t)
    
    except:
        delta_t=1001
        
    #correct for errors of time matching (range of 1000 difference to trigger)
    if -1000<delta_t<1000:
        cosqm_value1=data[idx]
        cosqm_value2=copy(cosqm_value1)
        
        #Cloud correction
        cosqm_value2=CloudCorr(data,0.005,idx,40)
    else: 
        cosqm_value2=array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

    return cosqm_value2, delta_t
255/281:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/282: print (cosqm_value)
255/283: print (cosqm_value>0)
255/284: print (cosqm[cosqm_value>0])
255/285: print (cosqm_value[cosqm_value>0])
255/286: print (cosqm_value[cosqm_value>0])
255/287:
#Load appropriate data from aod to corresponding cosqm values
start=6000
stop=6100

indexes=arange(start,stop)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
255/288: print (cosqm_value[cosqm_value>0])
255/289:
###FIND CLOSEST TIME VALUES FROM AOD TO COSQM

#increments for months for computing seconds
days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
#Define path from month and day of measurement on AOD
from IPython.display import display, clear_output
def FindClosest(array1,index):
    
    #define paths
    month=array1[0,index].month
    day=array1[0,index].day
    hour=array1[1,index].hour
        
    #make path string
    if day<9:
        pathstr='0'+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr=str(0)+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr=str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
            
    path=r'cosqm_izana/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr+'.txt'
    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array1[1]))
    for i in range(len(array1[1])):
        dates_aod_seconds[i]=days_per_month[array1[0,i].month-1]*24*3600+(array1[0,i].day-1)*24*3600+array1[1,i].hour*3600+array1[1,i].minute*60+array1[1,i].second
    
    #Download data from this day (night)
    try:
        data,dates=LoadData(path)
        lenght=len(dates[:,0])-1
        dates_cosqm_seconds=zeros(lenght)
        for i in range(lenght):
            dates_cosqm_seconds[i]=days_per_month[dates[i,0].month-1]*24*3600+(array(dates[i,0].day)-1)*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

        #find nearest time value for cosqm corresponding to aod measurement
        idx = abs(dates_cosqm_seconds-dates_aod_seconds[index]).argmin()    
        delta_t=dates_cosqm_seconds[idx]-dates_aod_seconds[index]
        i=index
        #print ('delta t= ',delta_t)
    
    except:
        delta_t=1001
        
    #correct for errors of time matching (range of 1000 difference to trigger)
    if -1000<delta_t<1000:
        cosqm_value1=data[idx]
        cosqm_value2=copy(cosqm_value1)
        
        #Cloud correction
        cosqm_value2=CloudCorr(data,0.005,idx,40)
    else: 
        cosqm_value2=array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

    return cosqm_value2, delta_t
255/290:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/291:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/292:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test,0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/293:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0:],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/294:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0,:],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/295:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test=array(test)
test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0,:],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/296:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test=array(test)
test1=zeros(len(test[0][:,8]),15)
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0,:],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/297:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test=array(test)
test1=zeros((len(test[0][:,8]),15))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0,:],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/298:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test=array(test)
test1=zeros((len(test[0][:,8]),15))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0,0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/299:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test=array(test)
test1=zeros((len(test[0][:,8]),15))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/300:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test=array(test)
test1=zeros((len(test[0][:,8]),15))
print(shape(test1))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/301:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test=array(test)
test1=zeros((len(test[0][:,8]),15))
print(shape(test1))
# for i in range(len(test[0][:,8])):
#     test1[i]=CloudCorr(test[0],0.001,i,10)

# print(var(test1))
# plot(-test1,'.-')
plot(-test[0][:,8])
255/302:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test1=zeros(shape(test))
print(shape(test1))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test,0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/303:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

print(shape(test)
# test1=zeros(shape(test))
# print(shape(test1))
# for i in range(len(test[0][:,8])):
#     test1[i]=CloudCorr(test,0.001,i,10)

# print(var(test1))
# plot(-test1,'.-')
# plot(-test[0][:,8])
255/304:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

print(shape(test))
# test1=zeros(shape(test))
# print(shape(test1))
# for i in range(len(test[0][:,8])):
#     test1[i]=CloudCorr(test,0.001,i,10)

# print(var(test1))
# plot(-test1,'.-')
# plot(-test[0][:,8])
255/305:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

print(type(test))
# test1=zeros(shape(test))
# print(shape(test1))
# for i in range(len(test[0][:,8])):
#     test1[i]=CloudCorr(test,0.001,i,10)

# print(var(test1))
# plot(-test1,'.-')
# plot(-test[0][:,8])
255/306:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=array(LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt'))

print(type(test))
# test1=zeros(shape(test))
# print(shape(test1))
# for i in range(len(test[0][:,8])):
#     test1[i]=CloudCorr(test,0.001,i,10)

# print(var(test1))
# plot(-test1,'.-')
# plot(-test[0][:,8])
255/307:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

print(type(test))
# test1=zeros(shape(test))
# print(shape(test1))
# for i in range(len(test[0][:,8])):
#     test1[i]=CloudCorr(test,0.001,i,10)

# print(var(test1))
# plot(-test1,'.-')
# plot(-test[0][:,8])
255/308:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

print(type(test[0]))
# test1=zeros(shape(test))
# print(shape(test1))
# for i in range(len(test[0][:,8])):
#     test1[i]=CloudCorr(test,0.001,i,10)

# print(var(test1))
# plot(-test1,'.-')
# plot(-test[0][:,8])
255/309:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

print(type(test[1]))
# test1=zeros(shape(test))
# print(shape(test1))
# for i in range(len(test[0][:,8])):
#     test1[i]=CloudCorr(test,0.001,i,10)

# print(var(test1))
# plot(-test1,'.-')
# plot(-test[0][:,8])
255/310:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

print(test)
# test1=zeros(shape(test))
# print(shape(test1))
# for i in range(len(test[0][:,8])):
#     test1[i]=CloudCorr(test,0.001,i,10)

# print(var(test1))
# plot(-test1,'.-')
# plot(-test[0][:,8])
255/311:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

print(test[0])
# test1=zeros(shape(test))
# print(shape(test1))
# for i in range(len(test[0][:,8])):
#     test1[i]=CloudCorr(test,0.001,i,10)

# print(var(test1))
# plot(-test1,'.-')
# plot(-test[0][:,8])
255/312:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array[:,5])-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

print(shape(test[0]))
# test1=zeros(shape(test))
# print(shape(test1))
# for i in range(len(test[0][:,8])):
#     test1[i]=CloudCorr(test,0.001,i,10)

# print(var(test1))
# plot(-test1,'.-')
# plot(-test[0][:,8])
255/313:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/314:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx-1]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/315:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx:-1]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/316:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx:-2]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/317:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/318:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

print(len(dates_aod[0]),array(nonzero(cosqm_value[moonrise_idx]))) 
        
        
moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/319:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

print(len(dates_aod[0]),array(nonzero(cosqm_value[moonrise_idx]))) 
        
        
# moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
# cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
# print(data)

# figure()
# plot(data_aod[cosqm_nonzero[1],2],'.-')
     
# figure()
# plot(cosqm_value[cosqm_nonzero[1]],'.')     

# figure()
# plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/320:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

print(len(dates_aod[0]),nonzero(cosqm_value[moonrise_idx])) 
        
        
# moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
# cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
# print(data)

# figure()
# plot(data_aod[cosqm_nonzero[1],2],'.-')
     
# figure()
# plot(cosqm_value[cosqm_nonzero[1]],'.')     

# figure()
# plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/321:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

print(len(dates_aod[0]),len(nonzero(cosqm_value[moonrise_idx])))
        
        
# moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
# cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
# print(data)

# figure()
# plot(data_aod[cosqm_nonzero[1],2],'.-')
     
# figure()
# plot(cosqm_value[cosqm_nonzero[1]],'.')     

# figure()
# plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/322:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

print(len(dates_aod[0]),len(nonzero(cosqm_value[moonrise_idx.astype(int)])))
        
        
# moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
# cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
# print(data)

# figure()
# plot(data_aod[cosqm_nonzero[1],2],'.-')
     
# figure()
# plot(cosqm_value[cosqm_nonzero[1]],'.')     

# figure()
# plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/323:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5
        
moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx+6000]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/324:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5
        
moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/325: print (shape(cosqm_value))
255/326: print (shape(moonrise_idx))
255/327:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][6000:6100])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5
        
moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/328:
#Load appropriate data from aod to corresponding cosqm values
start=6100
stop=6600

indexes=arange(start,stop)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
255/329:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5
        
moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/330:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5
        
moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(cosqm_value

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/331:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5
        
moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(cosqm_value)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/332:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5
        
moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data_aod)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/333:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5
        
moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(shape(cosqm_nonzero))

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/334:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5
        
moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(shape(cosqm_nonzero[0]))

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/335:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5
        
moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(shape(cosqm_nonzero[1]))

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/336:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5
        
moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(shape(cosqm_nonzero[2]))

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/337:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5
        
moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(cosqm_nonzero)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/338:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5
        
moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(moonrise_idx)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/339:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5
        
moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(moonrise_idx[0])

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/340:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5
        
moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(cosqm_value[moonrise_idx])

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/341:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5
        
moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(cosqm_value)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/342:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5
        
moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(shape(cosqm_value))

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/343:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5
        
moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(cosqm_value>0)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/344:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5
        
moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(sum(cosqm_value>0==True))

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/345:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5
        
moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(sum(cosqm_value>0)==True))

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/346:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][5000:11400])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/347:
from numpy import *
from matplotlib.dates import datestr2num
from matplotlib.pyplot import *
style.use(['dark_background'])
rcParams['figure.figsize'] = [10, 5]
rcParams['figure.dpi'] = 300
from datetime import datetime
255/348:
##AOD LEVEL 1.5 (no clouds but no calib) data from aeronet for all of year 2019, all bands

#Day format changed from 06-11: full night to split at midnight

#read from columns 4 to 25 (aod 1640 to 340nm)
cols=arange(4, 26)

path='cosqm_santa_cruz/20190101_20191231_Santa_Cruz_Tenerife.lev15'
header=7

#DATA
data_aod=genfromtxt(path, delimiter=',', skip_header=header, usecols=cols)

#remove negative values (-999) and set to 0
non_negs=data_aod>=0
data_aod=non_negs*data_aod

#DATES
dates_str=genfromtxt(path, delimiter=',', skip_header=header, usecols=[0,1], dtype=str)
dates_list=[datetime.strptime(dates, '%d:%m:%Y') for dates in dates_str[:,0]]
times_list=[datetime.strptime(dates, '%H:%M:%S') for dates in dates_str[:,1]]
dates_aod=array([dates_list,times_list])

#BANDS
bands_aod=genfromtxt(path, delimiter=',', skip_header=header-1, skip_footer=len(data_aod), usecols=cols, dtype=str)

#find which bands have no data (take mean of bands and find indices diff. than 0)
means=mean(data_aod, axis=0)
non_empty_aod=array(nonzero(means))
255/349:
#COSQM Data load function, returns data and dates in tuple

def LoadData(path):
    data_server=loadtxt(path, usecols=list(arange(2,17)), unpack=True)
    data_server=swapaxes(data_server,0,1)
    dates_str=genfromtxt(path, delimiter=' ', usecols=[0,1],unpack=True,dtype='str')
    dates_list=[datetime.strptime(dates, '%Y-%m-%d') for dates in dates_str[0,:]]
    times_list=[datetime.strptime(dates, '%H:%M:%S') for dates in dates_str[1,:]]
    dates_cosqm=array([dates_list, times_list])
    dates_cosqm=swapaxes(dates_cosqm,0,1)
    return data_server, dates_cosqm
255/350:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/351:
###FIND CLOSEST TIME VALUES FROM AOD TO COSQM

#increments for months for computing seconds
days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
#Define path from month and day of measurement on AOD
from IPython.display import display, clear_output
def FindClosest(array1,index):
    
    #define paths
    month=array1[0,index].month
    day=array1[0,index].day
    hour=array1[1,index].hour
        
    #make path string
    if day<9:
        pathstr='0'+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr=str(0)+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr=str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
            
    path=r'cosqm_izana/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr+'.txt'
    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array1[1]))
    for i in range(len(array1[1])):
        dates_aod_seconds[i]=days_per_month[array1[0,i].month-1]*24*3600+(array1[0,i].day-1)*24*3600+array1[1,i].hour*3600+array1[1,i].minute*60+array1[1,i].second
    
    #Download data from this day (night)
    try:
        data,dates=LoadData(path)
        lenght=len(dates[:,0])-1
        dates_cosqm_seconds=zeros(lenght)
        for i in range(lenght):
            dates_cosqm_seconds[i]=days_per_month[dates[i,0].month-1]*24*3600+(array(dates[i,0].day)-1)*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

        #find nearest time value for cosqm corresponding to aod measurement
        idx = abs(dates_cosqm_seconds-dates_aod_seconds[index]).argmin()    
        delta_t=dates_cosqm_seconds[idx]-dates_aod_seconds[index]
        i=index
        #print ('delta t= ',delta_t)
    
    except:
        delta_t=1001
        
    #correct for errors of time matching (range of 1000 difference to trigger)
    if -1000<delta_t<1000:
        cosqm_value1=data[idx]
        cosqm_value2=copy(cosqm_value1)
        
        #Cloud correction
        cosqm_value2=CloudCorr(data[:,8],0.005,idx,40)
    else: 
        cosqm_value2=array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

    return cosqm_value2, delta_t
255/352:
#Load appropriate data from aod to corresponding cosqm values
start=5000
stop=5200

indexes=arange(start,stop)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
255/353:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/354:
#Load appropriate data from aod to corresponding cosqm values
start=5000
stop=6000

indexes=arange(start,stop)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
255/355:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],2],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/356:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/357:
###FIND CLOSEST TIME VALUES FROM AOD TO COSQM

#increments for months for computing seconds
days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
#Define path from month and day of measurement on AOD
from IPython.display import display, clear_output
def FindClosest(array1,index):
    
    #define paths
    month=array1[0,index].month
    day=array1[0,index].day
    hour=array1[1,index].hour
        
    #make path string
    if day<9:
        pathstr='0'+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr=str(0)+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr=str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
            
    path=r'cosqm_izana/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr+'.txt'
    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array1[1]))
    for i in range(len(array1[1])):
        dates_aod_seconds[i]=days_per_month[array1[0,i].month-1]*24*3600+(array1[0,i].day-1)*24*3600+array1[1,i].hour*3600+array1[1,i].minute*60+array1[1,i].second
    
    #Download data from this day (night)
    try:
        data,dates=LoadData(path)
        lenght=len(dates[:,0])-1
        dates_cosqm_seconds=zeros(lenght)
        for i in range(lenght):
            dates_cosqm_seconds[i]=days_per_month[dates[i,0].month-1]*24*3600+(array(dates[i,0].day)-1)*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

        #find nearest time value for cosqm corresponding to aod measurement
        idx = abs(dates_cosqm_seconds-dates_aod_seconds[index]).argmin()    
        delta_t=dates_cosqm_seconds[idx]-dates_aod_seconds[index]
        i=index
        #print ('delta t= ',delta_t)
    
    except:
        delta_t=1001
        
    #correct for errors of time matching (range of 1000 difference to trigger)
    if -1000<delta_t<1000:
        cosqm_value1=data[idx]
        cosqm_value2=copy(cosqm_value1)
        
        #Cloud correction
        for i in range(5):
            cosqm_value2[i]=CloudCorr(data[:,5+i],0.005,idx,40)
    else: 
        cosqm_value2=array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

    return cosqm_value2, delta_t
255/358:
###FIND CLOSEST TIME VALUES FROM AOD TO COSQM

#increments for months for computing seconds
days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
#Define path from month and day of measurement on AOD
from IPython.display import display, clear_output
def FindClosest(array1,index):
    
    #define paths
    month=array1[0,index].month
    day=array1[0,index].day
    hour=array1[1,index].hour
        
    #make path string
    if day<9:
        pathstr='0'+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr=str(0)+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr=str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
            
    path=r'cosqm_izana/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr+'.txt'
    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array1[1]))
    for i in range(len(array1[1])):
        dates_aod_seconds[i]=days_per_month[array1[0,i].month-1]*24*3600+(array1[0,i].day-1)*24*3600+array1[1,i].hour*3600+array1[1,i].minute*60+array1[1,i].second
    
    #Download data from this day (night)
    try:
        data,dates=LoadData(path)
        lenght=len(dates[:,0])-1
        dates_cosqm_seconds=zeros(lenght)
        for i in range(lenght):
            dates_cosqm_seconds[i]=days_per_month[dates[i,0].month-1]*24*3600+(array(dates[i,0].day)-1)*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

        #find nearest time value for cosqm corresponding to aod measurement
        idx = abs(dates_cosqm_seconds-dates_aod_seconds[index]).argmin()    
        delta_t=dates_cosqm_seconds[idx]-dates_aod_seconds[index]
        i=index
        #print ('delta t= ',delta_t)
    
    except:
        delta_t=1001
        
    #correct for errors of time matching (range of 1000 difference to trigger)
    if -1000<delta_t<1000:
        cosqm_value1=data[idx]
        cosqm_value2=copy(cosqm_value1)
        
        #Cloud correction
        for i in range(5):
            cosqm_value2[i]=CloudCorr(data[:,5+i],0.005,idx,40)
    else: 
        cosqm_value2=array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

    return cosqm_value2, delta_t
255/359:
###FIND CLOSEST TIME VALUES FROM AOD TO COSQM

#increments for months for computing seconds
days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
#Define path from month and day of measurement on AOD
from IPython.display import display, clear_output
def FindClosest(array1,index):
    
    #define paths
    month=array1[0,index].month
    day=array1[0,index].day
    hour=array1[1,index].hour
        
    #make path string
    if day<9:
        pathstr='0'+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr=str(0)+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr=str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
            
    path=r'cosqm_izana/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr+'.txt'
    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array1[1]))
    for i in range(len(array1[1])):
        dates_aod_seconds[i]=days_per_month[array1[0,i].month-1]*24*3600+(array1[0,i].day-1)*24*3600+array1[1,i].hour*3600+array1[1,i].minute*60+array1[1,i].second
    
    #Download data from this day (night)
    try:
        data,dates=LoadData(path)
        lenght=len(dates[:,0])-1
        dates_cosqm_seconds=zeros(lenght)
        for i in range(lenght):
            dates_cosqm_seconds[i]=days_per_month[dates[i,0].month-1]*24*3600+(array(dates[i,0].day)-1)*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

        #find nearest time value for cosqm corresponding to aod measurement
        idx = abs(dates_cosqm_seconds-dates_aod_seconds[index]).argmin()    
        delta_t=dates_cosqm_seconds[idx]-dates_aod_seconds[index]
        i=index
        #print ('delta t= ',delta_t)
    
    except:
        delta_t=1001
        
    #correct for errors of time matching (range of 1000 difference to trigger)
    if -1000<delta_t<1000:
        cosqm_value1=data[idx]
        cosqm_value2=copy(cosqm_value1)
        
        #Cloud correction
        for i in range(5):
            cosqm_value2[i]=CloudCorr(data[:,5+i],0.005,idx,40)
    else: 
        cosqm_value2=array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

    return cosqm_value2, delta_t
255/360:
#Load appropriate data from aod to corresponding cosqm values
start=5000
stop=6000

indexes=arange(start,stop)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
255/361:
#Load appropriate data from aod to corresponding cosqm values
start=6000
stop=6100

indexes=arange(start,stop)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
255/362:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/363:
###FIND CLOSEST TIME VALUES FROM AOD TO COSQM

#increments for months for computing seconds
days_per_month=[0,31,59,90,120,151,181,212,243,273,304,334]
    
#Define path from month and day of measurement on AOD
from IPython.display import display, clear_output
def FindClosest(array1,index):
    
    #define paths
    month=array1[0,index].month
    day=array1[0,index].day
    hour=array1[1,index].hour
        
    #make path string
    if day<9:
        pathstr='0'+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    elif day==9:
        pathstr=str(0)+str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
    else:
        pathstr=str(day)
        if month<10:
            str_month='0'+str(month)
        else:
            str_month=str(month)
            
    path=r'cosqm_izana/data/2019/'+str_month+'/2019-'+str_month+'-'+pathstr+'.txt'
    
    #Define time in seconds for AOD
    dates_aod_seconds=zeros(len(array1[1]))
    for i in range(len(array1[1])):
        dates_aod_seconds[i]=days_per_month[array1[0,i].month-1]*24*3600+(array1[0,i].day-1)*24*3600+array1[1,i].hour*3600+array1[1,i].minute*60+array1[1,i].second
    
    #Download data from this day (night)
    try:
        data,dates=LoadData(path)
        lenght=len(dates[:,0])-1
        dates_cosqm_seconds=zeros(lenght)
        for i in range(lenght):
            dates_cosqm_seconds[i]=days_per_month[dates[i,0].month-1]*24*3600+(array(dates[i,0].day)-1)*24*3600+dates[i,1].hour*3600+dates[i,1].minute*60+dates[i,1].second

        #find nearest time value for cosqm corresponding to aod measurement
        idx = abs(dates_cosqm_seconds-dates_aod_seconds[index]).argmin()    
        delta_t=dates_cosqm_seconds[idx]-dates_aod_seconds[index]
        i=index
        #print ('delta t= ',delta_t)
    
    except:
        delta_t=1001
        
    #correct for errors of time matching (range of 1000 difference to trigger)
    if -1000<delta_t<1000:
        cosqm_value1=data[idx]
        cosqm_value2=copy(cosqm_value1)
        
        #Cloud correction
        for i in range(5):
            cosqm_value2[i]=CloudCorr(data[:,6+i],0.005,idx,40)
    else: 
        cosqm_value2=array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])

    return cosqm_value2, delta_t
255/364:
#Load appropriate data from aod to corresponding cosqm values
start=6000
stop=6010

indexes=arange(start,stop)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
255/365:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.-')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/366:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/367:
#Load appropriate data from aod to corresponding cosqm values
start=6000
stop=6001

indexes=arange(start,stop)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
255/368:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/369:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],0],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/370:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1]],'.',color='r',markersize=5)
255/371:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1],0],'.',color='r',markersize=5)
255/372:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1],0],'.',color='r',markersize=5)
255/373:
#Load appropriate data from aod to corresponding cosqm values
start=6000
stop=6010

indexes=arange(start,stop)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
255/374:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1],0],'.',color='r',markersize=5)
255/375:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1],5],'.',color='r',markersize=5)
255/376:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1],5],'.',markersize=5)
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1],6],'.',markersize=5)
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1],7],'.',markersize=5)
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1],8],'.',markersize=5)
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1],9],'.',markersize=5)
255/377:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1],5],'.',markersize=5,color='w')
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1],6],'.',markersize=5,color='r')
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1],7],'.',markersize=5,color='g')
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1],8],'.',markersize=5,color='b')
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1],9],'.',markersize=5,color='y')
255/378:
#Load appropriate data from aod to corresponding cosqm values
start=6000
stop=6100

indexes=arange(start,stop)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
255/379:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1],5],'.',markersize=5,color='w')
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1],6],'.',markersize=5,color='r')
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1],7],'.',markersize=5,color='g')
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1],8],'.',markersize=5,color='b')
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1],9],'.',markersize=5,color='y')
255/380:
#Load appropriate data from aod to corresponding cosqm values
start=6000
stop=6200

indexes=arange(start,stop)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
255/381:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     

figure()
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1],5],'.',markersize=5,color='w')
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1],6],'.',markersize=5,color='r')
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1],7],'.',markersize=5,color='g')
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1],8],'.',markersize=5,color='b')
plot(data_aod[cosqm_nonzero[1],0],cosqm_value[cosqm_nonzero[1],9],'.',markersize=5,color='y')
255/382:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     


plot_start=300
plot_end=1500
figure()
plot(data_aod[cosqm_nonzero[1],0,plot_start:plot_end],cosqm_value[cosqm_nonzero[1],5,plot_start:plot_end],'.',markersize=5,color='w')
plot(data_aod[cosqm_nonzero[1],0,plot_start:plot_end],cosqm_value[cosqm_nonzero[1],6,plot_start:plot_end],'.',markersize=5,color='r')
plot(data_aod[cosqm_nonzero[1],0,plot_start:plot_end],cosqm_value[cosqm_nonzero[1],7,plot_start:plot_end],'.',markersize=5,color='g')
plot(data_aod[cosqm_nonzero[1],0,plot_start:plot_end],cosqm_value[cosqm_nonzero[1],8,plot_start:plot_end],'.',markersize=5,color='b')
plot(data_aod[cosqm_nonzero[1],0,plot_start:plot_end],cosqm_value[cosqm_nonzero[1],9,plot_start:plot_end],'.',markersize=5,color='y')
255/383:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     


plot_start=300
plot_end=1500
figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=5,color='w')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=5,color='r')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=5,color='g')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=5,color='b')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=5,color='y')
255/384:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1],2],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     


plot_start=400
plot_end=1500
figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=5,color='w')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=5,color='r')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=5,color='g')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=5,color='b')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=5,color='y')
255/385:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1]],'.')     


plot_start=400
plot_end=1500
figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=5,color='w')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=5,color='r')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=5,color='g')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=5,color='b')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=5,color='y')
255/386:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end]],'.')     


plot_start=400
plot_end=1500
figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=5,color='w')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=5,color='r')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=5,color='g')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=5,color='b')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=5,color='y')
255/387:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end,5:9]],'.')     


plot_start=400
plot_end=1500
figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=5,color='w')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=5,color='r')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=5,color='g')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=5,color='b')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=5,color='y')
255/388:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end][5:9]],'.')     


plot_start=400
plot_end=1500
figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=5,color='w')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=5,color='r')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=5,color='g')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=5,color='b')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=5,color='y')
255/389:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.')     


plot_start=400
plot_end=1500
figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=5,color='w')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=5,color='r')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=5,color='g')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=5,color='b')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=5,color='y')
255/390:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.')     


plot_start=400
plot_end=1500
figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=5,color='w')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=5,color='r')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=5,color='g')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=5,color='b')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=5,color='y')
255/391:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.')     


plot_start=500
plot_end=1300
figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=5,color='w')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=5,color='r')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=5,color='g')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=5,color='b')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=5,color='y')
255/392:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(data)

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.')     


plot_start=500
plot_end=1500
figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=5,color='w')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=5,color='r')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=5,color='g')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=5,color='b')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=5,color='y')
255/393:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(len(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5]))

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.')     


plot_start=500
plot_end=1500
figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=5,color='w')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=5,color='r')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=5,color='g')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=5,color='b')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=5,color='y')
255/394:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(len(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5]))

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.')
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.')     


plot_start=500
plot_end=1500
figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/395: print(dates_aod[6000])
255/396: print(dates_aod[0,6000])
255/397:
print(dates_aod[0,6000])
print(dates_cosqm[0,6000])
255/398:
print(dates_aod[0,6000])
print(cosqm_dates[0,6000])
255/399:
print(dates_aod[0,6000])
print(cosqm_value[0,6000])
255/400:
print(dates_aod[0,6000])
print(cosqm_values[0,6000])
255/401:
print(dates_aod[0,6000])
print(cosqm_value[0,6000])
255/402:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(len(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5]))

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)     


plot_start=500
plot_end=1500
figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/403:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(len(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5]))


plot_start=600
plot_end=1200

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)     


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/404:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(len(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5]))


plot_start=500
plot_end=1200

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)     


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/405:
#Load appropriate data from aod to corresponding cosqm values
start=5000
stop=5010

indexes=arange(start,stop)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
255/406:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(len(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5]))


plot_start=500
plot_end=1200

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)     


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/407:
#Load appropriate data from aod to corresponding cosqm values
start=5000
stop=5100

indexes=arange(start,stop)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
255/408:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(len(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5]))


plot_start=500
plot_end=1200

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)     


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/409:
#Load appropriate data from aod to corresponding cosqm values
start=5000
stop=11400

indexes=arange(start,stop)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
255/410:
#Load appropriate data from aod to corresponding cosqm values
start=5000
stop=11400

indexes=arange(start,stop)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
255/411:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(len(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5]))


plot_start=500
plot_end=1200

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)     


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/412:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(len(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5]))


plot_start=0
plot_end=11400-5000

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)     


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],0],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/413:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(len(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5]))


plot_start=0
plot_end=11400-5000

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)     


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/414:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(len(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5]))


plot_start=0
plot_end=11400-5000

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)     


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],3],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],3],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],3],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],3],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],3],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/415:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(len(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5]))


plot_start=0
plot_end=11400-5000

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)     


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/416:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(len(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5]))


plot_start=0
plot_end=11400-5000

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)     


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/417:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0 or hour2-hour1<0:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(len(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5]))


plot_start=0
plot_end=20000

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    
xlabel(cosqm_value[1,])


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/418:
#Load appropriate data from aod to corresponding cosqm values
start=5000
stop=5100

indexes=arange(start,stop)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
255/419:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(len(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5]))


plot_start=0
plot_end=20000

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    
xlabel(cosqm_value[1,])


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/420:
#Load appropriate data from aod to corresponding cosqm values
start=5000
stop=11400

indexes=arange(start,stop)
cosqm_value=[]
delta_ts=[]

for i in indexes:
    data,delta_t=FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
    
cosqm_value=array(cosqm_value)
255/421:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(len(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5]))


plot_start=0
plot_end=20000

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    
xlabel(cosqm_value[1,])


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/422:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>12:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(len(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5]))


plot_start=0
plot_end=20000

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    
xlabel(cosqm_value[1,])


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/423:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>24:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(len(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5]))


plot_start=0
plot_end=20000

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    
xlabel(cosqm_value[1,])


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/424:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>40:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(len(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5]))


plot_start=0
plot_end=20000

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    
xlabel(cosqm_value[1,])


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/425:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>400:
        moonset_idx[i]=i
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))
print(len(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5]))


plot_start=0
plot_end=20000

figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    
xlabel(cosqm_value[1,])


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/426:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=20000
print(len(dates_aod[0][start:stop]))


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    
xlabel(cosqm_value[1,])


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/427:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=5

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(len(dates_aod[0][start:stop]))


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    
xlabel(cosqm_value[1,])


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/428:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(len(dates_aod[0][start:stop]))


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    
xlabel(cosqm_value[1,])


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/429:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(len(cosqm_nonzero))


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    
xlabel(cosqm_value[1,])


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/430:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(len(cosqm_nonzero[0]))


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    
xlabel(cosqm_value[1,])


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/431:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(len(cosqm_nonzero[1]))


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    
xlabel(cosqm_value[1,])


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/432:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>0:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print((cosqm_nonzero[1]))


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    
xlabel(cosqm_value[1,])


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/433:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print((cosqm_nonzero[1]))


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    
xlabel(cosqm_value[1,])


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/434:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>6:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print((cosqm_nonzero[1]))


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    
xlabel(cosqm_value[1,])


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/435:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>=0:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print((cosqm_nonzero[1]))


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    
xlabel(cosqm_value[1,])


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/436:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>10:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print((cosqm_nonzero[1]))


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    
xlabel(cosqm_value[1,])


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/437:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>10:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    
xlabel(cosqm_value[1,])


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/438:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>10:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(moonrise_idx).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)


figure()
plot(data_aod[,2])
plot(data_aod[cosqm_nonzero[1],2],'.',color='r',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    
xlabel(cosqm_value[1,])


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/439:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>10:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(moonrise_idx).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)


figure()
plot(data_aod[2])
plot(data_aod[cosqm_nonzero[1],2],'.',color='r',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    
xlabel(cosqm_value[1,])


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/440:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(moonrise_idx).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)


figure()
plot(data_aod[2])
plot(data_aod[cosqm_nonzero[1],2],'.',color='r',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    
xlabel(cosqm_value[1,])


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/441:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>10:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    
xlabel(cosqm_value[1,])


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/442:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    
xlabel(cosqm_value[1,])


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/443:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/444:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)


figure()
plot(data_aod[:,2],'.',markersize=2)
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/445:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/446:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end]+5000,2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/447:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(data_aod[cosqm_nonzero[1]+5000,2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/448:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(cosqm_nonzero,data_aod[cosqm_nonzero[1]+5000,2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/449:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(cosqm_nonzero[0],data_aod[cosqm_nonzero[1]+5000,2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/450:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(cosqm_nonzero[1],data_aod[cosqm_nonzero[1]+5000,2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/451:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(cosqm_nonzero[2],data_aod[cosqm_nonzero[1]+5000,2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/452:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(cosqm_nonzero)


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(cosqm_nonzero[2],data_aod[cosqm_nonzero[1]+5000,2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/453:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(cosqm_nonzero[0])


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(cosqm_nonzero[2],data_aod[cosqm_nonzero[1]+5000,2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/454:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(cosqm_nonzero[1])


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(cosqm_nonzero[2],data_aod[cosqm_nonzero[1]+5000,2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/455:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(cosqm_nonzero[2])


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(cosqm_nonzero[2],data_aod[cosqm_nonzero[1]+5000,2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/456:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(cosqm_nonzero[2],data_aod[cosqm_nonzero[1]+5000,2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/457:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise,data_aod[cosqm_nonzero[1]+5000,2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/458:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[cosqm_nonzero[1]+5000,2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/459:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[moonrise_idx],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/460:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[moonrise_idx,2],'.',markersize=2)
     
figure()
plot(cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5:6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/461:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
#cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[moonrise_idx,2],'.',markersize=2)
     
figure()
plot(cosqm_value[moonrise_idx,5:9],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/462:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
#cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[moonrise_idx,2],'.',markersize=2)
     
figure()
plot(cosqm_value[moonrise_idx,5],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/463:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
#cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[moonrise_idx,2],'.',markersize=2)
     
figure()
plot(cosqm_value[moonrise_idx,6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/464:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
#cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[moonrise_idx,2],'.',markersize=2)
     
figure()
plot(cosqm_value[0,moonrise_idx,6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/465:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
#cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[moonrise_idx,2],'.',markersize=2)
     
figure()
plot(cosqm_value[moonrise_idx,6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/466:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
#cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(cosqm_value)


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[moonrise_idx,2],'.',markersize=2)
     
figure()
plot(cosqm_value[moonrise_idx,6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/467:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
#cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(cosqm_value[:,5])


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[moonrise_idx,2],'.',markersize=2)
     
figure()
plot(cosqm_value[moonrise_idx,6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/468:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
#cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(len(cosqm_value[:,5]))


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[moonrise_idx,2],'.',markersize=2)
     
figure()
plot(cosqm_value[moonrise_idx,6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/469:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
#cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(len(cosqm_value[moonrise_idx,5]))


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[moonrise_idx,2],'.',markersize=2)
     
figure()
plot(cosqm_value[moonrise_idx,6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/470:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
#cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(len(cosqm_value[moonrise_idx[0],5]))


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[moonrise_idx,2],'.',markersize=2)
     
figure()
plot(cosqm_value[moonrise_idx,6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/471:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
#cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(len(cosqm_value[moonrise_idx[0],5]))


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[moonrise_idx[48],2],'.',markersize=2)
     
figure()
plot(cosqm_value[moonrise_idx,6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/472:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
#cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(len(cosqm_value[moonrise_idx[0],5]))


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[moonrise_idx[0],2],'.',markersize=2)
     
figure()
plot(cosqm_value[moonrise_idx,6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/473:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
#cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(len(cosqm_value[moonrise_idx[0],5]))


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[moonrise_idx[0],2],'.',markersize=2)
     
figure()
plot(cosqm_value[moonrise_idx[0],6],'.',markersize=2)    


figure()
plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/474:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
#cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(len(cosqm_value[moonrise_idx[0],5]))


figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[moonrise_idx[0],2],'.',markersize=2)
     
figure()
plot(cosqm_value[moonrise_idx[0],6],'.',markersize=2)    


figure()
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/475:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
#cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400

figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[moonrise_idx[0]+start,2],'.',markersize=2)
     
figure()
plot(cosqm_value[moonrise_idx[0],5],'.',markersize=2)    


figure()
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/476:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)
#cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx[0])

figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[moonrise_idx[0]+start,2],'.',markersize=2)
     
figure()
plot(cosqm_value[moonrise_idx[0],5],'.',markersize=2)    


figure()
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/477:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)[0]
#cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx[0])

figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[moonrise_idx[0]+start,2],'.',markersize=2)
     
figure()
plot(cosqm_value[moonrise_idx[0],5],'.',markersize=2)    


figure()
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/478:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)[0]
#cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)

figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[moonrise_idx[0]+start,2],'.',markersize=2)
     
figure()
plot(cosqm_value[moonrise_idx[0],5],'.',markersize=2)    


figure()
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/479:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)[0]
#cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)

figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[moonrise_idx+start,2],'.',markersize=2)
     
figure()
plot(cosqm_value[moonrise_idx,5],'.',markersize=2)    


figure()
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],5],'.',markersize=2,color='w')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],6],'.',markersize=2,color='r')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],7],'.',markersize=2,color='g')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],8],'.',markersize=2,color='b')
#plot(data_aod[cosqm_nonzero[1,plot_start:plot_end],5],cosqm_value[cosqm_nonzero[1,plot_start:plot_end],9],'.',markersize=2,color='y')
255/480:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>8:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)[0]
#cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)

figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[moonrise_idx+start,2],'.',markersize=2)
     
figure()
plot(cosqm_value[moonrise_idx,5],'.',markersize=2)    


figure()
plot(data_aod[moonrise_idx+start,5],cosqm_value[moonrise_idx+start,5],'.',markersize=2,color='w')
plot(data_aod[moonrise_idx+start,5],cosqm_value[moonrise_idx+start,6],'.',markersize=2,color='r')
plot(data_aod[moonrise_idx+start,5],cosqm_value[moonrise_idx+start,7],'.',markersize=2,color='g')
plot(data_aod[moonrise_idx+start,5],cosqm_value[moonrise_idx+start,8],'.',markersize=2,color='b')
plot(data_aod[moonrise_idx+start,5],cosqm_value[moonrise_idx+start,9],'.',markersize=2,color='y')
255/481:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>12:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)[0]
#cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)

figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[moonrise_idx+start,2],'.',markersize=2)
     
figure()
plot(cosqm_value[moonrise_idx,5],'.',markersize=2)    


figure()
plot(data_aod[moonrise_idx+start,5],cosqm_value[moonrise_idx+start,5],'.',markersize=2,color='w')
plot(data_aod[moonrise_idx+start,5],cosqm_value[moonrise_idx+start,6],'.',markersize=2,color='r')
plot(data_aod[moonrise_idx+start,5],cosqm_value[moonrise_idx+start,7],'.',markersize=2,color='g')
plot(data_aod[moonrise_idx+start,5],cosqm_value[moonrise_idx+start,8],'.',markersize=2,color='b')
plot(data_aod[moonrise_idx+start,5],cosqm_value[moonrise_idx+start,9],'.',markersize=2,color='y')
255/482:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>12:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)[0]
#cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)

figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[moonrise_idx+start,2],'.',color='r',markersize=5)
     
figure()
plot(cosqm_value[moonrise_idx,5],'.',markersize=2)    


figure()
plot(data_aod[moonrise_idx+start,5],cosqm_value[moonrise_idx+start,5],'.',markersize=2,color='w')
plot(data_aod[moonrise_idx+start,5],cosqm_value[moonrise_idx+start,6],'.',markersize=2,color='r')
plot(data_aod[moonrise_idx+start,5],cosqm_value[moonrise_idx+start,7],'.',markersize=2,color='g')
plot(data_aod[moonrise_idx+start,5],cosqm_value[moonrise_idx+start,8],'.',markersize=2,color='b')
plot(data_aod[moonrise_idx+start,5],cosqm_value[moonrise_idx+start,9],'.',markersize=2,color='y')
255/483:
#Correction for moon rise and moon set (first and last values of aod recorded per night (day), going through midnight)
moonrise_idx=zeros(len(dates_aod[0]))

for i in range (len(dates_aod[0][start:stop])):
    hour1=dates_aod[1,i].hour
    hour2=dates_aod[1,i+1].hour
    if hour2-hour1>12:
        moonrise_idx[i]=i
    else:moonrise_idx[i]=0

moonrise_idx=array(nonzero(moonrise_idx)).astype(int)[0]
#cosqm_nonzero=array(nonzero(cosqm_value[moonrise_idx]))

plot_start=0
plot_end=6400
print(moonrise_idx)

figure()
plot(data_aod[start:stop,2],'.',markersize=2)
plot(moonrise_idx,data_aod[moonrise_idx+start,2],'.',color='r',markersize=5)
     
figure()
plot(cosqm_value[moonrise_idx,5],'.',markersize=2)    


figure()
plot(data_aod[moonrise_idx+start,5],cosqm_value[moonrise_idx,5],'.',markersize=2,color='w')
plot(data_aod[moonrise_idx+start,5],cosqm_value[moonrise_idx,6],'.',markersize=2,color='r')
plot(data_aod[moonrise_idx+start,5],cosqm_value[moonrise_idx,7],'.',markersize=2,color='g')
plot(data_aod[moonrise_idx+start,5],cosqm_value[moonrise_idx,8],'.',markersize=2,color='b')
plot(data_aod[moonrise_idx+start,5],cosqm_value[moonrise_idx,9],'.',markersize=2,color='y')
255/484:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.001,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/485:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.1,i,10)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/486:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.1,i,30)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/487:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.1,i,40)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/488:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-11.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.1,i,50)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/489:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-10.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.1,i,50)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/490:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-12.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.1,i,50)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/491:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-13.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.1,i,50)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/492:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-14.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.1,i,50)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
255/493:
#COSQM Data cloud correction
##puts =0 cosqm value if clouds present, detected by variance higher than threshold on timely adjacent measurement values

def CloudCorr(cosqm_array, threshold, idx, idx_range):
    #check if data is at start or end of cosqm data, and correct range
    if idx<idx_range:
        left=0
        right=idx_range
    elif idx>len(cosqm_array)-idx_range-1:
        left=idx_range
        right=0
    else:
        left=int(idx_range/2)
        right=int(idx_range/2)
        
    #calculate variance of adjacent values
    var_val=var(cosqm_array[idx-left:idx+right])
    #print ('var:',var_val)
    #print ('vals:',cosqm_array[idx-left:idx+right])
    
    #put =0 if var bigger than threshold (clouds give a variance of approx 0.05mag)
    test=copy(cosqm_array)
    if var_val>threshold:
        test[idx]=0
        return test[idx]
    else: return cosqm_array[idx]
    
        
###Example
#load a day of cosqm and cloud screen all
for i in range (30):
    test=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/09/2019-09-15.txt')

test1=zeros(len(test[0][:,8]))
for i in range(len(test[0][:,8])):
    test1[i]=CloudCorr(test[0][:,8],0.1,i,50)

print(var(test1))
plot(-test1,'.-')
plot(-test[0][:,8])
257/1: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod')
257/2: data_server=loadtxt(path, usecols=list(arange(2,17))
257/3: data_server=loadtxt(path, usecols=list(arange(2,17)))
257/4:
import numpy as np


path='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_santa_cruz/data/2019/05/2019-05-02.txt'
data=loadtxt(path, usecols=list(arange(2,17)))
257/5: print(data[0])
257/6: print(data[0,0])
257/7: print(data[0,5])
257/8: print(data[3,5])
257/9:
data=loadtxt(path, usecols=list(arange(2,17)),unpack=True)

print(data[3,5])
257/10: print(data[5,3])
257/11: runfile('/Users/admin/Downloads/aeronet_cosqm_correlation.py', wdir='/Users/admin/Downloads')
257/12: runfile('/Users/admin/Downloads/aeronet_cosqm_correlation.py', wdir='/Users/admin/Downloads')
257/13: runfile('/Users/admin/Downloads/aeronet_cosqm_correlation.py', wdir='/Users/admin/Downloads')
257/14: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod')
257/15: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod')
257/16: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod')
257/17: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod')
257/18: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod')
257/19: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod')
257/20: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod')
257/21: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod')
257/22: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod')
257/23: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod')
257/24:
for i in indexes:
    data,delta_t = FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)

cosqm_value = np.array(cosqm_value)
257/25: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation (1).py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod')
257/26: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation (1).py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod')
257/27: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation (1).py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod')
257/28: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation (1).py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod')
257/29: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation (1).py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod')
257/30:
start = 5000
stop = 11400

indexes = range(start,stop)
cosqm_value = []
delta_ts = []

for i in indexes:
    data,delta_t = FindClosest(dates_aod,i)
    cosqm_value.append(data)
    delta_ts.append(delta_t)

cosqm_value = np.array(cosqm_value)
257/31: a=[i for i in range (5)]
257/32: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/untitled5.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod')
257/33: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/untitled5.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod')
257/34: b=np.zeros((shape(a)))
257/35: b=np.zeros((np.shape(a)))
257/36: b=np.zeros((a.shape))
257/37:
a=np.array([1,2,3,4,5],[1,2,3,4,5])

b=np.zeros((a.shape))
257/38:
a=np.array([[1,2,3,4,5],[1,2,3,4,5]])

b=np.zeros((a.shape))
257/39: b[:,1]
257/40: b[:,1]=[i for i in a[:,0]]
257/41: b[:,0]=[i for i in a[:,0]]
257/42: b[:,0]=[i for i in a[:]]
257/43: b[:,0]=[i for i in a[:,:]]
257/44: b[:,0]=[i for i in a[:,4]]
257/45: b[0,:]=[i for i in a[:,4]]
257/46: b[0,:]=[i for i in a[1,:]]
257/47: a=np.array([[1,2,3,4,5],[10,20,30,40,50]])
257/48: b[0,:]=[i for i in a[1,:]]
257/49:
a=np.random.rand((5,10000))

b=np.zeros((a.shape))

b[0,:]=[i for i in a[1,:]]
257/50:
a=np.random.rand([5,10000])

b=np.zeros((a.shape))

b[0,:]=[i for i in a[1,:]]
257/51:
a=np.random.rand(5,10000)

b=np.zeros((a.shape))

b[0,:]=[i for i in a[1,:]]
257/52:
s='b[0,:]=[i for i in a[1,:]]'

timeit.timeit(stmt=s, number=10)
257/53: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/untitled5.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod')
257/54: which pip
257/55: pip
257/56: pip3
257/57: which
257/58: ls
257/59: pip install timeit
257/60: pip search timeit
257/61: pip list
257/62: pip install cpython
257/63: timeit
257/64:
a=np.random.rand(5,10000)

b=np.zeros((a.shape))




s='b[0,:]=[i for i in a[1,:]]'

timeit.timeit(stmt=s, number=10)
257/65:
a_cons=7.25
bm_cons=10
prix_fuel=1.15
lt_mois=350/prix_fuel

km_mois=lt_mois/a_cons*100

prix_mois=(bm_cons-a_cons)*km_mois*prix_fuel
257/66:
km_mois=lt_mois/a_cons

prix_mois=(bm_cons-a_cons)*km_mois*prix_fuel
257/67:
a_cons=7.25
bmx1_cons=10
bmx3_cons=12
prix_fuel=1.15
lt_mois=350/prix_fuel

km_mois=lt_mois/a_cons

prix_x1_mois=(bmx1_cons-a_cons)*km_mois*prix_fuel

prix_x3_mois=(bmx1_cons-a_cons)*km_mois*prix_fuel
257/68:
a_cons=7.25
bmx1_cons=10
bmx3_cons=12
prix_fuel=1.15
lt_mois=3626/12/prix_fuel

km_mois=lt_mois/a_cons

prix_x1_mois=(bmx1_cons-a_cons)*km_mois*prix_fuel

prix_x3_mois=(bmx3_cons-a_cons)*km_mois*prix_fuel
257/69:
a_cons=7.5
bmx1_cons=10
bmx3_cons=12
prix_fuel=1.15
lt_mois=3626/12/prix_fuel
km_annee=34711

km_mois=lt_mois/a_cons

prix_x1_mois=(bmx1_cons-a_cons)*km_annee/12*100*prix_fuel
achat_x1=8000

prix_x3_mois=(bmx3_cons-a_cons)*km_annee/12*100*prix_fuel
achat_x3=2000

def lin_func(x,a,b):
    return a*x+b

months=np.arange(100)

from matplotlib import pyplot as pl

pl.plot(lin_func(months,prix_x1_mois,achat_x1))
pl.plot(lin_func(months,prix_x3_mois,achat_x3))
257/70:
a_cons=7.5
bmx1_cons=10
bmx3_cons=12
prix_fuel=1.15
lt_mois=3626/12/prix_fuel
km_annee=34711

km_mois=lt_mois/a_cons

prix_x1_mois=(bmx1_cons-a_cons)*km_annee/12*prix_fuel
achat_x1=8000

prix_x3_mois=(bmx3_cons-a_cons)*km_annee/12*prix_fuel
achat_x3=2000

def lin_func(x,a,b):
    return a*x+b

months=np.arange(100)

from matplotlib import pyplot as pl

pl.plot(lin_func(months,prix_x1_mois,achat_x1))
pl.plot(lin_func(months,prix_x3_mois,achat_x3))
257/71:

months=np.arange(20)

from matplotlib import pyplot as pl

pl.plot(lin_func(months,prix_x1_mois,achat_x1))
pl.plot(lin_func(months,prix_x3_mois,achat_x3))
257/72: pl.xlim(5)
257/73: pl.xlim(0,5)
257/74:

pl.plot(lin_func(months,prix_x1_mois,achat_x1))
pl.plot(lin_func(months,prix_x3_mois,achat_x3))
257/75:
prix_x1_mois=(bmx1_cons-a_cons)*km_annee/12/100*prix_fuel
achat_x1=8000

prix_x3_mois=(bmx3_cons-a_cons)*km_annee/12/100*prix_fuel
achat_x3=2000

def lin_func(x,a,b):
    return a*x+b

months=np.arange(20)

from matplotlib import pyplot as pl

pl.plot(lin_func(months,prix_x1_mois,achat_x1))
pl.plot(lin_func(months,prix_x3_mois,achat_x3))
257/76:

months=np.arange(200)

from matplotlib import pyplot as pl

pl.plot(lin_func(months,prix_x1_mois,achat_x1))
pl.plot(lin_func(months,prix_x3_mois,achat_x3))
257/77: 92/12
257/78:

a_cons=7.5
bmx1_cons=10
bmx3_cons=12
prix_fuel=1.15
lt_mois=3626/12/prix_fuel
km_annee=34711

km_mois=lt_mois/a_cons

prix_x1_mois=(bmx1_cons-a_cons)*km_annee/12/100*prix_fuel
achat_x1=8000*1.15

prix_x3_mois=(bmx3_cons-a_cons)*km_annee/12/100*prix_fuel
achat_x3=2000

def lin_func(x,a,b):
    return a*x+b

months=np.arange(200)

from matplotlib import pyplot as pl

pl.plot(lin_func(months,prix_x1_mois,achat_x1))
pl.plot(lin_func(months,prix_x3_mois,achat_x3))
257/79: mois_diff=km_annee/12/100*2*1.5
257/80: km_annee/12/100*2*1.5
257/81: 6000/(km_annee/12/100*2*1.5)
257/82:
s='b[0,:]=[i for i in a[1,:]]'

timeit.timeit(stmt=s, number=10)
257/83:
s='b[0,:]=[i for i in a[1,:]]'

ti(stmt=s, number=10)
257/84: import timeit.timeit as ti
257/85: ti(stmt=s, number=10)
257/86: import cpython.timeit.timeit as ti
257/87: import timeit.timeit as ti
257/88: import timeit as ti
257/89: ti.timeit(stmt=s, number=10)
257/90:
a=np.random.rand(5,10000)

b=np.zeros((a.shape))




s='b[0,:]=[i for i in a[1,:]]'

ti.timeit(stmt=s, number=10)
257/91:
a=np.random.rand(5,10000)

b=np.zeros((a.shape))




s='b[0,:]=[i for i in a[1,:]]'

ti.timeit(stmt=s, number=10)
257/92: a
257/93: b
257/94:

import numpy as np
import timeit as ti

a=np.random.rand(5,10000)

b=np.zeros((a.shape))




s='b[0,:]=[i for i in a[1,:]]'

ti.timeit(stmt=s, number=10)
257/95: a
257/96: b[0,:]=[i for i in a[1,:]]'
257/97: b[0,:]=[i for i in a[1,:]]
257/98: ti.timeit(stmt=s, number=10)
257/99: ti.timeit(stmt=s, number=10,globals=globals())
257/100:

ss='''/
for i in a[1,:]:
    b[0,i]=a[1,i]
/'''

ti.timeit(stmt=ss, number=10,globals=globals())
257/101:

ss='''\
for i in a[1,:]:
    b[0,i]=a[1,i]
'''

ti.timeit(stmt=ss, number=10,globals=globals())
257/102:

ss='''\
for i in a[1,:]:
    b[0,int(i)]=a[1,int(i)]
'''

ti.timeit(stmt=ss, number=10,globals=globals())
257/103:


s='b[0,:]=[i for i in a[1,:]]'

aa=ti.timeit(stmt=s, number=10,globals=globals())


ss='''\
for i in a[1,:]:
    b[0,int(i)]=a[1,int(i)]
'''

bb=ti.timeit(stmt=ss, number=10,globals=globals())

print (aa/bb)
257/104:
s='b[0,:]=[i for i in a[1,:]]'

aa=ti.timeit(stmt=s, number=1000,globals=globals())


ss='''\
for i in a[1,:]:
    b[0,int(i)]=a[1,int(i)]
'''

bb=ti.timeit(stmt=ss, number=1000,globals=globals())

print (aa/bb)
257/105:
s='b[0,:]=[i for i in a[1,:]]'

aa=ti.timeit(stmt=s, number=1000,globals=globals())
257/106: aa
257/107:

s='b[0,:]=[i for i in a[1,:]]'

aa=ti.timeit(stmt=s, number=10000,globals=globals())
257/108: aa
257/109: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation (1).py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod')
257/110: moonrise_idx=[i if dates_aod[i+1].hour-dates_aod[i].hour>12 else 0 for i in range(len(dates_aod[start:stop]))]
257/111: moonrise_idx=[i if dt.utcfromtimestamp(dates_aod[i+1]).hour-dt.utcfromtimestamp(dates_aod[i]).hour>12 else 0 for i in range(len(dates_aod[start:stop]))]
257/112: moonrise_idx = np.array(np.nonzero(moonrise_idx)).astype(int)[0]
257/113: runcell('Moon correction', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
257/114: runcell('Correlation plots', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
257/115: runcell('Moon correction', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
257/116: runcell('Correlation plots', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
257/117: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod')
257/118:
a=dt.utcfromtimestamp(dates_aod[1000]).hour
b=dt.utcfromtimestamp(dates_aod[1001]).hour
257/119: a=dt.utcfromtimestamp(dates_aod[1000])
257/120: a=dt.utcfromtimestamp(dates_aod[6000])
257/121: b=dt.strptime( a.dates+a.times, '%Y-%m-%d%H:%M:%S' ).timestamp()
257/122: b=dt.strptime( a.date+a.time, '%Y-%m-%d%H:%M:%S' ).timestamp()
257/123: b=dt.strptime( a, '%Y-%m-%d%H:%M:%S' ).timestamp()
257/124: runcell('Moon correction', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
257/125: runcell('Moon correction', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
257/126: runcell('Correlation plots', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
257/127: runcell('Moon correction', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
257/128: runcell('Correlation plots', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
257/129: runcell('Moon correction', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
257/130: runcell('Correlation plots', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
257/131: runcell('Moon correction', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
257/132: runcell('Correlation plots', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
257/133:
moonrise_idx=[(i if dt.utcfromtimestamp(dates_aod[i+1]).hour-dt.utcfromtimestamp(dates_aod[i]).hour>0 
               and dt.utcfromtimestamp(dates_aod[i+1]).hour>15 else 0 
               for i in range(len(dates_aod[start:stop])))]
moonrise_idx = np.array(np.nonzero(moonrise_idx)).astype(int)[0]
258/1: f"sfhjgsdfsgsfg"
258/2: f"sfhjgsd{345843}fsgsfg"
258/3: f"sfhjgsd {3*3} fsgsfg"
258/4: f"sfhjgsd {3:4d} fsgsfg"
258/5: f"sfhjgsd {3:04d} fsgsfg"
258/6: f"sfhjgsd {123:04d} fsgsfg"
258/7: f"sfhjgsd {12.34:04f} fsgsfg"
258/8: f"sfhjgsd {12.34:.4f} fsgsfg"
258/9: f"sfhjgsd {12.34:.4e} fsgsfg"
258/10: f"sfhjgsd {12.34:.4g} fsgsfg"
258/11: f"sfhjgsd {12.34567:.4g} fsgsfg"
258/12: f"sfhjgsd {1245646.34567:.4g} fsgsfg"
258/13: f"sfhjgsd {4:02d} fsgsfg"
258/14: f"sfhjgsd {4:02d}:{3:02d} fsgsfg"
258/15: f"sfhjgsd {4:02d}:{a:02d} fsgsfg"
259/1:
import time
import matplotlib.pyplot as pl
259/2:
import time
import matplotlib.pyplot as pl
import numpy as np
259/3:
def func(x,a,b):
    return a*x+b

xs=arange(1000)
t=0
dt=0.01

while True:
    pl.plot(xs,func(xs,np.sin(xs*t),0))
    t+=dt
    time.sleep(0.1)
259/4:
def func(x,a,b):
    return a*x+b

xs=np.arange(1000)
t=0
dt=0.01

while True:
    pl.plot(xs,func(xs,np.sin(xs*t),0))
    t+=dt
    time.sleep(0.1)
259/5:
def func(x,a,b):
    return a*x+b

xs=np.arange(1000)
t=0
dt=0.01

while True:
    pl.plot(xs,func(xs,np.sin(xs*t),0))
    t+=dt
    time.sleep(0.1)
    pl.show()
259/6:
def func(x,a,b):
    return a*x+b

xs=np.arange(1000)
t=0
dt=0.01
figure()

while True:
    pl.plot(xs,func(xs,np.sin(xs*t),0))
    t+=dt
    time.sleep(0.1)
    pl.show()
259/7:
def func(x,a,b):
    return a*x+b

xs=np.arange(1000)
t=0
dt=0.01
pl.figure()

while True:
    pl.plot(xs,func(xs,np.sin(xs*t),0))
    t+=dt
    time.sleep(0.1)
    pl.show()
259/8:
%notebook inline
def func(x,a,b):
    return a*x+b

xs=np.arange(1000)
t=0
dt=0.01
pl.figure()

while True:
    pl.plot(xs,func(xs,np.sin(xs*t),0))
    t+=dt
    time.sleep(0.1)
    pl.show()
259/9:
%notebook inline
def func(x,a,b):
    return a*x+b

xs=np.arange(1000)
t=0
dt=0.01
pl.figure()

while True:
    clear_output(wait=True)
    pl.plot(xs,func(xs,np.sin(xs*t),0))
    t+=dt
    time.sleep(0.1)
    pl.show()
259/10:
%notebook inline
from IPython.display import clear_output
def func(x,a,b):
    return a*x+b

xs=np.arange(1000)
t=0
dt=0.01
pl.figure()

while True:
    clear_output(wait=True)
    pl.plot(xs,func(xs,np.sin(xs*t),0))
    t+=dt
    time.sleep(0.1)
    pl.show()
259/11:
%notebook inline
from IPython.display import clear_output

xs=np.arange(1000)
t=0
dt=0.01
pl.figure()

while True:
    clear_output(wait=True)
    pl.plot(xs,np.sin(xs))
    t+=dt
    time.sleep(0.1)
    pl.show()
259/12:
%notebook inline
from IPython.display import clear_output

xs=np.arange(1000)
t=0
dt=0.01
pl.figure()

while True:
    clear_output(wait=True)
    pl.plot(xs,np.sin(xs+dt))
    t+=dt
    time.sleep(0.1)
    pl.show()
259/13:
%notebook inline
from IPython.display import clear_output

xs=np.arange(1000)
t=0
dt=0.01
pl.figure()

while True:
    clear_output(wait=True)
    pl.plot(xs,np.sin(xs+dt/(xs+dt)))
    t+=dt
    time.sleep(0.1)
    pl.show()
259/14:
%notebook inline
from IPython.display import clear_output

xs=np.arange(1000)
t=0
dt=0.01
pl.figure()

while True:
    clear_output(wait=True)
    pl.plot(xs,np.sin(xs+t/(xs+t)))
    t+=dt
    time.sleep(0.1)
    pl.show()
259/15:
%notebook inline
from IPython.display import clear_output

xs=np.arange(1000)
t=0
dt=0.01
pl.figure()

while True:
    clear_output(wait=True)
    pl.plot(xs,np.sin(0.01(xs+t)))
    t+=dt
    time.sleep(0.1)
    pl.show()
259/16:
%notebook inline
from IPython.display import clear_output

xs=np.arange(1000)
t=0
dt=0.01
pl.figure()

while True:
    clear_output(wait=True)
    pl.plot(xs,np.sin(0.01*(xs+t)))
    t+=dt
    time.sleep(0.1)
    pl.show()
259/17:
%notebook inline
from IPython.display import clear_output

xs=np.arange(1000)
t=0
dt=0.01
pl.figure()

while True:
    clear_output(wait=True)
    pl.plot(xs,np.sin(0.1*(xs+t)))
    t+=dt
    time.sleep(0.1)
    pl.show()
259/18:
%notebook inline
from IPython.display import clear_output

xs=np.arange(1000)
t=0
dt=0.1
pl.figure()

while True:
    clear_output(wait=True)
    pl.plot(xs,np.sin(0.1*(xs+t)))
    t+=dt
    time.sleep(0.1)
    pl.show()
259/19:
%notebook inline
from IPython.display import clear_output

xs=np.arange(1000)
t=0
dt=1
pl.figure()

while True:
    clear_output(wait=True)
    pl.plot(xs,np.sin(0.1*(xs+t)))
    t+=dt
    time.sleep(0.1)
    pl.show()
259/20:
%notebook inline
from IPython.display import clear_output

xs=np.arange(1000)
t=0
dt=10
pl.figure()

while True:
    clear_output(wait=True)
    pl.plot(xs,np.sin(0.1*(xs+t)))
    t+=dt
    time.sleep(0.1)
    pl.show()
259/21:
%notebook inline
from IPython.display import clear_output

xs=np.arange(1000)
t=0
dt=10
pl.figure()

while True:
    clear_output(wait=True)
    pl.plot(xs,np.sin(0.1*(xs+t)))
    t+=dt
    time.sleep(0.05)
    pl.show()
259/22: import vpython as vp
259/23: vp.sphere()
259/24:
a=vp.sphere((0,0,0),radius=0.1)
b=vp.sphere((0,1,0),radius=0.2,color='r')
259/25:
a=vp.sphere(pos=(0,0,0),radius=0.1)
b=vp.sphere(pos=(0,1,0),radius=0.2,color='r')
259/26:
a=vp.sphere(pos=vector(0,0,0),radius=0.1)
b=vp.sphere(pos=vector(0,1,0),radius=0.2,color='r')
259/27:
a=vp.sphere(pos=vp.vector(0,0,0),radius=0.1)
b=vp.sphere(pos=vp.vector(0,1,0),radius=0.2,color='r')
259/28:
a=vp.sphere(pos=vp.vector(0,0,0),radius=0.1)
b=vp.sphere(pos=vp.vector(0,1,0),radius=0.2)
259/29:
a=vp.sphere(pos=vp.vector(0,0,0),radius=0.1)
b=vp.sphere(pos=vp.vector(0,3,0),radius=0.2)
259/30:
a=vp.sphere(pos=vp.vector(0,0,0),radius=0.1)
b=vp.sphere(pos=vp.vector(0,3,0),radius=0.2)
259/31:
a=vp.sphere(pos=vp.vector(0,0,0),radius=0.1)
b=vp.sphere(pos=vp.vector(0,3,0),radius=0.2)
259/32:
a=vp.sphere(pos=vp.vector(0,0,0),radius=0.1)
b=vp.sphere(pos=vp.vector(0,3,0),radius=0.2)
260/1:
import numpy as np
from matplotlib.dates import datestr2num
import matplotlib.pyplot as plt
from datetime import datetime as dt
260/2: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
260/3: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
260/4: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
260/5: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
260/6: plt.plot(np.arange(len(co_izana[0]),co_izana[5]))
260/7: len(co_izana[0])
260/8: plt.plot(np.arange(len(co_izana[0])),co_izana[5])
260/9: plt.plot(np.arange(len(co_izana[0])),co_izana[5],'.')
260/10: plots=[plt.plot(np.arange(len(co_izana[0])),co_izana[i],'.') for i in np.arange((5,9))]
260/11: plots=[plt.plot(np.arange(len(co_izana[0])),co_izana[i],'.') for i in np.arange(5,10)]
260/12: plots.shape
260/13: shape(plots)
260/14: np.shape(plots)
260/15: import os.listdir
260/16: from os import listdir
260/17: from os import walk
260/18: path='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_izana/'
260/19:
for (dirpath,dirnames,filenames) in walk(path):
    f.extend(filenames)
260/20:
f=[]
for (dirpath,dirnames,filenames) in walk(path):
    f.extend(filenames)
260/21: f=[fi for fi in f if not fi.endswith("Store") ]
260/22:
path='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_izana/data/'


[co_izana,co_dates]=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_izana/data/2019/06/2019-06-02.txt')

plots=[plt.plot(np.arange(len(co_izana[0])),co_izana[i],'.') for i in np.arange(5,10)]


from os import walk
f=[]
for (dirpath,dirnames,filenames) in walk(path):
    f.extend(filenames)

f=[fi for fi in f if not fi.endswith("Store") ]
260/23:
f=[]
for (dirpath,dirnames,filenames) in walk(path):
    f.extend(dirnames+filenames)

#remove .ds_store macos files from file list    
f=[fi for fi in f if not fi.endswith("Store") ]
260/24: from os import walk, path
260/25:
f=[]
for (dirpath,dirnames,filenames) in walk(path):
#    f.extend(dirnames+filenames)
    f.extend(path.join(dirnames+filenames))

#remove .ds_store macos files from file list    
f=[fi for fi in f if not fi.endswith("Store") ]
260/26:
import os

f=[]
for path in os.listdir(path_izana):
    full_path = os.path.join(path_izana, path)
    if os.path.isfile(full_path):
        f.extend(full_path)
#remove .ds_store macos files from file list    
f=[fi for fi in f if not fi.endswith("Store") ]
260/27:
path_izana='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_izana/data/'


[co_izana,co_dates]=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_izana/data/2019/06/2019-06-02.txt')

plots=[plt.plot(np.arange(len(co_izana[0])),co_izana[i],'.') for i in np.arange(5,10)]


import os

f=[]
for path in os.listdir(path_izana):
    full_path = os.path.join(path_izana, path)
    if os.path.isfile(full_path):
        f.extend(full_path)
#remove .ds_store macos files from file list    
f=[fi for fi in f if not fi.endswith("Store") ]
260/28: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
260/29: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
260/30: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
260/31: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
260/32: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
260/33: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
260/34: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
260/35: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
260/36: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
260/37: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
260/38: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
260/39: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
260/40: path_izana='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_izana/data/'
260/41:
import os
d = path_izana
for path in os.listdir(d):
    full_path = os.path.join(d, path)
    if os.path.isfile(full_path):
        print full_path
260/42:
import os
d = path_izana
for path in os.listdir(d):
    full_path = os.path.join(d, path)
    if os.path.isfile(full_path):
        print (full_path)
260/43:
import os
for root, dirs, files in os.walk(path_izana):
    for d in dirs:
        print (os.path.relpath(os.path.join(root, d), "."))
    for f in files:
        print (os.path.relpath(os.path.join(root, f), "."))
260/44:
for root, dirs, files in os.walk(path_izana):
    # for d in dirs:
    #     print (os.path.relpath(os.path.join(root, d), "."))
    for f in files:
        print (os.path.relpath(os.path.join(root, f), "."))
260/45:
for root, dirs, files in os.walk(path_izana):
    # for d in dirs:
    #     print (os.path.relpath(os.path.join(root, d), "."))
    for f in files:
        f.append(os.path.relpath(os.path.join(root, f), "."))
260/46: f=[]
260/47:
for root, dirs, files in os.walk(path_izana):
    # for d in dirs:
    #     print (os.path.relpath(os.path.join(root, d), "."))
    for f in files:
        f.append(os.path.relpath(os.path.join(root, f), "."))
260/48: paths=[]
260/49:
for root, dirs, files in os.walk(path_izana):
    # for d in dirs:
    #     print (os.path.relpath(os.path.join(root, d), "."))
    for f in files:
        paths.append(os.path.relpath(os.path.join(root, f), "."))
260/50:


paths=[fi for fi in paths if not fi.endswith("Store") ]
260/51:
for root, dirs, files in os.walk(path_izana):
    # for d in dirs:
    #     print (os.path.relpath(os.path.join(root, d), "."))
    for f in files:
        paths.extend(os.path.relpath(os.path.join(root, f), "."))


#remove .ds_store macos files
paths=[fi for fi in paths if not fi.endswith("Store") ]
260/52:
for root, dirs, files in os.walk(path_izana):
    # for d in dirs:
    #     print (os.path.relpath(os.path.join(root, d), "."))
    for f in files:
        paths.extend(os.path.relpath(os.path.join(root, f), "."))
260/53:
for root, dirs, files in os.walk(path_izana):
    # for d in dirs:
    #     print (os.path.relpath(os.path.join(root, d), "."))
    for f in files:
        paths.append(os.path.relpath(os.path.join(root, f), "."))
260/54: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
260/55: paths[0]
260/56: type(paths[0])
260/57: test=LoadData(paths[0])
260/58: test
260/59: test.shape
260/60: test[0].shape
260/61: plt.plot(test[0][:,5])
260/62: plt.plot(test[0][:,5],'.')
260/63: test[1][0]
260/64: test[1][0].weekday()
260/65: data_izana=[LoadData(path)[0] for path in paths]
260/66: [path for path in paths]
260/67: data_izana=[LoadData(path) for path in paths]
260/68: [LoadData(path) for path in paths]
260/69: a=[path for path in paths]
260/70: a=[path for path in paths[0]]
260/71: test=LoadData(a)
260/72: test=LoadData(paths[1])
260/73: test
260/74: path=paths[0]
260/75: path
260/76: LoadData(path)
260/77:

data_izana=[LoadData(path) for path in paths]
260/78: data_izana=[LoadData(path) for path in paths[0]]
260/79: data_izana=[LoadData(path)[0] for path in paths]
260/80:
path_izana=np.zeros((shape(paths),15)
for path in paths:
    path_izana[0]=LoadData(path)
260/81:
path_izana=np.zeros((np.shape(paths),15))
for path in paths:
    path_izana[0]=LoadData(path)
260/82:
path_izana=np.zeros((np.shape(paths)[0],15))
for path in paths:
    path_izana[0]=LoadData(path)
260/83:

path_izana=np.zeros((np.shape(paths)[0],15))
for path in paths:
    path_izana[0]=LoadData(path)[0]
260/84:
path_izana=np.zeros((np.shape(paths),15))
for path in paths:
    path_izana[0]=LoadData(path)[0]
260/85: np.shape(paths)[0]
260/86:

paths_izana=np.zeros((np.shape(paths)[0],15))
for path in paths:
    paths_izana[0]=LoadData(path)[0]
260/87: LoadData(path)[0]
260/88:
for path in paths:
    paths_izana[0]=LoadData(path)[1]
260/89:
paths_izana=np.zeros((np.shape(paths)[0],15))
for path in paths:
    paths_izana[0]=LoadData(path)[1]
260/90: [data_izana,dates_izana]=[LoadData(path)[0] for path in paths]
260/91: [data_izana,dates_izana]=[LoadData(path)[0] for path in paths]
260/92: [data_izana,dates_izana]=[LoadData(path) for path in paths]
260/93: [data_izana,dates_izana]=[LoadData(path) for path in paths[0:5]]
260/94: data_izana=[LoadData(path)[0] for path in paths[0:5]]
260/95: data_izana=[LoadData(path)[0] for path in paths]
260/96: data_izana=[LoadData(path)[0] for path in paths[0:-1]]
260/97: data_izana=[LoadData(path)[0] for path in paths[0:-100]]
260/98: data_izana=[LoadData(path)[0] for path in paths[0:-1000]]
260/99: data_izana=[LoadData(path)[0] for path in paths[0:100]]
260/100: data_izana=[LoadData(path)[0] for path in paths[0:80]]
260/101: data_izana=[LoadData(path)[0] for path in paths[0:60]]
260/102: data_izana=[LoadData(path)[0] for path in paths[0:30]]
260/103: data_izana=[LoadData(path)[0] for path in paths[0:20]]
260/104: data_izana=[LoadData(path)[0] for path in paths[0:10]]
260/105: data_izana=[LoadData(path)[0] for path in paths[0:3]]
260/106: data_izana=[LoadData(path)[0] for path in paths[0:4]]
260/107: data_izana=[LoadData(path)[0] for path in paths[0:6]]
260/108: data_izana=[LoadData(path)[0] for path in paths[0:7]]
260/109: data_izana=[LoadData(path)[0] for path in paths[0:8]]
260/110: data_izana=[LoadData(path)[0] for path in paths[0:9]]
260/111: data_izana=[LoadData(path)[0] for path in paths[0:10]]
261/1: runcell(0, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/2: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/3: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/4: LoadData(paths[10])
261/5: paths[10]
261/6: paths[0]
261/7: test=np.loadtxt(paths[10])
261/8: test=np.loadtxt(paths[0])
261/9: test=np.loadtxt(paths[0],usecols=(2,17))
261/10: test=np.loadtxt(paths[0],usecols=listnp.arange(2,17))
261/11: test=np.loadtxt(paths[0],usecols=list(np.arange(2,17)))
261/12: test
261/13: test=np.loadtxt(paths[10],usecols=list(np.arange(2,17)))
261/14: test=np.loadtxt(paths[10],usecols=list(np.arange(2,17)))
261/15: test=np.loadtxt(paths[10],usecols=list(np.arange(2,15)))
261/16: test=np.loadtxt(paths[10],usecols=list(np.arange(3,10)))
261/17: test=np.loadtxt(paths[10],usecols=list(np.arange(5,6)))
261/18: test=np.loadtxt(paths[10],usecols=list(np.arange(3,4)))
261/19: test=np.loadtxt(paths[10],usecols=list(np.arange(3,4)))
261/20: test=np.loadtxt(paths[10],usecols=list(np.arange(2,17)))
261/21: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/22: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/23: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/24: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/25: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/26: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/27: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/28: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/29: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/30: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/31: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/32: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/33: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/34: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/35: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/36: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/37: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/38: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/39: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/40: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/41: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/42: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/43: plt.plot(data_izana)
261/44: plt.plot(data_izana[:,5])
261/45: [data_izana,dates_izana]=[LoadData(path) for path in paths[0:20]]
261/46:
ata_izana=[LoadData(path)[0] for path in paths[0:20]]
dates_izana=[LoadData(path)[1] for path in paths[0:20]]
261/47: plt.plot(dates_izana[:,5],data_izana[:,5])
261/48:
data_izana=np.array([LoadData(path)[0] for path in paths[0:20]])
dates_izana=np.array([LoadData(path)[1] for path in paths[0:20]])


plt.plot(dates_izana[:,5],data_izana[:,5])
261/49: plt.plot(dates_izana[:],data_izana[:,5])
261/50: plt.plot(dates_izana[:],data_izana[:])
261/51:
data_izana=np.array([np.array(LoadData(path)[0]) for path in paths[0:20]])
dates_izana=np.array([np.array(LoadData(path)[1]) for path in paths[0:20]])


plt.plot(dates_izana[:],data_izana[:])
261/52:
[data_izana,dates_izana]=np.array([np.array(LoadData(path)) for path in paths[0:20]])
#dates_izana=np.array([np.array(LoadData(path)[1]) for path in paths[0:20]])
261/53: [data_izana,dates_izana]=np.array([LoadData(path) for path in paths[0:20]])
261/54: [data_izana,dates_izana]=[LoadData(path) for path in paths[0:20]]
261/55: data_izana=[LoadData(path) for path in paths[0:20]]
261/56: izana=[LoadData(path) for path in paths[0:20]]
261/57: [data_izana,dates_izana]=izana
261/58: a=[1,2]
261/59: [b,c]=a
261/60: b
261/61: a
261/62: c
261/63: b,c=a
261/64: b
261/65: c
261/66: a
261/67: data_izana,dates_izana=izana
261/68: data_izanas,dates_izanas=izana
261/69: izana[0]
261/70: izana[2]
261/71: izana[1]
261/72: izana=array([LoadData(path) for path in paths[0:20]])
261/73: izana=np.array([LoadData(path) for path in paths[0:20]])
261/74: data_izana,dates_izana=izana
261/75: data_izana,dates_izana=izana[0]
261/76: data_izana,dates_izana=np.array([LoadData(path) for path in paths[0:20]])[0]
261/77: plt.plot(dates_izana[:],data_izana[:,5])
261/78: data_izana,dates_izana=np.array([LoadData(path) for path in paths[0:20]])[10]
261/79: plt.plot(dates_izana[:],data_izana[:,5])
261/80: data_izana,dates_izana=[data for data in izana]
261/81: a,b=c,a
261/82: a
261/83: b
261/84: c
261/85: a
261/86: a,b=c,c
261/87: a
261/88: b
261/89: c
261/90:
data_izana=np.array([LoadData(path) for path in paths[0:20]])[:,0]
dates_izana=np.array([LoadData(path) for path in paths[0:20]])[:,1]
261/91:

data_izana=[LoadData(path) for path in paths[0:20]][:,0]
dates_izana=[LoadData(path) for path in paths[0:20]][:,1]
261/92:


data_izana=np.array([LoadData(path) for path in paths[0:20]])[:,0]
dates_izana=np.array([LoadData(path) for path in paths[0:20]])[:,1]
261/93: plt.plot(dates_izana[:],data_izana[:,5])
261/94: plt.plot(co_dates,co_izana[:,5])
261/95: plt.plot(dates_izana[0][:],data_izana[0][:,5])
261/96: plt.plot(dates_izana[1][:],data_izana[1][:,5])
261/97: plt.plot(dates_izana[1][:],data_izana[1][:,5:9])
261/98: plt.plot(dates_izana[1][:],data_izana[1][:,5:9],'.')
261/99: [plt.plot(dates_izana[i][:],data_izana[i][:,5:9],'.') for i in np.arange(len(paths[0:20]))]
261/100: [plt.plot(dates_izana[i][:],data_izana[i][:,5:9],'.') for i in np.arange(len(paths[10:20]))]
261/101: [plt.plot(dates_izana[i][:],data_izana[i][:,5:9],'.') for i in np.arange(len(paths[15:20]))]
261/102: [plt.plot(dates_izana[i][:],data_izana[i][:,5:9],'.') for i in np.arange(len(paths[14:20]))]
261/103: [plt.plot(dates_izana[i][:],data_izana[i][:,5:9],'.') for i in np.arange(len(paths[13:20]))]
261/104: [plt.plot(dates_izana[i][:],data_izana[i][:,5:9],'.') for i in np.arange(len(paths[12:20]))]
261/105: [plt.plot(dates_izana[i][:],data_izana[i][:,5:9],'.') for i in np.arange(len(paths[11:20]))]
261/106: [plt.plot(dates_izana[i][:],data_izana[i][:,5:9],'.') for i in np.arange(len(paths[10:20]))]
261/107: [plt.plot(dates_izana[i][:],data_izana[i][:,5:9],'.') for i in np.arange(len(paths[0:9]))]
261/108: [plt.plot(dates_izana[i][:],data_izana[i][:,5:9],'.') for i in np.arange(len(paths[0:8]))]
261/109: [plt.plot(dates_izana[i][:],data_izana[i][:,5:9],'.') for i in np.arange(len(paths[12:]))]
261/110: [plt.plot(dates_izana[i][:],data_izana[i][:,5:9],'.') for i in np.arange(len(paths[0:8]))]
261/111: [plt.plot(dates_izana[i][:],data_izana[i][:,5:9],'.') for i in np.arange(len(paths[12:]))]
261/112: [plt.plot(dates_izana[i][:],data_izana[i][:,5:9],'.') for i in np.arange(len(paths[12:20]))]
261/113: [plt.plot(dates_izana[i][:],data_izana[i][:,5:9],'.') for i in np.arange(len(paths[12:22]))]
261/114: [plt.plot(dates_izana[i][:],data_izana[i][:,5:9],'.') for i in np.arange(len(paths[12:21]))]
261/115: [plt.plot(dates_izana[i][:],data_izana[i][:,5:9],'.') for i in np.arange(len(paths[20:]))]
261/116: [plt.plot(dates_izana[i][:],data_izana[i][:,5:9],'.') for i in np.arange(len(paths[21:]))]
261/117: [plt.plot(dates_izana[i][:],data_izana[i][:,5:9],'.') for i in np.arange(len(paths[22:]))]
261/118: [plt.plot(dates_izana[i][:],data_izana[i][:,5:9],'.') for i in np.arange(len(paths[23:]))]
261/119: data_izana[i][:,5:9]
261/120: data_izana[25][:,5:9]
261/121: [plt.plot(dates_izana[i][:],data_izana[i][:,5:9],'.') for i in np.arange(20)]
261/122: [plt.plot(dates_izana[i][:],data_izana[i][:,5:9],'.') for i in np.arange(20)]
261/123: [plt.plot(dates_izana[i][:],data_izana[i][:,5:9],'.') for i in np.arange(0:5)]
261/124: [plt.plot(dates_izana[i][:],data_izana[i][:,5:9],'.') for i in np.arange(0,5)]
261/125: [plt.plot(dates_izana[i][:],data_izana[i][:,5:9],'.') for i in np.arange(0,6)]
261/126: runcell('COSQM, IZANA Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/127: dt.fromtimestamp(dates_izana[0])
261/128: dt.fromtimestamp(dates_izana[0][0])
261/129: test=dt.fromtimestamp(dates_izana[0][0])
261/130: test
261/131: test.time
261/132: test.time()
261/133: test.seconds
261/134: test.seconds()
261/135: test.time.seconds
261/136:
test.time(seconds
)
261/137: test.hour
261/138: test.second
261/139: test.time
261/140: test.time()
261/141:
def TimeSeconds(dtobject):
    return dtobject.hour*3600+dtobject.minutes*60+dtobject.seconds


#load all points
data_izana=np.array([LoadData(path) for path in paths[0:20]])[:,0]
dates_izana=np.array(TimeSeconds([LoadData(path)) for path in paths[0:20]])[:,1]
261/142:
def TimeSeconds(dtobject):
    return dtobject.hour*3600+dtobject.minutes*60+dtobject.seconds


#load all points
data_izana=np.array([LoadData(path) for path in paths[0:20]])[:,0]
dates_izana=np.array([TimeSeconds(LoadData(path)) for path in paths[0:20]])[:,1]



[plt.plot(dates_izana[i],data_izana[i][:,5:9],'.') for i in np.arange(0,8)]
261/143: dates_izana=TimeSeconds(np.array([LoadData(path) for path in paths[0:20]])[:,1])
261/144:
def TimeSeconds(timestamp):
    dtobject=dt.fromtimestamp(timestamp)
    return dtobject.hour*3600+dtobject.minutes*60+dtobject.seconds


#load all points
data_izana=np.array([LoadData(path) for path in paths[0:20]])[:,0]
dates_izana=np.array([LoadData(path) for path in paths[0:20]])[:,1]



[plt.plot(dates_izana[i],data_izana[i][:,5:9],'.') for i in np.arange(0,8)]
261/145: [plt.plot(TimeSeconds(dates_izana[i]),data_izana[i][:,5:9],'.') for i in np.arange(0,8)]
261/146: dates_izana_seconds=TimeSeconds(dates_izana)
261/147: dates_izana_seconds=[TimeSeconds(date) for date in dates_izana]
261/148:
dates_izana_seconds=[TimeSeconds(date) for date in dates_izana[day]
                     for day in dates_izana]
261/149: dates_izana_seconds=[TimeSeconds(date) for date in dates_izana[day] for day in dates_izana]
261/150: dates_izana_seconds=[TimeSeconds(date) for date in dates_izana]
261/151: dates_izana_seconds=[TimeSeconds(dates_izana[date]) for date in dates_izana]
261/152: dates_izana_seconds=[TimeSeconds(dates_izana) for date in dates_izana]
261/153:
TimeSeconds(dates_izana[0,0]
)
261/154: dates_izana[0]
261/155: dates_izana[0,0]
261/156: dates_izana[0][0]
261/157: a=np.array([0,1,2,3])
261/158: b=np.array([0,1,2,3],[4,5,6,7])
261/159: b=np.array([[0,1,2,3],[4,5,6,7]])
261/160: b
261/161: b[0]
261/162: b[:,0]
261/163: b[:,1]
261/164: print(val*2 for val in b)
261/165: val*2 for val in b
261/166: [val*2 for val in b]
261/167: c=[val*2 for val in b]
261/168: c.type
261/169: type(c)
261/170: shape(c)
261/171: dates_izana=np.array([np.array(LoadData(path)) for path in paths[0:20]])[:,1]
261/172: dates_izana=np.array([np.array(LoadData(path)[:,1]) for path in paths[0:20]])
261/173: dates_izana=np.array([np.array(LoadData(path)[1]) for path in paths[0:20]])
261/174: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
261/175:


data_izana=np.array([np.array(LoadData(path)[0]) for path in paths[0:20]])
dates_izana=np.array([np.array(LoadData(path)[1]) for path in paths[0:20]])
261/176: [plt.plot(dates_izana_seconds[i],data_izana[i][:,5:9],'.') for i in np.arange(0,8)]
262/1: runcell(0, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/2: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/3: runcell('COSQM, TEIDE Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/4: runcell('COSQM, TEIDE Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/5: runcell('COSQM, TEIDE Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/6: [plt.plot([TimeSeconds(dates_teide[i][index]) for index in dates_teide[i]],data_teide[i][:,5:9],'.') for i in np.arange(0,20)]
262/7: [plt.plot(dates_teide[i],data_teide[i][:,5:9],'.') for i in np.arange(0,20)]
262/8: shape(dates_teide)
262/9: np.shape(dates_teide)
262/10: dates_teide=np.array([np.array(np.array(LoadData(path))[1]) for path in paths[0:20]])
262/11: path
262/12: test=np.array(LoadData(paths[0]))[1]
262/13: test=np.array(LoadData(paths[0]))
262/14: test=LoadData(paths[0])
262/15: test
262/16: test.shape
262/17: np.shape(test)
262/18: np.array(test)
262/19: np.array([test])
262/20: type(test)
262/21: test[0]
262/22: test=LoadData(paths[0])[1]
262/23: test
262/24: np.shape(test)
262/25: test[0]
262/26: test[1]
262/27: test[2]
262/28: print(i) for i in test
262/29: [print(i) for i in test]
262/30: TimeSeconds(test[0])
262/31: runcell('COSQM, TEIDE Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/32: TimeSeconds(test[0])
262/33: TimeSeconds(test[100])
262/34:
TimeSeconds(test[1001)
)
262/35: TimeSeconds(test[1001])
262/36: TimeSeconds(test[101])
262/37: TimeSeconds(test[100])
262/38: TimeSeconds(test[101]-test[100])
262/39:
def TimeSeconds(timestamp_array):
    dtobjects=[dt.fromtimestamp(timestamp) for timestamp in timestamp_array]
    dtseconds=[dtobject.hour*3600+dtobject.minute*60+dtobject.second for dtobject in dtobjects]
    return dtseconds
262/40:

data_teide=np.array([LoadData(path)[0] for path in paths[0:20]])
dates_teide=np.array([LoadData(path)[1] for path in paths[0:20]])

dates_teide_seconds=[TimeSeconds(dates_teide) for date in dates_teide]
262/41: dates_teide=np.array([LoadData(path)[1] for path in paths[0:20]])[0]
262/42: dates_teide=np.array([LoadData(path)[1] for path in paths[0:20]])[1]
262/43: dates_teide=np.array([LoadData(path)[1] for path in paths[0:20]])[2]
262/44: dates_teide=np.array([LoadData(path)[1] for path in paths[0:20]])
262/45: dates_teide=np.array([np.array(LoadData(path))[1] for path in paths[0:20]])
262/46: dates_teide=np.array([np.array(LoadData(path)[1]) for path in paths[0:20]])
262/47: dates_teide_seconds=[TimeSeconds(dates_teide) for date in dates_teide]
262/48: dates_teide=np.array([LoadData(path)[1] for path in paths[0:20]])
262/49: a=np.array([0,1,2,3])
262/50: b=np.array([4,5,6,7])
262/51: c=(a,b)
262/52: c
262/53: type(c)
262/54: type(c[0])
262/55: type(c[1])
262/56: type(c[1][0])
262/57: type(np.array(c))
262/58: d=np.array(c)
262/59: d
262/60: d[0,0]
262/61: d[0,1]
262/62: d[0,-1]
262/63: [co_izana,co_dates]=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_izana/data/2019/06/2019-06-02.txt')
262/64: [co_izana,co_dates]=LoadData('/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_teide/data/2019/06/2019-06-02.txt')
262/65: data_teide,dates_teide=np.array([LoadData(path) for path in paths[0:20]])
262/66: data_teide,dates_teide=[LoadData(path) for path in paths[0:20]]
262/67: [data_teide,dates_teide]=[LoadData(path) for path in paths[0:20]]
262/68: teide=[LoadData(path) for path in paths[0:20]]
262/69: data_teide=teide[0]
262/70: dates_teide=teide[1]
262/71: data_teide=teide[:,0]
262/72: dates_teide=teide[:,1]
262/73: teide=np.array([LoadData(path) for path in paths[0:20]])
262/74: data_teide=teide[0]
262/75: data_teide=teide[0][0]
262/76: dates_teide=teide[0][1]
262/77: dates_teide=teide[1]
262/78: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/79: runcell('COSQM, TEIDE Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/80: runcell('COSQM, TEIDE Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/81: runcell('COSQM, TEIDE Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/82: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/83: runcell('COSQM, TEIDE Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/84: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/85: runcell('COSQM, TEIDE Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/86: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/87:


data_teide = []
dates_teide = []

for path in paths:
    data,delta_t = LoadData(path)
    cosqm_value.append(data)
    delta_ts.append(delta_t)
262/88:

data_teide = []
dates_teide = []

for path in paths:
    data,delta_t = LoadData(path)
    data_teide.append(data)
    dates_teide.append(delta_t)
262/89:


data_teide = []
dates_teide = []

for path in paths[0:1]:
    data,delta_t = LoadData(path)
    data_teide.append(data)
    dates_teide.append(delta_t)
262/90:

data_teide = []
dates_teide = []

for path in paths[0:2]:
    data,delta_t = LoadData(path)
    data_teide.append(data)
    dates_teide.append(delta_t)
262/91:
data_teide = []
dates_teide = []

for path in paths:
    data,date = LoadData(path)
    date=
    data_teide.append(data)
    dates_teide.append(date)
262/92:

def TimeSeconds(timestamp):
    dtobject=dt.fromtimestamp(timestamp)
    return dtobject.hour*3600+dtobject.minute*60+dtobject.second



data_teide = []
dates_teide = []

for path in paths[0:2]:
    data,date = LoadData(path)
    date=TimeSeconds(date)
    data_teide.append(data)
    dates_teide.append(date)
262/93:
data_teide = []
dates_teide = []

for path in paths[0:2]:
    data,dates = LoadData(path)
    dates=[TimeSeconds(date) for date in dates]
    data_teide.append(data)
    dates_teide.append(date)
262/94:

data_teide = []
dates_teide = []

for path in paths:
    data,dates = LoadData(path)
    dates=[TimeSeconds(date) for date in dates]
    data_teide.append(data)
    dates_teide.append(dates)
262/95:

data_teide = []
dates_teide = []

for path in paths[0:10]:
    data,dates = LoadData(path)
    dates=[TimeSeconds(date) for date in dates]
    data_teide.append(data)
    dates_teide.append(dates)
262/96:
data_teide=np.array(data_teide)
dates_teide=np.array(dates_teide)
262/97: data_teide[0]
262/98: data_teide[0,0]
262/99: data_teide[0][0]
262/100:
data_teide = []
dates_teide = []

for path in paths[0:10]:
    data,dates = LoadData(path)
    dates=[TimeSeconds(date) for date in dates]
    data_teide.append(np.array(data))
    dates_teide.append(np.array(dates))

data_teide=np.array(data_teide)
dates_teide=np.array(dates_teide)
262/101: data_teide[0][0]
262/102: data_teide[0,0]
262/103:
def TimeSeconds(timestamp):
    dtobject=dt.fromtimestamp(timestamp)
    return int(dtobject.hour*3600+dtobject.minute*60+dtobject.second)
262/104:
data_teide = []
dates_teide = []

for path in paths[0:10]:
    data,dates = LoadData(path)
    dates=[TimeSeconds(date) for date in dates]
    data_teide.append(np.array(data))
    dates_teide.append(np.array(dates))

data_teide=np.array(data_teide)
dates_teide=np.array(dates_teide)
262/105:

data_teide = []
dates_teide = []

for path in paths[0:10]:
    data,dates = LoadData(path)
    dates=[TimeSeconds(date) for date in dates]
    data_teide.append(np.array(data))
    dates_teide.append(np.array(dates))
262/106:

def TimeSeconds(timestamp):
    dtobject=dt.fromtimestamp(timestamp)
    return int(dtobject.hour*3600+dtobject.minute*60+dtobject.second)

def LoadCosqm(path):
    data_server = np.loadtxt(path, usecols = list(np.arange(2,17)))
    dates_str = np.genfromtxt(path, delimiter = ' ', usecols = [0,1], dtype = 'str')
    dates_cosqm = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ) for dates, times in dates_str ])
    return data_server, dates_cosqm



data_teide = []
dates_teide = []

for path in paths[0:10]:
    data,dates = LoadCosqm(path)
    dates=[TimeSeconds(date) for date in dates]
    data_teide.append(np.array(data))
    dates_teide.append(np.array(dates))
262/107:
data_teide = []
dates_teide = []

for path in paths[0:10]:
    data,dates = LoadCosqm(path)
    dates=[date.hour*3600+date.minute*60+date.second for date in dates]
    data_teide.append(np.array(data))
    dates_teide.append(np.array(dates))
262/108: plt.plot(dates_teide[0],data_teide[0][:,5])
262/109: plt.plot(dates_teide[0],data_teide[0][:,6])
262/110: plt.plot(dates_teide[0],data_teide[0][:,7])
262/111: [plt.plot(dates_teide[i],data_teide[i][:,7]) for i in range(10)]
262/112: [plt.plot(dates_teide[i],data_teide[i][:,7]) for i in range(15)]
262/113:

for path in paths[0:15]:
    data,dates = LoadCosqm(path)
    dates=[date.hour*3600+date.minute*60+date.second for date in dates]
    data_teide.append(np.array(data))
    dates_teide.append(np.array(dates))


[plt.plot(dates_teide[i],data_teide[i][:,7]) for i in range(15)]
262/114: [plt.plot(dates_teide[i],data_teide[i][:,7]) for i in range(15)]
262/115: [plt.plot(dates_teide[i],data_teide[i][:,7],'.') for i in range(15)]
262/116:

data_teide = []
dates_teide = []

for path in paths[0:15]:
    data,dates = LoadCosqm(path)
    dates=[date.hour*3600+date.minute*60+date.second if date.hour<12
           else date.hour*3600+date.minute*60+date.second-3600*12
           for date in dates]
    data_teide.append(np.array(data))
    dates_teide.append(np.array(dates))


[plt.plot(dates_teide[i],data_teide[i][:,7],'.') for i in range(15)]
262/117:
for path in paths[0:1]:
    data,dates = LoadCosqm(path)
    dates=[date.hour*3600+date.minute*60+date.second if date.hour<12
           else date.hour*3600+date.minute*60+date.second-3600*12
           for date in dates]
    data_teide.append(np.array(data))
    dates_teide.append(np.array(dates))


[plt.plot(dates_teide[i],data_teide[i][:,7],'.') for i in range(15)]
262/118: [plt.plot(dates_teide[i],data_teide[i][:,7],'.') for i in range(1)]
262/119:
data_teide = []
dates_teide = []

for path in paths[0:1]:
    data,dates = LoadCosqm(path)
    dates=[date.hour*3600+date.minute*60+date.second if date.hour<12
           else date.hour*3600+date.minute*60+date.second-3600*12
           for date in dates]
    data_teide.append(np.array(data))
    dates_teide.append(np.array(dates))


[plt.plot(dates_teide[i],data_teide[i][:,7],'.') for i in range(1)]
262/120:
data_teide = []
dates_teide = []

for path in paths[0:1]:
    data,dates = LoadCosqm(path)
    dates=[date.hour*3600+date.minute*60+date.second if date.hour<12
           else date.hour*3600+date.minute*60+date.second
           for date in dates]
    data_teide.append(np.array(data))
    dates_teide.append(np.array(dates))


[plt.plot(dates_teide[i],data_teide[i][:,7],'.') for i in range(1)]
262/121:
data_teide = []
dates_teide = []

for path in paths[0:1]:
    data,dates = LoadCosqm(path)
    dates=[date.hour*3600+date.minute*60+date.second if date.hour<12
           else date.hour*3600+date.minute*60+date.second-3600*12
           for date in dates]
    data_teide.append(np.array(data))
    dates_teide.append(np.array(dates))


[plt.plot(dates_teide[i],data_teide[i][:,7],'.') for i in range(1)]
262/122:
data_teide = []
dates_teide = []

for path in paths[0:1]:
    data,dates = LoadCosqm(path)
    dates=[date.hour*3600+date.minute*60+date.second if date.hour<12
           else date.hour*3600+date.minute*60+date.second-3600*24
           for date in dates]
    data_teide.append(np.array(data))
    dates_teide.append(np.array(dates))


[plt.plot(dates_teide[i],data_teide[i][:,7],'.') for i in range(1)]
262/123:


data_teide = []
dates_teide = []

for path in paths[0:15]:
    data,dates = LoadCosqm(path)
    dates=[date.hour*3600+date.minute*60+date.second if date.hour<12
           else date.hour*3600+date.minute*60+date.second-3600*24
           for date in dates]
    data_teide.append(np.array(data))
    dates_teide.append(np.array(dates))


[plt.plot(dates_teide[i],data_teide[i][:,7],'.') for i in range(15)]
262/124:
data_teide = []
dates_teide = []
week_day=np.arange(7)

for path in paths[0:15]:
    data,dates = LoadCosqm(path)
    dates=[date.hour*3600+date.minute*60+date.second if date.hour<12
           else date.hour*3600+date.minute*60+date.second-3600*24
           and date.weekday()==0
           for date in dates]
    data_teide.append(np.array(data))
    dates_teide.append(np.array(dates))


[plt.plot(dates_teide[i],data_teide[i][:,5],'.') for i in range(len(dates_teide))]
262/125:
data_teide = []
dates_teide = []
week_day=np.arange(7)

for path in paths[0:15]:
    data,dates = LoadCosqm(path)
    dates=[date.hour*3600+date.minute*60+date.second if date.hour<12
           else date.hour*3600+date.minute*60+date.second-3600*24
           and date.weekday()==0 or date.weekday()==1 
           for date in dates]
    data_teide.append(np.array(data))
    dates_teide.append(np.array(dates))


[plt.plot(dates_teide[i],data_teide[i][:,5],'.') for i in range(len(dates_teide))]
262/126: a=[0,1,2]
262/127: [print a==0 or a==1 for i in a]
262/128: [print 'yes' if a==0 or a==1 for i in a]
262/129: [print ('yes') if a==0 or a==1 for i in a]
262/130: [print ('yes') if a[i]==0 or a[i]==1 for i in a]
262/131: [print ('yes') if a[i]==0 for i in a]
262/132: [a[2]=4 if a[i]==0 for i in a]
262/133: a[2]=4 if a[i]==0 for i in a
262/134: print (a) if a[i]==0 for i in a
262/135: print (a) for i in a
262/136: print (a[i]) for i in a
262/137: [print (a[i]) for i in a]
262/138: [print (a[i]) if a[i]==0 for i in a]
262/139: [print (a[i]) if a[i]=0 for i in a]
262/140: [print (a[i]) if a[i]==0 and for i in a]
262/141: [print (a[i]) if a[i]==0 for i in a]
262/142: [print (a[i]) if a[i]==0 else for i in a]
262/143: [print (a[i]) if a[i]==0 else print('no') for i in a]
262/144: [print (a[i]) for i in a if a[i]==0]
262/145: [print (a[i]) for i in a if a[i]==0 else a[i]==1]
262/146:
data_teide = []
dates_teide = []
week_day=np.arange(7)

for path in paths[0:15]:
    data,dates = LoadCosqm(path)
    dates=[date.hour*3600+date.minute*60+date.second if date.hour<12
           else date.hour*3600+date.minute*60+date.second-3600*24
           and date.weekday()==0 
           for date in dates]
    data_teide.append(np.array(data))
    dates_teide.append(np.array(dates))


[plt.plot(dates_teide[i],data_teide[i][:,5],'.') for i in range(len(dates_teide))]
262/147:
for root, dirs, files in os.walk(path_teide):
    # for d in dirs:
    #     print (os.path.relpath(os.path.join(root, d), "."))
    for f in files:
        paths.append(os.path.relpath(os.path.join(root, f), "."))
262/148:
data_teide = []
dates_teide = []
week_day=np.arange(7)

for path in paths[0:15]:
    data,dates = LoadCosqm(path)
    dates=[date.hour*3600+date.minute*60+date.second if date.hour<12
           else date.hour*3600+date.minute*60+date.second-3600*24
           and date.weekday()==0
           for date in dates]
    data_teide.append(np.array(data))
    dates_teide.append(np.array(dates))


[plt.plot(dates_teide[i],data_teide[i][:,5],'.') for i in range(len(dates_teide))]
262/149:
data_teide = []
dates_teide = []
week_day=np.arange(7)

for path in paths[0:15]:
    data,dates = LoadCosqm(path)
    dates=[date.hour*3600+date.minute*60+date.second if date.hour<12
           else date.hour*3600+date.minute*60+date.second-3600*24
#           and date.weekday()==0
           for date in dates]
    data_teide.append(np.array(data))
    dates_teide.append(np.array(dates))


[plt.plot(dates_teide[i],data_teide[i][:,5],'.') for i in range(len(dates_teide))]
262/150: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/151: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/152:
def LoadCosqm(path):
    print (path)
    data_server = np.loadtxt(path, usecols = list(np.arange(2,17)))
    dates_str = np.genfromtxt(path, delimiter = ' ', usecols = [0,1], dtype = 'str')
    dates_cosqm = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ) for dates, times in dates_str ])
    return data_server, dates_cosqm
262/153: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/154: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/155: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/156: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/157: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/158: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/159: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/160: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/161: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/162: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/163: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/164: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/165: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/166: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/167: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/168: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/169: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/170: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/171: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/172: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/173: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/174: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/175: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/176: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/177: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/178: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/179: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/180: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/181: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/182: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/183: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/184: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/185: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/186: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/187: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/188: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/189: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/190: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
262/191:

[plt.plot(dates_teide[i],data_teide[i][:,5],'.') for i in range(235)]
262/192: [plt.plot(dates_teide[i],data_teide[i][:,5],'.') for i in range(234)]
262/193: [plt.plot(dates_teide[i],data_teide[i][:,5],'.') for i in range(100)]
262/194: [plt.plot(dates_teide[i],data_teide[i][:,5],'.') for i in range(50)]
262/195: [plt.plot(dates_teide[i],data_teide[i][:,5],'.') for i in range(30)]
262/196: [plt.plot(dates_teide[i],data_teide[i][:,5],'.',markersize=1) for i in range(30)]
262/197: plot()
262/198: plt.plot()
262/199: plt.show()
262/200: [plt.plot(dates_teide[i],data_teide[i][:,5],'.',markersize=1) for i in range(30)]
262/201: [plt.plot(dates_teide[i],data_teide[i][:,5],'.',markersize=1) for i in range(30)]
263/1: runcell(0, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/2: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/3: runcell('COSQM, TEIDE Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/4: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/5: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/6: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/7: runcell('COSQM, TEIDE Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/8: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/9: [plt.plot(dates_teide[i],data_teide[i][:,5],'.',markersize=1) for i in range(30)]
263/10: [plt.plot(dates_teide[i],data_teide[i][:,5],'.',markersize=1) for i in range(35)]
263/11: plt.figure()
263/12: [plt.plot(dates_teide[i],data_teide[i][:,5],'.',markersize=1) for i in range(5)]
263/13: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/14: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/15: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/16: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/17: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/18: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/19: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/20: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/21: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/22: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/23: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/24: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/25: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/26: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/27: [print ('y') if 1==0 or 1==1]
263/28: [print ('y') if 1==0 or if 1==1]
263/29: [print ('y') if 1==0 or 1==1]
263/30: date
263/31: dates
263/32: dates.shape
263/33: shape(dataes)
263/34: shape(dates)
263/35: np.shape
263/36: np.shape(dates)
263/37: dates[0].weekday()
263/38: dates[0]
263/39: dates[1]
263/40: dates[2]
263/41: a=dt.fromtimestamp(dates[0])
263/42: a.weekday()
263/43: a.isoweekday()
263/44: a.weekday()
263/45: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/46: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/47: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/48: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/49: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/50: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/51: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/52: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/53: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/54: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/55: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/56: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/57: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/58: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/59: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/60: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/61: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/62: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/63: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/64: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/65: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/66: runcell(8, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/67: runcell('IZANA OBSERVATORY', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/68: runcell(10, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/69: runcell(10, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/70: runcell(10, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/71: runcell(10, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/72: runcell(10, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/73: runcell(10, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/74: runcell(10, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/75: runcell(10, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/76: runcell('IZANA OBSERVATORY', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/77: runcell(10, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/78: runcell(10, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/79: runcell('IZANA OBSERVATORY', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/80: runcell(10, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/81: runcell(10, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/82: runcell('IZANA OBSERVATORY', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/83: runcell(10, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/84: runcell('IZANA OBSERVATORY', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/85: runcell(10, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/86: print (paths)
263/87: runcell('IZANA OBSERVATORY', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/88: runcell(10, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/89: runcell('IZANA OBSERVATORY', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/90: runcell(10, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/91: runcell('IZANA OBSERVATORY, #2', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/92: runcell(12, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/93: runcell(12, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/94: runcell(12, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/95: runcell(12, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
263/96: [plt.plot(dates_obs[i],data_obs[i][:,9],'.',markersize=1) for i in range(10)]
264/1: runcell(0, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/2: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/3: runcell('COSQM, TEIDE Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/4: runcell('COSQM IZANA Atmospheric center (AEMET)', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/5: runcell('COSQM IZANA OBSERVATORY, #1', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/6: runcell('COSQM IZANA OBSERVATORY, #2', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/7: runcell(0, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/8: runcell('COSQM IZANA OBSERVATORY, #1', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/9: import os
264/10: runcell('COSQM IZANA OBSERVATORY, #1', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/11: runcell('COSQM IZANA OBSERVATORY, #2', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/12:
def LoadCosqm(path):
    print (path)
    data_server = np.loadtxt(path, usecols = list(np.arange(2,17)))
    dates_str = np.genfromtxt(path, delimiter = ' ', usecols = [0,1], dtype = 'str')
    dates_cosqm = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ) for dates, times in dates_str ])
    return data_server, dates_cosqm
264/13: runcell('COSQM IZANA OBSERVATORY, #2', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/14: [plt.plot(dates_obs[i],data_obs[i][:,9],'.',markersize=1) for i in range(10)]
264/15: runcell('COSQM IZANA OBSERVATORY, #2', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/16: dates_obs.shape
264/17: dates_obs
264/18: map(len,dates_obs)
264/19: list(_)
264/20: [len(i) for i in dates_aod]
264/21: [len(i) for i in dates_obs]
264/22: data_obs
264/23: [i.shape for i in data_obs]
264/24: runcell('COSQM IZANA OBSERVATORY, #2', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/25: from glob import glob
264/26: glob("*,txt")
264/27: glob("*.txt")
264/28: pwd
264/29: ls
264/30: glob("Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_obs/data/2020/01/*.txt")
264/31: sorted(_)
264/32: dt
264/33: dt.now()
264/34: a
264/35: a = _
264/36: a
264/37: a.time()
264/38: a.timestamp()
264/39: dt.fromtimestamp(_).weekday()
264/40: type(a.timestamp())
264/41: a
264/42: sizeof(a)
264/43: size(a)
264/44: sizeof?
264/45: import sys
264/46: sys.getsizeof(a)
264/47: sys.getsizeof(a.timestamp())
264/48: typeof(a.timestamp())
264/49: type(a.timestamp())
264/50: sys.getsizeof(1.)
264/51: sys.getsizeof(1)
264/52: b = 1
264/53: 1e32==1e32+1
264/54: type(1e32)
264/55: type(1e32)
264/56: type(1e3)
264/57: type(1e2)
264/58: 1e0
264/59: 1e32==1e32+1
264/60: eval("1e2")
264/61: i=32
264/62:
while(eval(f"1e{i}==1e{i}+1")):
    i-=1
    print(i)
264/63: 1e15==1e15+1
264/64: 1e16==1e16+1
264/65: b
264/66: b.__doc__
264/67: 1+2j
264/68: type(_)
264/69: _.real
264/70: _.real()
264/71: __.real()
264/72: int(_69)
264/73: sys.getsizeof(np.arange(100))
264/74: sys.getsizeof(np.arange(1000))
264/75: sys.getsizeof(np.arange(101))
264/76: sys.getsizeof(np.arange(100000))
264/77: sys.getsizeof(np.arange(100000,dtype=np.uint32))
264/78: sys.getsizeof(np.arange(100000,dtype=np.int64))
264/79: sys.getsizeof(np.arange(100000,dtype=np.int128))
264/80: sys.getsizeof(np.arange(100000,dtype=np.uint16))
264/81: sys.getsizeof(np.arange(100000,dtype=np.uint8))
264/82: sys.getsizeof(np.arange(100000,dtype=np.uint4))
264/83: sys.getsizeof(np.arange(100000,dtype=np.bool))
264/84: sys.getsizeof(np.arange(100000,dtype=np.float32))
264/85: a=np.array([0,1,2,3])
264/86: b=np.array([0,1,2,3])
264/87: c=array([a,b])
264/88: c=np.array([a,b])
264/89: c
264/90: c.T
264/91: c[0]
264/92: c.T[0]
264/93: c=c.T
264/94: c
264/95: c[0,1]
264/96: c[1,0]
264/97: c[1,2]
264/98: c[1,1]
264/99: glob()
264/100: ls
264/101: pwd
264/102: cd Documents/physique/Maitrise/hiver_2020/
264/103: ls
264/104: cd cosqm_aod/
264/105: ls
264/106: cd aod/cosqm_obs/data/
264/107: ls
264/108: glob(*/*.txt)
264/109: glob(*/*/*.txt)
264/110: glob("*/*/*.txt")
264/111: glob("*/*/*.txt").sort
264/112: glob("*/*/*.txt").sort()
264/113: a=glob("*/*/*.txt").sort()
264/114: a
264/115: a=glob("*/*/*.txt").sorted()
264/116: a=sorted(glob("*/*/*.txt"))
264/117: a
264/118: runcell('COSQM IZANA OBSERVATORY, #1', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/119: runcell('COSQM IZANA OBSERVATORY, #2', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/120: [plt.plot(dates_obs[i],data_obs[i][:,9],'.',markersize=1) for i in range(100)]
264/121: cosqm_obs=np.array([np.array(LoadData(paths[i])) for i in paths])
264/122: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/123: runcell('COSQM IZANA OBSERVATORY, #2', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/124: cosqm_obs=np.array([np.array(LoadData(paths[i])) for i in len(paths)])
264/125: cosqm_obs=np.array([np.array(LoadData(paths[i])) for i in range(len(paths))])
264/126: cosqm_obs=np.array([np.array([LoadData(paths[i])[0],LoadData(paths[i])[1]]) for i in range(len(paths))])
264/127: cosqm_obs=np.array([np.array([LoadData(paths[i])[0][0],LoadData(paths[i])[0][1]]) for i in range(len(paths))])
264/128: LoadData(paths[0])[0][0]
264/129: LoadData(paths[0])[0][1]
264/130: LoadData(paths[0])[1][0]
264/131: shape(LoadData(paths[0])[1][0])
264/132: np.shape(LoadData(paths[0])[1][0])
264/133: np.shape(LoadData(paths[0])[0][0])
264/134: cosqm_obs=np.array([np.array([LoadData(paths[i])[1][0],LoadData(paths[i])[0][0]]) for i in range(len(paths))])
264/135: cosqm_obs[0]
264/136: cosqm_obs[0,0]
264/137: cosqm_obs[0,1]
264/138: cosqm_obs[0,2]
264/139: cosqm_obs[0,1,0]
264/140: cosqm_obs[0,1][0]
264/141: cosqm_obs[0,1][1]
264/142: cosqm_obs[0,1][2]
264/143: cosqm_obs[0,1][3]
264/144: cosqm_obs[0,1][4]
264/145: cosqm_obs[0,1][5]
264/146: cosqm_obs[0,1][6]
264/147: cosqm_obs[0,1][7]
264/148: cosqm_obs[0,1][:]
264/149: cosqm_obs=np.array([np.array(LoadData(paths[i])[0]) for i in range(len(paths))])
264/150: cosqm_obs
264/151: cosqm_obs[0]
264/152: cosqm_obs[0].shape()
264/153: cosqm_obs[0].shape
264/154: cosqm_obs[1].shape
264/155: cosqm_obs[2].shape
264/156: cosqm_obs[3].shape
264/157: cosqm_obs[4].shape
264/158: cosqm_obs[5].shape
264/159: print(cosqm_obs[i].shape) for i in range (20)
264/160: [print(cosqm_obs[i].shape) for i in range (20)]
264/161: plt.plot(cosqm_obs[0,5],'.',markersize=1)
264/162: plt.plot(cosqm_obs[0,:,5],'.',markersize=1)
264/163: plt.plot(cosqm_obs[0][:,5],'.',markersize=1)
264/164: plt.plot(cosqm_obs[1][:,5],'.',markersize=1)
264/165: [plt.plot(cosqm_obs[i][:,5],'.',markersize=1) for i in range(20)]
264/166: [plt.plot(cosqm_obs[i][:,5],'.',markersize=1) for i in range(200)]
264/167: np.array(LoadData(paths[0])[1])
264/168: a=np.array(LoadData(paths[0])[1])
264/169: a.shape
264/170: cosqm_obs[0].shape
264/171: cosqm_obs=np.array([np.array(LoadData(paths[i])[0],LoadData(paths[i])[0]) for i in range(len(paths))])
264/172: cosqm_obs=np.array([np.array(LoadData(paths[i])[1],LoadData(paths[i])[0]) for i in range(len(paths))])
264/173: cosqm_obs=np.array([np.array(LoadData([paths[i])[1],LoadData(paths[i])[0]]) for i in range(len(paths))])
264/174: cosqm_obs=np.array([np.array([LoadData(paths[i])[1],LoadData(paths[i])[0]]) for i in range(len(paths))])
264/175: cosqm_obs=np.array([np.array([LoadData(paths[i])[1].T,LoadData(paths[i])[0]].T) for i in range(len(paths))])
264/176: cosqm_obs=np.array(np.array([np.array(LoadData(paths[i])[1]),np.array(LoadData(paths[i])[0])]) for i in range(len(paths))])
264/177:
cosqm_obs=np.array([np.array([np.array(LoadData(paths[i])[1]),np.array(LoadData(paths[i])[1])]) 
                    for i in range(len(paths))])
264/178: LoadData(paths[0])[1]
264/179: a=LoadData(paths[0])[1]
264/180: a.shape
264/181: a.type
264/182: type(a)
264/183: a[0]
264/184: a[1]
264/185: b=LoadData(paths[0])[0]
264/186: b
264/187: b.shape
264/188: b[0]
264/189: b[0].shape
264/190: type(b[0])
264/191:
cosqm_obs=np.array([[np.array(LoadData(paths[i])[1]),np.array(LoadData(paths[i])[1])]
                    for i in range(len(paths))])
264/192: c=[a,b]
264/193: c=np.array([a,b])
264/194: c=np.array([a.T,b.T])
264/195: c=[a,b]
264/196: a=np.array([[0],[0,1,2,]])
264/197: b=np.array([3,4,5])
264/198: a.shape
264/199: b.shape
264/200: a
264/201: a.shape
264/202: b
264/203: b.shape
264/204: c.shapq
264/205: c.shape
264/206: c=np.array(c)
264/207: shape(c)
264/208: np.shape(c)
264/209:
cosqm_obs=np.array([[np.array(LoadData(paths[i])[1]),np.array(LoadData(paths[i])[0])]
                    for i in range(len(paths))])
264/210: dts=np.array([dt.fromtimestamp(cosqm_obs[0,i]) for i in range(cosqm_obs.shape[0])])
264/211: dts=np.array([dt.fromtimestamp(cosqm_obs[0,i]) for i in range(cosqm_obs.shape[0][0])])
264/212: cosqm_obs.shape[0]
264/213: dts=np.array([dt.fromtimestamp(cosqm_obs[0][i]) for i in range(cosqm_obs.shape[0])])
264/214: dt.fromtimestamp(cosqm_obs[0][0])
264/215: cosqm_obs[0][0]
264/216: cosqm_obs[0][0,0]
264/217: cosqm_obs[0,0][0]
264/218: cosqm_obs[0,0][1]
264/219: cosqm_obs[0,0][2]
264/220: dts=np.array([dt.fromtimestamp(cosqm_obs[0,0][i]) for i in range(cosqm_obs.shape[0])])
264/221: dts=np.array([dt.fromtimestamp(cosqm_obs[0,0][i]) for i in range(cosqm_obs.shape[0]-1)])
264/222: dts=np.array([dt.fromtimestamp(cosqm_obs[0,0][i]) for i in range(cosqm_obs.shape[0]-2)])
264/223: cosqm_obs.shape[0]
264/224: a=np.array([0,1,2,3])
264/225: b=np.array([4,5,6,7])
264/226: c=np.array([a,b])
264/227: c.shape
264/228: c
264/229: d=c+1
264/230: d
264/231: e=np.array([c,d])
264/232: e
264/233: e.shape
264/234: e[0,1,2]
264/235: e=np.append(c,d)
264/236: e
264/237: e.shape
264/238: e=np.append([c],[d])
264/239: e
264/240: e.shape
264/241: e=np.insert(c,d)
264/242: e=np.insert(c,-1,d)
264/243: e=np.concatenate(c,d)
264/244: c
264/245: d
264/246: e=np.concatenate(c,d)
264/247: e=np.concatenate((c,d))
264/248: e
264/249: [[np.concatenate((LoadData(paths[i])[1])),np.concatenate((LoadData(paths[i])[0]))] ]
264/250: for i in range(len(paths))])
264/251: for i in range(len(paths))])
264/252:

cosqm_obs=np.array([[np.array(LoadData(paths[i])[1]),np.array(LoadData(paths[i])[0])] 
                    for i in range(len(paths))])
264/253: cosqm_obs.shape[0,0]
264/254: cosqm_obs.shape[0]
264/255: cosqm_obs.shape[0][0]
264/256: cosqm_obs[0].shape
264/257: cosqm_obs[1].shape
264/258: cosqm_obs[2].shape
264/259: cosqm_obs[0,0].shape
264/260: cosqm_obs[0,1].shape
264/261: e
264/262: e.concatenate(b)
264/263: e.append(b)
264/264: f=np.array([[1,2],[3,4],[5,6]])
264/265: f
264/266: g=np.array([1,2])
264/267: g
264/268: f
264/269: f.shape
264/270: g.shape
264/271: h=[np.concatenate((g,f[i])) for i in range (2)]
264/272: h
264/273: h.shape
264/274: h=np.array([np.concatenate((g,f[i])) for i in range (2)])
264/275: h.shape
264/276: h
264/277:
for path in paths:
    cosqm_obs.append(LoadData(path)[0])
264/278:
for path in paths:
    cosqm_obs=np.append(LoadData(path)[0])
264/279:
cosqm_obs=np.ones(15)
for path in paths:
    cosqm_obs=np.append(cosqm_obs,LoadData(path)[0])
264/280:
cosqm_obs=np.ones(15)
for path in paths:
    cosqm_obs=np.concatenate(cosqm_obs,LoadData(path)[0])
264/281: LoadData(paths[0])[0]
264/282: a=LoadData(paths[0])[0]
264/283: a.shape
264/284:
cosqm_obs=np.ones(15)
for path in paths:
    cosqm_obs=[np.concatenate(cosqm_obs,LoadData(path)[0]) for i in range(len(np.shape(LoadData(path)[0])))]
264/285:
cosqm_obs=np.ones(15)
for path in paths:
    cosqm_obs=np.concatenate(cosqm_obs,LoadData(path)[0])
264/286: files=[LoadData(path) for path in paths]
264/287: files[0]
264/288: files[1]
264/289: files[0].shape
264/290: npéshape(files[0])
264/291: np.shape(files[0])
264/292: type(files[0])
264/293: type(files)
264/294: type(files[0][0])
264/295: type(files[0][1])
264/296: files[0][1]
264/297: files[0][0]
264/298: files[0][0].shape
264/299: files[0][1].shape
264/300: files[1][1].shape
264/301: files[2][1].shape
264/302: cosqm_obs=np.concatenate(files)
264/303: cosqm_obs=np.concatenate(files[:][0])
264/304: cosqm_obs=np.concatenate(files[:])
264/305: files=np.array([LoadData(path) for path in paths])
264/306: cosqm_obs=np.concatenate(files[:,0])
264/307: plt.plot(cosqm_obs[5],'.',markersize=1)
264/308: plt.plot(cosqm_obs[:,5],'.',markersize=1)
264/309:

plt.plot(cosqm_obs[:,5],'.',markersize=1,color='k')
plt.plot(cosqm_obs[:,6],'.',markersize=1,color='r')
plt.plot(cosqm_obs[:,7],'.',markersize=1,color='g')
plt.plot(cosqm_obs[:,8],'.',markersize=1,color='b')
plt.plot(cosqm_obs[:,9],'.',markersize=1,color='y')
264/310: runcell('COSQM IZANA AEMET, #1', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/311: runcell('COSQM IZANA AEMET, #2', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/312: runcell('COSQM IZANA OBSERVATORY, #1', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/313: runcell('COSQM IZANA OBSERVATORY, #2', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/314: path+"*/*/*.txt"
264/315: runcell('COSQM IZANA AEMET, #1', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/316: runcell('COSQM IZANA AEMET, #2', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/317: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/318: runcell('COSQM IZANA AEMET, #1', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/319: runcell('COSQM SANTA CRUZ ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/320: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/321: runcell('COSQM SANTA CRUZ ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/322: runcell('COSQM SANTA CRUZ ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/323: runcell('COSQM SANTA CRUZ ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/324: runcell('COSQM SANTA CRUZ ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/325: runcell('COSQM SANTA CRUZ ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/326: runcell(9, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/327: runcell(9, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/328: runcell('COSQM SANTA CRUZ ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/329: runcell('Plot Santa Cruz', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/330: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/331: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/332: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/333: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/334: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/335: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/336: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/337: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/338: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/339: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/340: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/341: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/342: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/343: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/344: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/345: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/346: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/347: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/348: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/349: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/350: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/351: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/352: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/353: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/354: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/355: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/356: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/357: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/358: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/359: runcell('COSQM SANTA CRUZ', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/360: runcell('Plot Santa Cruz', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/361: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/362: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/363: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/364: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/365: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/366: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/367: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/368: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/369: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/370: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/371: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/372: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/373: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/374: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/375: runcell('Plot Santa Cruz', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/376: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/377: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/378: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/379: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/380: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/381: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/382: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/383: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/384: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/385: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/386: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/387: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/388: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/389: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/390: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/391: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/392: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/393: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/394: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/395: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/396: runcell('Plot Teide', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/397: runcell('Plot Teide', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/398: runcell('Plot Teide', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/399: np.max(cosqm_teide[:,6])
264/400: np.argmax(cosqm_teide[:,6])
264/401: dates_teide=np.concatenate(files[:,1])
264/402: dates_teide[np.argmax(cosqm_teide[:,6])]
264/403: dt.fromtimestamp(dates_teide[np.argmax(cosqm_teide[:,6])])
264/404: runcell('Plot Teide', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/405: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/406: runcell('Plot Teide', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/407: dt.fromtimestamp(dates_teide[np.argmax(cosqm_teide[:,6])])
264/408: runcell('Plot Teide', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/409: runcell('Plot Teide', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/410: runcell('Plot Teide', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/411: runcell('Plot Teide', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/412: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/413: runcell('Plot Teide', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/414: runcell('Plot Teide', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/415: runcell('Plot Teide', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/416: runcell('Plot Teide', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/417: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
264/418: dt.fromtimestamp(dates_teide[np.argmax(cosqm_teide[14000,6])])
264/419: dt.fromtimestamp(dates_teide(14000))
264/420: dt.fromtimestamp(dates_teide(14000))
264/421: dt.fromtimestamp(dates_teide[14000])
265/1: runcell(0, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/2: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/3: runcell('COSQM SANTA CRUZ', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/4: runcell('Plot Santa Cruz', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/5: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/6: runcell('Plot Teide', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/7: plt.plot(cosqm_teide[:,5],'.',markersize=1,color='k')
265/8: plt.plot(-cosqm_teide[:,5],'.',markersize=1,color='k')
265/9: plt.plot(-cosqm_teide[:,5],'-',markersize=1,color='k')
265/10: plt.plot(-cosqm_teide[:,5],'-',markersize=0.5,color='k')
265/11: runcell('COSQM IZANA AEMET  ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/12: runcell('COSQM IZANA AEMET  ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/13: runcell('COSQM IZANA AEMET  ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/14: runcell('COSQM IZANA AEMET  ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/15: runcell('Plot Izana AEMET', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/16: runcell('Plot Izana AEMET', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/17: runcell('Plot Izana AEMET', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/18: runcell('Plot Izana AEMET', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/19: runcell('Plot Izana AEMET', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/20: runcell('Plot Izana AEMET', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/21: runcell('Plot Izana AEMET', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/22: print(cosqm_izana[0])
265/23: print(cosqm_izana[1])
265/24: runcell('COSQM IZANA AEMET  ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/25: cosqm_izana=np.concatenate(cosqm_izana, files[1])
265/26: runcell('COSQM IZANA AEMET  ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/27: runcell('COSQM IZANA AEMET  ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/28: files[1])
265/29: files[1]
265/30: files[1,1]
265/31: len(files[1,1])
265/32: cosqm_izana=np.concatenate(cosqm_izana, files[1,1])
265/33: runcell('COSQM IZANA AEMET  ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/34: cosqm_izana=np.concatenate((cosqm_izana, files[1,1]))
265/35: cosqm_izana=np.concatenate((cosqm_izana, (files[1,1])))
265/36: cosqm_izana=np.concatenate((cosqm_izana, [files[1,1]]))
265/37: cosqm_izana=np.concatenate((cosqm_izana, files[1,1]))
265/38: runcell('COSQM IZANA AEMET  ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/39: cosqm_izana=np.concatenate((cosqm_izana[5:9].T, files[1,1].T))
265/40: dates_izana=files[:,1]
265/41: dates_izana=files[1]
265/42: dates_izana=files[1,1]
265/43: print(dt.fromtimestamp(cosqm_izana[1]))
265/44: dates_izana=files[1]
265/45: dates_izana=files[1,0]
265/46: dates_izana=files[1,1]
265/47: runcell('Plot Izana AEMET', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/48: runcell('COSQM IZANA OBSERVATORY', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/49: runcell('Plot Izana Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/50: runcell('Plot Izana AEMET', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/51: print(dt.fromtimestamp(cosqm_izana[1,1]))
265/52: print(dt.fromtimestamp(cosqm_izana[1,10000]))
265/53: print(dt.fromtimestamp(cosqm_izana[1,00))
265/54: print(dt.fromtimestamp(cosqm_izana[1,00])
265/55: print(dt.fromtimestamp(cosqm_izana[1,00]))
265/56: print(dt.fromtimestamp(cosqm_izana[1,100]))
265/57: print(dt.fromtimestamp(cosqm_izana[1,15)[0]])
265/58: print(dt.fromtimestamp(cosqm_izana[1,15][0])
265/59: print(dt.fromtimestamp(cosqm_izana[1,15][0]))
265/60: print(dt.fromtimestamp(cosqm_izana[1,0][0]))
265/61: print(dt.fromtimestamp(cosqm_izana[1]))
265/62: dt.fromtimestamp(cosqm_izana[1])
265/63: dt.fromtimestamp(cosqm_izana[0,0])
265/64: dt.fromtimestamp(cosqm_izana[1,0])
265/65: dt.fromtimestamp(cosqm_izana[2,0])
265/66: dt.fromtimestamp(cosqm_izana[2,1])
265/67: dt.fromtimestamp(cosqm_izana[2,2])
265/68: dates_izana=files[:,1]
265/69: dates_izana=files[1,1]
265/70: print(dt.fromtimestamp(dates_izana[1]))
265/71: print(dt.fromtimestamp(dates_izana[10000]))
265/72: print(dt.fromtimestamp(dates_izana[1000]))
265/73: print(dt.fromtimestamp(dates_izana[100]))
265/74: print(dt.fromtimestamp(dates_izana[80]))
265/75: dates_izana=files[1]
265/76: dates_izana=np.concatenate(files[:,1])
265/77: print(dt.fromtimestamp(dates_izana[8000]))
265/78: print(dt.fromtimestamp(dates_izana[60000]))
265/79: dates_izana_day=[dt.fromtimestamp(date).weekday() for date in dates_izana]
265/80:
[plt.plot(dates_izana[date], cosqm_izana[date,5],'.',markersize=1,color='k') for date in range(len(dates_izana)
                                                                            if dates_izana[i].weekday()==0
265/81:

[plt.plot(dates_izana[date], cosqm_izana[date,5],'.',markersize=1,color='k') 
 for date in range(len(dates_izana))
 if dates_izana[i].weekday()==0]
265/82:

[plt.plot(dates_izana[date], cosqm_izana[date,5],'.',markersize=1,color='k') 
 for date in range(len(dates_izana))
 if dates_izana[date].weekday()==0]
265/83:
[plt.plot(dates_izana[date], cosqm_izana[date,5],'.',markersize=1,color='k') 
 for date in range(len(dates_izana))
 if dates_izana_day[date]==0]
265/84: dt_izana=[dt.fromtimestamp(date) for date in dates_izana]
265/85:
[plt.plot(dates_izana[date], cosqm_izana[date,5],'.',markersize=1,color='k') 
 for date in range(len(dates_izana))
 if dt_izana[date].weekday()==0 and ]
265/86:

[plt.plot(dates_izana[date], cosqm_izana[date,5],'.',markersize=1,color='k') 
 for date in range(len(dates_izana))
 if dt_izana[date].weekday()==0 ]
265/87: if dt_izana[date].weekday()==0 or dt_izana[date].weekday()==1 ]
265/88:


[plt.plot(dates_izana[date], cosqm_izana[date,5],'.',markersize=1,color='k') 
 for date in range(len(dates_izana))
 if dt_izana[date].weekday()==0 or dt_izana[date].weekday()==1 ]
265/89:
[plt.plot(dates_izana[date], cosqm_izana[date,5],'.',markersize=1,color='k') 
 for date in range(len(dates_izana))
 if dt_izana[date].weekday()==1 ]

[plt.plot(dates_izana[date], cosqm_izana[date,5],'.',markersize=1,color='r') 
 for date in range(len(dates_izana))
 if dt_izana[date].weekday()==0 ]
265/90:
[plt.plot(dates_izana[date], cosqm_izana[date,5],'.',markersize=5,color='k') 
 for date in range(len(dates_izana))
 if dt_izana[date].weekday()==1 ]

[plt.plot(dates_izana[date], cosqm_izana[date,5],'.',markersize=5,color='r') 
 for date in range(len(dates_izana))
 if dt_izana[date].weekday()==0 ]
265/91:
[plt.plot(dates_izana[date], cosqm_izana[date,5],'.',markersize=5,color='k') 
 for date in range(len(dates_izana))
 if dt_izana[date].weekday()==1 ]

[plt.plot(dates_izana[date], cosqm_izana[date,5],'.',markersize=5,color='r') 
 for date in range(len(dates_izana))
 if dt_izana[date].weekday()==0 ]
265/92: runcell('COSQM IZANA OBSERVATORY', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/93: runcell('Plot Izana Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/94: runcell('Plot Izana Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/95: runcell('COSQM IZANA AEMET  ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/96: runcell('Plot Izana AEMET', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/97: runcell('COSQM IZANA AEMET  ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/98:
plt.plot(cosqm_izana[:,5],'.',markersize=1,color='r')
plt.plot(cosqm_izana[:,6],'.',markersize=1,color='r')
plt.plot(cosqm_izana[:,7],'.',markersize=1,color='g')
plt.plot(cosqm_izana[:,8],'.',markersize=1,color='b')
plt.plot(cosqm_izana[:,9],'.',markersize=1,color='y')
265/99: plt.plot(cosqm_izana[:,5],'.',markersize=1,color='r')
265/100:
plt.plot(cosqm_izana[:,5],'.',markersize=1,color='k')
plt.plot(cosqm_izana[:,6],'.',markersize=1,color='r')
plt.plot(cosqm_izana[:,7],'.',markersize=1,color='g')
265/101: dt_izana[0].month
265/102: dt_izana[-1].month
265/103: dt_izana[0].day()
265/104: dt_izana[-1].day()
265/105: dt_izana[-1]
265/106: dt_izana[-1].day
265/107:

[plt.plot(dates_izana[date], cosqm_izana[date,5],'.',markersize=5,color='r')
 for date in range(len(dates_izana))
 if 18<dt_izana[date].day<28 and dt_izana[date].month==2] ]
265/108:

[plt.plot(dates_izana[date], cosqm_izana[date,5],'.',markersize=5,color='r')
 for date in range(len(dates_izana))
 if 18<dt_izana[date].day<28 and dt_izana[date].month==2]
265/109:
[plt.plot(dates_izana[date], cosqm_izana[date,5],'.',markersize=5,color='r')
 for date in range(len(dates_izana))
 if 15<dt_izana[date].day<30 and dt_izana[date].month==2]
265/110: runcell('COSQM IZANA OBSERVATORY', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/111:
[plt.plot(dates_obs[date], cosqm_obs[date,5],'.',markersize=5,color='r')
 for date in range(len(dates_obs))
 if 15<dt_obs[date].day<30 and dt_obs[date].month==2]
265/112:
[plt.plot(dates_obs[date], cosqm_obs[date,5],'.-',markersize=5,color='k')
 for date in range(len(dates_obs))
 if 20<dt_obs[date].day<26 and dt_obs[date].month==2]
265/113:

[plt.plot(dates_obs[date], cosqm_obs[date,5],'-.',markersize=5,color='k')
 for date in range(len(dates_obs))
 if 20<dt_obs[date].day<26 and dt_obs[date].month==2]
265/114:
[plt.plot(dates_obs[date], cosqm_obs[date,5+i],'',markersize=5,color='k')
 for i in np.arange(5)
 for date in range(len(dates_obs))
 if 20<dt_obs[date].day<26 and dt_obs[date].month==2]
265/115: runcell('Plot Izana Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/116:
[plt.plot(dates_obs[date], cosqm_obs[date,5],'.',markersize=5,color='k')
 for date in range(len(dates_obs))
 if 20<dt_obs[date].day<26 and dt_obs[date].month==2]
265/117:
[plt.plot(dates_obs[date], cosqm_obs[date,5],'.',markersize=5,color='k')
 for date in range(len(dates_obs))
 if 20<dt_obs[date].day<28 and dt_obs[date].month==2]
265/118: runcell('COSQM SANTA CRUZ', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/119: runcell('Plot Santa Cruz', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/120:
[plt.plot(dates_santa[date], cosqm_santa[date,5],'.',markersize=5,color='k')
 for date in range(len(dates_santa))
 if 20<dt_santa[date].day<27 and dt_santa[date].month==2]
265/121:
[plt.plot(dates_santa[date], cosqm_santa[date,5],'.',markersize=5,color='k')
 for date in range(len(dates_santa))
 if 20<dt_santa[date].day<27 and dt_santa[date].month==2]
265/122:
[plt.plot(dates_santa[date], cosqm_santa[date,5],'.',markersize=5,color='k')
 for date in range(len(dates_santa))
 if 20<dt_santa[date].day<27 and dt_santa[date].month==2]
265/123: runcell('COSQM SANTA CRUZ', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
265/124:
[plt.plot(dates_santa[date], cosqm_santa[date,5],'.',markersize=5,color='k')
 for date in range(len(dates_santa))
 if 20<dt_santa[date].day<27 and dt_santa[date].month==2]
265/125:
[plt.plot(dates_santa[date], cosqm_santa[date,5+i],'.',markersize=5,color='k')
 for i in np.arange(5)
 for date in range(len(dates_santa))
 if 20<dt_santa[date].day<27 and dt_santa[date].month==2]
266/1: runcell(0, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
266/2: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
266/3: runcell('COSQM SANTA CRUZ', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
266/4:
[plt.plot(dates_santa[date], cosqm_santa[date,5+i],'.',markersize=5,color='k')
 for date in range(len(dates_santa))
 for i in np.arange(5)
 if 20<dt_santa[date].day<27 and dt_santa[date].month==2]
267/1: runcell(0, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/1: runcell(0, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/2: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/3: runcell('COSQM SANTA CRUZ', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/4:
[plt.plot(dates_santa[date], cosqm_santa[date,5+i],'.',markersize=5,color='k')
 for date in range(len(dates_santa))
 for i in np.arange(5)
 if 20<dt_santa[date].day<27 and dt_santa[date].month==2]
268/5:
color=['k','r','g','b','y']
for i in np.arange(5):
    [plt.plot(dates_santa[date], cosqm_santa[date,5+i],'.',markersize=5,color=color[i])
     for date in range(len(dates_santa))
     if 20<dt_santa[date].day<27 and dt_santa[date].month==2]
268/6:
color=['k','r','g','b','y']
for i in np.arange(5):
    [plt.plot(dates_santa[date], cosqm_santa[date,5+i],'.',markersize=2,color=color[i])
     for date in range(len(dates_santa))
     if 19<dt_santa[date].day<28 and dt_santa[date].month==2]
268/7: time_calima=[dates_santa[date] for date in range(len(dates_santa)) if 19<dt_santa[date].day<28 and dt_santa[date].month==2]
268/8:
color=['k','r','g','b','y']
for i in np.arange(5):
    plt.plot(dates_santa[time_calima], cosqm_santa[time_calima,5+i],'.',markersize=2,color=color[i])
268/9: calima_index=[index for index in range(len(dates_santa)) if 19<dt_santa[index.day<28 and dt_santa[index].month==2]
268/10: calima_index=[index for index in range(len(dates_santa)) if 19<dt_santa[index].day<28 and dt_santa[index].month==2]
268/11:
for i in np.arange(5):
    plt.plot(dates_santa[calima_index], cosqm_santa[calima_index,5+i],'.',markersize=2,color=color[i])
268/12:
for i in np.arange(5):
    plt.plot(dates_santa[calima_index], cosqm_santa[calima_index,5+i],'.',markersize=2,color=color[i])
268/13:
calima_index=[index for index in range(len(dates_santa)) 
              if 19<dt_santa[index].day<28 and dt_santa[index].month==2]

color=['k','r','g','b','y']
for i in np.arange(5):
    plt.plot(dates_santa[calima_index], cosqm_santa[calima_index,5+i],'.',markersize=2,color=color[i])
268/14: calima_mask=(dates>=dt.datetime(2020,02,20))*(dates<=dt.datetime(2020,02,28))
268/15: dates[0]
268/16: calima_mask=(dates_santa>=dt.datetime(2020,2,20))*(dates_santa<=dt.datetime(2020,2,28))
268/17: dt.datetime(2020,2,20)
268/18: dates_santa[0]
268/19: dt.fromtimestamp(dates_santa[0])
268/20: calima_mask=(dates_santa>=dt.datetime.datetime(2020,2,20))*(dates_santa<=dt.datetime(2020,2,28))
268/21: calima_mask=(dates_santa>=dt.datetime(2020,2,20),0,0,0)*(dates_santa<=dt.datetime(2020,2,28))
268/22: calima_mask=(dates_santa>=dt.datetime(2020,2,20),0,0,0)*(dates_santa<=dt.datetime(2020,2,28,0,0,0))
268/23: calima_mask=(dates_santa>=dt(2020,2,20),0,0,0)*(dates_santa<=dt(2020,2,28,0,0,0))
268/24: calima_mask=(dates_santa>=dt(2020,2,20).timestamp)*(dates_santa<=dt(2020,2,28).timestamp)
268/25: calima_mask=(dates_santa>=dt(2020,2,20).timestamp())*(dates_santa<=dt(2020,2,28).timestamp())
268/26:
color=['k','r','g','b','y']
for i in np.arange(5):
    plt.plot(dates_santa[calima_mask], cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i])
268/27:
color=['k','r','g','b','y']
for i in np.arange(5):
    plt.plot(dates_santa[calima_mask], cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i])
268/28:
for i in np.arange(5):
    plt.plot(dates_santa[calima_mask].day(), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i])
268/29: calima_days=[calima.day() for calima in calima_mask]
268/30: calima_days=[calima.day() for calima in dt.fromstimestamp(calima_mask)]
268/31: dt.fromstimestamp(calima_mask)
268/32: dt.fromtimestamp(100000)
268/33: calima_days=[calima.day() for dt.fromtimestamp(calima) in calima_mask]
268/34: calima_days=[dt.fromtimestamp(calima).day() for calima in calima_mask]
268/35: calima_days=[dt.fromtimestamp(calima).day for calima in calima_mask]
268/36: calima_days=[dt.fromtimestamp(calima).day for calima in dates_santa[calima_mask]]
268/37: calima_days=[dt.fromtimestamp(calima).date for calima in dates_santa[calima_mask]]
268/38: calima_days=[dt.fromtimestamp(calima).date() for calima in dates_santa[calima_mask]]
268/39:
color=['k','r','g','b','y']
for i in np.arange(5):
    plt.plot(dates_santa[calima_mask], cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i])
    plt.xlabel('Date')
    plt.xlabel('ZNSB (mag)')
    plt.xticks(np.arange(first_day,last_day), calima_days, rotation=20)
268/40:
color=['k','r','g','b','y']
for i in np.arange(5):
    plt.plot(dates_santa[calima_mask], cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i])
    plt.xlabel('Date')
    plt.ylabel('ZNSB (mag)')
    plt.xticks(np.arange(first_day,last_day), calima_days, rotation=20)
268/41:
first_day=20
last_day=28
268/42:
calima_mask=(dates_santa>=dt(2020,2,first_day).timestamp())*(dates_santa<=dt(2020,2,last_day).timestamp())
calima_days=[dt.fromtimestamp(calima).date() for calima in dates_santa[calima_mask]]

color=['k','r','g','b','y']
for i in np.arange(5):
    plt.plot(dates_santa[calima_mask], cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i])
    plt.xlabel('Date')
    plt.ylabel('ZNSB (mag)')
    plt.xticks(np.arange(first_day,last_day), calima_days, rotation=20)
268/43:
color=['k','r','g','b','y']
for i in np.arange(5):
    plt.plot(dates_santa[calima_mask], cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i])
    plt.xlabel('Date')
    plt.ylabel('ZNSB (mag)')
    plt.xticks(np.arange(first_day,last_day,last_day-first_day), calima_days, rotation=20)
268/44: idxs=np.arange(first_day,last_day,last_day-first_day)
268/45: idxs=np.arange(first_day,last_day,1)
268/46: calima_days[0:-1:len(calime_days)/last_day-first_day]
268/47: calima_days[0:-1:len(calima_days)/last_day-first_day]
268/48: a=np.arange(10)
268/49: a
268/50: a[0:3]
268/51: a[0:3:2]
268/52: a[0:3:4]
268/53: a[0:3:6]
268/54: a[0:9:2]
268/55: len(calima_days)/last_day-first_day
268/56: calima_days[0:-1:int(len(calima_days)/(last_day-first_day))]
268/57:
color=['k','r','g','b','y']
for i in np.arange(5):
    plt.plot(dates_santa[calima_mask], cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i])
    plt.xlabel('Date')
    plt.ylabel('ZNSB (mag)')
    plt.xticks(np.arange(first_day+1,last_day), calima_days[0:-1:int(len(calima_days)/(last_day-first_day))], rotation=20)
268/58:

color=['k','r','g','b','y']
for i in np.arange(5):
    plt.plot(dates_santa[calima_mask], cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i])
    plt.xlabel('Date')
    plt.ylabel('ZNSB (mag)')
    plt.xticks(np.arange(last_day-first_day), calima_days[0:-1:int(len(calima_days)/(last_day-first_day))], rotation=20)
268/59: ticks_labels=calima_days[0:-1:int(len(calima_days)/(last_day-first_day))]
268/60: ticks_labels=calima_days[0:-1:int(len(calima_days)/(last_day-first_day))+1]
268/61: inc=int(len(calima_days)/(last_day-first_day))+1
268/62:
inc=int(len(calima_days)/(last_day-first_day))+1
idxs=np.arange(0,len(calima_days),inc)
ticks_labels=calima_days[0:-1:inc]
268/63:
color=['k','r','g','b','y']
for i in np.arange(5):
    plt.plot(dates_santa[calima_mask], cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i])
    plt.xlabel('Date')
    plt.ylabel('ZNSB (mag)')
    plt.xticks(idxs, ticks_labels, rotation=20)
268/64:

color=['k','r','g','b','y']
for i in np.arange(5):
    plt.plot(calima_mask, cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i])
    plt.xlabel('Date')
    plt.ylabel('ZNSB (mag)')
    plt.xticks(idxs, ticks_labels, rotation=20)
268/65: dates_santa[calima_mask]
268/66:
color=['k','r','g','b','y']
for i in np.arange(5):
    plt.plot(np.arange(calima_mask==True), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i])
    plt.xlabel('Date')
    plt.ylabel('ZNSB (mag)')
    plt.xticks(idxs, ticks_labels, rotation=20)
268/67:
color=['k','r','g','b','y']
for i in np.arange(5):
    plt.plot(np.arange(calima_mask>0), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i])
    plt.xlabel('Date')
    plt.ylabel('ZNSB (mag)')
    plt.xticks(idxs, ticks_labels, rotation=20)
268/68:
color=['k','r','g','b','y']
for i in np.arange(5):
    plt.plot(np.arange(len(calima_days)), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i])
    plt.xlabel('Date')
    plt.ylabel('ZNSB (mag)')
    plt.xticks(idxs, ticks_labels, rotation=20)
268/69:
color=['k','r','g','b','y']
for i in np.arange(5):
    plt.plot(np.arange(len(calima_days)), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i])
    plt.xlabel('Date')
    plt.ylabel('ZNSB (mag)')
    plt.xticks(idxs, ticks_labels, rotation=30)
268/70:
color=['k','r','g','b','y']
for i in np.arange(5):
    plt.plot(np.arange(len(calima_days)), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i],label='Santa Cruz')
    plt.xlabel('Date')
    plt.ylabel('ZNSB (mag)')
    plt.xticks(idxs, ticks_labels, rotation=30)
    plt.legend()
268/71:
for i in np.arange(5):
    if i ==0:
        plt.plot(np.arange(len(calima_days)), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i],label='Santa Cruz')
    else:
        plt.plot(np.arange(len(calima_days)), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i])
    plt.xlabel('Date')
    plt.ylabel('ZNSB (mag)')
    plt.xticks(idxs, ticks_labels, rotation=30)
    plt.legend()
268/72:

color=['k','r','g','b','y']
for i in np.arange(5):
    if i ==0:
        plt.plot(np.arange(len(calima_days)), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i],label='Santa Cruz')
    else:
        plt.plot(np.arange(len(calima_days)), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i])
    plt.xlabel('Date')
    plt.ylabel('ZNSB (mag)')
    plt.xticks(idxs, ticks_labels, rotation=30)
    plt.legend()
268/73:

inc=int(len(calima_days)/(last_day-first_day))+2
idxs=np.arange(0,len(calima_days),inc)
ticks_labels=calima_days[0:-1:inc]
268/74:
inc=int(len(calima_days)/(last_day-first_day))
idxs=np.arange(0,len(calima_days),inc)
ticks_labels=calima_days[0:-1:inc]
268/75:
inc=int(len(calima_days)/(last_day-first_day))
idxs=np.arange(30,len(calima_days),inc)
ticks_labels=calima_days[0:-1:inc]
268/76:
inc=int(len(calima_days)/(last_day-first_day))
idxs=np.arange(100,len(calima_days),inc)
ticks_labels=calima_days[0:-1:inc]
268/77:
inc=int(len(calima_days)/(last_day-first_day))
idxs=np.arange(0,len(calima_days),inc)
ticks_labels=calima_days[100:-1:inc]
268/78:
inc=int(len(calima_days)/(last_day-first_day))
idxs=np.arange(0,len(calima_days),inc)
ticks_labels=calima_days[100:-1:inc]

color=['k','r','g','b','y']
for i in np.arange(5):
    if i ==0:
        plt.plot(np.arange(len(calima_days)), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i],label='Santa Cruz')
    else:
        plt.plot(np.arange(len(calima_days)), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i])
    plt.xlabel('Date')
    plt.ylabel('ZNSB (mag)')
    plt.xticks(idxs, ticks_labels, rotation=30)
    plt.legend()
268/79:

color=['k','r','g','b','y']
for i in np.arange(5):
    if i ==0:
        plt.plot(np.arange(len(calima_days)), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i],label='Santa Cruz')
    else:
        plt.plot(np.arange(len(calima_days)), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i])
    plt.xlabel('Date')
    plt.ylabel('ZNSB (mag)')
    plt.xticks(idxs, ticks_labels, rotation=70)
    plt.legend()
268/80:
inc=int(len(calima_days)/(last_day-first_day))
idxs=np.arange(0,len(calima_days),inc)
ticks_labels=calima_days[1000:-1:inc]

color=['k','r','g','b','y']
for i in np.arange(5):
    if i ==0:
        plt.plot(np.arange(len(calima_days)), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i],label='Santa Cruz')
    else:
        plt.plot(np.arange(len(calima_days)), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i])
    plt.xlabel('Date')
    plt.ylabel('ZNSB (mag)')
    plt.xticks(idxs, ticks_labels, rotation=70)
    plt.legend()
268/81:
calima_mask=(dates_santa>=dt(2020,2,first_day).timestamp())*(dates_santa<=dt(2020,2,last_day).timestamp())
calima_days=[dt.fromtimestamp(calima).date() for calima in dates_santa[calima_mask]]

inc=int(len(calima_days)/(last_day-first_day))
idxs=np.arange(0,len(calima_days),inc)
ticks_labels=calima_days[0:-1:inc]

color=['k','r','g','b','y']
for i in np.arange(5):
    if i ==0:
        plt.plot(np.arange(len(calima_days)), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i],label='Santa Cruz')
    else:
        plt.plot(np.arange(len(calima_days)), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i])
    plt.xlabel('Date')
    plt.ylabel('ZNSB (mag)')
    plt.xticks(idxs, ticks_labels, rotation=70)
    plt.legend()
268/82: calima_days[-1]
268/83: dt(2020,2,last_day)
268/84:

inc=int(len(calima_days)/(last_day-first_day))
idxs=np.arange(1,len(calima_days),inc)
ticks_labels=calima_days[0:-1:inc]

color=['k','r','g','b','y']
for i in np.arange(5):
    if i ==0:
        plt.plot(np.arange(len(calima_days)), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i],label='Santa Cruz')
    else:
        plt.plot(np.arange(len(calima_days)), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i])
    plt.xlabel('Date')
    plt.ylabel('ZNSB (mag)')
    plt.xticks(idxs, ticks_labels, rotation=70)
    plt.legend()
268/85: calima_days[idxs[0],idxs[1]]
268/86:
inc=int(len(calima_days)/(last_day-first_day))
idxs=np.arange(0,len(calima_days),inc)
ticks_labels=calima_days[0:-1:inc]

color=['k','r','g','b','y']
for i in np.arange(5):
    if i ==0:
        plt.plot(np.arange(len(calima_days)), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i],label='Santa Cruz')
    else:
        plt.plot(np.arange(len(calima_days)), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i])
    plt.xlabel('Date')
    plt.ylabel('ZNSB (mag)')
    plt.xticks(idxs, ticks_labels, rotation=70)
    plt.legend()
268/87:
inc=int(len(calima_days)/(last_day-first_day))
idxs=np.arange(0,len(calima_days),inc)
ticks_labels=calima_days[100:-1:inc]

color=['k','r','g','b','y']
for i in np.arange(5):
    if i ==0:
        plt.plot(np.arange(len(calima_days)), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i],label='Santa Cruz')
    else:
        plt.plot(np.arange(len(calima_days)), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i])
    plt.xlabel('Date')
    plt.ylabel('ZNSB (mag)')
    plt.xticks(idxs, ticks_labels, rotation=70)
    plt.legend()
268/88: last_day-first_day
268/89: len(calima_days)/(last_day-first_day
268/90: len(calima_days)/(last_day-first_day)
268/91:

color=['k','r','g','b','y']
for i in np.arange(5):
    if i ==0:
        plt.plot(np.arange(len(calima_days)), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i],label='Santa Cruz')
    else:
        plt.plot(np.arange(len(calima_days)), cosqm_santa[calima_mask,5+i],'.',markersize=2,color=color[i])
    plt.xlabel('Date')
    plt.ylabel('ZNSB (mag)')
    plt.xticks(idxs, ticks_labels, rotation=70)
    plt.legend()
268/92: runcell(11, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/93: runcell(11, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/94: runcell(11, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/95: runcell(11, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/96: runcell(11, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/97: runcell(11, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/98: runcell(11, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/99: runcell(11, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/100: runcell(11, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/101: calima_days[-1]
268/102: runcell(11, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/103: runcell(11, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/104: runcell(11, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/105: runcell(11, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/106: runcell(11, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/107: runcell(11, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/108: runcell(11, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/109: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/110: runcell('COSQM IZANA AEMET  ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/111: runcell('COSQM IZANA OBSERVATORY', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/112: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/113: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/114: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/115: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/116: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/117: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/118: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/119: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/120: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/121: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/122: runcell('COSQM IZANA AEMET  ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/123: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/124: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/125: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/126: np.arange(len(teide_days))
268/127: len(teide_days)
268/128: len(cosqm_teide[teide_mask,5])
268/129:
teide_mask=(dates_teide>=dt(2020,2,first_day).timestamp())*(dates_teide<=dt(2020,2,last_day).timestamp())
teide_days=[dt.fromtimestamp(calima).date() for calima in dates_teide[teide_mask]]
268/130: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
268/131: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
269/1: runcell(0, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
269/2: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
269/3: runcell('COSQM SANTA CRUZ', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
269/4: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
269/5: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
269/6: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
269/7: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
269/8: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
269/9: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
269/10: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
269/11: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
269/12: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
269/13: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
269/14: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
269/15: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
269/16: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
269/17: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
269/18: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
269/19: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
269/20: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
270/1: runcell(0, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
270/2: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
270/3: runcell('COSQM SANTA CRUZ', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
270/4: runcell('Calima observed on night of feburary 23rd', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
270/5: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
270/6: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
270/7: runcell('COSQM IZANA AEMET  ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
270/8: runcell('Plot Izana AEMET', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
270/9: runcell('COSQM IZANA OBSERVATORY', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
270/10: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
270/11: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
270/12:


paths_teide=sorted(glob(path_teide+"*/*/*.txt"))

files=np.array([LoadData(path) for path in paths_teide])
cosqm_teide=np.concatenate(files[:,0])
dates_teide=np.concatenate(files[:,1])
dt_teide=[dt.fromtimestamp(date) for date in dates_teide]
270/13:
def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.genfromtxt(path, dtype=None)
            print (np.shape(data_server))
            dates_str=data_server[:,2:17]
            data=data_server[:,0:1]
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            return data, dates
        except:
            print('********error*********', path)
270/14: test=LoadDataCorrupt(path_teide[0])
270/15:
def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            print('start')
            data_server = np.genfromtxt(path, dtype=None)
            print (np.shape(data_server))
            dates_str=data_server[:,2:17]
            data=data_server[:,0:1]
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            return data, dates
        except:
            print('********error*********', path)

test=LoadDataCorrupt(path_teide[0])
270/16: test=np.genfromtxt(path_teide[0], dtype=None)
270/17: test=np.genfromtxt(paths_teide[0], dtype=None)
270/18: test=np.genfromtxt(paths_teide[0], dtype='unicode')
270/19: paths_teide=sorted(glob(path_teide+"*/*/*.txt"))
270/20: test=np.genfromtxt(paths_teide[0], dtype='unicode')
270/21: path_teide='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_teide/data/'
270/22: paths_teide=sorted(glob(path_teide+"*/*/*.txt"))
270/23: test=np.genfromtxt(paths_teide[0], dtype='unicode')
270/24: test_data=np.array(test[:][2])
270/25: test=np.genfromtxt(paths_teide[0], dtype=None)
270/26: test=np.genfromtxt(paths_teide[0], delimimter=' ', dtype=['str','str',])
270/27: test=np.genfromtxt(paths_teide[0], delimiter=' ', dtype=['str','str',])
270/28: test=np.genfromtxt(paths_teide[0], delimiter=' ', dtype=['str','str','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float'])
270/29: test=np.genfromtxt(paths_teide[0], delimiter=' ', dtype={'str','str','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float'})
270/30: test=np.genfromtxt(paths_teide[0], delimiter=' ', dtype=(str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,))
270/31: test=np.genfromtxt(paths_teide[0], delimiter=' ', dtype=(str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float))
270/32: path_teide='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_teide/data/'
270/33: paths_teide=sorted(glob(path_teide+"*/*/*.txt"))
270/34: test=np.genfromtxt(paths_teide[0], delimiter=' ', dtype=(str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float))
270/35: test=np.genfromtxt(paths_teide[0], delimiter=' ', dtype=(str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float), loose=True)
270/36: test=np.genfromtxt(paths_teide[0], delimiter=' ', dtype=(str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float), loose=True, invalid_raise=False)
270/37: test=np.genfromtxt(paths_teide[0], delimiter=' ', dtype=None, loose=True, invalid_raise=False)
270/38: test=np.genfromtxt(paths_teide[0], delimiter=' ', dtype='unicode', loose=True, invalid_raise=False)
270/39: test_data=np.array(test[0])
270/40: test=np.genfromtxt(paths_teide[0], delimiter=' ', dtype="'str','str','float','float','float','float','float','float','float','float','float','float','float','float','float','float','float'" , loose=True, invalid_raise=False)
270/41: test=np.genfromtxt(paths_teide[0], delimiter=' ', dtype='str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float' , loose=True, invalid_raise=False)
270/42: test=np.genfromtxt(paths_teide[0], delimiter=' ', dtype=('str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float') , loose=True, invalid_raise=False)
270/43: test=np.genfromtxt(paths_teide[0], delimiter=' ', dtype=[str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float] , loose=True, invalid_raise=False)
270/44: test=np.genfromtxt(paths_teide[0], delimiter=' ', dtype=['str,str,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float'] , loose=True, invalid_raise=False)
270/45: dtypes='s8,s8,f10,f10,f10,f10,f10,f10,f10,f10,f10,f10,f10,f10,f10,f10,f10'
270/46: test=np.genfromtxt(paths_teide[0], delimiter=' ', dtype=dtypes , loose=True, invalid_raise=False)
270/47: dtypes='S8,S8,F10,F10,F10,F10,F10,F10,F10,F10,F10,F10,F10,F10,F10,F10,F10'
270/48: test=np.genfromtxt(paths_teide[0], delimiter=' ', dtype=dtypes , loose=True, invalid_raise=False)
270/49: dtypes='S8,S8'
270/50: test=np.genfromtxt(paths_teide[0], usecols=(0,1), delimiter=' ', dtype=dtypes , loose=True, invalid_raise=False)
270/51: test=np.genfromtxt(paths_teide[0], usecols=([0,1]), delimiter=' ', dtype=dtypes , loose=True, invalid_raise=False)
270/52: test=np.genfromtxt(paths_teide[0], usecols=np.arange(0,2), delimiter=' ', dtype=dtypes , loose=True, invalid_raise=False)
270/53: dtypes='S10,S8'
270/54: test=np.genfromtxt(paths_teide[0], usecols=np.arange(0,2), delimiter=' ', dtype=dtypes , loose=True, invalid_raise=False)
270/55: dtypes='S10,S8,F10,F10,F10,F10,F10,F10,F10,F10,F10,F10,F10,F10,F10,F10,F10'
270/56: test=np.genfromtxt(paths_teide[0], usecols=np.arange(0,18), delimiter=' ', dtype=dtypes , loose=True, invalid_raise=False)
270/57: dtypes='S10,S8,F10'
270/58: test=np.genfromtxt(paths_teide[0], usecols=np.arange(0,3), delimiter=' ', dtype=dtypes , loose=True, invalid_raise=False)
270/59: dtypes='S10,S8,f10'
270/60: test=np.genfromtxt(paths_teide[0], usecols=np.arange(0,3), delimiter=' ', dtype=dtypes , loose=True, invalid_raise=False)
270/61: test=np.genfromtxt(paths_teide[1], usecols=np.arange(0,3), delimiter=' ', dtype=dtypes , loose=True, invalid_raise=False)
270/62: test=np.genfromtxt(paths_teide[2], usecols=np.arange(0,3), delimiter=' ', dtype=dtypes , loose=True, invalid_raise=False)
270/63: test=np.genfromtxt(paths_teide[2], usecols=np.arange(0,2), delimiter=' ', dtype=dtypes , loose=True, invalid_raise=False)
270/64: dtypes='S10,S8'
270/65: test=np.genfromtxt(paths_teide[2], usecols=np.arange(0,2), delimiter=' ', dtype=dtypes , loose=True, invalid_raise=False)
270/66: dtypes='U10,f10'
270/67: test=np.genfromtxt(paths_teide[2], usecols=np.arange(1,2), delimiter=' ', dtype=dtypes , loose=True, invalid_raise=False)
270/68: test=np.genfromtxt(paths_teide[2], usecols=np.arange(1,2), dtype=dtypes , loose=True, invalid_raise=False)
270/69: test=np.genfromtxt(paths_teide[2], usecols=np.arange(1,2), dtype=dtypes , loose=True, invalid_raise=False)
270/70: dtypes='U10,f8'
270/71: test=np.genfromtxt(paths_teide[2], usecols=np.arange(1,2), dtype=dtypes , loose=True, invalid_raise=False)
270/72: test=np.genfromtxt(paths_teide[2], usecols=np.arange(2,3), dtype=dtypes , loose=True, invalid_raise=False)
270/73: test=np.genfromtxt(paths_teide[0], usecols=np.arange(2,3), dtype=dtypes , loose=True, invalid_raise=False)
270/74: test=np.genfromtxt(paths_teide[0], usecols=np.arange(2,4), dtype=dtypes , loose=True, invalid_raise=False)
270/75: test[0]
270/76: test[0,0]
270/77: test[0,1]
270/78: test[0]
270/79: type(test[0])
270/80: shape(test[0])
270/81: np.shape(test[0])
270/82: test=np.genfromtxt(paths_teide[0], usecols=np.arange(1,3), dtype=dtypes , loose=True, invalid_raise=False)
270/83: test[0]
270/84: type(_)
270/85: _1
270/86: _2
270/87: _0
270/88: _0-1
270/89: _-1
270/90: _I
270/91: _i
270/92: _i-1
270/93: _i+1
270/94: _i4
270/95: _94
270/96: _94'
270/97: '
270/98: '_94'
270/99: '_90'
270/100: dtypes='U10,f4'
270/101: test=np.genfromtxt(paths_teide[0], usecols=np.arange(1,3), dtype=dtypes , loose=True, invalid_raise=False)
270/102: np.arange(1,3)
270/103: dtypes='U10,f10'
270/104: test=np.genfromtxt(paths_teide[0], usecols=np.arange(1,3), dtype=dtypes , loose=True, invalid_raise=False)
270/105: dtypes='U10,f12'
270/106: test=np.genfromtxt(paths_teide[0], usecols=np.arange(1,3), dtype=dtypes , loose=True, invalid_raise=False)
270/107: dtypes='U8,f8'
270/108: test=np.genfromtxt(paths_teide[0], usecols=np.arange(1,3), dtype=dtypes , loose=True, invalid_raise=False)
270/109: test=np.genfromtxt(paths_teide[0], usecols=np.arange(1,4), dtype=dtypes , loose=True, invalid_raise=False)
270/110: dtypes='U8,f8,f8'
270/111: test=np.genfromtxt(paths_teide[0], usecols=np.arange(1,4), dtype=dtypes , loose=True, invalid_raise=False)
270/112: test=np.genfromtxt(paths_teide[0], usecols=np.arange(0,5), dtype=dtypes , loose=True, invalid_raise=False)
270/113: test_data=np.array(test[0])
270/114: dtypes='S10,S8,f8,f8'
270/115: test=np.genfromtxt(paths_teide[0], usecols=np.arange(0,5), dtype=dtypes , loose=True, invalid_raise=False)
270/116: dtypes='str,str,f8,f8'
270/117: test=np.genfromtxt(paths_teide[0], usecols=np.arange(0,5), dtype=dtypes , loose=True, invalid_raise=False)
270/118: dtypes='U,U,f8,f8'
270/119: test=np.genfromtxt(paths_teide[0], usecols=np.arange(0,5), dtype=dtypes , loose=True, invalid_raise=False)
270/120: test=np.genfromtxt(paths_teide[0], usecols=np.arange(0,5), dtype='U10,U8,f8,f8' , loose=True, invalid_raise=False)
270/121: test=np.genfromtxt(paths_teide[0], usecols=(0,1,2,3), dtype='U10,U8,f8,f8' , loose=True, invalid_raise=False)
270/122: np.genfromtxt(paths_teide[0], usecols=(0,1,2,3), dtype='U10,U8,f8,f8' , loose=True, invalid_raise=False)
270/123: np.genfromtxt(paths_teide[0], usecols=(0,1,2,3), dtype='U10,U8,f8,f8' , loose=True, invalid_raise=False)[0]
270/124: np.genfromtxt(paths_teide[0], usecols=(0,1,2,3), dtype='U10,U8,f8,f8' , loose=True, invalid_raise=False)[0,1]
270/125: np.genfromtxt(paths_teide[0], usecols=(0,1,2,3), dtype='U10,U8,f8,f8' , loose=True, invalid_raise=False)[0,0]
270/126: np.genfromtxt(paths_teide[0], usecols=(0,1,2,3), dtype='U10,U8,f8,f8' , loose=True, invalid_raise=False)[0]
270/127: np.genfromtxt(paths_teide[0], usecols=(0,1,2,3), dtype='U10,U8,f8,f8' , loose=True, invalid_raise=False)[0][0]
270/128: np.genfromtxt(paths_teide[0], usecols=(0,1,2,3), dtype='U10,U8,f8,f8' , loose=True, invalid_raise=False)[0][1]
270/129: np.genfromtxt(paths_teide[0], usecols=(0,1,2,3), dtype='U10,U8,f8,f8' , loose=True, invalid_raise=False)[0][2]
270/130: dtypes='U,U,f8,f8,f8,f8,f8,f8,f8,f8,f8,f8,f8,f8,f8,f8,f8'
270/131: test=np.genfromtxt(paths_teide[0], usecols=np.arange(0,16), dtype='U10,U8,f8,f8' , loose=True, invalid_raise=False)
270/132: test_data=np.array(test[0])
270/133: test_data=np.array(test[:][0])
270/134: test=np.genfromtxt(paths_teide[0], usecols=np.arange(0,16), dtype=dtypes, loose=True, invalid_raise=False)
270/135: test=np.genfromtxt(paths_teide[0], usecols=np.arange(0,16), dtype=dtypes, loose=True, invalid_raise=False)
270/136: np.genfromtxt(paths_teide[0], usecols=np.arange(0,16), dtype=dtypes, loose=True, invalid_raise=False)
270/137: dtypes='U10,U8,f8,f8,f8,f8,f8,f8,f8,f8,f8,f8,f8,f8,f8,f8,f8'
270/138: np.genfromtxt(paths_teide[0], usecols=np.arange(0,16), dtype=dtypes, loose=True, invalid_raise=False)
270/139: test.f1
270/140: test.f1()
270/141: test[0]
270/142: test[:][0]
270/143: [test[i][0] for i in range(3)]
270/144: test=np.genfromtxt(paths_teide[0], usecols=np.arange(0,16), dtype=dtypes, loose=True, invalid_raise=False)
270/145: [test[i][0] for i in range(3)]
270/146: [test[i][1] for i in range(3)]
270/147: [test[i][2] for i in range(3)]
270/148: import panda as pd
270/149: pip install panda
270/150: import panda as pd
270/151: pip install request
270/152: import panda as pd
270/153: import pandas as pd
270/154: test=pd.read_csv(paths_teide[0])
270/155: test=pd.read_csv(paths_teide)
270/156: test=pd.read_csv(paths_teide[1])
270/157: test.shape
270/158: test[0]
270/159: test[1]
270/160: test[2]
270/161: test[0,0]
270/162: test.0
270/163: test.columns
270/164: test.columns[0]
270/165: test.columns[1]
270/166: test=pd.read_csv(paths_teide[1],sep=' ')
270/167: test[0]
270/168: test[0][0]
270/169: test=np.array(test)
270/170: test.shape
270/171: test[0]
270/172: test[0,0]
270/173: test[0,1]
270/174: test[0,2]
270/175: test[0,2].type
270/176: type(test[0,2])
270/177: type(test[0,0])
270/178: type(test[0,1])
270/179: import pandas as pd
270/180: data_server = np.array(pd.read_csv(paths_teide[5]))
270/181: dates_str=data_server[:,2:]
270/182: data=np.array(data_server[:,0:1])
270/183: data
270/184: type(data)
270/185: type(data[0])
270/186: type(data[0,0])
270/187: data=data_server[:,2:]
270/188: dates=np.array(data_server[:,0:1])
270/189: data
270/190: data[0]
270/191: data[0,0]
270/192: data=data_server[:,2:-1]
270/193: data=data_server[:,2:-1]
270/194: data_server[0]
270/195: data_server[0,0]
270/196: data_server[0,0,0]
270/197: data_server = pd.read_csv(paths_teide[5])
270/198: shape(np.array(data_server))
270/199: np.shape(np.array(data_server))
270/200: np.shape(np.array(data_server)[0])
270/201: np.shape(np.array(data_server))[0]
270/202: np.shape(np.array(data_server))[1]
270/203: np.shape(np.array(data_server))[2]
270/204: data_server = pd.read_csv(paths_teide[5],sep=' ')
270/205: data=data_server[:,2:-1]
270/206: dates=data_server[:,0:2]
270/207: data=data_server[:,2]
270/208: dates=data_server[:,0]
270/209: data=data_server[0]
270/210: data_server = np.array(pd.read_csv(paths_teide[5],sep=' '))
270/211: data=data_server[:,2:]
270/212: dates=data_server[:,0:2]
270/213: plot(dates, data[5])
270/214: plt.plot(dates, data[5])
270/215: data=data_server[:,2:].astype(float)
270/216: dates=data_server[:,0:2].astype(float)
270/217: dates=data_server[:,0:2].astype(str)
270/218: plt.plot(data[5])
270/219: plt.plot(data[6])
270/220: plt.plot(data[:,5])
270/221: files=np.array([LoadData(path) for path in paths_teide])
270/222: files=np.array([LoadDataCorrupt(path) for path in paths_teide])
270/223:
data_server = np.array(pd.read_csv(paths_teide[10],sep=' '))
data=data_server[:,2:].astype(float)
dates_str=data_server[:,0:2].astype(str)
270/224: dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
270/225: cache[path] = (data_server, dates)
270/226: cache={}
270/227: cache[path] = (data_server, dates)
270/228: cache[paths_teide[10]] = (data_server, dates)
270/229: paths_teide=sorted(glob(path_teide+"*/*/*.txt"))
270/230: test=LoadDataCorrupt(paths_teide[10])
270/231:
data_server = np.array(pd.read_csv(paths_teide[5],sep='\t'))
data=data_server[:,2:].astype(float)
dates=data_server[:,0:2].astype(str)
270/232:

data_server = np.array(pd.read_csv(paths_teide[5],sep=' '))
data=data_server[:,2:].astype(float)
dates=data_server[:,0:2].astype(str)
270/233:
data_server = np.array(pd.read_csv(paths_teide[10],sep=' '))
data=data_server[:,2:].astype(float)
dates_str=data_server[:,0:2].astype(str)
dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
270/234: test=LoadDataCorrupt(paths_teide[10])
270/235:

def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' '),dtype=None)
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            return data, dates
        except:
            print('********error*********', path)
270/236: test=LoadDataCorrupt(paths_teide[10])
270/237: test[0]
270/238: test[1]
270/239: test[1,0]
270/240: test[1][0]
270/241: test[0][0]
270/242: test[0][0,0]
270/243: test[0][0,0-1]
270/244: files=np.array([LoadDataCorrupt(path) for path in paths_teide])
270/245: cosqm_teide=np.concatenate(files[:,0])
270/246: dates_teide=np.concatenate(files[:,1])
270/247: files=np.array([LoadDataCorrupt(path) for path in paths_teide])
270/248: cosqm_teide=files[0]
270/249: dates_teide=files[1]
270/250: files[0]
270/251: files[:][0]
270/252: files.shape
270/253: files[0]
270/254: files[1]
270/255: files[2]
270/256: files[3]
270/257: files[4]
270/258: history
270/259: cosqm_teide=np.concatenate(files[:][0])
270/260: files.shape
270/261: files[0]
270/262: files[:,0]
270/263: files[0:100]
270/264:
def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' '),dtype=None)
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            return np.array(data, dates)
        except:
            print('********error*********', path)
270/265: files=np.array([LoadDataCorrupt(path) for path in paths_teide])
270/266: data_server = np.array(pd.read_csv(path,sep=' ',dtype=None))
270/267:

def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            return np.array(data, dates)
        except:
            print('********error*********', path)
270/268: files=np.array([LoadDataCorrupt(path) for path in paths_teide])
270/269: files=[LoadDataCorrupt(path) for path in paths_teide]
270/270: cosqm_teide=np.concatenate(files[:,0])
270/271: cosqm_teide=np.concatenate(files[:][0])
270/272: files=[LoadDataCorrupt(path) for path in paths_teide]
270/273: files[0]
270/274: files[1]
270/275: files[2]
270/276: files[2][1]
270/277: files[2][0]
270/278: files=np.array[LoadDataCorrupt(path) for path in paths_teide])
270/279: files=np.array([LoadDataCorrupt(path) for path in paths_teide])
270/280:
def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            return np.array(data, dates)
        except:
            print('********error*********', path, '\n', dates[-1])
270/281: files=np.array([LoadDataCorrupt(path) for path in paths_teide])
270/282:
def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            return np.array(data, dates)
        except:
            print('********error*********', path, '\n')
270/283: files=np.array([LoadDataCorrupt(path) for path in paths_teide])
270/284: files=np.array([LoadDataCorrupt(path) for path in paths_teide])
270/285: cosqm_teide=np.concatenate(files[:][0])
270/286:
def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep='\t*',dtype=None))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            return np.array(data, dates)
        except:
            print('********error*********', path, '\n')
270/287: files=np.array([LoadDataCorrupt(path) for path in paths_teide])
270/288:
def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            return np.array(data, dates)
        except:
            print('********error*********', path, '\n')
270/289:

def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=false))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            return np.array(data, dates)
        except:
            print('********error*********', path, '\n')
270/290: files=np.array([LoadDataCorrupt(path) for path in paths_teide])
270/291:
def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            return np.array(data, dates)
        except:
            print('********error*********', path, '\n')
270/292: files=np.array([LoadDataCorrupt(path) for path in paths_teide])
270/293:

def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            return data, dates
        except:
            print('********error*********', path, '\n')
270/294: files=[LoadDataCorrupt(path) for path in paths_teide]
270/295: files=[LoadDataCorrupt(path) for path in paths_teide if if LoadDataCorrupt(path).type is not None]]
270/296: files=[LoadDataCorrupt(path) for path in paths_teide if LoadDataCorrupt(path).type is not None]]
270/297: files=[LoadDataCorrupt(path) for path in paths_teide if LoadDataCorrupt(path).type is not None]
270/298: files=[LoadDataCorrupt(path) for path in paths_teide]
270/299: cosqm_teide=[np.concatenate(files[:][0]) if files.type is not None]
270/300: cosqm_teide=[np.concatenate(files[:][0]) if files.type != None]
270/301: cosqm_teide=np.concatenate(files[:][0])
270/302: cosqm_teide=np.concatenate(files[:,0])
270/303: cosqm_teide=np.concatenate(files[[:,0])
270/304: cosqm_teide=np.concatenate(files[0])
270/305: cosqm_teide=np.concatenate(files[:][0])
270/306: cosqm_teide=np.concatenate(files[:][0,0])
270/307: cosqm_teide=np.concatenate(files[:][0])
270/308: files=np.array([LoadDataCorrupt(path) for path in paths_teide])
270/309:
def LoadDataCorrupt(path,cache={}):
    print (path)
    corrupt_dict={}
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            return data, dates
        except:
            print('********error*********', path, '\n')
            corrupt_dict.append(path)
270/310: files=np.array([LoadDataCorrupt(path) for path in paths_teide])
270/311:

def LoadDataCorrupt(path,cache={}):
    print (path)
    corrupt=[]
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            return data, dates
        except:
            print('********error*********', path, '\n')
            corrupt.append(path)
270/312: files=np.array([LoadDataCorrupt(path) for path in paths_teide])
270/313: cosqm_teide=np.concatenate(files[:][0])
270/314: files[:][0]
270/315: files[:][1]
270/316: files[:][2]
270/317: files[:][3]
270/318: files[:][30]
270/319: files[:,0]
270/320: files[0]
270/321: files[0].shape
270/322:
def LoadDataCorrupt(path,cache={}):
    print (path)
    corrupt=[]
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            return np.array(data, dates)
        except:
            print('********error*********', path, '\n')
            corrupt.append(path)
270/323: files=[LoadDataCorrupt(path) for path in paths_teide]
270/324:
def LoadDataCorrupt(path,cache={}):
    print (path)
    corrupt=[]
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=np.array(data_server[:,2:].astype(float))
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            return np.array(data, dates)
        except:
            print('********error*********', path, '\n')
            corrupt.append(path)
270/325: files=[LoadDataCorrupt(path) for path in paths_teide]
270/326:
def LoadDataCorrupt(path,cache={}):
    print (path)
    corrupt=[]
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=np.array(data_server[:,2:].astype(float))
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            out=np.array(data, dates)
            return out 
        except:
            print('********error*********', path, '\n')
            corrupt.append(path)
270/327: files=[LoadDataCorrupt(path) for path in paths_teide]
270/328:
def LoadDataCorrupt(path,cache={}):
    print (path)
    corrupt=[]
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=np.array(data_server[:,2:].astype(float))
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            return np.array([data, dates])
        except:
            print('********error*********', path, '\n')
            corrupt.append(path)
270/329: files=[LoadDataCorrupt(path) for path in paths_teide]
270/330: test=LoadDataCorrupt(paths_teide[30])
270/331: test
270/332: test.type
270/333: type(test)
270/334: type(np.array(test))
270/335: np.array(test)
270/336: test[0]
270/337: test[0,0]
270/338: test[0][0]
270/339: test[0][0,0]
270/340:
data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
data=np.array(data_server[:,2:].astype(float))
dates_str=data_server[:,0:2].astype(str)
270/341: data_server = np.array(pd.read_csv(paths_teide[30],sep=' ',dtype=None, error_bad_lines=False))
270/342: data=np.array(data_server[:,2:].astype(float))
270/343: dates_str=data_server[:,0:2].astype(str)
270/344: data
270/345: dates_str
270/346: dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
270/347: files
270/348: type(files)
270/349: files=[LoadDataCorrupt(path) for path in paths_teide]
270/350:

def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=np.array(data_server[:,2:].astype(float))
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            return np.array([data, dates])
        except:
            print('********error*********', path, '\n')
270/351: files=[LoadDataCorrupt(path) for path in paths_teide]
270/352: data_server = np.array(pd.read_csv(paths_teide[30],sep=' ',dtype=None, error_bad_lines=False))
270/353: data=np.array(data_server[:,2:].astype(float))
270/354: dates_str=data_server[:,0:2].astype(str)
270/355: dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
270/356: files=[LoadDataCorrupt(path) for path in paths_teide]
270/357: files=[LoadDataCorrupt(path) for path in paths_teide]
270/358: cosqm_teide=np.concatenate(files[:])
270/359: files=[LoadDataCorrupt(path) for path in paths_teide]
270/360: path_teide='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_teide/data/'
270/361: #find all paths of files in root directory
270/362: paths_teide=sorted(glob(path_teide+"*/*/*.txt"))
270/363: files=[LoadDataCorrupt(path) for path in paths_teide]
270/364: files=files[file.type != None]
270/365: files=files[type != None]
270/366: files=[LoadDataCorrupt(path) for path in paths_teide]
270/367: files1=[file.type != None for file in files]
270/368: files1=[type(file) != None for file in files]
270/369: for file in files: print file
270/370: for file in files: print (file)
270/371: files1=[type(file) != None for file in files]
270/372: place=np.where(files1 == False)
270/373: place=np.argwhere(files1 == False)
270/374: place=np.where(files1 == False)
270/375: place=np.where(files1 == True)
270/376: files1=[shape(file) == 2 for file in files]
270/377: files1=[np.shape(file) == 2 for file in files]
270/378: files=[LoadDataCorrupt(path) for path in paths_teide]
270/379: files1=[np.shape(file) == 2 for file in files]
270/380: files[0]
270/381: files[0].shape
270/382: shape(files[0])
270/383: size(files[0])
270/384: np.size(files[0])
270/385: np.shape(files[0])
270/386: type(files[0])
270/387: type(files[0][0])
270/388: files[0][0]
270/389: files[0][1]
270/390: files[0][0]
270/391: type(files[0][0])
270/392: files[74]
270/393: type(files[74])
270/394: type(files[74]) == Nonetype
270/395: type(files[74]) == NoneType
270/396: type(files[74]) == 'NoneType'
270/397: type(files[74])
270/398: type(type(files[74]))
270/399: type(files[74]) == None
270/400: type(files[74]) == float
270/401: type(files[74]) == None Type
270/402: type(files[74]) == type(None)
270/403: files1=[type(file) != type(None) 2 for file in files]
270/404: files1=[type(file) != type(None) for file in files]
270/405: files1=files[type(file) != type(None) for file in files]
270/406: files1=files[[type(file) != type(None) for file in files]]
270/407: files1=files[type != type(None)]
270/408: a
270/409: a=np.array([0,1,2,3])
270/410: a[0]
270/411: a[a<2]
270/412: a[0,1]
270/413: a[0:1]
270/414: a[0:2]
270/415: a[[0,3]]
270/416: a[[0,1]]
270/417: files1=files[type(files) != type(None)]
270/418: files=[LoadDataCorrupt(path) for path in paths_teide]
270/419: files1=files[type(files) != type(None)]
270/420: type(a)
270/421: a[a>0]
270/422: b=a[a>0]
270/423: b
270/424: a
270/425: b=a[a>0 and a!=2]
270/426: b=a[a>0 and a.any()!=2]
270/427: b=a[a.any()>0 and a.any()!=2]
270/428: b
270/429: b=a[a.any()>0 and a.all()!=2]
270/430: b
270/431: b=a[a.all()>0 and a.all()!=2]
270/432: b
270/433: b[0]
270/434: b[1]
270/435: b.shape
270/436: b[0]
270/437: b[0,0]
270/438: valid=[type(file) != type(None) for file in files ]
270/439: files1=files[valid]
270/440: valid=np.argwhere([type(file) != type(None) for file in files ])
270/441: files1=files[valid]
270/442: valid=np.argwhere([type(file) != type(None) for file in files ]).astype(int)
270/443: files1=files[valid]
270/444: valid=list(np.argwhere([type(file) != type(None) for file in files ]).astype(int))
270/445: files1=files[valid]
270/446: valid=np.argwhere([type(file) != type(None) for file in files ]).astype(int)
270/447: files1=files[[valid]]
270/448: files=np.array([LoadDataCorrupt(path) for path in paths_teide])
270/449: valid=np.argwhere([type(file) != type(None) for file in files ]).astype(int)
270/450: files1=files[valid]
270/451: files[0]
270/452: files[0,0]
270/453: files[0][0]
270/454: files[1]
270/455: files[2]
270/456: files[0][0]
270/457: files[0][1]
270/458: files[0][2]
270/459: files[:][0]
270/460: cosqm_teide=[np.concatenate(file[2:]) for file in files1]
270/461:
def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=np.array(data_server[:,2:].astype(float))
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            return data, dates
        except:
            print('********error*********', path, '\n')
270/462: files=np.array([LoadDataCorrupt(path) for path in paths_teide])
270/463: files=np.array([LoadDataCorrupt(path)[0] for path in paths_teide])
270/464: files=[LoadDataCorrupt(path) for path in paths_teide]
270/465: valid=np.argwhere([type(file) != type(None) for file in files]).astype(int)
270/466: files1=files[valid]
270/467: a=[0,1,2,3,4]
270/468: a
270/469: a.type
270/470: type(a)
270/471: b=[2,3,4]
270/472: a[b]
270/473: a[int(b)]
270/474: a[[b]]
270/475: a[(b)]
270/476: a[0,2,3,4]
270/477: a[3]
270/478: a=np.array(a)
270/479: a[b]
270/480: files1=np.array(files[valid])
270/481: files1=np.array(files)[valid]
270/482: files1
270/483: files1.shape
270/484: files1[0]
270/485: files1[0,0]
270/486: files1[0,1]
270/487: files1[1,0]
270/488: files1[2,0]
270/489: files1[2,0,0]
270/490: files1[2,0][0]
270/491: files1[2,0][1]
270/492: files1[0,0][1]
270/493: files1[1,0][1]
270/494: files1[1,0][2]
270/495: files1[:,0][1]
270/496: files1[0,:][1]
270/497: files1[0][1]
270/498: files1[0][0]
270/499: files1[0][0][0]
270/500: files1[0][0][0][0]
270/501: files1[0][0][0][0][0]
270/502: files1[0][0][0][0][1]
270/503: files1[0][0][0][0][2]
270/504:
def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            return data, dates
        except:
            print('********error*********', path, '\n')
270/505: files=[LoadDataCorrupt(path) for path in paths_teide]
270/506: files[0]
270/507: files[0][0]
270/508: files[0][0][0]
270/509: files[0][0,0]
270/510: files[0][0,1]
270/511: files[0][0][0]
270/512: files[0][0][0,0]
270/513: files[1][0][0,0]
270/514: files[2][0][0,0]
270/515: files[:][0][0,0]
270/516: valid=np.argwhere([type(file) != type(None) for file in files]).astype(int)
270/517: files1=np.array(files)[valid]
270/518: cosqm_teide=np.concatenate(files[:,2:])
270/519: cosqm_teide=np.concatenate(files[:,2])
270/520: cosqm_teide=np.concatenate(files1[:,2])
271/1: which vim
271/2: vim
272/1: conda
273/1: vim ~/.ipython/profile_default/startup/00_startup.py
274/1: conda install jupyterthemes
274/2: conda install -c conda-forge jupyterthemes
275/1: import kivy as kv
275/2: kv.version
275/3: kv.version()
275/4: kv.version
275/5: kv.version.version
275/6: kv.version()
275/7: kivy.__version__
275/8: kv.__version__
276/1: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
276/2: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
277/1: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
277/2: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
277/3: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
278/1: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
278/2: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
279/1: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
279/2: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
279/3: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
279/4: conda
279/5: conda
279/6: a=[0,2,3]
279/7: a
279/8: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
279/9: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
279/10: kill
279/11: killall
279/12: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
279/13: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
279/14: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
279/15: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
279/16: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
280/1: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
280/2: which python
280/3: ls
280/4: pwd
280/5: which python
280/6: which python
280/7: which python3
280/8: which python3.7
280/9: which python3.6
280/10: where python
280/11: python -V
280/12: python.__version__()
282/1: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
282/2: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
283/1: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
283/2: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
283/3: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
284/1: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
285/1: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
285/2: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
285/3: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
285/4: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
286/1: _
286/2: a=1
286/3: _
286/4: _.
286/5: _1
286/6: _2
286/7: _3
286/8: _4
286/9: _5
286/10: _6
286/11: _7
286/12: _i
286/13: _*2
286/14: _
286/15: a=_
286/16: a
286/17: type(a)
286/18: 28*15
286/19: _*0.8
286/20: _*4
286/21: _19
286/22: _
286/23: _*4.5
286/24: _*12
286/25: 6244-708
286/26: _*3
286/27: _-708
287/1: import os
287/2: os.getcwd()
288/1: ls
288/2: 40e9/2e3/4
289/1: runcell(0, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
289/2: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
289/3: runcell('COSQM SANTA CRUZ', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
289/4: runcell('COSQM SANTA CRUZ', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
289/5: runcell('COSQM SANTA CRUZ', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
289/6: runcell('Plot Santa Cruz', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
289/7: runcell('Plot Santa Cruz', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
289/8: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
289/9: paths_teide=sorted(glob(path_teide+"*/*/*.txt"))
289/10: path_teide='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_teide/data/'
289/11: paths_teide=sorted(glob(path_teide+"*/*/*.txt"))
289/12: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
289/13: runcell('Plot Teide', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
289/14: runcell('COSQM IZANA AEMET  ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
289/15: runcell('Plot Izana AEMET', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
289/16: runcell('COSQM IZANA OBSERVATORY', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
289/17: runcell('Plot Izana Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
289/18: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
289/19: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
289/20: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
289/21: runfile('/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone/kivy_hello_world.py', wdir='/Users/admin/Documents/physique/Maitrise/hiver_2020/machine_learning/POS_backbone')
291/1: runfile('/Users/admin/.spyder-py3/temp.py', wdir='/Users/admin/.spyder-py3')
291/2: pwd
292/1: import matplotlib.pyplot as plt
292/2: import panda as pd
292/3: import pandas as pd
292/4: test=pd.readcsv('test.csv')
292/5: test=pd.read_csv('test.csv')
292/6: test=pd.read_csv('stats.csv')
292/7: test
292/8: test[0]
292/9: test[1]
292/10: test=np.array(pd.read_csv('stats.csv'))
292/11: test
292/12: test[0]
292/13: test[1]
292/14: test[2]
292/15: test.T
292/16: test[0]
293/1: pwd
293/2: runfile('/Users/admin/Downloads/version_exon/untitled1.py', wdir='/Users/admin/Downloads/version_exon')
293/3: pwd
293/4: kivy3 facturation.kv
293/5: kivy3 facturation.py
293/6: facturation.py
293/7: runfile('/Users/admin/Downloads/version_exon/facturation.py', wdir='/Users/admin/Downloads/version_exon')
293/8: runfile('/Users/admin/Downloads/version_exon/facturation.py', wdir='/Users/admin/Downloads/version_exon')
293/9: runfile('/Users/admin/Downloads/version_exon/facturation.py', wdir='/Users/admin/Downloads/version_exon')
293/10: runfile('/Users/admin/anaconda3/lib/python3.7/site-packages/kivy/uix/scrollview.py', wdir='/Users/admin/anaconda3/lib/python3.7/site-packages/kivy/uix')
293/11: runfile('/Users/admin/Downloads/version_exon/facturation.py', wdir='/Users/admin/Downloads/version_exon')
293/12: runfile('/Users/admin/Downloads/version_exon/facturation.py', wdir='/Users/admin/Downloads/version_exon')
293/13: runfile('/Users/admin/Downloads/version_exon/test.py', wdir='/Users/admin/Downloads/version_exon')
293/14: runfile('/Users/admin/Downloads/version_exon/test.py', wdir='/Users/admin/Downloads/version_exon')
293/15: runfile('/Users/admin/Downloads/version_exon/test.py', wdir='/Users/admin/Downloads/version_exon')
293/16: runfile('/Users/admin/Downloads/version_exon/test.py', wdir='/Users/admin/Downloads/version_exon')
295/1: runcell(0, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
295/2: runcell('AOD', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
295/3: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
295/4: runcell('COSQM SANTA CRUZ', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
295/5: runcell('Plot Santa Cruz', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
295/6: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
295/7: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
295/8: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
295/9:

files=np.array([LoadDataCorrupt(path) for path in paths_teide])
valid=np.argwhere([type(file) != type(None) for file in files]).astype(int)
cosqm_teide=files[valid][0]
#cosqm_teide=np.concatenate(files1[:,2])
dates_teide=np.concatenate(files[:,1])
dt_teide=[dt.fromtimestamp(date) for date in dates_teide]
295/10: files1
295/11: files1.type
295/12: files1.type()
295/13: type(files1)
295/14: files1[0]
295/15: shape(files1[0])
295/16: np.shape(files1[0])
295/17: np.shape(files1[:,0])
295/18: np.shape(files1[:,1])
295/19: np.shape(files1[0])
295/20: np.shape(files1[1])
295/21: np.shape(files1)
295/22: np.shape(files1[0,:,0])
295/23: np.shape(files1[0,0])
295/24: files1[0,0]
295/25: type(files1[0,0])
295/26: type(files1[0,0][0])
295/27: files1[0,0][0]
295/28: plt.plot(files1[0,0][0])
295/29: np.shape(files1[0,0][0])
295/30: np.shape(files1[0][0,0])
295/31: np.shape(files1[0,0][1])
295/32: np.shape(files1[0,0][2])
295/33: np.shape(files1[0,0][0])
295/34: np.shape(files1[0,0][2])
295/35: np.shape(files1[0,0][1])
295/36: files1[0,0][1]
295/37: files1[0,1][1]
295/38: files1[1,0][1]
295/39: files1[2,0][1]
295/40: files1[2][1]
295/41: files1[2,0][1]
295/42: files1[3,0][1]
295/43:
def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            return np.array(data, dates)
        except:
            print('********error*********', path, '\n')


path_teide='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_teide/data/'

#find all paths of files in root directory
paths_teide=sorted(glob(path_teide+"*/*/*.txt"))

files=np.array([LoadDataCorrupt(path) for path in paths_teide])
295/44:
def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            return np.array(data, dates)
        except:
            print('********error*********', path, '\n')



path_teide='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_teide/data/'

#find all paths of files in root directory
paths_teide=sorted(glob(path_teide+"*/*/*.txt"))

files=np.array([LoadDataCorrupt(path) for path in paths_teide])
valid=np.argwhere([type(file) != type(None) for file in files]).astype(int)
files1=files[valid]
295/45:

def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            return data, dates
        except:
            print('********error*********', path, '\n')



path_teide='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_teide/data/'

#find all paths of files in root directory
paths_teide=sorted(glob(path_teide+"*/*/*.txt"))

files=np.array([LoadDataCorrupt(path) for path in paths_teide])
valid=np.argwhere([type(file) != type(None) for file in files]).astype(int)
files1=files[valid]
295/46: a=np.zeros(10)
295/47: b=np.zeros(10)
295/48: c=np.array(a,b)
295/49: c=np.array([a,b])
295/50: c[0]
295/51: c[1]
295/52: b=np.ones(10)
295/53: c=np.array([a,b])
295/54: c[1]
295/55: c[0]
295/56:

def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            return np.array([data, dates])
        except:
            print('********error*********', path, '\n')



path_teide='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_teide/data/'

#find all paths of files in root directory
paths_teide=sorted(glob(path_teide+"*/*/*.txt"))

files=np.array([LoadDataCorrupt(path) for path in paths_teide])
valid=np.argwhere([type(file) != type(None) for file in files]).astype(int)
files1=files[valid]
295/57:

def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            out=np.array([data,dates])
            return out
        except:
            print('********error*********', path, '\n')



path_teide='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_teide/data/'

#find all paths of files in root directory
paths_teide=sorted(glob(path_teide+"*/*/*.txt"))

files=np.array([LoadDataCorrupt(path) for path in paths_teide])
valid=np.argwhere([type(file) != type(None) for file in files]).astype(int)
files1=files[valid]
295/58:
def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            cache[path] = (data_server, dates)
            return data,dates
        except:
            print('********error*********', path, '\n')



path_teide='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_teide/data/'

#find all paths of files in root directory
paths_teide=sorted(glob(path_teide+"*/*/*.txt"))

files=np.array([LoadDataCorrupt(path) for path in paths_teide])
valid=np.argwhere([type(file) != type(None) for file in files]).astype(int)
files1=files[valid]
295/59: files1=files[valid][0]
295/60: files1[0]
295/61: np.shape(files1[0])
295/62: np.shape(files1[0,0])
295/63: np.shape(files1[0][0])
295/64: np.shape(files1[1][0])
295/65: np.shape(files1[0][1])
295/66: np.shape(files1[0][1,0])
295/67: np.shape(files1[0][1][0])
295/68: np.shape(files1[0][1][1])
295/69: np.shape(files1[0][1][2])
295/70: np.shape(files1[0][0][1])
295/71: files1[0][0][0]
295/72: files1[0][0][1]
295/73: files1[0][0][2]
295/74: plt.plot(files1[0][0][0])
295/75: plt.plot(files1[0][:][0])
295/76: type(files)
295/77: type(files[0])
295/78: type(files[1])
295/79: type(files[12])
295/80: files[12]
295/81: np.shape(files[12])
295/82: np.shape(files[12][0])
295/83: np.shape(files[12][0][0])
295/84: np.shape(files[12][1])
295/85: np.shape(files[12][2])
295/86: np.shape(files[12][1])
295/87: type(files[12][1])
295/88: type(files[12][1][0])
295/89: files[12][1][0]
295/90: files[100][1][0]
295/91: files[200][1][0]
295/92: files[201][1][0]
295/93: files[202][1][0]
295/94: files[202:][1][0]
295/95: files[201:202][1][0]
295/96: files[200:202][1][0]
295/97: type(files[201][1][0])
295/98: type(files[202][1][0])
295/99: type(files[203][1][0])
295/100: type(files[203])
295/101: type(files[202])
295/102: type(files[203])
295/103: type(files[204])
295/104: files1=files[valid]
295/105: type(files1)
295/106: type(files1[0])
295/107: type(files1[0,0])
295/108: np.shape(files1[0,0])
295/109: type(files1[0,0])
295/110: type(files1[0][0,0])
295/111: type(files1[0][0])
295/112: type(files1[0,0])
295/113: type(files1[0,0][0])
295/114: type(files1[0,0][15])
295/115: type(files1[0,0][14])
295/116: type(files1[0,0][0])
295/117: type(files1[0,0][1])
295/118: type(files1[0,0][2])
295/119: np.shape(files1[0,0][0])
295/120: np.shape(files1[0,0][1])
295/121: np.shape(files1[:,0][1])
295/122: np.shape(files1[:,0][0])
295/123: np.shape(files1[:,0])
295/124: np.shape(files1[:,1])
295/125: np.shape(files1[:,0])
295/126: np.shape(files1[:,0][0])
295/127: np.argwhere(type(files1[:,0][0])!=type(np.zeros(0)))
295/128: a=np.argwhere(type(files1[:,0][0])!=type(np.zeros(0)))
295/129: a
295/130: a=[type(file) for file in files1[:,0][0]]
295/131: a
295/132: a[0]
295/133: a[0,0]
295/134: a[0][0]
295/135: a[0]
295/136: type(a[0])
295/137: np.shape(a)
295/138: np.shape(a[0])
295/139: np.shape(a[1])
295/140: np.shape(a[2])
295/141: np.shape(files1[:,0][0])
295/142: np.shape(files1[:,0])
295/143: np.shape(files1[:,0][2])
295/144: np.shape(files1[:,0][3])
295/145: np.shape(files1[:,0][4])
295/146: np.shape(files1[:,0][1000])
295/147: np.shape(files1[:,0][200])
295/148: np.shape(files1[0,0][200])
295/149: np.shape(files1[:,0][200])
295/150: np.shape(np.array(files1[:,0][200]))
295/151: np.shape(np.array(files1[:,0])[200])
295/152: np.shape(files1[:,0])[200]
295/153:
def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            output = np.concatenate(data,dates)
            cache[path] = (data_server, dates)
            return output
        except:
            print('********error*********', path, '\n')

test=LoadDataCorrupt(path_teide)

path_teide='/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/cosqm_teide/data/'

#find all paths of files in root directory
paths_teide=sorted(glob(path_teide+"*/*/*.txt"))

files=np.array([LoadDataCorrupt(path) for path in paths_teide])
valid=np.argwhere([type(file) != type(None) for file in files]).astype(int)
files1=files[valid]
295/154: test=LoadDataCorrupt(paths_teide[0])
295/155:

def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            print('data', np.shape(data), 'dates', np.shape(dates))
            output = np.concatenate(data,dates)
            cache[path] = (data_server, dates)
            return output
        except:
            print('********error*********', path, '\n')

test=LoadDataCorrupt(paths_teide[0])
295/156:
def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            print('data', np.shape(data), 'dates', np.shape(dates))
            output = np.concatenate((data,dates))
            cache[path] = (data_server, dates)
            return output
        except:
            print('********error*********', path, '\n')

test=LoadDataCorrupt(paths_teide[0])
295/157:

def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            print('data', np.shape(data), 'dates', np.shape(dates))
            output = np.concatenate((data,dates),axis=0)
            cache[path] = (data_server, dates)
            return output
        except:
            print('********error*********', path, '\n')

test=LoadDataCorrupt(paths_teide[0]
295/158:

def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            print('data', np.shape(data), 'dates', np.shape(dates))
            output = np.concatenate((data,dates),axis=0)
            cache[path] = (data_server, dates)
            return output
        except:
            print('********error*********', path, '\n')

test=LoadDataCorrupt(paths_teide[0])
295/159:

def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            print('data', np.shape(data), 'dates', np.shape(dates))
            output = np.concatenate((data,dates),axis=1)
            cache[path] = (data_server, dates)
            return output
        except:
            print('********error*********', path, '\n')

test=LoadDataCorrupt(paths_teide[0])
295/160:

def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            print('data', np.shape(data), 'dates', np.shape(dates))
            output = np.concatenate((data,dates),axis=1)
            print (np.shape(output))
            cache[path] = (data_server, dates)
            return output
        except:
            print('********error*********', path, '\n')

test=LoadDataCorrupt(paths_teide[0])
295/161: a=np.zeros(2,17)
295/162: a=np.zeros((2,17))
295/163: np.shape(a)
295/164: a=np.zeros((2,15))
295/165: np.shape(a)
295/166: b=np.ones((2,))
295/167: np.shape(b)
295/168:
data_server = np.array(pd.read_csv(paths_teide[0],sep=' ',dtype=None, error_bad_lines=False))
data=data_server[:,2:].astype(float)
dates_str=data_server[:,0:2].astype(str)
dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
print('data', np.shape(data), 'dates', np.shape(dates))
output = np.concatenate((data,dates),axis=1)
print (np.shape(output))
295/169: a
295/170: b
295/171: np.shape(a)
295/172: np.shape(b)
295/173: np.concatenate((a,b))
295/174: np.concatenate((a,b),axis=0)
295/175: np.concatenate((a,b),axis=1)
295/176: np.concatenate((a,b),axis=2)
295/177:
data_server = np.array(pd.read_csv(paths_teide[100],sep=' ',dtype=None, error_bad_lines=False))
data=data_server[:,2:].astype(float)
dates_str=data_server[:,0:2].astype(str)
dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
print('data', np.shape(data), 'dates', np.shape(dates))
output = np.concatenate((data,dates),axis=1)
print (np.shape(output))
295/178:
data_server = np.array(pd.read_csv(paths_teide[100],sep=' ',dtype=None, error_bad_lines=False))
data=data_server[:,2:].astype(float).T
dates_str=data_server[:,0:2].astype(str)
dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ]).T
print('data', np.shape(data), 'dates', np.shape(dates))
output = np.concatenate((data,dates),axis=1)
print (np.shape(output))
295/179:

data_server = np.array(pd.read_csv(paths_teide[0],sep=' ',dtype=None, error_bad_lines=False))
data=data_server[:,2:].astype(float)
dates_str=data_server[:,0:2].astype(str)
dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
print('data', np.shape(data), 'dates', np.shape(dates))
output = np.concatenate((data,dates),axis=1)
print (np.shape(output))
295/180: data
295/181: data[0]
295/182: data[1]
295/183: c=data.concatenate((data,dates))
295/184: c=np.concatenate((data,dates))
295/185: c=np.concatenate((data,dates),axis=0)
295/186: c=np.concatenate((data,dates),axis=1)
295/187: c
295/188: c=np.concatenate(([data],[dates]),axis=1)
295/189: c=np.concatenate(([data],[dates]),axis=0)
295/190: c=np.array((data,dates))
295/191: np.hstack((data,dates))
295/192: np.hstack((data,dates), axis=0)
295/193: np.hstack((data,dates))
295/194: np.vstack((data,dates))
295/195: np.hstack((data,dates))
295/196: np.hstack((data,[dates]))
295/197: np.hstack([data,[dates]])
295/198: np.hstack([[data],[dates]])
295/199: np.shape(dates0
295/200: np.shape(dates)
295/201: np.type(dates)
295/202: type(dates)
295/203:
type(data[0]
)
295/204: type(dates)
295/205: type(dates[0])
295/206: c=data,dates
295/207: c
295/208: np.shape(a)
295/209: np.shape(c)
295/210: type(c)
295/211: c[0]
295/212: c[1]
295/213: np.hstack((dates,data))
295/214: dates.reshape(2,1)
295/215: dates1=dates.reshape(2,1)
295/216: dates1
295/217: np.shape(dates1)
295/218: c=np.concatenate((data,dates1))
295/219: c=np.concatenate((data,dates1), axis=1)
295/220: c
295/221: c.shape
295/222: c[:,16]
295/223: c[:,15]
295/224: test=LoadDataCorrupt(paths_teide[1])
295/225: test=LoadDataCorrupt(paths_teide[100])
295/226:
data_server = np.array(pd.read_csv(paths_teide[0],sep=' ',dtype=None, error_bad_lines=False))
data=data_server[:,2:].astype(float)
dates_str=data_server[:,0:2].astype(str)
dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
print('data', np.shape(data), 'dates', np.shape(dates))
output = np.concatenate((data,dates),axis=1)
print (np.shape(output))
295/227:

data_server = np.array(pd.read_csv(paths_teide[0],sep=' ',dtype=None, error_bad_lines=False))
data=data_server[:,2:].astype(float)
dates_str=data_server[:,0:2].astype(str)
dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ]).reshape(2,1)
print('data', np.shape(data), 'dates', np.shape(dates))
output = np.concatenate((data,dates),axis=1)
print (np.shape(output))
295/228: c
295/229: c=np.concatenate((data,dates))
295/230: c=np.concatenate((data,dates),axis=1)
295/231: c
295/232:
def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ]).reshape(2,1)
            print('data', np.shape(data), 'dates', np.shape(dates))
            output = np.concatenate((data,dates),axis=1)
            print (np.shape(output))
            cache[path] = output
            return output
        except:
            print('********error*********', path, '\n')
295/233: test=LoadDataCorrupt(paths_teide[1])
295/234: test=LoadDataCorrupt(paths_teide[100])
295/235: test=LoadDataCorrupt(paths_teide[201])
295/236: test=LoadDataCorrupt(paths_teide[202])
295/237: test=LoadDataCorrupt(paths_teide[203])
295/238:
def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            print('data', np.shape(data), 'dates', np.shape(dates))
            dates.reshape(2,1)
            output = np.concatenate((data,dates),axis=1)
            print (np.shape(output))
            cache[path] = output
            return output
        except:
            print('********error*********', path, '\n')
295/239: test=LoadDataCorrupt(paths_teide[203])
295/240:
data_server = np.array(pd.read_csv(paths_teide[0],sep=' ',dtype=None, error_bad_lines=False))
data=data_server[:,2:].astype(float)
dates_str=data_server[:,0:2].astype(str)
dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ]).reshape(2,1)
print('data', np.shape(data), 'dates', np.shape(dates))
output = np.concatenate((data,dates),axis=1)
print (np.shape(output))
295/241: test=LoadDataCorrupt(paths_teide[0])
295/242:

def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            print('data', np.shape(data), 'dates', np.shape(dates))
            dates1=dates.reshape(2,1)
            output = np.concatenate((data,dates1),axis=1)
            print (np.shape(output))
            cache[path] = (data,dates1)
            return output
        except:
            print('********error*********', path, '\n')
295/243: test=LoadDataCorrupt(paths_teide[0])
295/244:
files=np.array([LoadDataCorrupt(path) for path in paths_teide])
valid=np.argwhere([type(file) != type(None) for file in files]).astype(int)
files1=files[valid]
cosqm_teide=np.concatenate(files1[:,2])
dates_teide=np.concatenate(files[:,1])
dt_teide=[dt.fromtimestamp(date) for date in dates_teide]
295/245: files=np.array([LoadDataCorrupt(path) for path in paths_teide])
295/246:
def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            print('data', np.shape(data), 'dates', np.shape(dates))
            dates1=dates.reshape(2,1)
            output = np.concatenate((data,dates1),axis=1)
            print (np.shape(output))
            cache[path] = (data,dates)
            return cache[path]
        except:
            print('********error*********', path, '\n')
295/247:
data_server = np.array(pd.read_csv(paths_teide[0],sep=' ',dtype=None, error_bad_lines=False))
data=data_server[:,2:].astype(float)
dates_str=data_server[:,0:2].astype(str)
dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ]).reshape(2,1)
print('data', np.shape(data), 'dates', np.shape(dates))
output = np.concatenate((data,dates),axis=1)
print (np.shape(output))
295/248: out=(data,dates)
295/249:

def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            print('data', np.shape(data), 'dates', np.shape(dates))
            dates1=dates.reshape(2,1)
            output = np.concatenate((data,dates1),axis=1)
            print (np.shape(output))
            cache[path] = (data,dates)
            return cache[path]
        except:
            print('********error*********', path, '\n')
295/250:
files=np.array([LoadDataCorrupt(path) for path in paths_teide])
valid=np.argwhere([type(file) != type(None) for file in files]).astype(int)
files1=files[valid]
cosqm_teide=np.concatenate(files1[:,2])
dates_teide=np.concatenate(files[:,1])
dt_teide=[dt.fromtimestamp(date) for date in dates_teide]
295/251: out[0]
295/252: out[1]
295/253:

def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            print('data', np.shape(data), 'dates', np.shape(dates))
            dates1=dates.reshape(len(dates),1)
            output = np.concatenate((data,dates1),axis=1)
            print (np.shape(output))
            cache[path] = (data,dates)
            return cache[path]
        except:
            print('********error*********', path, '\n')
295/254: output=np.cponcatenate(out[0],out[1].reshape(len(out[1]),1))
295/255: output=np.concatenate(out[0],out[1].reshape(len(out[1]),1))
295/256: output=np.concatenate(out[0],out[1].reshape(shape(out[1]),1))
295/257: output=np.concatenate(out[0],out[1].reshape(np.shape(out[1]),1))
295/258: output=np.concatenate(out[0],out[1].reshape(np.shape(out[1])[0],1))
295/259: np.shape(out[1])[0]
295/260: output=np.concatenate(out[0],out[1].reshape(np.as_int(np.shape(out[1])[0]),1))
295/261: output=np.concatenate(out[0],out[1].reshape(np.asint(np.shape(out[1])[0]),1))
295/262: output=np.concatenate(out[0],out[1].reshape(np.as_type(np.shape(out[1])[0],int),1))
295/263: output=np.concatenate(out[0],out[1].reshape(np.shape(out[1])[0].astype(int),1))
295/264: output=np.concatenate(out[0],out[1].reshape(np.shape(out[1])[0],1))
295/265: output=np.concatenate(out[0],out[1].reshape(np.shape(out[1])[0],1),axis=1)
295/266: output=np.concatenate((out[0],out[1].reshape(np.shape(out[1])[0],1)),axis=1)
295/267:
data_server = np.array(pd.read_csv(paths_teide[200],sep=' ',dtype=None, error_bad_lines=False))
data=data_server[:,2:].astype(float)
dates_str=data_server[:,0:2].astype(str)
dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ]).reshape(2,1)
out=(data,dates)
output=np.concatenate((out[0],out[1].reshape(np.shape(out[1])[0],1)),axis=1)
295/268:
data_server = np.array(pd.read_csv(paths_teide[201],sep=' ',dtype=None, error_bad_lines=False))
data=data_server[:,2:].astype(float)
dates_str=data_server[:,0:2].astype(str)
dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ]).reshape(2,1)
out=(data,dates)
output=np.concatenate((out[0],out[1].reshape(np.shape(out[1])[0],1)),axis=1)
295/269:
data_server = np.array(pd.read_csv(paths_teide[201],sep=' ',dtype=None, error_bad_lines=False))
data=data_server[:,2:].astype(float)
dates_str=data_server[:,0:2].astype(str)
dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ]).reshape(2,1)
out=(data,dates)
output=np.concatenate((out[0],out[1].reshape(np.shape(out[1])[0],1)),axis=1)
295/270: np.shape(out[1])[0]
295/271:
data_server = np.array(pd.read_csv(paths_teide[201],sep=' ',dtype=None, error_bad_lines=False))
data=data_server[:,2:].astype(float)
295/272: dates_str=data_server[:,0:2].astype(str)
295/273: dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ]).reshape(2,1)
295/274:
def LoadDataCorrupt(path,cache={}):
    print (path)
    if path in cache:
        return cache[path]
    else:
        try:
            data_server = np.array(pd.read_csv(path,sep=' ',dtype=None, error_bad_lines=False))
            data=data_server[:,2:].astype(float)
            dates_str=data_server[:,0:2].astype(str)
            dates = np.array([ dt.strptime( dates+times, '%Y-%m-%d%H:%M:%S' ).timestamp() for dates, times in dates_str ])
            print('data', np.shape(data), 'dates', np.shape(dates))
            dates1=dates.reshape(len(dates),1)
            output = np.concatenate((data,dates1),axis=1)
            print (np.shape(output))
            cache[path] = (data,dates)
            out=(data,dates)
            output=np.concatenate((out[0],out[1].reshape(np.shape(out[1])[0],1)),axis=1)
            return output
        except:
            print('********error*********', path, '\n')
295/275:
files=np.array([LoadDataCorrupt(path) for path in paths_teide])
valid=np.argwhere([type(file) != type(None) for file in files]).astype(int)
files1=files[valid]
cosqm_teide=np.concatenate(files1[:,2])
dates_teide=np.concatenate(files[:,1])
dt_teide=[dt.fromtimestamp(date) for date in dates_teide]
295/276: plt.plot(files1[:,-1],files1[:,5])
295/277: plt.plot(files1[0,:,-1],files1[0,:,5])
295/278: files1
295/279: np.shape(files1)
295/280: np.shape(files1[0])
295/281: np.shape(files1[0,0])
295/282: np.shape(files1[1,0])
295/283: np.shape(files1[:,0])
295/284: np.shape(files1[0,0])
295/285: np.shape(files1[0])
295/286: cosqm_teide=np.concatenate(files)
295/287: cosqm_teide=np.concatenate(files[:])
295/288: cosqm_teide=np.concatenate(files[:,0])
295/289: cosqm_teide=np.concatenate(files[:][0])
295/290: np.shape(cosqm_teide)
295/291: cosqm_teide=np.concatenate(files1[:,0])
295/292: plt.plot(files1[:,-1],files1[:,5])
295/293: np.shape(cosqm_teide[:,15])
295/294: cosqm_teide[:,15]
295/295: cosqm_teide[:,5]
295/296: plt.plot(cosqm_teide[:,-1],cosqm_teide[:,5])
295/297: plt.plot(cosqm_teide[:,-1],cosqm_teide[:,5], '.')
295/298: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
295/299: runcell('Calima observed on night of feburary 23rd 2020', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
295/300: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
295/301: runcell('COSQM IZANA AEMET  ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
295/302: runcell('COSQM IZANA OBSERVATORY', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
295/303: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
295/304: dates_teide=cosqm_teide[:,-1]
295/305: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
295/306: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
295/307: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
295/308: runcell('Calima observed on night of feburary 23rd 2020', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
295/309: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
295/310: runcell('Calima observed on night of feburary 23rd 2020', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
295/311: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
295/312: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
295/313: runcell('Calima observed on night of feburary 23rd 2020', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
295/314: runcell('Calima observed on night of feburary 23rd 2020', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
295/315: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
295/316: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
296/1: runcell(0, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
296/2: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
296/3: runcell('COSQM SANTA CRUZ', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
296/4: runcell('Calima observed on night of feburary 23rd 2020', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
296/5: runcell('Calima observed on night of feburary 23rd 2020', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
296/6: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
296/7: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
296/8: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
296/9: runcell('COSQM IZANA AEMET  ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
296/10: runcell('COSQM IZANA OBSERVATORY', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
296/11: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
296/12: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
296/13: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
297/1: 20*28*4.5
297/2: 15*28*4.5
297/3: 2000(28*4.5)
297/4: 2000/(28*4.5)
296/14: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
296/15: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
296/16: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
296/17: runcell('Plot Izana Observatory', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
296/18: runcell('COSQM IZANA AEMET  ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
296/19: runcell('COSQM IZANA OBSERVATORY', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
296/20: runcell('COSQM IZANA AEMET  ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
296/21: runcell('COSQM IZANA AEMET  ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
296/22: runcell('COSQM IZANA AEMET  ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
297/5: pwd
301/1: runfile('/Users/admin/git/backbone_exon/BackbonePOS/facturation.py', wdir='/Users/admin/git/backbone_exon/BackbonePOS')
301/2: runfile('/Users/admin/anaconda3/lib/python3.7/site-packages/kivy/core/text/text_pygame.py', wdir='/Users/admin/anaconda3/lib/python3.7/site-packages/kivy/core/text')
301/3: runfile('/Users/admin/git/backbone_exon/BackbonePOS/facturation.py', wdir='/Users/admin/git/backbone_exon/BackbonePOS')
302/1: runfile('/Users/admin/git/backbone_exon/BackbonePOS/facturation.py', wdir='/Users/admin/git/backbone_exon/BackbonePOS')
302/2: runfile('/Users/admin/git/backbone_exon/BackbonePOS/facturation.py', wdir='/Users/admin/git/backbone_exon/BackbonePOS')
304/1: runcell(0, '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
304/2: runcell('Function definitions', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
304/3: runcell('COSQM SANTA CRUZ', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
304/4: runcell('COSQM TEIDE ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
304/5: runcell('COSQM IZANA AEMET  ***BUG IN COSQM DATA FROM WGET COMMAND***', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
304/6: runcell('COSQM IZANA OBSERVATORY', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
304/7: runcell('CALIMA observed on night of feburary 23rd 2020', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
304/8: runcell('Calima at each location for clear band', '/Users/admin/Documents/physique/Maitrise/hiver_2020/cosqm_aod/aod/aeronet_cosqm_correlation.py')
305/1: ls
305/2: sqlite3_functions.py
305/3:
import sqlite3

#Definition de la classe client
class Client:
    """A sample clientloyee class"""

    def __init__(self, iden, prenom, nom, argent):
        self.iden = iden
        self.prenom = prenom
        self.nom = nom
        self.argent = argent
        
    @property
    def NomComplet(self):
        return '{} {}'.format(self.prenom, self.nom)

    def __repr__(self):
        return "Client('{}', '{}', {})".format(self.iden, self.prenom, self.nom)
305/4:
conn = sqlite3.connect('clients')

c = conn.cursor()

#Les attributs de la classe client sont définis dans la classe clients
try:
    c.execute("""CREATE TABLE clients (
                iden integer,
                prenom text,
                nom text,
                argent real
            )""")
except:
    print ('\n table already exists \n')


def add_client(client):
    with conn:
        c.execute("INSERT INTO clients VALUES (:iden, :prenom, :nom, :argent)", {'iden': client.iden, 'prenom': client.prenom, 'nom': client.nom, 'argent': client.argent})


def get_clients_by_prenom(prenom):
    c.execute("SELECT * FROM clients WHERE prenom = :prenom", {'prenom': prenom})
    return c.fetchall()

def get_clients_by_rowid(rowid):
    c.execute("SELECT * FROM clients WHERE rowid = :rowid", {'rowid': rowid})
    return c.fetchall()

def get_clients_all():
    c.execute("SELECT * FROM clients ")
    return c.fetchall()


def update_argent(client, argent):
    with conn:
        c.execute("UPDATE clients SET argent = :argent WHERE iden = client.iden", {'iden': iden, 'argent': argent})


def remove_client(client):
    with conn:
        c.execute("DELETE from clients WHERE rowid = :rowid",
                  {'rowid': client.rowid})
305/5:
clients = get_clients_all()
print(clients)
print(type(clients))
print(len(clients))
305/6: type(clients)
305/7: type(clients[0])
305/8: type(clients[0,0])
305/9: type(clients[0][0])
305/10: type(clients[0][1])
305/11: type(clients[0][2])
305/12: type(clients[0][3])
305/13: clients[0].count()
305/14: clients[0].rowid
305/15: clients[0].rowid()
306/1: import matplotlib.pyplot as np
306/2: import numpy as np
306/3: import matplotlib.pyplot as plt
306/4: fig,ax=plt.subplots()
306/5: xs=np.arange(0,15)
307/1: eval()
307/2: eval(1+2)
307/3: eval('1'+'2')
308/1: 71+83+73+94-34*4
308/2: _*6
309/1: x=3
309/2: type(x)
309/3: import numpy as np
309/4: x.astype(np.integer)
309/5: x = np.int64(5)
309/6: x
309/7: x.type
309/8: type(x)
309/9: type(x)
309/10: x = [x]
309/11: type(x)
310/1: import kivy
311/1: import unittest
312/1: import unittest
312/2: import numpy
312/3: numpy.unittest
314/1: import os
314/2: os.file()
315/1: 355*100*365
315/2: _/1000000
316/1: import csv
316/2: csv.reader?
316/3: csv?
317/1: m=12
317/2: n=10
317/3: i=500
317/4: mois=150
317/5: tot=n*(i+m*mois)
317/6: tot
317/7: m=24
317/8: tot
317/9: 12*150
317/10: _*10
317/11: _/2
318/1: import requests as rq
318/2: page = rq.get('www.google.ca')
318/3: page = rq.get('https://www.google.ca')
318/4: page
318/5: print (page)
318/6: pprint(page)
318/7: pprint(page)
318/8: print(page)
318/9: pprint(page)
318/10: print(page)
318/11: pprint(page)
318/12: page = rq.get('https://realpython.com/beautiful-soup-web-scraper-python/')
318/13: page
318/14: pip install
318/15: pip install beautiful soup4
318/16: pip install beautifulsoup4
318/17: from bs4 import BeautifulSoup
318/18: soup = BeautifulSoup(page.content, 'html.parser')
318/19: soup
318/20:
for line in soup:
    print line
318/21:
for line in soup:
    print (line)
318/22:
for line in soup:
    if 'date' in line:
        print (line)
318/23:
for line in soup:
    if 'height' in line:
        print (line)
318/24:
for line in soup:
    if 'height' in line == 1:
        print (line)
318/25:
for line in soup:
    if 'height' in line == 1:
        print (line)
318/26:
for line in soup:
    if 'height' in line:
        print (line)
318/27: test='asdf'
318/28:
if 'a' in test:
    print (test)
318/29:
for line in soup:
    if '</script>' in line:
        print (line)
318/30:
for line in soup: 
    print (line[0])
318/31:
for line in soup: 
    print (line[0])
318/32:
for line in soup: 
    print (line.type)
318/33:
for line in soup: 
    print (type(line))
318/34: page
318/35: page.content
318/36: print (page.content)
318/37:
for line in page.content:
    print (line)
318/38:
for line in page.content:
    print (type(line))
318/39: type(page.content)
318/40: page = rq.get('https://www.astrospheric.com/?Latitude=45.28562899654986&Longitude=-72.2923243045807')
318/41: soup = BeautifulSoup(page.content, 'html.parser')
318/42: soup
318/43: len (page)
318/44: len (soup)
318/45: soup[0]
318/46: len(soup)
318/47: type(soup)
318/48: soup.extendexit
319/1: import os
319/2: os.getcwd
319/3: os.getcwd()
319/4: type(_)
320/1: import datetime as dt
320/2: dt.time
320/3: dt.time
320/4: dt.time.now
320/5: dt.time()
320/6: dt.datetime.time()
320/7: dt.datetime.now()
320/8: dt.time.now()
320/9: dt.datetime.now().hour
320/10: dt.datetime.now().minutes
320/11: dt.datetime.now().minute
320/12: dt.datetime.time()
320/13: dt.datetime.time
320/14: dt.datetime.time()
320/15: dt.time()
320/16: dt.time()+5
320/17: dt.time().hour
320/18: dt.time().minute
320/19: dt.time().second
320/20: dt.time().milli
320/21: dt.time()
320/22: dt.time.now()
320/23: dt.datetime.now()
320/24: type(_)
320/25: dt.datetime.now().asint()
320/26: import numpy as np
320/27: dt.datetime.now().astype(int)
321/1: np
321/2: pd
321/3: plt
321/4: path = 'http://dome.obsand.org:2080/DATA/CoSQM-Network/Pico_Teide/data/2020/03/2020-03-01.txt'
321/5: np.genfromtxt(path)
321/6: a = _
321/7: a
321/8: a.shape
321/9: a[:,0]
321/10: a[:,1]
321/11: a[:,2]
321/12: a[:,3]
321/13: a[:,4]
321/14: a[:,5]
321/15: a[:,6]
321/16: a[:,7]
321/17: a[:,8]
321/18: a.shape[0]
321/19: b = '1990-01-02'
321/20:
b[:3
]
321/21: b[6:8]
321/22: b[5:7]
321/23: b[8:10]
322/1: import datetime as dt
322/2: dt.today()
322/3: dt.datetime.today()
322/4: dt.time
322/5: dt.time.time
322/6: dt.time.time()
322/7: dt.time()
322/8: dt.today()
322/9: dt.today
323/1: from datetime import datetime as dt
323/2: dt
323/3: dt.timestamp
323/4: dt.timestamp()
323/5: time
323/6: time.time
323/7: time
323/8: dt.time
323/9: dt.time()
323/10: dt.time.time
323/11: dt.time.time()
323/12: import time
323/13: time
323/14: time.time
323/15: time.time()
323/16: time.time()
323/17: time.time()
323/18: time.time()
323/19: time.time()
323/20: time.time()
323/21: time.time()
323/22: time.time()
323/23: time.time()
323/24: time.time()
323/25: time.time()
323/26: time.time()
323/27: time.time()
323/28: time.time()
323/29: time.time()
323/30: time.time()
323/31: time.time()
323/32: time.time()
324/1: from time import time
324/2: time
324/3: time()
324/4: time()[:11:]
324/5: str(time())[:11:]
324/6: str(time())[:11,12:]
324/7: a=time()
324/8: a
324/9: a
324/10: a
324/11: a
324/12: a=str(a)
324/13: a
324/14: a
324/15: a[:11]+a[12:]
324/16: a[:10]+a[10:]
324/17: a[:11]+a[11:]
324/18: a[:11]+a[12:]
324/19: a[:10]+a[11:]
324/20: a
325/1: a=''
325/2: a is True
325/3: a is False
325/4: a='a'
325/5: a is False
325/6: a is True
325/7: a!=''
325/8: aa=''
325/9: a=''
325/10: a!=''
326/1: from time import time
326/2: from random import random
326/3: import glob
326/4: import matplotlib.pyplot as plt
326/5: import numpy as np
326/6: import shutil
326/7: import os
326/8: time
326/9: path = 'http://dome.obsand.org:2080/DATA/CoSQM-Network/2020/01/2020-01-01.txt'
326/10: path
326/11: data=np.genfromtxt(path)
326/12: path = 'http://dome.obsand.org:2080/DATA/CoSQM-Network/Santa-Cruz_Tenerife/2020/01/2020-01-01.txt'
326/13: path
326/14: data=np.genfromtxt(path)
326/15: path = 'http://dome.obsand.org:2080/DATA/CoSQM-Network/Santa-Cruz_Tenerife/data/2020/01/2020-01-01.txt'
326/16: data=np.genfromtxt(path)
326/17: data
327/1: np
327/2: data=np.genfromtxt('http://dome.obsand.org:2080/DATA/CoSQM-Network/Santa-Cruz_Tenerife/data/2020/01/2020-01-01.txt')
327/3: data
328/1: len('http://216.113.61.211:2080/DATA/CoSQM-Network/Santa-Cruz_Tenerife/data/2019/05/2019-05-02.txt')
328/2: np
328/3: data=np.genfromtxt('http://216.113.61.211:2080/DATA/CoSQM-Network/Santa-Cruz_Tenerife/data/2019/05/2019-05-02.txt')
328/4: data
329/1: import pandas as pd
329/2: pd
329/3: import wget
329/4: pip install wget
329/5: import wget
329/6: wget.download('http://dome.obsand.org:2080/DATA/CoSQM-Network/Santa-Cruz_Tenerife/data/2020/03/')
329/7: ls
329/8: cd 216.113.61.211:2080/
329/9: ls
329/10: cd DATA/
329/11: ls
329/12: cd CoSQM-Network/
329/13: ls
329/14: cd Santa-Cruz_Tenerife/
329/15: ls
329/16: cd data/
329/17: ls
329/18: cd 20#2019/
329/19: ls
329/20: cd 2019/
329/21: ls
329/22: cd 05/
329/23: ls
329/24: cd
329/25: ls
329/26: filename=wget.download('http://dome.obsand.org:2080/DATA/CoSQM-Network/Santa-Cruz_Tenerife/data/2020/03/')
329/27: filename
329/28: import blob
329/29: import glop
329/30: import glob
329/31: glob
330/1: pwd
330/2: ls
330/3: import glob
330/4: x=glob.glob('')
330/5: x
330/6: x=glob.glob('/')
330/7: x
330/8: x=glob.glob()
330/9: x=glob.glob('./')
330/10: x
330/11: x=glob.glob('*.txt')
330/12: x
330/13: import pandas as pd
330/14: data = pd.read_csv(x, sep=" ", header=None)
330/15: [data = pd.read_csv(file, sep=" ", header=None) for file in x]
330/16: data = [pd.read_csv(file, sep=" ", header=None) for file in x]
330/17: data
330/18: data.shape
330/19: type(data)
330/20: data[0]
330/21: data[1]
330/22: data[2]
330/23: data[3]
330/24: shape(file) for file in data
330/25: [shape(file) for file in data]
330/26: [numpy.shape(file) for file in data]
330/27: [np.shape(file) for file in data]
330/28: [np.shape(file)[0] for file in data]
330/29: shapes = [np.shape(file)[0] for file in data]
330/30: import matplotlib.pyplot as plt
330/31: plt.plot(shapes)
330/32: plt.show()
330/33: plt.hist(shapes)
330/34: plt.show()
330/35: plt.hist(shapes, nbin=20)
330/36: data[0].shape
330/37: data[0].type
330/38: data[0][0]
330/39: data[0][1]
330/40: data[0][1,0]
330/41: data[0][1][0]
330/42: data[0][0][0]
330/43: data[0][0][6]
330/44: data[0][0][-1]
330/45: data[0][0][:]
330/46: data[0][0][:-1]
330/47: data[0][0][1]
330/48: data[0][0][:1]
330/49: data[0][1][0]
330/50: data[0][6][0]
330/51: data[0][7][0]
330/52: data[0][8][0]
330/53: data[0][9][0]
330/54: data[0][10][0]
330/55: datas=np.concatenate(data)
330/56: datas
330/57: datas.shape
330/58: plt
330/59: plt.plot(datas[:,7])
330/60: plt.show()
330/61: history
330/62: datas[15,0]
330/63: datas[15,1]
330/64: '2020'<'2021'
330/65: '2020'<'2019'
330/66: '2020-01'<'2019-01'
330/67: '2020-01'>'2019-01'
330/68: '2020-01-01'>'2019-01-01'
330/69: '2020-01-01'<'2019-01-01'
331/1: pwd
331/2: cd ..
331/3: cd ..
331/4: cd ..
331/5: cd ..
331/6: cd ..
331/7: cd ..
331/8: cd ..
331/9: ls
331/10: cd ..
331/11: cd git
331/12: cd cosqm_website/
331/13: ls
331/14: paths = glob.glob('dome.obsand.org:2080/DATA/CoSQM-Network/'+ station_name + '/' + '*.txt')
331/15: import glob
331/16: paths = glob.glob('dome.obsand.org:2080/DATA/CoSQM-Network/'+ station_name + '/' + '*.txt')
331/17: station_name = 'Santa-Cruz_Tenerife'
331/18: paths = glob.glob('dome.obsand.org:2080/DATA/CoSQM-Network/'+ station_name + '/' + '*.txt')
331/19: paths
331/20: paths = glob.glob('dome.obsand.org:2080/DATA/CoSQM-Network/'+ station_name + '/' + '*/*/*.txt')
331/21: paths
331/22: paths = glob.glob('dome.obsand.org:2080/DATA/CoSQM-Network/'+ station_name + '/data/*/*/*.txt')
331/23: paths
331/24: '2020-01-01'+1
331/25: '2020-01-01'+'1'
331/26: filename1 = '2020-01-11'
331/27: paths = glob.glob('dome.obsand.org:2080/DATA/CoSQM-Network/'+ station_name + '/data/'+ year +'/' + month + '/' + filename1)
331/28: year='2020'
331/29: month='01'
331/30: day='11'
331/31: paths = glob.glob('dome.obsand.org:2080/DATA/CoSQM-Network/'+ station_name + '/data/'+ year +'/' + month + '/' + filename1)
331/32: paths
331/33: filename1 = '2020-01-11.txt'
331/34: paths = glob.glob('dome.obsand.org:2080/DATA/CoSQM-Network/'+ station_name + '/data/'+ year +'/' + month + '/' + filename1)
331/35: paths
331/36: filename1
331/37: paths
331/38: paths.type
331/39: type(paths)
331/40: paths[0]
331/41: ddat = pd.read_csv(paths[0], sep=' ')
331/42: import pandas as pd
331/43: ddat = pd.read_csv(paths[0], sep=' ')
331/44: pwd
331/45: ls
331/46: cd static/
331/47: ls
331/48: cd ..
331/49: paths = glob.glob('dome.obsand.org:2080/DATA/CoSQM-Network/'+ station_name + '/data/'+ year +'/' + month + '/' + filename1)
331/50: datas = pd.read_csv(paths[0], sep=" ", header=None)
331/51: data=np.array(datas)
331/52: data
331/53: data.shape
331/54: data.shape[0]
331/55: xs = np.arange(data.shape[0])
331/56: Cs = data[:,7]
331/57: ax.scatter(xs, Cs, color='k', s=1)
331/58: fig,ax = plt.subplots(1, 1, dpi=140, figsize=(8,4))
331/59: ax.scatter(xs, Cs, color='k', s=1)
331/60: plt.show()
331/61: Cs
331/62: Cs.len
331/63: Cs.shape
331/64: xs.shape
331/65: ax.show()
331/66: fig.show()
331/67: fig,ax = plt.subplots(1, 1, dpi=140, figsize=(8,4))
331/68: ax.scatter(xs, Cs, color='w', s=1)
331/69: plt.show()
331/70: filename1
331/71: filename1[:-1]
331/72: filename1[:-4]
331/73: paths = glob.glob('dome.obsand.org:2080/DATA/CoSQM-Network/'+ station_name + '/data/*/*/*.txt')
331/74: paths
331/75: datas = [pd.read_csv(path, sep=" ", header=None) for path in paths]
331/76: data = np.concatenate(datas)
331/77: data = data[argwhere(data[:,0]>=filename1[:,-4] and data[:,0]<=filename2[:,-4])]
331/78: data = data[np.argwhere(data[:,0]>=filename1[:,-4] and data[:,0]<=filename2[:,-4])]
331/79: data = data[np.where(data[:,0]>=filename1[:,-4] and data[:,0]<=filename2[:,-4])]
331/80: np.where(data[:,0]>=filename1[:,-4])
331/81: (data[:,0]>=filename1[:,-4])
331/82: (data[0,0]>=filename1[:,-4])
331/83: data[:,0]
331/84: np.where(data[:,0]=='2019-05-07')
331/85: data[np.where(data[:,0]=='2019-05-07')]
331/86: data[np.where(data[:,0]>='2019-05-07')]
331/87: data[np.where(data[:,0]<='2019-05-07')]
331/88: data[np.where(data[:,0]<=filename1[:-4])]
331/89: filename1
331/90: data[np.where(data[:,0]>=filename1[:-4])]
331/91: data = np.concatenate(datas)
331/92: data = data[np.where(data[:,0]>=filename1[:-4] and data[:,0]<=filename2[:-4])]
331/93: if 0<1<2:print(yes)
331/94: if 0<1<2:print('yes')
331/95: if 0<1<0:print('yes')
331/96: data = data[np.where(filename1[:-4] <= data[:,0] <= filename2[:-4])]
331/97: data = data[np.where(filename1[:-4] <= data[:,0])]
331/98: data
331/99: plt.plot(data[:,7])
331/100: plt.show()
331/101: a=[1,2,3,4,5,6]
331/102: a=np.array(a)
331/103: a
331/104: a[np.where(3<=a)]
331/105: a[np.where(3<=a<=6)]
331/106: a[np.where(3<=a.all()<=6)]
331/107: a[np.where(3<=a.any()<=6)]
331/108: data = data[(filename1[:-4] <= data[:,0]) & (data[:,0] <= filename2[:-4])]
331/109: filename2='2020-04-01'
331/110: data = data[(filename1[:-4] <= data[:,0]) & (data[:,0] <= filename2[:-4])]
331/111: data
331/112: filename1
331/113: filename2='2020-04-01.txt'
331/114: data = data[(filename1[:-4] <= data[:,0]) & (data[:,0] <= filename2[:-4])]
331/115: data
331/116: filename1
331/117: filename2
331/118: data[:,0]
331/119: datas = [pd.read_csv(path, sep=" ", header=None) for path in paths]
331/120: data_all = np.concatenate(datas)
331/121: data = data[(data_all[:,0]>=filename1[:-4]) & (data_all[:,0] <= filename2[:-4])]
331/122: data = data_all[(data_all[:,0]>=filename1[:-4]) & (data_all[:,0] <= filename2[:-4])]
331/123: data
331/124: data.shape
332/1: import numpy as np
332/2: import pandas as pd
332/3: import glob
332/4: dome.obsand.org:2080/DATA/CoSQM-Network/Santa-Cruz_Tenerife/data/2020/01/2020-01-25.txt
332/5: station_name = 'Santa-Cruz_Tenerife'
332/6: paths = glob.glob('dome.obsand.org:2080/DATA/CoSQM-Network/'+ station_name + '/data/*/*/*.txt')
332/7: paths
332/8: pwd
332/9: cd git/cosqm_website/
332/10: paths = glob.glob('dome.obsand.org:2080/DATA/CoSQM-Network/'+ station_name + '/data/*/*/*.txt')
332/11: âths
332/12: paths
332/13: datas = [pd.read_csv(path, sep=" ", header=None) for path in paths]
332/14: datas
332/15: print(datas.shape)
332/16: data_all = np.concatenate(datas)
332/17: data_all.shape
332/18: data = data_all[(data_all[:,0] >= filename1[:-4]) & (data_all[:,0] <= filename2[:-4])]
332/19: filename1='2020-01-01.txt'
332/20: filename2='2020-01-06.txt'
332/21: data = data_all[(data_all[:,0] >= filename1[:-4]) & (data_all[:,0] <= filename2[:-4])]
332/22: data
332/23: data.shape
332/24: shape([0,1,2])
332/25: np.shape([0,1,2])
332/26: path
332/27: paths
332/28: datas = [pd.read_csv(path, sep=" ", header=None) for path in paths]
332/29: datas
332/30: station_name='Observatorio_Teide'
332/31: paths = glob.glob('dome.obsand.org:2080/DATA/CoSQM-Network/'+ station_name + '/data/*/*/*.txt')
332/32: paths
332/33: datas = [pd.read_csv(path, sep=" ", header=None) for path in paths]
332/34: datas = [pd.read_csv(path, delim_whitespace=True, header=None) for path in paths]
332/35: datas = [pd.read_csv(path, delim_whitespace=True, header=None, error_bad_lines=False) for path in paths]
332/36: datas = [pd.read_csv(path, delim_whitespace=True, header=None, error_bad_lines=False) and print path for path in paths]
332/37: datas = [pd.read_csv(path, delim_whitespace=True, header=None, error_bad_lines=False) and print (path) for path in paths]
332/38: datas = [pd.read_csv(path, delim_whitespace=True, header=None, error_bad_lines=False) & print (path) for path in paths]
332/39: datas = [pd.read_csv(path, delim_whitespace=True, header=None, error_bad_lines=False) && print (path) for path in paths]
332/40: datas = [pd.read_csv(path, delim_whitespace=True, header=None, error_bad_lines=False) for path in paths]
332/41: datas = [pd.read_csv(path, delim_whitespace=True, header=None, error_bad_lines=False) for path in paths[:10]]
332/42: datas = [pd.read_csv(path, delim_whitespace=True, header=None, error_bad_lines=False) for path in paths[:1]]
332/43: datas
332/44: datas = [pd.read_csv(path, delim_whitespace=True, header=None, error_bad_lines=False) for path in paths[:2]]
332/45: datas = [pd.read_csv(path, delim_whitespace=True, header=None, error_bad_lines=False) for path in paths[3:6]]
332/46: datas
332/47: datas = [pd.read_csv(path, delim_whitespace=True, header=None, error_bad_lines=False) for path in paths[3:6] if os.path.getsize(fpath) >0]
332/48: datas = [pd.read_csv(path, delim_whitespace=True, header=None, error_bad_lines=False) for path in paths[3:6] if os.path.getsize(path) >0]
332/49: datas
332/50: datas = [pd.read_csv(path, delim_whitespace=True, header=None, error_bad_lines=False) for path in paths[0:6] if os.path.getsize(path) >0]
332/51: datas
333/1:
import folium
import pandas as pd
from branca.element import Template, MacroElement
import numpy as np

# reading data
sensor1 = pd.read_csv('/Users/admin/Downloads/lan31.csv')
sensor2 = pd.read_csv('/Users/admin/Downloads/lan32.csv')
sensor3 = pd.read_csv('/Users/admin/Downloads/lan33.csv')
sensor4 = pd.read_csv('/Users/admin/Downloads/lan34.csv')
sensor5 = pd.read_csv('/Users/admin/Downloads/lan35.csv')
sensor6 = pd.read_csv('/Users/admin/Downloads/lan36.csv')

# remove NaNas
sensor1 = sensor1.dropna(subset=['longitude'])
sensor1 = sensor1.dropna(subset=['latitude'])
sensor1 = sensor1.dropna(subset=['altitude'])

sensor2 = sensor2.dropna(subset=['longitude'])
sensor2 = sensor2.dropna(subset=['latitude'])
sensor2 = sensor2.dropna(subset=['altitude'])

sensor3 = sensor3.dropna(subset=['longitude'])
sensor3 = sensor3.dropna(subset=['latitude'])
sensor3 = sensor3.dropna(subset=['altitude'])

sensor4 = sensor4.dropna(subset=['longitude'])
sensor4 = sensor4.dropna(subset=['latitude'])
sensor4 = sensor4.dropna(subset=['altitude'])

sensor5 = sensor5.dropna(subset=['longitude'])
sensor5 = sensor5.dropna(subset=['latitude'])
sensor5 = sensor5.dropna(subset=['altitude'])

sensor6 = sensor6.dropna(subset=['longitude'])
sensor6 = sensor6.dropna(subset=['latitude'])
sensor6 = sensor6.dropna(subset=['altitude'])


sensor_moy = sensor3
#mettre a zero les valeurs plus petites que 20 pour R,G,B,clear
sensor_list = [sensor2,sensor3,sensor4,sensor5]
sum_keys = ['R','G','B','clear']

for sensor in sensor_list:
    for key in sum_keys:
        sensor[key] = np.where(sensor[key] <=60, sensor[key], 0)

print (sensor3['clear'])
333/2: sensor1 = pd.read_csv('/Users/admin/Downloads/lan31.csv')
333/3: sensor1
333/4: sensor1['R']
333/5: np.where(sensor2['R']<=60, sensor[key], 0)
333/6: np.where(sensor2['R']<=60, sensor['R'], 0)
333/7: np.where(sensor2['R']<=60, sensor2['R'], 0)
333/8: key
333/9: sensor
333/10:
import folium
import pandas as pd
from branca.element import Template, MacroElement
import numpy as np

# reading data
sensor1 = pd.read_csv('/Users/admin/Downloads/lan31.csv')
sensor2 = pd.read_csv('/Users/admin/Downloads/lan32.csv')
sensor3 = pd.read_csv('/Users/admin/Downloads/lan33.csv')
sensor4 = pd.read_csv('/Users/admin/Downloads/lan34.csv')
sensor5 = pd.read_csv('/Users/admin/Downloads/lan35.csv')
sensor6 = pd.read_csv('/Users/admin/Downloads/lan36.csv')

# remove NaNas
sensor1 = sensor1.dropna(subset=['longitude'])
sensor1 = sensor1.dropna(subset=['latitude'])
sensor1 = sensor1.dropna(subset=['altitude'])

sensor2 = sensor2.dropna(subset=['longitude'])
sensor2 = sensor2.dropna(subset=['latitude'])
sensor2 = sensor2.dropna(subset=['altitude'])

sensor3 = sensor3.dropna(subset=['longitude'])
sensor3 = sensor3.dropna(subset=['latitude'])
sensor3 = sensor3.dropna(subset=['altitude'])

sensor4 = sensor4.dropna(subset=['longitude'])
sensor4 = sensor4.dropna(subset=['latitude'])
sensor4 = sensor4.dropna(subset=['altitude'])

sensor5 = sensor5.dropna(subset=['longitude'])
sensor5 = sensor5.dropna(subset=['latitude'])
sensor5 = sensor5.dropna(subset=['altitude'])

sensor6 = sensor6.dropna(subset=['longitude'])
sensor6 = sensor6.dropna(subset=['latitude'])
sensor6 = sensor6.dropna(subset=['altitude'])


sensor_moy = sensor3
#mettre a zero les valeurs plus petites que 20 pour R,G,B,clear
sensor_list = [sensor2,sensor3,sensor4,sensor5]
sum_keys = ['R','G','B','clear']

for sensor in sensor_list:
    for key in sum_keys:
        sensor[key] = np.where(sensor[key] <=20, sensor[key], 0)

print (sensor3['clear'])
333/11:
import folium
import pandas as pd
from branca.element import Template, MacroElement
import numpy as np

# reading data
sensor1 = pd.read_csv('/Users/admin/Downloads/lan31.csv')
sensor2 = pd.read_csv('/Users/admin/Downloads/lan32.csv')
sensor3 = pd.read_csv('/Users/admin/Downloads/lan33.csv')
sensor4 = pd.read_csv('/Users/admin/Downloads/lan34.csv')
sensor5 = pd.read_csv('/Users/admin/Downloads/lan35.csv')
sensor6 = pd.read_csv('/Users/admin/Downloads/lan36.csv')

# remove NaNas
sensor1 = sensor1.dropna(subset=['longitude'])
sensor1 = sensor1.dropna(subset=['latitude'])
sensor1 = sensor1.dropna(subset=['altitude'])

sensor2 = sensor2.dropna(subset=['longitude'])
sensor2 = sensor2.dropna(subset=['latitude'])
sensor2 = sensor2.dropna(subset=['altitude'])

sensor3 = sensor3.dropna(subset=['longitude'])
sensor3 = sensor3.dropna(subset=['latitude'])
sensor3 = sensor3.dropna(subset=['altitude'])

sensor4 = sensor4.dropna(subset=['longitude'])
sensor4 = sensor4.dropna(subset=['latitude'])
sensor4 = sensor4.dropna(subset=['altitude'])

sensor5 = sensor5.dropna(subset=['longitude'])
sensor5 = sensor5.dropna(subset=['latitude'])
sensor5 = sensor5.dropna(subset=['altitude'])

sensor6 = sensor6.dropna(subset=['longitude'])
sensor6 = sensor6.dropna(subset=['latitude'])
sensor6 = sensor6.dropna(subset=['altitude'])


sensor_moy = sensor3
#mettre a zero les valeurs plus petites que 20 pour R,G,B,clear
sensor_list = [sensor2,sensor3,sensor4,sensor5]
sum_keys = ['R','G','B','clear']
333/12: sensor3['R']
333/13: sensor3['clear']
333/14:
for sensor in sensor_list:
    for key in sum_keys:
        sensor[key] = np.where(sensor[key] <=20, sensor[key], 0)
333/15: sensor3['clear']
333/16: type(sensor3['clear'])
333/17:
sensor3 = pd.read_csv('/Users/admin/Downloads/lan33.csv')
sensor_moy = sensor3
#mettre a zero les valeurs plus petites que 20 pour R,G,B,clear
sensor_list = [sensor2,sensor3,sensor4,sensor5]
sum_keys = ['R','G','B','clear']

for sensor in sensor_list:
    for key in sum_keys:
        np.array(sensor[key]) = np.where(sensor[key] <=20, sensor[key], 0)

print (sensor3['clear'])

df.loc[df["Freq"]==20, "TOC"] = True
333/18:

sensor3 = pd.read_csv('/Users/admin/Downloads/lan33.csv')
sensor_moy = sensor3
#mettre a zero les valeurs plus petites que 20 pour R,G,B,clear
sensor_list = [sensor2,sensor3,sensor4,sensor5]
sum_keys = ['R','G','B','clear']

for sensor in sensor_list:
    for key in sum_keys:
        sensor.loc[sensor[key]<=20, sensor[key]] = 0
print (sensor3['clear'])
333/19:
sensor3 = pd.read_csv('/Users/admin/Downloads/lan33.csv')
sensor_moy = sensor3
#mettre a zero les valeurs plus petites que 20 pour R,G,B,clear
sensor_list = [sensor2,sensor3,sensor4,sensor5]
sum_keys = ['R','G','B','clear']

for sensor in sensor_list:
    for key in sum_keys:
        sensor[key] = np.where(sensor[key] <= 20, 0, sensor[key])
print (sensor3['clear'])
333/20:
sensor3 = pd.read_csv('/Users/admin/Downloads/lan33.csv')
sensor_moy = sensor3
#mettre a zero les valeurs plus petites que 20 pour R,G,B,clear
sensor_list = [sensor2,sensor3,sensor4,sensor5]
sum_keys = ['R','G','B','clear']

for sensor in sensor_list:
    for key in sum_keys:
        sensor[key] = np.where(sensor[key] <= 100, 0, sensor[key])
print (sensor3['clear'])
333/21:

sensor3 = pd.read_csv('/Users/admin/Downloads/lan33.csv')
sensor_moy = sensor3
#mettre a zero les valeurs plus petites que 20 pour R,G,B,clear
sensor_list = [sensor2,sensor3,sensor4,sensor5]
sum_keys = ['R','G','B','clear']

for sensor in sensor_list:
    for key in sum_keys:
        sensor[key] = np.where(sensor[key] <= 500, 0, sensor[key])
print (sensor3['clear'])
333/22: sensor2['R']
333/23: sensor3['R']
333/24: sensor4['R']
333/25: sensor5['R']
333/26: sensor6['R']
333/27:
#format de donnees et considerant les positions GPS du capteur 3
sensor_moy = sensor3
sensor_moy['R'] = np.mean(sensor2['R']+sensor3['R']+sensor4['R']+sensor5['R'])
333/28: sensor_moy['R']
333/29:
import folium
import pandas as pd
from branca.element import Template, MacroElement
import numpy as np

# reading data
sensor1 = pd.read_csv('/Users/admin/Downloads/lan31.csv')
sensor2 = pd.read_csv('/Users/admin/Downloads/lan32.csv')
sensor3 = pd.read_csv('/Users/admin/Downloads/lan33.csv')
sensor4 = pd.read_csv('/Users/admin/Downloads/lan34.csv')
sensor5 = pd.read_csv('/Users/admin/Downloads/lan35.csv')
sensor6 = pd.read_csv('/Users/admin/Downloads/lan36.csv')

# remove NaNas
sensor1 = sensor1.dropna(subset=['longitude'])
sensor1 = sensor1.dropna(subset=['latitude'])
sensor1 = sensor1.dropna(subset=['altitude'])

sensor2 = sensor2.dropna(subset=['longitude'])
sensor2 = sensor2.dropna(subset=['latitude'])
sensor2 = sensor2.dropna(subset=['altitude'])

sensor3 = sensor3.dropna(subset=['longitude'])
sensor3 = sensor3.dropna(subset=['latitude'])
sensor3 = sensor3.dropna(subset=['altitude'])

sensor4 = sensor4.dropna(subset=['longitude'])
sensor4 = sensor4.dropna(subset=['latitude'])
sensor4 = sensor4.dropna(subset=['altitude'])

sensor5 = sensor5.dropna(subset=['longitude'])
sensor5 = sensor5.dropna(subset=['latitude'])
sensor5 = sensor5.dropna(subset=['altitude'])

sensor6 = sensor6.dropna(subset=['longitude'])
sensor6 = sensor6.dropna(subset=['latitude'])
sensor6 = sensor6.dropna(subset=['altitude'])


#mettre a zero les valeurs plus petites que 20 pour R,G,B,clear
sensor_list = [sensor2,sensor3,sensor4,sensor5]
sum_keys = ['R','G','B','clear']

for sensor in sensor_list:
    for key in sum_keys:
        sensor[key] = np.where(sensor[key] <= 20, 0, sensor[key])

#faire la moyenne des capteurs de cote selon le meme 
#format de donnees et considerant les positions GPS du capteur 3
sensor_moy = sensor3
sensor_moy['R'] = np.mean(sensor2['R']+sensor3['R']+sensor4['R']+sensor5['R'])
333/30: sensor_moy['R']
333/31: sensor_moy['R'] = (sensor2['R']+sensor3['R']+sensor4['R']+sensor5['R'])/4
333/32: sensor_moy['R']
333/33:
for key in sum_keys:
    sensor_moy[key] = (sensor2[key]+sensor3[key]+sensor4[key]+sensor5[key])/4
333/34: sensor_moy
334/1: sqrt(2)
334/2: import numpy as np
334/3: np.sqrt(2)
335/1: 2^**8
335/2: 2**8
335/3: 2**12
336/1: 2**12
336/2: np.sqrt(2)
338/1: 1.6*1800/(2*np.sqrt(2)*100)
338/2: 1.6*1800/(2*np.sqrt(2)*30)
338/3: 1.6*1800/(2*np.sqrt(2)*25)
339/1:
import PIL
import numpy as np
import rawpy
import matplotlib.pyplot as plt
import cv2

file_path = "fisheye-juliette1.ARW"
with rawpy.imread(file_path) as raw:
    # rgb = image en jpg pour python puisse la lire avec numpy
    rgb = raw.postprocess(gamma=(1, 1), no_auto_bright=True, output_bps=8, use_camera_wb=True)

# grandeur de l'image h pour height et w pour width et N pour couleurs
h, w, N = rgb.shape
print(N)

# Défini les matrices y et x des pixels. (h-1)/2 est pour une valeur paire de pixel parce quil n'y a pas de pixel central. le centre est entre deux pixels. Donc on veut avoir 0.5. meme chose pour w. Bref on veut avoir la coordonné du pixel par rapport au centre. Si impaire: (h-1)/2 fonctionne aussi puisqu'on elimine le pixel central et on divise chaque bord.
y, x = np.ogrid[-(h - 1) / 2.:(h - 1) / 2. + 1, -(w - 1) / 2.:(w - 1) / 2. + 1]

# pour obtenir la matrice du rayon des pixels
r = np.sqrt(y ** 2 + x ** 2)

# On obtient la matrice en fonction de l'angle angle. On a appliqué la fonction de notre caractérisation de la lentille fisheye.
#angle = ((-2.338671 ** -8) * (r ** 2)) + ((4.905207 ** -4) * r)
angle = ((-2.338671) * (r ** 2)) + ((4.905207) * r)

#tangeante de l'angle
dangles = np.tan(angle)
339/2: dangles
339/3: plt.plot(dangles)
339/4: plt.show()
339/5: print('a')
339/6: np.tan(np.pi/2)
339/7: plt.plot(np.tan(np.arange(0,3000)))
339/8: plt.show()
340/1:

# On obtient la matrice en fonction de l'angle angle. On a appliqué la fonction de notre caractérisation de la lentille fisheye.
angle = ((-2.338671 ** -8) * (r ** 2)) + ((4.905207 ** -4) * r)
#angle = ((-2.338671) * (r ** 2)) + ((4.905207) * r)

#tangeante de l'angle
dangles = np.tan(angle)
340/2:
import PIL
import numpy as np
import rawpy
import matplotlib.pyplot as plt
import cv2

file_path = "fisheye-juliette1.ARW"
with rawpy.imread(file_path) as raw:
    # rgb = image en jpg pour python puisse la lire avec numpy
    rgb = raw.postprocess(gamma=(1, 1), no_auto_bright=True, output_bps=8, use_camera_wb=True)

# grandeur de l'image h pour height et w pour width et N pour couleurs
h, w, N = rgb.shape
print(N)

# Défini les matrices y et x des pixels. (h-1)/2 est pour une valeur paire de pixel parce quil n'y a pas de pixel central. le centre est entre deux pixels. Donc on veut avoir 0.5. meme chose pour w. Bref on veut avoir la coordonné du pixel par rapport au centre. Si impaire: (h-1)/2 fonctionne aussi puisqu'on elimine le pixel central et on divise chaque bord.
y, x = np.ogrid[-(h - 1) / 2.:(h - 1) / 2. + 1, -(w - 1) / 2.:(w - 1) / 2. + 1]

# pour obtenir la matrice du rayon des pixels
r = np.sqrt(y ** 2 + x ** 2)

# On obtient la matrice en fonction de l'angle angle. On a appliqué la fonction de notre caractérisation de la lentille fisheye.
angle = ((-2.338671 ** -8) * (r ** 2)) + ((4.905207 ** -4) * r)
#angle = ((-2.338671) * (r ** 2)) + ((4.905207) * r)

#tangeante de l'angle
dangles = np.tan(angle)
340/3: dangles
340/4: dangles.shape
340/5: plt.imshow(dangles)
340/6: plt.show()
340/7: plt.imshow(angle)
340/8: plt.show()
340/9: angle.max
340/10: angle.max()
340/11: angle.min()
340/12: [angle for angle<0]
340/13: [angle for angle < 0]
340/14: [angle if angle < 0]
340/15: angle.shape
340/16: r.shape
340/17: plt.imshow(r)
340/18: plt.plot()
340/19: plt.imshow(r)
340/20: plt.show()
340/21: r.min()
340/22: r.max()
340/23: x.shaoe
340/24: x.shape
340/25: plt.plot(x)
340/26: plt.show()
340/27: x.[0]
340/28: x[0]
340/29: x[0].shape
340/30: plt.plot(x[0])
340/31: plt.show()
340/32: plt.plot(y[0])
340/33: plt.show()
340/34: y[0]
340/35: y.shape
340/36: plt.plot(y[:,0])
340/37: plt.show()
340/38:
Y, X = np.ogrid[-(h - 1) / 2.:(h - 1) / 2. + 1, -(w - 1) / 2.:(w - 1) / 2. + 1]
X = X.astype(np.float32)
Y = Y.astype(np.float32)

#Fonction de xy( coordonné de l'iamge source) en fonction des coordonnées de l'image transformée
x = (X * r) / dangles
y = (Y * r) / dangles

#Format de x et y pour la fct CV2
x = x.astype(np.float32)
y = y.astype(np.float32)

# mettre le point de départ des coordonnées en haut à gauche
x = x + (x.max())
y = y - y.max()
y = y * (-1)
340/39: x
340/40: y
340/41: plt.plot(x)
340/42: x.shape
340/43: plt.imshow(x)
340/44: plt.show()
340/45: plt.show(y)
340/46: plt.imshow(y)
340/47: plt.show()
340/48:
np.flipud(rgb)
reshape = cv2.remap(rgb, x, y, cv2.INTER_LINEAR)

plt.imshow(reshape)
plt.show()
340/49:
Y, X = np.ogrid[-(h - 1) / 2.:(h - 1) / 2. + 1, -(w - 1) / 2.:(w - 1) / 2. + 1]
X = X.astype(np.float32)
Y = Y.astype(np.float32)
r = np.sqrt(X ** 2 + Y ** 2)
angle = ((-2.338671 ** -8) * (r ** 2)) + ((4.905207 ** -4) * r)
dangles = np.tan(angle)
#Fonction de xy( coordonné de l'iamge source) en fonction des coordonnées de l'image transformée
x = (X * r) / dangles
y = (Y * r) / dangles

#Format de x et y pour la fct CV2
x = x.astype(np.float32)
y = y.astype(np.float32)

# mettre le point de départ des coordonnées en haut à gauche
x = x + (x.max())
y = y - y.max()
y = y * (-1)

np.flipud(rgb)
reshape = cv2.remap(rgb, x, y, cv2.INTER_LINEAR)

plt.imshow(reshape)
plt.show()
340/50: shape(x)
340/51: np.shape(x)
340/52:
X = np.arange(4024)
Y = np.arange(6024)
X = X.astype(np.float32)
Y = Y.astype(np.float32)
r = np.sqrt(X ** 2 + Y ** 2)
angle = ((-2.338671 ** -8) * (r ** 2)) + ((4.905207 ** -4) * r)
dangles = np.tan(angle)
#Fonction de xy( coordonné de l'iamge source) en fonction des coordonnées de l'image transformée
x = (X * r) / dangles
y = (Y * r) / dangles

#Format de x et y pour la fct CV2
x = x.astype(np.float32)
y = y.astype(np.float32)

# mettre le point de départ des coordonnées en haut à gauche
x = x + (x.max())
y = y - y.max()
y = y * (-1)

np.flipud(rgb)
reshape = cv2.remap(rgb, x, y, cv2.INTER_LINEAR)

plt.imshow(reshape)
plt.show()
340/53:
X = np.arange(4024)
Y = np.arange(6024)
X = X.astype(np.float32)
Y = Y.astype(np.float32)
r = np.sqrt(X ** 2 + Y ** 2)
angle = ((-2.338671 ** -8) * (r ** 2)) + ((4.905207 ** -4) * r)
dangles = np.tan(angle)
#Fonction de xy( coordonné de l'iamge source) en fonction des coordonnées de l'image transformée
x = (X * r) / dangles
y = (Y * r) / dangles

#Format de x et y pour la fct CV2
x = x.astype(np.float32)
y = y.astype(np.float32)

# mettre le point de départ des coordonnées en haut à gauche
x = x + (x.max())
y = y - y.max()
y = y * (-1)

np.flipud(rgb)
reshape = cv2.remap(rgb, x, y, cv2.INTER_LINEAR)

plt.imshow(reshape)
plt.show()
340/54:
X = np.arange(4024)
Y = np.arange(4024)
X = X.astype(np.float32)
Y = Y.astype(np.float32)
r = np.sqrt(X ** 2 + Y ** 2)
angle = ((-2.338671 ** -8) * (r ** 2)) + ((4.905207 ** -4) * r)
dangles = np.tan(angle)
#Fonction de xy( coordonné de l'iamge source) en fonction des coordonnées de l'image transformée
x = (X * r) / dangles
y = (Y * r) / dangles

#Format de x et y pour la fct CV2
x = x.astype(np.float32)
y = y.astype(np.float32)

# mettre le point de départ des coordonnées en haut à gauche
x = x + (x.max())
y = y - y.max()
y = y * (-1)

np.flipud(rgb)
reshape = cv2.remap(rgb, x, y, cv2.INTER_LINEAR)

plt.imshow(reshape)
plt.show()
340/55:
X = np.arange(1,4025)
Y = np.arange(1,4025)
X = X.astype(np.float32)
Y = Y.astype(np.float32)
r = np.sqrt(X ** 2 + Y ** 2)
angle = ((-2.338671 ** -8) * (r ** 2)) + ((4.905207 ** -4) * r)
dangles = np.tan(angle)
#Fonction de xy( coordonné de l'iamge source) en fonction des coordonnées de l'image transformée
x = (X * r) / dangles
y = (Y * r) / dangles

#Format de x et y pour la fct CV2
x = x.astype(np.float32)
y = y.astype(np.float32)

# mettre le point de départ des coordonnées en haut à gauche
x = x + (x.max())
y = y - y.max()
y = y * (-1)

np.flipud(rgb)
reshape = cv2.remap(rgb, x, y, cv2.INTER_LINEAR)

plt.imshow(reshape)
plt.show()
340/56:
X = (dangles * x) / r
Y = (dangles * y) / r

#Format de X et Y pour la fct CV2
X = np.arange(1,4025)
Y = np.arange(1,4025)
X = X.astype(np.float32)
Y = Y.astype(np.float32)
r = np.sqrt(X ** 2 + Y ** 2)
angle = ((-2.338671 ** -8) * (r ** 2)) + ((4.905207 ** -4) * r)
dangles = np.tan(angle)
#Fonction de xy( coordonné de l'iamge source) en fonction des coordonnées de l'image transformée
x = (X * r) / angles
y = (Y * r) / angles

#Format de x et y pour la fct CV2
x = x.astype(np.float32)
y = y.astype(np.float32)

# mettre le point de départ des coordonnées en haut à gauche
x = x + (x.max())
y = y - y.max()
y = y * (-1)

np.flipud(rgb)
reshape = cv2.remap(rgb, x, y, cv2.INTER_LINEAR)

plt.imshow(reshape)
plt.show()
340/57:
X = (dangles * x) / r
Y = (dangles * y) / r

#Format de X et Y pour la fct CV2
X = np.arange(1,4025)
Y = np.arange(1,4025)
X = X.astype(np.float32)
Y = Y.astype(np.float32)
r = np.sqrt(X ** 2 + Y ** 2)
angle = ((-2.338671 ** -8) * (r ** 2)) + ((4.905207 ** -4) * r)
dangles = np.tan(angle)
#Fonction de xy( coordonné de l'iamge source) en fonction des coordonnées de l'image transformée
x = (X * r) / angles
y = (Y * r) / angles

#Format de x et y pour la fct CV2
x = x.astype(np.float32)
y = y.astype(np.float32)

# mettre le point de départ des coordonnées en haut à gauche
x = x + (x.max())
y = y - y.max()
y = y * (-1)

np.flipud(rgb)
reshape = cv2.remap(rgb, x, y, cv2.INTER_LINEAR)

plt.imshow(reshape)
plt.show()
340/58:
X = (dangles * x) / r
Y = (dangles * y) / r

#Format de X et Y pour la fct CV2
X = np.arange(1,4025)
Y = np.arange(1,4025)
X = X.astype(np.float32)
Y = Y.astype(np.float32)
r = np.sqrt(X ** 2 + Y ** 2)
angle = ((-2.338671 ** -8) * (r ** 2)) + ((4.905207 ** -4) * r)
dangles = np.tan(angle)
#Fonction de xy( coordonné de l'iamge source) en fonction des coordonnées de l'image transformée
x = (X * r) / angle
y = (Y * r) / angle

#Format de x et y pour la fct CV2
x = x.astype(np.float32)
y = y.astype(np.float32)

# mettre le point de départ des coordonnées en haut à gauche
x = x + (x.max())
y = y - y.max()
y = y * (-1)

np.flipud(rgb)
reshape = cv2.remap(rgb, x, y, cv2.INTER_LINEAR)

plt.imshow(reshape)
plt.show()
340/59:
X = np.arange(1,4025)
Y = np.arange(1,4025)
X, Y = np.meshgrid(X,Y)
X = X.astype(np.float32)
Y = Y.astype(np.float32)
r = np.sqrt(X ** 2 + Y ** 2)
angle = ((-2.338671 ** -8) * (r ** 2)) + ((4.905207 ** -4) * r)
dangles = np.tan(angle)
#Fonction de xy( coordonné de l'iamge source) en fonction des coordonnées de l'image transformée
x = (X * r) / angle
y = (Y * r) / angle

#Format de x et y pour la fct CV2
x = x.astype(np.float32)
y = y.astype(np.float32)

# mettre le point de départ des coordonnées en haut à gauche
x = x + (x.max())
y = y - y.max()
y = y * (-1)

np.flipud(rgb)
reshape = cv2.remap(rgb, x, y, cv2.INTER_LINEAR)

plt.imshow(reshape)
plt.show()
340/60:
X = np.arange(1,4025)
Y = np.arange(1,4025)
X, Y = np.meshgrid(X,Y)
X = X.astype(np.float32)
Y = Y.astype(np.float32)
r = np.sqrt(X ** 2 + Y ** 2)
angle = ((-2.338671 ** -8) * (r ** 2)) + ((4.905207 ** -4) * r)
dangles = np.tan(angle)
#Fonction de xy( coordonné de l'iamge source) en fonction des coordonnées de l'image transformée
x = (X * r) / angle
y = (Y * r) / angle

#Format de x et y pour la fct CV2
x = x.astype(np.float32)
y = y.astype(np.float32)

# # mettre le point de départ des coordonnées en haut à gauche
# x = x + (x.max())
# y = y - y.max()
# y = y * (-1)

np.flipud(rgb)
reshape = cv2.remap(rgb, x, y, cv2.INTER_LINEAR)

plt.imshow(reshape)
plt.show()
340/61: np.atan(np.pi)
340/62: np.arctan(np.pi)
340/63:
X = np.zeros((rgb.shape[0], rgb.shape[1]), dtype=np.float32)
Y = np.zeros((rgb.shape[0], rgb.shape[1]), dtype=np.float32)
X = X.astype(np.float32)
Y = Y.astype(np.float32)
angle = np.arctan(dangles)
r= angle/4.9**-4

#Fonction de xy( coordonné de l'iamge source) en fonction des coordonnées de l'image transformée
x = (X * r) / dangles
y = (Y * r) / dangles

#Format de x et y pour la fct CV2
x = x.astype(np.float32)
y = y.astype(np.float32)

# # mettre le point de départ des coordonnées en haut à gauche
# x = x + (x.max())
# y = y - y.max()
# y = y * (-1)

np.flipud(rgb)
reshape = cv2.remap(rgb, x, y, cv2.INTER_LINEAR)

plt.imshow(reshape)
plt.show()
340/64:
X = np.zeros((rgb.shape[0], rgb.shape[1]), dtype=np.float32)
Y = np.zeros((rgb.shape[0], rgb.shape[1]), dtype=np.float32)
X = X.astype(np.float32)
Y = Y.astype(np.float32)
r = np.sqrt(X ** 2 + Y ** 2)
angle = ((4.905207 ** -4) * r)
#tangeante de l'angle
dangles = np.tan(angle)

#Fonction de xy( coordonné de l'iamge source) en fonction des coordonnées de l'image transformée
x = (X * r) / dangles
y = (Y * r) / dangles

#Format de x et y pour la fct CV2
x = x.astype(np.float32)
y = y.astype(np.float32)

# # mettre le point de départ des coordonnées en haut à gauche
# x = x + (x.max())
# y = y - y.max()
# y = y * (-1)

np.flipud(rgb)
reshape = cv2.remap(rgb, x, y, cv2.INTER_LINEAR)

plt.imshow(reshape)
plt.show()
340/65: x
340/66: y
340/67:
X = np.ones((rgb.shape[0], rgb.shape[1]), dtype=np.float32)
Y = np.ones((rgb.shape[0], rgb.shape[1]), dtype=np.float32)
X = X.astype(np.float32)
Y = Y.astype(np.float32)
r = np.sqrt(X ** 2 + Y ** 2)
angle = ((4.905207 ** -4) * r)
#tangeante de l'angle
dangles = np.tan(angle)

#Fonction de xy( coordonné de l'iamge source) en fonction des coordonnées de l'image transformée
x = (X * r) / dangles
y = (Y * r) / dangles

#Format de x et y pour la fct CV2
x = x.astype(np.float32)
y = y.astype(np.float32)

# # mettre le point de départ des coordonnées en haut à gauche
# x = x + (x.max())
# y = y - y.max()
# y = y * (-1)

np.flipud(rgb)
reshape = cv2.remap(rgb, x, y, cv2.INTER_LINEAR)

plt.imshow(reshape)
plt.show()
340/68:
Y = np.ones((rgb.shape[0], rgb.shape[1]), dtype=np.float32)
X = X.astype(np.float32)
Y = Y.astype(np.float32)
r = np.sqrt(X ** 2 + Y ** 2)
angle = ((4.905207 ** -4) * r)
#tangeante de l'angle
dangles = np.tan(angle)

#Fonction de xy( coordonné de l'iamge source) en fonction des coordonnées de l'image transformée
x = (X * r) / dangles
y = (Y * r) / dangles

#Format de x et y pour la fct CV2
x = x.astype(np.float32)
y = y.astype(np.float32)

# # mettre le point de départ des coordonnées en haut à gauche
# x = x + (x.max())
# y = y - y.max()
# y = y * (-1)

np.flipud(rgb)
reshape = cv2.remap(rgb, x, y, cv2.INTER_LINEAR)

plt.imshow(reshape)
plt.show()
340/69: x
340/70: y
340/71: plt.imshow(r)
340/72: plt.schow()
340/73: plt.show()
340/74:
X = np.ones((rgb.shape[0], rgb.shape[1]), dtype=np.float32)
Y = np.ones((rgb.shape[0], rgb.shape[1]), dtype=np.float32)
X = X.astype(np.float32)
Y = Y.astype(np.float32)
r = np.sqrt(X ** 2 + Y ** 2)
angle = ((-2.338671) * (r ** 2)) + ((4.905207) * r)
#tangeante de l'angle
dangles = np.tan(angle)

#Fonction de xy( coordonné de l'iamge source) en fonction des coordonnées de l'image transformée
x = (X * r) / dangles
y = (Y * r) / dangles

#Format de x et y pour la fct CV2
x = x.astype(np.float32)
y = y.astype(np.float32)

# # mettre le point de départ des coordonnées en haut à gauche
# x = x + (x.max())
# y = y - y.max()
# y = y * (-1)

np.flipud(rgb)
reshape = cv2.remap(rgb, x, y, cv2.INTER_LINEAR)

plt.imshow(reshape)
plt.show()
340/75: plt.imshow(r)
340/76: plt.show()
340/77: plt.imshow(angle)
340/78: plt.show()
341/1:
a='''asdlkfskdjf
'''
341/2: a
341/3:
a='''asdlkfs %s kdjf
'''
341/4: a
341/5:
a='''asdlkfs %s kdjf
''' % a
341/6: a
341/7: a
341/8: a
341/9: b='asdf
341/10: b='asdf'
341/11: a='''qwer %s ty''' % b
341/12: a
342/1: a={'a':1}
342/2: a['a']
341/13: a='asdf qwer'
341/14: a.replace('qwer','tyui')
343/1: import cv2
343/2: pwd
343/3: cv2.imwrite('/Users/admin/Documents/physique/Maitrise/hiver_2020/TEL730/Tenerife_LANDSAT-Canary_Islands.png', img,  [cv2.IMWRITE_PNG_COMPRESSION, 9])
343/4: img = cv2.imread('/Users/admin/Documents/physique/Maitrise/hiver_2020/TEL730/Tenerife_LANDSAT-Canary_Islands.png', cv2.IMREAD_UNCHANGED)
343/5: img
343/6: plt.imshow(img)
343/7: plt.show()
343/8: plt.show(:,:,::-1)
343/9: plt.imshow(img[:,:,::-1])
343/10: plt.show()
343/11: cv2.imwrite('/Users/admin/Documents/physique/Maitrise/hiver_2020/TEL730/Tenerife_LANDSAT-Canary_Islands_compress.png', img,  [cv2.IMWRITE_PNG_COMPRESSION, 9])
343/12: cv2.imwrite('/Users/admin/Documents/physique/Maitrise/hiver_2020/TEL730/Tenerife_LANDSAT-Canary_Islands_compress.png', img,  [cv2.IMWRITE_PNG_COMPRESSION, 5])
343/13: cv2.imwrite('/Users/admin/Documents/physique/Maitrise/hiver_2020/TEL730/Tenerife_LANDSAT-Canary_Islands_compress.png', img,  [cv2.IMWRITE_PNG_COMPRESSION, 1])
344/1:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]
344/2: pwd
344/3: cd git/
344/4: cd lancube/
344/5: ls
344/6:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]
344/7: data
344/8: data.shape
344/9:

x = data[:,:,0]
y = data[:,:,1]
z = data[:,:,2]

# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

# Evaluate it on a grid...
nx, ny = 20, 20
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
plt.scatter(x, y, c=z)
plt.show()
344/10: data.type
344/11: type(data)
344/12:

x = data[:,0]
y = data[:,1]
z = data[:,2]

# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

# Evaluate it on a grid...
nx, ny = 20, 20
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
plt.scatter(x, y, c=z)
plt.show()
344/13: import itertools
344/14:

x = data[:,0]
y = data[:,1]
z = data[:,2]

# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

# Evaluate it on a grid...
nx, ny = 20, 20
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
plt.scatter(x, y, c=z)
plt.show()
344/15:

x = data[:,0]
y = data[:,1]
z = data[:,2]


def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

# Evaluate it on a grid...
nx, ny = 20, 20
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
plt.scatter(x, y, c=z)
plt.show()
344/16:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools


# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

x = data[:,0]
y = data[:,1]
z = data[:,2]


def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

# Evaluate it on a grid...
nx, ny = 20, 20
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
plt.scatter(x, y, c=z)
plt.show()


# # plot points and fitted surface using Matplotlib
# fig = plt.figure(figsize=(10, 10))
# ax = fig.gca(projection='3d')
# ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
# ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
# plt.xlabel('R/G')
# plt.ylabel('B/G')
# ax.set_zlabel('MSI')

# axis = dict(
#     showbackground=True,  # show axis background
#     backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
#     gridcolor="rgb(255, 255, 255)",  # set grid line color
#     zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
# )

# # plot points and fitted surface using Plotly

# trace3 = go.Surface(z=Z, x=X, y=Y, colorscale='RdBu', opacity=0.999)

# # Package the trace dictionary into a data object

# data_test2 = go.Data([trace1, trace3])

# # Make a layout object
# layout = go.Layout(
#     title='2nd-order (quadratic) surface',  # set plot title
#     scene=go.Scene(  # axes are part of a 'scene' in 3d plots
#         xaxis=go.XAxis(axis),  # set x-axis style
#         yaxis=go.YAxis(axis),  # set y-axis style
#         zaxis=go.ZAxis(axis)),  # set z-axis style
# )

# # Make a figure object
# fig = go.Figure(data=data_test2, layout=layout)

# plt.show()
# plt.legend()
344/17: ls
344/18: ls
344/19: plan_courbe_3rdOrder.py
344/20: plan_courbe_3rdOrder.py
344/21: run
344/22: run plan_courbe_3rdOrder.py
344/23:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools


# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

x = data[:,0]
y = data[:,1]
z = data[:,2]


def polyfit2d(x, y, z, order=2):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

# Evaluate it on a grid...
nx, ny = 20, 20
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
plt.scatter(x, y, c=z)
plt.show()
344/24:
m = polyfit2d(x,y,z)

# Evaluate it on a grid...
nx, ny = 200, 200
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
plt.scatter(x, y, c=z)
plt.show()
344/25:

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

# Evaluate it on a grid...
nx, ny = 200, 200
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
plt.scatter(x, y, c=z)
plt.show()
344/26:

# Plot
#plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
plt.imshow(zz)
plt.scatter(x, y, c=z)
plt.show()
344/27:


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

# Evaluate it on a grid...
nx, ny = 2, 2
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
#plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
plt.imshow(zz)
plt.scatter(x, y, c=z)
plt.show()
344/28:
plt.scatter(x, y, c=z)
plt.show()
344/29:
plt.scatter(x, y, z)
plt.show()
344/30:
plt.scatter(x, y, z, s=50)
plt.show()
344/31:
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(x, y, z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
344/32:
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
344/33:
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
#ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
344/34:
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
#ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
344/35:
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
#ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.legend()
plt.show()
344/36:
# Plot
#plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
#ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
344/37:
# Plot
#plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
#ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

# plot points and fitted surface using Plotly

trace3 = go.Surface(z=Z, x=X, y=Y, colorscale='RdBu', opacity=0.999)

# Package the trace dictionary into a data object

data_test2 = go.Data([trace1, trace3])

Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

# Make a figure object
fig = go.Figure(data=data_test2, layout=layout)

plt.show()
344/38:


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

# Evaluate it on a grid...
nx, ny = 2, 2
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
#plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
#ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

# plot points and fitted surface using Plotly

trace3 = go.Surface(z=Z, x=X, y=Y, colorscale='RdBu', opacity=0.999)

# Package the trace dictionary into a data object

data_test2 = go.Data([trace1, trace3])

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

# Make a figure object
fig = go.Figure(data=data_test2, layout=layout)

plt.show()
344/39:


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

# Evaluate it on a grid...
nx, ny = 2, 2
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
#plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
#ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

# plot points and fitted surface using Plotly

trace3 = go.Surface(z=Z, x=X, y=Y, colorscale='RdBu', opacity=0.999)

# Package the trace dictionary into a data object

data_test2 = go.Data([trace1, trace3])

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

# Make a figure object
fig = go.Figure(data=data_test2, layout=layout)

plt.show()
344/40:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools


# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

# Evaluate it on a grid...
nx, ny = 2, 2
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
#plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
#ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

# plot points and fitted surface using Plotly

trace3 = go.Surface(z=z, x=x, y=y, colorscale='RdBu', opacity=0.999)

# Package the trace dictionary into a data object

data_test2 = go.Data([trace1, trace3])

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

# Make a figure object
fig = go.Figure(data=data_test2, layout=layout)

plt.show()
344/41:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools


# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

# Evaluate it on a grid...
nx, ny = 2, 2
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
#plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
#ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

# Package the trace dictionary into a data object

data_test2 = go.Data([trace1, trace3])

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
344/42:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools


# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

# Evaluate it on a grid...
nx, ny = 2, 2
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
#plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
#ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
344/43:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools


# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

# Evaluate it on a grid...
nx, ny = 2, 2
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
#plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
#ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
344/44:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools


# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

# Evaluate it on a grid...
nx, ny = 2, 2
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
#plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
344/45:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools


# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)
344/46:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# Create a 3D graph with the values of R/G/B linking to MSI values
trace1 = go.Scatter3d(
    x=data[:, 0],
    y=data[:, 1],
    z=data[:, 2],
    mode='markers',
    marker=dict(size=4, color='red', line=dict(color='black', width=0.5), opacity=0.8)
)

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

# Obtaining the coefficient of the equation giving the MSI values depending on the R/G/B values
A = np.c_[np.ones(data.shape[0]), data[:, :2], np.prod(data[:, :2], axis=1), data[:, :2] ** 2]
C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape), XX, YY, XX * YY, XX ** 2, YY ** 2], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

# plot points and fitted surface using Plotly

trace3 = go.Surface(z=Z, x=X, y=Y, colorscale='RdBu', opacity=0.999)

# Package the trace dictionary into a data object

data_test2 = go.Data([trace1, trace3])

# Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

# Make a figure object
fig = go.Figure(data=data_test2, layout=layout)

plt.show()
plt.legend()
344/47:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools


# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 2, 2
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
#plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
344/48:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools


# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 2, 2
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
#plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(x, y, z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
344/49:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools


# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 2, 2
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
#plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
#ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
344/50:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools


# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 2, 2
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
#plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
#ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
344/51:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools


# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 2, 2
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
#plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
#ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
344/52: x
344/53: x.shape
344/54:
xs=np.linspace(0,1,x.shape)

fig,ax=subplots(1,1)
ax.plot(xs, z)
344/55:
xs=np.linspace(0,1,x.shape[0])

fig,ax=subplots(1,1)
ax.plot(xs, z)
344/56:
xs=np.linspace(0,1,x.shape[0])

fig,ax=plt.subplots(1,1)
ax.plot(xs, z)
344/57:

xs=np.linspace(0,1,x.shape[0])

fig,ax=plt.subplots(1,1)
ax.plot(xs, z)
plt.show()
345/1: import pandas as pd
345/2: import numpy as np
345/3: import matplotlib.pyplot as plt
345/4: from scipy.optimize import curve_fit as cfit
345/5: # reading data
345/6: #Data_LAN3 = pd.read_csv('Scan_Sherbrooke/#2RockFo_2020-05-12.csv')
345/7: Data_LAN3 = pd.read_csv('Data.csv')
345/8: # r,g,b values
345/9: R = Data_LAN3['R']
345/10: G = Data_LAN3['G']
345/11: B = Data_LAN3['B']
345/12: MSI_Spectro = Data_LAN3['MSI']
345/13: # Functions to convert r,g,b values to indices (MSI, SLI)
345/14: # SLI parameters
345/15: coeff1 = [0.92676108, 0.03435651, 0.30409609, 1.96169658, 0.12299434, 0.00232827]
345/16: # MSI parameters
345/17: coeff2 = [-0.037105, -0.175255, 0.0811561, -1.44443, 1.08942, 2.03727, 1.35882, -0.685629, -1.52301, -0.102361]
345/18:
def SLI(x,y):
        return -coeff1[0]*(y**2)+coeff1[1]*(x**2)-coeff1[2]*(x*y)+coeff1[3]*y-coeff1[4]*x-coeff1[5]
345/19:
def MSI(x,y):
        return coeff2[0]*(x**3)+coeff2[1]*(y**3)+coeff2[2]*(y*(x**2))+coeff2[3]*(x*(y**2))+coeff2[4]*(x**2)+\
                   coeff2[5]*(y**2) + coeff2[6]*(x*y) + coeff2[7]*x + coeff2[8]*y + coeff2[9]
345/20: M = MSI(R/G, B/G)
345/21: S = SLI(R/G, B/G)
345/22:
def linear_func(x,a,b):
        return a*x+b
345/23: coeffs = cfit(linear_func, MSI_Spectro, M)
345/24: xs=np.linspace(0,1,1001)
345/25: fit_ys=linear_func(xs,coeffs[0][0],coeffs[0][1])
345/26: plt.scatter(MSI_Spectro, M-MSI_Spectro)
345/27: #plt.plot(xs,fit_ys)
345/28: #plt.plot(x,x, c='k')
345/29: #plt.xlim(0, 1)
345/30: #plt.ylim(0, 1)
345/31: plt.xlabel('MSI_Spectro')
345/32: plt.ylabel('MSI_LAN3 ')
345/33: #print(coeff2)
345/34: #print('coeffs: ', coeffs[0])
345/35: plt.show()
345/36: # np.savetxt('MSI_SLI.csv', M)
345/37:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit as cfit

# reading data
#Data_LAN3 = pd.read_csv('Scan_Sherbrooke/#2RockFo_2020-05-12.csv')
Data_LAN3 = pd.read_csv('Data.csv')


# r,g,b values
R = Data_LAN3['R']
G = Data_LAN3['G']
B = Data_LAN3['B']
MSI_Spectro = Data_LAN3['MSI']

# Functions to convert r,g,b values to indices (MSI, SLI)
# SLI parameters
coeff1 = [0.92676108, 0.03435651, 0.30409609, 1.96169658, 0.12299434, 0.00232827]

# MSI parameters
coeff2 = [-0.037105, -0.175255, 0.0811561, -1.44443, 1.08942, 2.03727, 1.35882, -0.685629, -1.52301, -0.102361]


def SLI(x,y):
    return -coeff1[0]*(y**2)+coeff1[1]*(x**2)-coeff1[2]*(x*y)+coeff1[3]*y-coeff1[4]*x-coeff1[5]


def MSI(x,y):
    return coeff2[0]*(x**3)+coeff2[1]*(y**3)+coeff2[2]*(y*(x**2))+coeff2[3]*(x*(y**2))+coeff2[4]*(x**2)+\
           coeff2[5]*(y**2) + coeff2[6]*(x*y) + coeff2[7]*x + coeff2[8]*y + coeff2[9]


M = MSI(R/G, B/G)
S = SLI(R/G, B/G)

def linear_func(x,a,b):
    return a*x+b

coeffs = cfit(linear_func, MSI_Spectro, M)


xs=np.linspace(0,1,1001)
fit_ys=linear_func(xs,coeffs[0][0],coeffs[0][1])


plt.scatter(MSI_Spectro, M-MSI_Spectro)
#plt.plot(xs,fit_ys)
#plt.plot(x,x, c='k')
#plt.xlim(0, 1)
#plt.ylim(0, 1)
plt.xlabel('MSI_Spectro')
plt.ylabel('MSI_LAN3 ')

#print(coeff2)


#print('coeffs: ', coeffs[0])

plt.show()

# np.savetxt('MSI_SLI.csv', M)
345/38: M
345/39:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit as cfit

# reading data
#Data_LAN3 = pd.read_csv('Scan_Sherbrooke/#2RockFo_2020-05-12.csv')
Data_LAN3 = pd.read_csv('Data.csv')


# r,g,b values
R = Data_LAN3['R']
G = Data_LAN3['G']
B = Data_LAN3['B']
MSI_Spectro = Data_LAN3['MSI']

# Functions to convert r,g,b values to indices (MSI, SLI)
# SLI parameters
coeff1 = [0.92676108, 0.03435651, 0.30409609, 1.96169658, 0.12299434, 0.00232827]

# MSI parameters
coeff2 = [-0.037105, -0.175255, 0.0811561, -1.44443, 1.08942, 2.03727, 1.35882, -0.685629, -1.52301, -0.102361]


def SLI(x,y):
    return -coeff1[0]*(y**2)+coeff1[1]*(x**2)-coeff1[2]*(x*y)+coeff1[3]*y-coeff1[4]*x-coeff1[5]


def MSI(x,y):
    return coeff2[0]*(x**3)+coeff2[1]*(y**3)+coeff2[2]*(y*(x**2))+coeff2[3]*(x*(y**2))+coeff2[4]*(x**2)+\
           coeff2[5]*(y**2) + coeff2[6]*(x*y) + coeff2[7]*x + coeff2[8]*y + coeff2[9]


M = MSI(R/G, B/G)
S = SLI(R/G, B/G)

def linear_func(x,a,b):
    return a*x+b

coeffs = cfit(linear_func, MSI_Spectro, M)


xs=np.linspace(0,1,1001)
fit_ys=linear_func(xs,coeffs[0][0],coeffs[0][1])


plt.scatter(MSI_Spectro, M-MSI_Spectro)
#plt.plot(xs,fit_ys)
#plt.plot(x,x, c='k')
#plt.xlim(0, 1)
#plt.ylim(0, 1)
plt.xlabel('MSI_Spectro')
plt.ylabel('MSI_LAN3 ')

#print(coeff2)


#print('coeffs: ', coeffs[0])

plt.show()

# np.savetxt('MSI_SLI.csv', M)
345/40: R/G
345/41: B/G
345/42: MSI(R/G,B/G)
345/43: xx=np.linspace(0,10,1001)
345/44: yy=MSI(xx,xx)
345/45: plt.plot(xx,yy)
345/46: plt.show()
345/47: R/G
345/48: plt.scatter(xx,xx,yy)
345/49: plt.show()
345/50: xx=np.linspace(0,2.5,1001)
345/51: yy=MSI(xx,xx)
345/52: plt.plot(xx,yy)
345/53: plt.show()
345/54: x=R/G
345/55: x.max
345/56: x.max()
345/57: y=B/G
345/58: y.max()
345/59: MSI(1,1.1)
345/60: MSI(3.5,1)
345/61: x
345/62: print (x)
345/63:

x=Data_LAN3['R/G']
y=Data_LAN3['B/G']
345/64: x
345/65: M = MSI(x, y)
345/66:

plt.scatter(MSI_Spectro, M-MSI_Spectro)
#plt.plot(xs,fit_ys)
#plt.plot(x,x, c='k')
#plt.xlim(0, 1)
#plt.ylim(0, 1)
plt.xlabel('MSI_Spectro')
plt.ylabel('MSI_LAN3 ')

#print(coeff2)


#print('coeffs: ', coeffs[0])

plt.show()
345/67:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools


# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 2, 2
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
#plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
#ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()


xs=np.linspace(0,1,x.shape[0])

fig,ax=plt.subplots(1,1)
ax.plot(xs, z)
plt.show()
346/1:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools


# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 2, 2
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
#plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
#ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()


xs=np.linspace(0,1,x.shape[0])

fig,ax=plt.subplots(1,1)
ax.plot(xs, z)
plt.show()
346/2:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools


# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 2, 2
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()


xs=np.linspace(0,1,x.shape[0])

fig,ax=plt.subplots(1,1)
ax.plot(xs, z)
plt.show()
346/3: zz
346/4: zz.shape
346/5:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools


# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 200,200
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()


xs=np.linspace(0,1,x.shape[0])

fig,ax=plt.subplots(1,1)
ax.plot(xs, z)
plt.show()
346/6: %matplotlib inline
346/7: plt.plot(xs**3)
346/8: plt.show()
346/9: plt.show()
346/10: xs
346/11: plt.plot(xs**3)
346/12: plt.show()
347/1:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit as cfit

# reading data
#Data_LAN3 = pd.read_csv('Scan_Sherbrooke/#2RockFo_2020-05-12.csv')
Data_LAN3 = pd.read_csv('Data.csv')


# r,g,b values
R = Data_LAN3['R']
G = Data_LAN3['G']
B = Data_LAN3['B']

MSI_Spectro = Data_LAN3['MSI']

# Functions to convert r,g,b values to indices (MSI, SLI)
# SLI parameters
coeff1 = [0.92676108, 0.03435651, 0.30409609, 1.96169658, 0.12299434, 0.00232827]

# MSI parameters
coeff2 = [-0.037105, -0.175255, 0.0811561, -1.44443, 1.08942, 2.03727, 1.35882, -0.685629, -1.52301, -0.102361]


def SLI(x,y):
    return -coeff1[0]*(y**2)+coeff1[1]*(x**2)-coeff1[2]*(x*y)+coeff1[3]*y-coeff1[4]*x-coeff1[5]


def MSI(x,y):
    return coeff2[0]*(x**3)+coeff2[1]*(y**3)+coeff2[2]*(y*(x**2))+coeff2[3]*(x*(y**2))+coeff2[4]*(x**2)+
           coeff2[5]*(y**2) + coeff2[6]*(x*y) + coeff2[7]*x + coeff2[8]*y + coeff2[9]


M = MSI(R/G, B/G)

plt.scatter(MSI_Spectro, M-MSI_Spectro)
plt.xlabel('MSI_Spectro')
plt.ylabel('MSI_LAN3-MSI_spectro')

#print(coeff2)


#print('coeffs: ', coeffs[0])

plt.show()

# np.savetxt('MSI_SLI.csv', M)
347/2:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit as cfit

# reading data
#Data_LAN3 = pd.read_csv('Scan_Sherbrooke/#2RockFo_2020-05-12.csv')
Data_LAN3 = pd.read_csv('Data.csv')


# r,g,b values
R = Data_LAN3['R']
G = Data_LAN3['G']
B = Data_LAN3['B']

MSI_Spectro = Data_LAN3['MSI']

# Functions to convert r,g,b values to indices (MSI, SLI)
# SLI parameters
coeff1 = [0.92676108, 0.03435651, 0.30409609, 1.96169658, 0.12299434, 0.00232827]

# MSI parameters
coeff2 = [-0.037105, -0.175255, 0.0811561, -1.44443, 1.08942, 2.03727, 1.35882, -0.685629, -1.52301, -0.102361]

def MSI(x,y):
    return coeff2[0]*(x**3)+coeff2[1]*(y**3)+coeff2[2]*(y*(x**2))+coeff2[3]*(x*(y**2))+coeff2[4]*(x**2)+\
           coeff2[5]*(y**2) + coeff2[6]*(x*y) + coeff2[7]*x + coeff2[8]*y + coeff2[9]


M = MSI(R/G, B/G)

plt.scatter(MSI_Spectro, M-MSI_Spectro)
plt.xlabel('MSI_Spectro')
plt.ylabel('MSI_LAN3-MSI_spectro')

#print(coeff2)


#print('coeffs: ', coeffs[0])

plt.show()

# np.savetxt('MSI_SLI.csv', M)
347/3: pwd
347/4: cd git
347/5: cd lancube/
347/6: ls
347/7:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit as cfit

# reading data
#Data_LAN3 = pd.read_csv('Scan_Sherbrooke/#2RockFo_2020-05-12.csv')
Data_LAN3 = pd.read_csv('Data.csv')


# r,g,b values
R = Data_LAN3['R']
G = Data_LAN3['G']
B = Data_LAN3['B']

MSI_Spectro = Data_LAN3['MSI']

# Functions to convert r,g,b values to indices (MSI, SLI)
# SLI parameters
coeff1 = [0.92676108, 0.03435651, 0.30409609, 1.96169658, 0.12299434, 0.00232827]

# MSI parameters
coeff2 = [-0.037105, -0.175255, 0.0811561, -1.44443, 1.08942, 2.03727, 1.35882, -0.685629, -1.52301, -0.102361]

def MSI(x,y):
    return coeff2[0]*(x**3)+coeff2[1]*(y**3)+coeff2[2]*(y*(x**2))+coeff2[3]*(x*(y**2))+coeff2[4]*(x**2)+\
           coeff2[5]*(y**2) + coeff2[6]*(x*y) + coeff2[7]*x + coeff2[8]*y + coeff2[9]


M = MSI(R/G, B/G)

plt.scatter(MSI_Spectro, M-MSI_Spectro)
plt.xlabel('MSI_Spectro')
plt.ylabel('MSI_LAN3-MSI_spectro')

#print(coeff2)


#print('coeffs: ', coeffs[0])

plt.show()

# np.savetxt('MSI_SLI.csv', M)
347/8:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit as cfit

# reading data
#Data_LAN3 = pd.read_csv('Scan_Sherbrooke/#2RockFo_2020-05-12.csv')
Data_LAN3 = pd.read_csv('Data.csv')


# r,g,b values
R = Data_LAN3['R']
G = Data_LAN3['G']
B = Data_LAN3['B']

MSI_Spectro = Data_LAN3['MSI']

# Functions to convert r,g,b values to indices (MSI, SLI)
# SLI parameters
coeff1 = [0.92676108, 0.03435651, 0.30409609, 1.96169658, 0.12299434, 0.00232827]

# MSI parameters
coeff2 = [-0.037105, -0.175255, 0.0811561, -1.44443, 1.08942, 2.03727, 1.35882, -0.685629, -1.52301, -0.102361]

def MSI(x,y):
    return coeff2[0]*(x**3)+coeff2[1]*(y**3)+coeff2[2]*(y*(x**2))+coeff2[3]*(x*(y**2))+coeff2[4]*(x**2)+\
           coeff2[5]*(y**2) + coeff2[6]*(x*y) + coeff2[7]*x + coeff2[8]*y + coeff2[9]


M = MSI(R/G, B/G)

plt.scatter(MSI_Spectro, MSI_Spectro)
plt.xlabel('MSI_Spectro')
plt.ylabel('MSI_LAN3-MSI_spectro')

#print(coeff2)


#print('coeffs: ', coeffs[0])

plt.show()

# np.savetxt('MSI_SLI.csv', M)
347/9: M.len()
347/10: M.len
347/11: M.size
347/12:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit as cfit

# reading data
#Data_LAN3 = pd.read_csv('Scan_Sherbrooke/#2RockFo_2020-05-12.csv')
Data_LAN3 = pd.read_csv('Data.csv')


# r,g,b values
R = Data_LAN3['R']
G = Data_LAN3['G']
B = Data_LAN3['B']

MSI_Spectro = Data_LAN3['MSI']

# Functions to convert r,g,b values to indices (MSI, SLI)
# SLI parameters
coeff1 = [0.92676108, 0.03435651, 0.30409609, 1.96169658, 0.12299434, 0.00232827]

# MSI parameters
coeff2 = [-0.037105, -0.175255, 0.0811561, -1.44443, 1.08942, 2.03727, 1.35882, -0.685629, -1.52301, -0.102361]

def MSI(x,y):
    return coeff2[0]*(x**3)+coeff2[1]*(y**3)+coeff2[2]*(y*(x**2))+coeff2[3]*(x*(y**2))+coeff2[4]*(x**2)+\
           coeff2[5]*(y**2) + coeff2[6]*(x*y) + coeff2[7]*x + coeff2[8]*y + coeff2[9]


M = MSI(R/G, B/G)

plt.scatter(np.linspace(0,M.max(),M.size),M)
plt.xlabel('MSI_Spectro')
plt.ylabel('MSI_LAN3-MSI_spectro')

#print(coeff2)


#print('coeffs: ', coeffs[0])

plt.show()

# np.savetxt('MSI_SLI.csv', M)
347/13:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit as cfit

# reading data
#Data_LAN3 = pd.read_csv('Scan_Sherbrooke/#2RockFo_2020-05-12.csv')
Data_LAN3 = pd.read_csv('Data.csv')


# r,g,b values
R = Data_LAN3['R']
G = Data_LAN3['G']
B = Data_LAN3['B']

MSI_Spectro = Data_LAN3['MSI']

# Functions to convert r,g,b values to indices (MSI, SLI)
# SLI parameters
coeff1 = [0.92676108, 0.03435651, 0.30409609, 1.96169658, 0.12299434, 0.00232827]

# MSI parameters
coeff2 = [-0.037105, -0.175255, 0.0811561, -1.44443, 1.08942, 2.03727, 1.35882, -0.685629, -1.52301, -0.102361]

def MSI(x,y):
    return coeff2[0]*(x**3)+coeff2[1]*(y**3)+coeff2[2]*(y*(x**2))+coeff2[3]*(x*(y**2))+coeff2[4]*(x**2)+\
           coeff2[5]*(y**2) + coeff2[6]*(x*y) + coeff2[7]*x + coeff2[8]*y + coeff2[9]


M = MSI(R/G, B/G)

plt.scatter(np.linspace(0,M.max(),M.size),M)
plt.xlabel('MSI_Spectro')
plt.ylabel('MSI_LAN3-MSI_spectro')

#print(coeff2)


#print('coeffs: ', coeffs[0])

plt.show()

# np.savetxt('MSI_SLI.csv', M)
347/14:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit as cfit

# reading data
#Data_LAN3 = pd.read_csv('Scan_Sherbrooke/#2RockFo_2020-05-12.csv')
Data_LAN3 = pd.read_csv('Data.csv')


# r,g,b values
R = Data_LAN3['R']
G = Data_LAN3['G']
B = Data_LAN3['B']

MSI_Spectro = Data_LAN3['MSI']

# Functions to convert r,g,b values to indices (MSI, SLI)
# SLI parameters
coeff1 = [0.92676108, 0.03435651, 0.30409609, 1.96169658, 0.12299434, 0.00232827]

# MSI parameters
coeff2 = [-0.037105, -0.175255, 0.0811561, -1.44443, 1.08942, 2.03727, 1.35882, -0.685629, -1.52301, -0.102361]

def MSI(x,y):
    return coeff2[0]*(x**3)+coeff2[1]*(y**3)+coeff2[2]*(y*(x**2))+coeff2[3]*(x*(y**2))+coeff2[4]*(x**2)+\
           coeff2[5]*(y**2) + coeff2[6]*(x*y) + coeff2[7]*x + coeff2[8]*y + coeff2[9]


M = MSI(R/G, B/G)

plt.scatter(np.arange(M.size),M)
plt.xlabel('MSI_Spectro')
plt.ylabel('MSI_LAN3-MSI_spectro')

#print(coeff2)


#print('coeffs: ', coeffs[0])

plt.show()

# np.savetxt('MSI_SLI.csv', M)
347/15: M
347/16: M>2
347/17: M(M>2)
347/18: M[M>2]
347/19: x
347/20: x=R/G
347/21: y=B/G
347/22: M.max()
347/23: M.argmax()
347/24: DATA_LAN3[39]
347/25: R[39]
347/26: G[39]
347/27: B[39]
347/28: M[39]
347/29:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit as cfit

# reading data
#Data_LAN3 = pd.read_csv('Scan_Sherbrooke/#2RockFo_2020-05-12.csv')
Data_LAN3 = pd.read_csv('Data.csv')


# r,g,b values
R = Data_LAN3['R']
G = Data_LAN3['G']
B = Data_LAN3['B']

MSI_Spectro = Data_LAN3['MSI']

# Functions to convert r,g,b values to indices (MSI, SLI)
# SLI parameters
coeff1 = [0.92676108, 0.03435651, 0.30409609, 1.96169658, 0.12299434, 0.00232827]

# MSI parameters
coeff2 = [-0.037105, -0.175255, 0.0811561, -1.44443, 1.08942, 2.03727, 1.35882, -0.685629, -1.52301, -0.102361]

def MSI(x,y, coeff):
    return coeff[0]*(x**3) + coeff[1]*(y**3) + coeff2[2]*(y*(x**2)) + coeff2[3]*(x*(y**2)) + coeff2[4]*(x**2)+\
           coeff[5]*(y**2) + coeff[6]*(x*y) + coeff2[7]*x + coeff2[8]*y + coeff2[9]


M = MSI(R/G, B/G, coeff2)

plt.scatter(np.arange(M.size),M)
plt.xlabel('MSI_Spectro')
plt.ylabel('MSI_LAN3-MSI_spectro')

#print(coeff2)


#print('coeffs: ', coeffs[0])

plt.show()

# np.savetxt('MSI_SLI.csv', M)
347/30:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit as cfit

# reading data
#Data_LAN3 = pd.read_csv('Scan_Sherbrooke/#2RockFo_2020-05-12.csv')
Data_LAN3 = pd.read_csv('Data.csv')


# r,g,b values
R = Data_LAN3['R']
G = Data_LAN3['G']
B = Data_LAN3['B']

MSI_Spectro = Data_LAN3['MSI']

# Functions to convert r,g,b values to indices (MSI, SLI)
# SLI parameters
coeff1 = [0.92676108, 0.03435651, 0.30409609, 1.96169658, 0.12299434, 0.00232827]

# MSI parameters
coeff2 = [0.0683509,0.558028,0.370345,-1.21431, -0.61563, 0.17249, -0.063395, 1.01142,0.894559, -0.544077]



def MSI(x,y, coeff):
    return coeff[0]*(x**3) + coeff[1]*(y**3) + coeff2[2]*(y*(x**2)) + coeff2[3]*(x*(y**2)) + coeff2[4]*(x**2)+\
           coeff[5]*(y**2) + coeff[6]*(x*y) + coeff2[7]*x + coeff2[8]*y + coeff2[9]


M = MSI(R/G, B/G, coeff2)

plt.scatter(np.arange(M.size),M)
plt.xlabel('MSI_Spectro')
plt.ylabel('MSI_LAN3-MSI_spectro')

#print(coeff2)


#print('coeffs: ', coeffs[0])

plt.show()

# np.savetxt('MSI_SLI.csv', M)
347/31:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit as cfit

# reading data
#Data_LAN3 = pd.read_csv('Scan_Sherbrooke/#2RockFo_2020-05-12.csv')
Data_LAN3 = pd.read_csv('Data.csv')


# r,g,b values
R = Data_LAN3['R']
G = Data_LAN3['G']
B = Data_LAN3['B']

MSI_Spectro = Data_LAN3['MSI']

# Functions to convert r,g,b values to indices (MSI, SLI)
# SLI parameters
coeff1 = [0.92676108, 0.03435651, 0.30409609, 1.96169658, 0.12299434, 0.00232827]

# MSI parameters
coeff2 = [0.0683509,0.558028,0.370345,-1.21431, -0.61563, 0.17249, -0.063395, 1.01142,0.894559, -0.544077]



def MSI(x,y, coeff):
    return coeff[0]*(x**3) + coeff[1]*(y**3) + coeff2[2]*(y*(x**2)) + coeff2[3]*(x*(y**2)) + coeff2[4]*(x**2)+\
           coeff[5]*(y**2) + coeff[6]*(x*y) + coeff2[7]*x + coeff2[8]*y + coeff2[9]


M = MSI(R/G, B/G, coeff2)

plt.scatter(MSI_Spectro, M-MSI_Spectro)
plt.xlabel('MSI_Spectro')
plt.ylabel('MSI_LAN3-MSI_spectro')

#print(coeff2)


#print('coeffs: ', coeffs[0])

plt.show()

# np.savetxt('MSI_SLI.csv', M)
348/1:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools


# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 200,200
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()


xs=np.linspace(0,1,x.shape[0])

fig,ax=plt.subplots(1,1)
ax.plot(xs, z)
plt.show()
348/2: cd git
348/3: cd lancube/
348/4:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools


# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 200,200
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()


xs=np.linspace(0,1,x.shape[0])

fig,ax=plt.subplots(1,1)
ax.plot(xs, z)
plt.show()
348/5: zz
348/6: zz.shape
348/7: x
348/8: x.shape
348/9: y.shpe
348/10: y.shape
348/11: xx, yy = np.meshgrid(x, y, sparse=True)
348/12: xx
348/13: xx.shape
348/14: yy.shape
348/15: plt.plot_surface(xx,yy,zz)
348/16:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools


# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()


xs=np.linspace(0,1,x.shape[0])

fig,ax=plt.subplots(1,1)
ax.plot(xs, z)
plt.show()
348/17:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools


# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
#plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()


xs=np.linspace(0,1,x.shape[0])

fig,ax=plt.subplots(1,1)
ax.plot(xs, z)
plt.show()
348/18: pip
348/19: pip install matplotlib
348/20: pip upgrade matplotlib
348/21: pip update matplotlib
348/22: pip install matplotlib update
349/1:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools


# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
#plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()


xs=np.linspace(0,1,x.shape[0])

fig,ax=plt.subplots(1,1)
ax.plot(xs, z)
plt.show()
349/2: cd git/lancube/
349/3:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools


# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

# Plot
#plt.imshow(zz, extent=(x.min(), y.max(), x.max(), y.min()))
plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()


xs=np.linspace(0,1,x.shape[0])

fig,ax=plt.subplots(1,1)
ax.plot(xs, z)
plt.show()
349/4: data.shape
349/5: data[:,1]==x
349/6: data[1]
349/7:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(x, y, zz, rstride=1, cstride=1, alpha=0.2)
349/8: plt.show()
349/9:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
349/10: plt.show()
349/11:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()


xs=np.linspace(0,1,x.shape[0])

fig,ax=plt.subplots(1,1)
ax.plot(xs, z)
plt.show()
349/12: m
349/13: m.shape
349/14:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    print(ij)
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()


xs=np.linspace(0,1,x.shape[0])

fig,ax=plt.subplots(1,1)
ax.plot(xs, z)
plt.show()
349/15:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    print(ij)
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
349/16:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    print(ij)
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_ylim(0,1)
ax.set_xlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
349/17:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    print(ij)
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_ylim(0,3)
ax.set_xlim(0,3)
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
349/18:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    print(ij)
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_ylim(0,3)
ax.set_xlim(0,3)
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
350/1:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    print(ij)
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_ylim(0,3)
ax.set_xlim(0,3)
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
350/2: cd git/lancube/
350/3:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    print(ij)
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_ylim(0,3)
ax.set_xlim(0,3)
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
350/4:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    print(ij)
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_ylim(0,3)
ax.set_xlim(0,3)
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
350/5:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    print(ij)
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_xlim(x.min(),x.max())
ax.set_ylim(y.min(),y.max())
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
350/6:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=2):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    print(ij)
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_xlim(x.min(),x.max())
ax.set_ylim(y.min(),y.max())
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
350/7:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=4):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    print(ij)
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_xlim(x.min(),x.max())
ax.set_ylim(y.min(),y.max())
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
350/8: order=1
350/9: ij = itertools.product(range(order+1), range(order+1))
350/10: ij
350/11: print(ij)
350/12: print list(ij)
350/13: print (list(ij))
350/14: order=3
350/15: ij = itertools.product(range(order+1), range(order+1))
350/16: print (list(ij))
350/17:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    #print the order of the coefficients
    print (list(ij))   
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_xlim(x.min(),x.max())
ax.set_ylim(y.min(),y.max())
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
350/18:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    #print the order of the coefficients
    print (list(ij))   
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_xlim(x.min(),x.max())
ax.set_ylim(y.min(),y.max())
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
351/1:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    #print the order of the coefficients
    print (list(ij))   
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_xlim(x.min(),x.max())
ax.set_ylim(y.min(),y.max())
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
351/2: cd git/lancube/
351/3:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    #print the order of the coefficients
    print (list(ij))   
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_xlim(x.min(),x.max())
ax.set_ylim(y.min(),y.max())
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
351/4:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    #print the order of the coefficients
    #print (list(ij))   
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_xlim(x.min(),x.max())
ax.set_ylim(y.min(),y.max())
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
351/5:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    #print the order of the coefficients
    print (list(ij))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_xlim(x.min(),x.max())
ax.set_ylim(y.min(),y.max())
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
351/6:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    #print the order of the coefficients
    
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    print (list(ij))
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_xlim(x.min(),x.max())
ax.set_ylim(y.min(),y.max())
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
351/7:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    #print the order of the coefficients
    print (list(ij))
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_xlim(x.min(),x.max())
ax.set_ylim(y.min(),y.max())
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
351/8:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=2):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    #print the order of the coefficients
    print (list(ij))
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_xlim(x.min(),x.max())
ax.set_ylim(y.min(),y.max())
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
351/9:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    #print the order of the coefficients
    print (list(ij))
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_xlim(x.min(),x.max())
ax.set_ylim(y.min(),y.max())
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
351/10:     print (list(ij))
351/11:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=3):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    #print the order of the coefficients
    print (list(ij))
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_xlim(x.min(),x.max())
ax.set_ylim(y.min(),y.max())
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
351/12: order=3
351/13: print list(product([1,]),repeat = 3)
351/14: print (list(product([1,]),repeat = 3))
351/15: print (list(itertools.product([1,]),repeat = 3))
351/16: print (list(itertools.product([1,2],repeat = 3)))
351/17: enumerate(ij)
351/18: ij=itertools.product([1,2],repeat = 3)
351/19: enumerate(ij)
351/20: k,(i,j) = enumerate(ij)
351/21: ij=itertools.product([1,2],repeat = 2)
351/22: ij
351/23: print (list(itertools.product([1,2],repeat = 2)))
351/24: print (list(itertools.product([1,2],repeat = 1)))
352/1: range
352/2: range()
352/3: range(3)
352/4:
for i in range(3):
    print (i)
352/5:
for i in range(3+1):
    print (i)
351/25: m
351/26: m.size
351/27:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=1):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    #print the order of the coefficients
    print (list(ij))
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_xlim(x.min(),x.max())
ax.set_ylim(y.min(),y.max())
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
351/28:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=0):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    #print the order of the coefficients
    print (list(ij))
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_xlim(x.min(),x.max())
ax.set_ylim(y.min(),y.max())
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
351/29:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=-1):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    #print the order of the coefficients
    print (list(ij))
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_xlim(x.min(),x.max())
ax.set_ylim(y.min(),y.max())
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
351/30:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=1):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    #print the order of the coefficients
    print (list(ij))
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_xlim(x.min(),x.max())
ax.set_ylim(y.min(),y.max())
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
351/31:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=1):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order)+1, range(order)+1)
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    #print the order of the coefficients
    print (list(ij))
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_xlim(x.min(),x.max())
ax.set_ylim(y.min(),y.max())
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
351/32: range(1)
351/33:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=1):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(order+1, order+1)
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    #print the order of the coefficients
    print (list(ij))
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_xlim(x.min(),x.max())
ax.set_ylim(y.min(),y.max())
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
351/34:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=2):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order), range(order))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    #print the order of the coefficients
    print (list(ij))
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_xlim(x.min(),x.max())
ax.set_ylim(y.min(),y.max())
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
351/35:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=1):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    #print the order of the coefficients
    print (list(ij))
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_xlim(x.min(),x.max())
ax.set_ylim(y.min(),y.max())
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
351/36:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

def polyfit2d(x, y, z, order=0):
    ncols = (order + 1)**2
    G = np.zeros((x.size, ncols))
    ij = itertools.product(range(order+1), range(order+1))
    for k, (i,j) in enumerate(ij):
        G[:,k] = x**i * y**j
    m, _, _, _ = np.linalg.lstsq(G, z)
    #print the order of the coefficients
    print (list(ij))
    return m

def polyval2d(x, y, m):
    order = int(np.sqrt(len(m))) - 1
    ij = itertools.product(range(order+1), range(order+1))
    z = np.zeros_like(x)
    for a, (i,j) in zip(m, ij):
        z += a * x**i * y**j
    return z


# Fit a 3rd order, 2d polynomial
m = polyfit2d(x,y,z)

print ('m: ', m)

# Evaluate it on a grid...
nx, ny = 96,96
xx, yy = np.meshgrid(np.linspace(x.min(), x.max(), nx), 
                     np.linspace(y.min(), y.max(), ny))
zz = polyval2d(xx, yy, m)

#plt.imshow(zz)
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_wireframe(xx, yy, zz, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_xlim(x.min(),x.max())
ax.set_ylim(y.min(),y.max())
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
351/37:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

xs = np.linspace(0, 3, 2000)
ys = np.linspace(0, 3, 2000)
X, Y = np.meshgrid(xs, ys, copy=False)
Z=z

X = X.flatten()
Y = Y.flatten()

A = np.array([X*0+1, X, Y, X**2, X**2*Y, X**2*Y**2, Y**2, X*Y**2, X*Y]).T
B = Z.flatten()

coeff, r, rank, s = np.linalg.lstsq(A, B)
351/38: A
351/39: A.shape
351/40: B.shape
351/41: Z.shape
351/42: Z.shape==B.shape
351/43: X.shape
351/44: Y.shape
351/45:

xs = np.linspace(0, 3, 96)
ys = np.linspace(0, 3, 96)
X, Y = np.meshgrid(xs, ys, copy=False)
Z=z

X = X.flatten()
Y = Y.flatten()

A = np.array([X*0+1, X, Y, X**2, X**2*Y, X**2*Y**2, Y**2, X*Y**2, X*Y]).T
B = Z.flatten()

coeff, r, rank, s = np.linalg.lstsq(A, B)
351/46: Z.shape
351/47: np.random.rand
351/48: np.random.rand(X.shape)
351/49: np.random.rand(*X.shape)
351/50: X.shape
351/51: np.random.rand(*X.shape).size
351/52:
xs = np.linspace(0, 3, 20)
ys = np.linspace(0, 3, 20)
X, Y = np.meshgrid(xs, ys, copy=False)
Z=z

X = X.flatten()
Y = Y.flatten()

A = np.array([X*0+1, X, Y, X**2, X**2*Y, X**2*Y**2, Y**2, X*Y**2, X*Y]).T
B = Z.flatten()

coeff, r, rank, s = np.linalg.lstsq(A, B)
351/53: A.shae
351/54: A.shape
351/55: B.shape
351/56: Z = X**2 + Y**2 + np.random.rand(*X.shape)*0.01
351/57: Z.shape
351/58:
X = X.flatten()
Y = Y.flatten()

A = np.array([X*0+1, X, Y, X**2, X**2*Y, X**2*Y**2, Y**2, X*Y**2, X*Y]).T
B = Z.flatten()

coeff, r, rank, s = np.linalg.lstsq(A, B)
351/59: coeff
351/60:
# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

xs = np.linspace(0, 3, 20)
ys = np.linspace(0, 3, 20)
X, Y = np.meshgrid(xs, ys, copy=False)
Z = X**2 + Y**2 + np.random.rand(*X.shape)*0.01


X = X.flatten()
Y = Y.flatten()

A = np.array([X*0+1, X, Y, X**2, X**2*Y, X**2*Y**2, Y**2, X*Y**2, X*Y]).T
B = Z.flatten()

coeff, r, rank, s = np.linalg.lstsq(A, B)
351/61: coeff
351/62: A.shape
351/63: B.shape
351/64: np.sqrt(96)
351/65:

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

xs = np.linspace(0, 3, 10)
ys = np.linspace(0, 3, 10)
X, Y = np.meshgrid(xs, ys, copy=False)
Z = X**2 + Y**2 + np.random.rand(*X.shape)*0.01


X = X.flatten()
Y = Y.flatten()

A = np.array([X*0+1, X, Y, X**2, X**2*Y, X**2*Y**2, Y**2, X*Y**2, X*Y]).T
B = Z.flatten()

coeff, r, rank, s = np.linalg.lstsq(A, B)
351/66:
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

xs = np.linspace(0, 3, 10)
ys = np.linspace(0, 3, 10)
X, Y = np.meshgrid(xs, ys, copy=False)
Z = z


X = X.flatten()
Y = Y.flatten()

A = np.array([X*0+1, X, Y, X**2, X**2*Y, X**2*Y**2, Y**2, X*Y**2, X*Y]).T
B = Z.flatten()

coeff, r, rank, s = np.linalg.lstsq(A, B)
351/67: A.shape
351/68: B.shape
351/69:
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

xs = np.linspace(0, 3, 96)
ys = np.linspace(0, 3, 96)
X, Y = np.meshgrid(xs, ys, copy=False)
Z = z


# X = X.flatten()
# Y = Y.flatten()

A = np.array([X*0+1, X, Y, X**2, X**2*Y, X**2*Y**2, Y**2, X*Y**2, X*Y]).T
B = Z.flatten()

coeff, r, rank, s = np.linalg.lstsq(A, B)
351/70:
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

xs = np.linspace(0, 3, 96)
ys = np.linspace(0, 3, 96)
X, Y = np.meshgrid(xs, ys, copy=False)
Z = z


X = X.flatten()
Y = Y.flatten()

A = np.array([X*0+1, X, Y, X**2, X**2*Y, X**2*Y**2, Y**2, X*Y**2, X*Y]).T
B = Z.flatten()

coeff, r, rank, s = np.linalg.lstsq(A, B)
351/71: X=np.meshgrid(xs)
351/72: X
351/73: X.shape
351/74: X.type
351/75: type(X)
351/76: X.size
351/77: X=np.meshgrid(xs)[0]
351/78: X.shape
351/79: type(X)
351/80: X=np.meshgrid(xs, xs)
351/81: X
351/82: X.type
351/83: X.shape
351/84: type(X)
351/85: X[0]
351/86: X[0].type
351/87: X[0].shape
351/88:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# Create a 3D graph with the values of R/G/B linking to MSI values
trace1 = go.Scatter3d(
    x=data[:, 0],
    y=data[:, 1],
    z=data[:, 2],
    mode='markers',
    marker=dict(size=4, color='red', line=dict(color='black', width=0.5), opacity=0.8)
)

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

# Obtaining the coefficient of the equation giving the MSI values depending on the R/G/B values
A = np.c_[np.ones(data.shape[0]), data[:, :2], np.prod(data[:, :2], axis=1), data[:, :2] ** 2]
C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape), XX, YY, XX * YY, XX ** 2, YY ** 2], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

# plot points and fitted surface using Plotly

trace3 = go.Surface(z=Z, x=X, y=Y, colorscale='RdBu', opacity=0.999)

# Package the trace dictionary into a data object

data_test2 = go.Data([trace1, trace3])

# Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

# Make a figure object
fig = go.Figure(data=data_test2, layout=layout)

plt.show()
plt.legend()
351/89:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# Create a 3D graph with the values of R/G/B linking to MSI values
trace1 = go.Scatter3d(
    x=data[:, 0],
    y=data[:, 1],
    z=data[:, 2],
    mode='markers',
    marker=dict(size=4, color='red', line=dict(color='black', width=0.5), opacity=0.8)
)

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

# Obtaining the coefficient of the equation giving the MSI values depending on the R/G/B values
A = np.c_[np.ones(data.shape[0]), data[:, :2], np.prod(data[:, :2], axis=1), data[:, :2] ** 2]
C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape), XX, YY, XX * YY, XX ** 2, YY ** 2, XX**2*Y, YY**2*X, XXX, YYY], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

# plot points and fitted surface using Plotly

trace3 = go.Surface(z=Z, x=X, y=Y, colorscale='RdBu', opacity=0.999)

# Package the trace dictionary into a data object

data_test2 = go.Data([trace1, trace3])

# Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

# Make a figure object
fig = go.Figure(data=data_test2, layout=layout)

plt.show()
plt.legend()
351/90:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import itertools

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd


# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

xs = np.linspace(0, 3, 96)
X, Y = np.meshgrid(xs, ys, copy=False)
Z = z


X = X.flatten()
Y = Y.flatten()

A = np.array([X*0+1, X, Y, X**2, X**2*Y, X**2*Y**2, Y**2, X*Y**2, X*Y]).T
B = Z.flatten()

coeff, r, rank, s = np.linalg.lstsq(A, B)


ax.scatter(x,y,z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
ax.set_xlim(x.min(),x.max())
ax.set_ylim(y.min(),y.max())
ax.set_zlim(0,1)

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

#Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

plt.show()
351/91: A.shpae
351/92: A.shape
351/93: B.shape
351/94:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# Create a 3D graph with the values of R/G/B linking to MSI values
trace1 = go.Scatter3d(
    x=data[:, 0],
    y=data[:, 1],
    z=data[:, 2],
    mode='markers',
    marker=dict(size=4, color='red', line=dict(color='black', width=0.5), opacity=0.8)
)

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

# Obtaining the coefficient of the equation giving the MSI values depending on the R/G/B values
A = np.c_[np.ones(data.shape[0]), data[:, :2], np.prod(data[:, :2], axis=1), data[:, :2] ** 2]
C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape), XX, YY, XX * YY, XX ** 2, YY ** 2, XX**2*Y, YY**2*X, XXX, YYY], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

# plot points and fitted surface using Plotly

trace3 = go.Surface(z=Z, x=X, y=Y, colorscale='RdBu', opacity=0.999)

# Package the trace dictionary into a data object

data_test2 = go.Data([trace1, trace3])

# Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

# Make a figure object
fig = go.Figure(data=data_test2, layout=layout)

plt.show()
plt.legend()
353/1:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# Create a 3D graph with the values of R/G/B linking to MSI values
trace1 = go.Scatter3d(
    x=data[:, 0],
    y=data[:, 1],
    z=data[:, 2],
    mode='markers',
    marker=dict(size=4, color='red', line=dict(color='black', width=0.5), opacity=0.8)
)

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

# Obtaining the coefficient of the equation giving the MSI values depending on the R/G/B values
A = np.c_[np.ones(data.shape[0]), data[:, :2], np.prod(data[:, :2], axis=1), data[:, :2] ** 2]
C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape), XX, YY, XX * YY, XX ** 2, YY ** 2, XX**2*Y, YY**2*X, XXX, YYY], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

# plot points and fitted surface using Plotly

trace3 = go.Surface(z=Z, x=X, y=Y, colorscale='RdBu', opacity=0.999)

# Package the trace dictionary into a data object

data_test2 = go.Data([trace1, trace3])

# Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

# Make a figure object
fig = go.Figure(data=data_test2, layout=layout)

plt.show()
plt.legend()
353/2: cd git/lancube/
353/3:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# Create a 3D graph with the values of R/G/B linking to MSI values
trace1 = go.Scatter3d(
    x=data[:, 0],
    y=data[:, 1],
    z=data[:, 2],
    mode='markers',
    marker=dict(size=4, color='red', line=dict(color='black', width=0.5), opacity=0.8)
)

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

# Obtaining the coefficient of the equation giving the MSI values depending on the R/G/B values
A = np.c_[np.ones(data.shape[0]), data[:, :2], np.prod(data[:, :2], axis=1), data[:, :2] ** 2]
C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape), XX, YY, XX * YY, XX ** 2, YY ** 2, XX**2*Y, YY**2*X, XXX, YYY], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

# plot points and fitted surface using Plotly

trace3 = go.Surface(z=Z, x=X, y=Y, colorscale='RdBu', opacity=0.999)

# Package the trace dictionary into a data object

data_test2 = go.Data([trace1, trace3])

# Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

# Make a figure object
fig = go.Figure(data=data_test2, layout=layout)

plt.show()
plt.legend()
353/4:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# Create a 3D graph with the values of R/G/B linking to MSI values
trace1 = go.Scatter3d(
    x=data[:, 0],
    y=data[:, 1],
    z=data[:, 2],
    mode='markers',
    marker=dict(size=4, color='red', line=dict(color='black', width=0.5), opacity=0.8)
)

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

# Obtaining the coefficient of the equation giving the MSI values depending on the R/G/B values
A = np.c_[np.ones(data.shape[0]), data[:, :2], np.prod(data[:, :2], axis=1), data[:, :2] ** 2]
C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape), XX, YY, XX * YY, XX ** 2, YY ** 2], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

# plot points and fitted surface using Plotly

trace3 = go.Surface(z=Z, x=X, y=Y, colorscale='RdBu', opacity=0.999)

# Package the trace dictionary into a data object

data_test2 = go.Data([trace1, trace3])

# Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

# Make a figure object
fig = go.Figure(data=data_test2, layout=layout)

plt.show()
plt.legend()
353/5:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# Create a 3D graph with the values of R/G/B linking to MSI values
trace1 = go.Scatter3d(
    x=data[:, 0],
    y=data[:, 1],
    z=data[:, 2],
    mode='markers',
    marker=dict(size=4, color='red', line=dict(color='black', width=0.5), opacity=0.8)
)

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

# Obtaining the coefficient of the equation giving the MSI values depending on the R/G/B values
A = np.c_[np.ones(data.shape[0]), data[:, :2], np.prod(data[:, :2], axis=1), data[:, :2] ** 2]
C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape), XX, YY, XX * YY, XX ** 2, YY ** 2, XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

# plot points and fitted surface using Plotly

trace3 = go.Surface(z=Z, x=X, y=Y, colorscale='RdBu', opacity=0.999)

# Package the trace dictionary into a data object

data_test2 = go.Data([trace1, trace3])

# Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

# Make a figure object
fig = go.Figure(data=data_test2, layout=layout)

plt.show()
plt.legend()
353/6: A.shape
353/7: A
353/8: data.shape[0]
353/9: data[:,:2]
353/10: np.prod(data[:,:2],axis=1)
353/11: xs=np.prod(data[:,:2],axis=1)
353/12: xs.shape
353/13: np.ones(data.shape[0])
353/14: xs=np.array[1,2,3]
353/15: xs=np.array([1,2,3])
353/16: xs
353/17: xs.shape
353/18: xs[0]
353/19: ys=xs*2
353/20: ys
353/21: np.prod(xs,ys)
353/22: np.prod((xs,ys))
353/23: np.prod((xs,ys),axis=0)
353/24: np.prod((xs,ys,ys),axis=0)
353/25: np.prod((xs,xs,ys),axis=0)
353/26: data
353/27: np.prod((data[:,0],data[:,1],data[:,1]),axis=0)
353/28: np.prod((data[:,0],data[:,1],data[:,1]),axis=0).shape
353/29: np.dot((data[:,0],data[:,1],data[:,1]),axis=0).shape
353/30: np.dot((data[:,0],data[:,1],data[:,1])).shape
353/31: np.dot(data[:,0],data[:,1],data[:,1]).shape
353/32:
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1])),
        np.prod((data[:, 0],data[:, 1],data[:, 1])),
        data[:, :2] ** 3]
353/33:
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1])),
        np.prod((data[:, 0],data[:, 1],data[:, 1])),
        data[:, 0] ** 3, data[:, 1] ** 3]
353/34: data[:,0]**3
353/35: data[:,0]**3.shape
353/36: (data[:,0]**3).shape
353/37: data[:, :2] ** 3
353/38: (data[:, :2] ** 3).shape
353/39:
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1])),
        np.prod((data[:, 0],data[:, 1],data[:, 1])),
        data[:, :2] ** 3]
353/40:
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1])),
        np.prod((data[:, 0],data[:, 1],data[:, 1])),
        (data[:, :2] ** 3).T]
353/41: np.prod((data[:, 0],data[:, 0],data[:, 1]))
353/42: np.prod((data[:, 0],data[:, 0],data[:, 1])).shape
353/43:
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=1),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=1),
        data[:, :2] ** 3]
353/44: np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=1)
353/45: np.prod([data[:, 0],data[:, 0],data[:, 1]], axis=1)
353/46: np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0)
353/47:
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]
353/48: A
353/49: A.shape
353/50:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# Create a 3D graph with the values of R/G/B linking to MSI values
trace1 = go.Scatter3d(
    x=data[:, 0],
    y=data[:, 1],
    z=data[:, 2],
    mode='markers',
    marker=dict(size=4, color='red', line=dict(color='black', width=0.5), opacity=0.8)
)

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3
                                                


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

# plot points and fitted surface using Plotly

trace3 = go.Surface(z=Z, x=X, y=Y, colorscale='RdBu', opacity=0.999)

# Package the trace dictionary into a data object

data_test2 = go.Data([trace1, trace3])

# Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)

# Make a figure object
fig = go.Figure(data=data_test2, layout=layout)

plt.show()
plt.legend()
353/51:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# Create a 3D graph with the values of R/G/B linking to MSI values
trace1 = go.Scatter3d(
    x=data[:, 0],
    y=data[:, 1],
    z=data[:, 2],
    mode='markers',
    marker=dict(size=4, color='red', line=dict(color='black', width=0.5), opacity=0.8)
)

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3
                                                


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

# plot points and fitted surface using Plotly

trace3 = go.Surface(z=Z, x=X, y=Y, colorscale='RdBu', opacity=0.999)

# Package the trace dictionary into a data object

data_test2 = go.Data([trace1, trace3])

# Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)


plt.show()
plt.legend()
353/52:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# Create a 3D graph with the values of R/G/B linking to MSI values
trace1 = go.Scatter3d(
    x=data[:, 0],
    y=data[:, 1],
    z=data[:, 2],
    mode='markers',
    marker=dict(size=4, color='red', line=dict(color='black', width=0.5), opacity=0.8)
)

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3
                                                


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

# Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)


plt.show()
plt.legend()
353/53:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3
                                                


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

# Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)


plt.show()
plt.legend()
353/54:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3
                                                


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)

# Make a layout object
layout = go.Layout(
    title='2nd-order (quadratic) surface',  # set plot title
    scene=go.Scene(  # axes are part of a 'scene' in 3d plots
        xaxis=go.XAxis(axis),  # set x-axis style
        yaxis=go.YAxis(axis),  # set y-axis style
        zaxis=go.ZAxis(axis)),  # set z-axis style
)
353/55: plt.show()
353/56:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3
                                                


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')

axis = dict(
    showbackground=True,  # show axis background
    backgroundcolor="rgb(204, 204, 204)",  # set background color to grey
    gridcolor="rgb(255, 255, 255)",  # set grid line color
    zerolinecolor="rgb(255, 255, 255)",  # set zero grid line color)
)
353/57: plt.show()
353/58:
import scipy.linalg
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3
                                                


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()
353/59: C
353/60:

def msi_lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2


fig,ax = plt.subplots()
ax.plot(z, msi_lan3(x,y,C[0]))
353/61: type(C)
353/62: C[0]
353/63: C.shape
353/64:
def msi_lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2


fig,ax = plt.subplots()
ax.plot(z, msi_lan3(x,y,C))
353/65: plt.show()
353/66:
def msi_lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3(x,y,C)-z)
353/67: plt.show()
354/1:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3
                                                


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _, _, _ = scipy.optimize.curve_fit(lin_func, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3)
ax.plot(z, lin_func(z,Clin[0][0],Clin[0][1]))
355/1:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3
                                                


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _, _, _ = scipy.optimize.curve_fit(lin_func, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3)
ax.plot(z, lin_func(z,Clin[0][0],Clin[0][1]))
355/2: cd git/lancube/
355/3:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3
                                                


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _, _, _ = scipy.optimize.curve_fit(lin_func, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3)
ax.plot(z, lin_func(z,Clin[0][0],Clin[0][1]))
355/4:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3
                                                


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _, _, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3)
ax.plot(z, lin_func(z,Clin[0][0],Clin[0][1]))
355/5:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3
                                                


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3)
ax.plot(z, lin_func(z,Clin[0][0],Clin[0][1]))
355/6: Clin
355/7: Clin[0]
355/8:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3
                                                


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3)
ax.plot(z, lin_func(z,Clin[0],Clin[1]))
355/9: ax.plot(z, lin_func(z,Clin[0],Clin[1]))
355/10: plt.show()
355/11: ax.scatter(z, msi_lan3)
355/12: ax.plot(z, lin_func(z,Clin[0],Clin[1]))
355/13: ax.text(1, -0.6, r'$\sum_{i=0}^\infty x_i$', fontsize=20)
355/14:
ax.scatter(z, msi_lan3)
ax.plot(z, lin_func(z,Clin[0],Clin[1]))
ax.text(1, -0.6, r'$\sum_{i=0}^\infty x_i$', fontsize=20)
355/15: plt.show()
355/16:
fig,ax = plt.subplots()
ax.scatter(z, msi_lan3)
ax.plot(z, lin_func(z,Clin[0],Clin[1]))
ax.text(1, -0.6, r'$\sum_{i=0}^\infty x_i$', fontsize=20)
plt.show()
355/17:
fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0.5, 0.6, r'm=ax+b\na=%s, b=%s' % (Clin[0],Clin[1]), fontsize=20)
ax.legend()
plt.show()
355/18:
fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0.5, 0.6, r'm=ax+b \n a=%s, b=%s' % (Clin[0],Clin[1]), fontsize=20)
ax.legend()
plt.show()
355/19:
fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0.5, 0.6, 'm=ax+b \n a=%s, b=%s' % (Clin[0],Clin[1]), fontsize=20)
ax.legend()
plt.show()
355/20:
fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0.1, 0.7, 'm=ax+b \n a=%s \n b=%s' % (Clin[0],Clin[1]), fontsize=20)
ax.legend()
plt.show()
355/21:
fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0.1, 0.7, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend()
plt.show()
355/22:
fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0.1, 0.6, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
355/23:
fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0.1, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
355/24:
fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
355/25: fig,ax = plt.subplots()
355/26: ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
355/27: ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
355/28: ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
355/29: ax.legend(loc='lower right')
355/30: plt.show()
356/1:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
356/2: cd git/lancube/
356/3:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
356/4:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
356/5:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3
                                                


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
356/6:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],data[:, :2] ** 2]                           #order 3: x^2*y, y^2*x, x^3, y^3


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX ** 2, YY ** 2], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[4]*x**2+coeff[5]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
356/7:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],data[:, :2] ** 2]                           #order 3: x^2*y, y^2*x, x^3, y^3


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX ** 2, YY ** 2], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x**2+coeff[2]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
356/8: XX.shape
356/9: C.shape
356/10: YY.shape
356/11: A.shape
356/12:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),data[:, :2] ** 2]                           #order 3: x^2*y, y^2*x, x^3, y^3


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX ** 2, YY ** 2], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x**2+coeff[2]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
356/13:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),data[:, :2] ** 2]                           #order 3: x^2*y, y^2*x, x^3, y^3


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX ** 2, YY ** 2], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x**2+coeff[2]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
356/14:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3
                                                


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
357/1: pwd
357/2:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]
357/3:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
R = np.array(File['R'])
B = np.array(File['B'])
G = np.array(File['G'])
357/4: plt.hist(R,10)
357/5: plt.show()
357/6: plt.hist(G,10)
357/7: plt.show()
357/8: plt.hist(B,10)
357/9: plt.show()
357/10: plt.hist(G,10)
357/11: plt.show()
357/12: plt.x_label('G data')
357/13: plt.xlabel('G data')
357/14: plt.show()
357/15: plt.hist(G,10)
357/16: plt.show()
357/17: plt.hist(G,10)
357/18: plt.xlabel('G data')
357/19: plt.show()
357/20: plt.hist(G,100)
357/21: plt.show()
357/22: plt.hist(G,200)
357/23: plt.show()
357/24: plt.hist(G,200)
357/25: plt.xlim(0,1000)
357/26: plt.show()
357/27: plt.xlim(0,3000)
357/28: plt.show()
357/29: %matplotlib inline
357/30: plt.xlim(0,3000)
357/31: plt.hist(G,200)
357/32: plt.xlim(0,3000)
357/33: plt.show()
357/34: plt.hist(G,200)
357/35: plt.xlim(0,3000)
357/36: plt.show()
358/1:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])
358/2:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
R = np.array(File['R'])
B = np.array(File['B'])
G = np.array(File['G'])
358/3: plt.hist(G,1000)
358/4: plt.hist(G,200)
358/5: plt.xlim(0,1000)
358/6: plt.show()
358/7: plt.hist(G,600)
358/8: plt.xlim(0,1000)
358/9: plt.hist(G,600)
358/10: plt.xlim(0,1000)
358/11: plt.show()
358/12: plt.hist(G,96)
358/13: plt.show()
358/14: plt.hist(R,96)
358/15: plt.show()
358/16: plt.hist(B,96)
358/17: plt.show()
358/18: %pylab
358/19: plt.hist(B,96)
358/20: plt.xlim(0,1000)
360/1: plt.plot(np.arange(100))
361/1: %pylab
362/1: plt.plot(np.arange(100))
362/2: plt.xlim(0,10)
363/1:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
y = np.array(File['R/G'])
x = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3
                                                


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
363/2: cd git/lancube/
363/3:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
y = np.array(File['R/G'])
x = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3
                                                


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
363/4:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
y = np.array(File['R/G'])
x = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3
                                                


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
363/5:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3
                                                


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
363/6:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
y = np.array(File['R/G'])
x = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3
                                                


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
363/7:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
y = np.array(File['R/G'])
x = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[y, x, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3
                                                


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:, 0], data[:, 1], data[:, 2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
363/8:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
y = np.array(File['R/G'])
x = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3
                                                


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x, y, z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
363/9:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
y = np.array(File['R/G'])
x = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod(data[:, :2], axis=1),data[:, :2] ** 2,          #order 2: x*y, x^2, y^2
        np.prod((data[:, 0],data[:, 0],data[:, 1]), axis=0),
        np.prod((data[:, 0],data[:, 1],data[:, 1]), axis=0),
        data[:, :2] ** 3]                                       #order 3: x^2*y, y^2*x, x^3, y^3
                                                


C, _, _, _ = scipy.linalg.lstsq(A, data[:, 2])
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x, y, z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
363/10:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
y = np.array(File['R/G'])
x = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod((x,y), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((x,x,y), axis=0),                               #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((x,y,y), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, _, _, _ = scipy.linalg.lstsq(A, z)
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x, y, z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
363/11:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
y = np.array(File['R/G'])
x = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data, axis=0)
mx = np.max(data, axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod((x,y), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((x,x,y), axis=0),                               #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((y,y,x), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, _, _, _ = scipy.linalg.lstsq(A, z)
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x, y, z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
363/12:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
y = np.array(File['R/G'])
x = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod((x,y), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((x,x,y), axis=0),                               #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((y,y,x), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, _, _, _ = scipy.linalg.lstsq(A, z)
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x, y, z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
363/13:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
y = np.array(File['R/G'])
x = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod((x,y), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((x,x,y), axis=0),                               #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((y,y,x), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, _, _, _ = scipy.linalg.lstsq(A, z)
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x, y, z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(y,x,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
363/14:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod((x,y), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((x,x,y), axis=0),                               #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((y,y,x), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, _, _, _ = scipy.linalg.lstsq(A, z)
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x, y, z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
363/15:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod((x,y), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((x,x,y), axis=0),                               #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((y,y,x), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, _, _, _ = scipy.linalg.lstsq(A, z)
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x, y, z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3-z, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
363/16: git
363/17:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod((x,y), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((x,x,y), axis=0),                               #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((y,y,x), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, _, _, _ = scipy.linalg.lstsq(A, z)
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x, y, z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3-z, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
363/18:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod((x,y), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((x,x,y), axis=0),                               #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((y,y,x), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, _, _, _ = scipy.linalg.lstsq(A, z)
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x, y, z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3-z, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
363/19:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod((x,y), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((x,x,y), axis=0),                               #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((y,y,x), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, _, _, _ = scipy.linalg.lstsq(A, z)
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x, y, z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
363/20:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod((x,y), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((x,x,y), axis=0),                               #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((y,y,x), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = scipy.linalg.lstsq(A, z)
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x, y, z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
363/21: %pylab
363/22:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])

data = np.c_[x, y, z]

# regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod((x,y), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((x,x,y), axis=0),                               #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((y,y,x), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = scipy.linalg.lstsq(A, z)
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x, y, z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f}'.format(Clin[0],Clin[1]), fontsize=20)
ax.legend(loc='lower right')
plt.show()
363/23: res
363/24: C
363/25: z
363/26: np.prod(('x','y'),axis=0)
363/27: np.prod((1,2),axis=0)
363/28: np.prod((2,3),axis=0)
363/29: np.prod((3,2),axis=0)
363/30: C
363/31: Z
363/32: Z.shape
363/33: XX.shape
363/34: YY.shape
363/35: mn
363/36: mx
364/1: sockaddr = usocket.getaddrinfo('www.micropython.org', 80)[0][-1]
364/2: # You must use getaddrinfo() even for numeric addresses
364/3: sockaddr = usocket.getaddrinfo('127.0.0.1', 80)[0][-1]
364/4: # Now you can use that address
364/5: import socket as usocket
364/6:
sockaddr = usocket.getaddrinfo('www.micropython.org', 80)[0][-1]
# You must use getaddrinfo() even for numeric addresses
sockaddr = usocket.getaddrinfo('127.0.0.1', 80)[0][-1]
# Now you can use that address
sock.connect(addr)
364/7: sock=usocket.socket()
364/8:
sockaddr = usocket.getaddrinfo('www.micropython.org', 80)[0][-1]
# You must use getaddrinfo() even for numeric addresses
sockaddr = usocket.getaddrinfo('127.0.0.1', 80)[0][-1]
# Now you can use that address
sock.connect(addr)
364/9:
sockaddr = usocket.getaddrinfo('www.micropython.org', 80)[0][-1]
# You must use getaddrinfo() even for numeric addresses
sockaddr = usocket.getaddrinfo('127.0.0.1', 80)[0][-1]
# Now you can use that address
sock.connect(sockaddr)
364/10:
sockaddr = usocket.getaddrinfo('www.micropython.org', 80)[0][-1]
# You must use getaddrinfo() even for numeric addresses
sockaddr = usocket.getaddrinfo('', 80)[0][-1]
# Now you can use that address
sock.connect(sockaddr)
365/1:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])

data = np.c_[x, y, z]

#filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 200
ind_array = np.argwhere(R>threshold and G>threshold and B>threshold)
365/2: ind_array = np.argwhere(R>threshold)
365/3: ind_array
365/4: size(ind_array)
365/5: np.size(ind_array)
365/6: ind_array = np.argwhere(G>threshold)
365/7: np.size(ind_array)
365/8: ind_array = np.argwhere(B>threshold)
365/9: np.size(ind_array)
365/10: ind = np.where(data[:,2]>threshold)
365/11: ind
365/12: ind.shape
365/13: np.shape(ind)
365/14: ind[0]
365/15: ind[0,0]
365/16: ind[0][0]
365/17: ind[0]
365/18: shapeind[0]
365/19: np.shape.ind[0]
365/20: np.shape(ind[0])
365/21: ind[0].shape
365/22: np.where(data>threshold)
365/23: np.where(data[:,0]>threshold)
365/24: np.where(data[:,1]>threshold)
365/25: np.where(data[1]>threshold)
365/26: np.where(data[0]>threshold)
365/27: data.shape
365/28: data[:,:2]
365/29: data[:]
365/30: data[np.argwhere(data[:,0]>threshold)]
365/31: threshold = 0.4
365/32: ind=np.where(data[:,:2]>threshold)
365/33: ind
365/34: ind=np.argwhere(data[:,:2]>threshold)
365/35: ind
365/36: ind=np.argwhere(data[:,0]>threshold)
365/37: ind
365/38: ind.shape
365/39: ind=np.argwhere(data[:,0]>1)
365/40: ind
365/41: ind.shape
365/42: rgb = np.c_[R,G,B]
365/43: rgb
365/44: thresh = 200
365/45: np.where(rgb>thresh)
365/46: np.where(R>thresh)
365/47: np.where(R>1000)
365/48: np.where(R>1500)
365/49: np.where(R>2000)
365/50: np.where(B>2000)
365/51: np.where(G>2000)
365/52: np.argwhere(G>2000)
365/53: np.argwhere(G>2000).shape
365/54: np.where(G>2000).shape
365/55: np.where(G>2000)[0].shape
365/56: np.argwhere(R>2000,G>2000)
365/57: np.argwhere(R>2000 and G>2000)
365/58: np.where(rgb>2000, rgb)
365/59: t =rgb[np.where(rgb>2000)]
365/60: t
365/61: t.shape
365/62: plt.plot(t)
365/63: plt.show
365/64: plt.show()
365/65: %pylab
365/66: plt.plot(t)
365/67: plt.xlabel('test')
365/68: t =rgb[np.where(rgb.flatten>2000)]
365/69: t =rgb[np.where(rgb.flatten()>2000)]
365/70: ind = np.where(rgb>2000)
365/71: ind
365/72: ind.shape
365/73: ind[0].shape
365/74: ind[0]
365/75: ind[1]
365/76: ind[2]
365/77: type(ind)
365/78:  rgb[rgb.any(1)]
365/79: np.where(rgb[rgb.any(1)]>2000)
365/80: rgb.any(1)
365/81: rgb.any(1)>2000
365/82: np.any(rgb != 0, axis=0)
365/83: np.any(rgb != 0, axis=1)
365/84: np.any(rgb != 0, axis=2)
365/85: np.any(rgb != 0, axis=0)
365/86: np.any(rgb > 2000, axis=0)
365/87: t=np.array([row for row in rgb if row[:]>2000])
365/88: t=np.array([row for row in rgb if row>2000])
365/89: t=np.array([row for row in rgb if item in row[item]>2000])
365/90: t=np.array([row>2000 for row in rgb])
365/91: t
365/92: t.shape
365/93: rgb.shape
365/94: data.shape
365/95: rt=[val>2000 for val in R]
365/96: rt
365/97: rt.shape
365/98: rt.len
365/99: len(rt)
365/100: rt=np.array([val>2000 for val in R])
365/101: rt
365/102: rt.shape
365/103: rt=R>2000
365/104: rt
365/105: R[R>2000]
365/106: np.argwhere(R[R>2000])
365/107: a=np.array([0,1])
365/108: b=a
365/109: b=0
365/110: b
365/111: a
365/112: b=a
365/113: b=np.argwhere(b>0)
365/114: b
365/115: a
365/116: b.shape
365/117: b[0]
365/118: b[1]
365/119: b[0][0]
365/120: type(b)
365/121: a=[0,1]
365/122: b=a
365/123: a
365/124: b
365/125: b-1
365/126: b=b-1
365/127: b=b[0]-1
365/128: b
365/129: a
365/130: a*
365/131: a*2
365/132: b
365/133: a=np.array([0,1,2])
365/134: b=a
365/135: a*2
365/136: a
365/137: a=a*2
365/138: b
365/139: a
365/140: b=b*2
365/141: b
365/142: a
365/143: a=[0,1]
365/144: b=a
365/145: b
365/146: a
365/147: b.append(2)
365/148: b
365/149: a
365/150: b=0
365/151: b
365/152: a
365/153: b=a
365/154: b[0]=b[0]+1
365/155: b
365/156: a
365/157: a=np.array([0,1,2])
365/158: b=a
365/159: b
365/160: a
365/161: b=np.c_(b,0)
365/162: b=np.c_(b,[0])
365/163: b=np.c_(b,np.array([0]))
365/164: b.add(0)
365/165: b.concatenate(0)
365/166: b[0]+1
365/167: b
365/168: b[0]=b[0]+1
365/169: b
365/170: a
365/171: t
365/172: np.where(t==1)
365/173: np.argwhere(t==1)
365/174: t
365/175: t.shape
365/176: t[t==1]
365/177: t[t[:]==1]
365/178: t[t[:,:]==1]
365/179: t[t[:,:1]==1]
365/180: t[t[:,0]==1]
365/181: t[t[:,0]==1].shpae
365/182: t[t[:,0]==1].shape
365/183: t.shape
365/184: rtind=np.argwhere(R>threshold)
365/185: rtind
365/186:
gtind=np.argwhere(G>threshold)
btind=np.argwhere(B>threshold)
365/187: rts=np.c_(rtind,gtind,btind)
365/188: rts=np.c_[rtind,gtind,btind]
365/189: rts
365/190:
threshold = 2000
rtind=np.argwhere(R>threshold)
gtind=np.argwhere(G>threshold)
btind=np.argwhere(B>threshold)
365/191: rts=np.c_[rtind,gtind,btind]
365/192: rts=rtind+gtind+btind
365/193: rts=[rtind,gtind,btind]
365/194: rts
365/195: rts=np.concatenate((rtind,gtind,btind), axis=none)
365/196: rts=np.concatenate((rtind,gtind,btind), axis=None)
365/197: rts
365/198: rts.shape
365/199: np.unique(rts)
365/200: np.unique(rts).shape
365/201: rts=np.unique(np.concatenate((rtind,gtind,btind), axis=None))
365/202: rts
365/203:
R=rts[:,0]
G=rts[:,1]
B=rts[:,2]
365/204: data[rts]
365/205: data[rts].shape
365/206: R,G,B=data[rts]
365/207: a=np.array([0,1,2])
365/208: bcd=a
365/209: b
365/210: c
365/211: b,c,d=a
365/212: b
365/213: c
365/214: d
365/215:
threshold = 2000
rtind=np.argwhere(R>threshold)
gtind=np.argwhere(G>threshold)
btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((rtind,gtind,btind), axis=None))

R=data[rts][:,:,0]
G=data[rts][:,:,1]
B=data[rts][:,:,2]
365/216:
data[rts
]
365/217:
data[rts
].shape
365/218: data[:,0]
365/219: data[:,:2]
365/220: data[:]
365/221: data[0,:2]
365/222: data[0,:3]
365/223: data[0,:4]
365/224: data[0,:5]
365/225: data[rts].shape
365/226: data[rts][:,0]
365/227:
#filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 2000
rtind=np.argwhere(R>threshold)
gtind=np.argwhere(G>threshold)
btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((rtind,gtind,btind), axis=None))

R=data[rts][:,0]
G=data[rts][:,1]
B=data[rts][:,2]
365/228: R
365/229: G
365/230: B
365/231: R.shpae
365/232: R.shape
365/233: B.shape
365/234: G.shape
366/1:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])

data = np.c_[x, y, z]

#filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 2000
rtind=np.argwhere(R>threshold)
gtind=np.argwhere(G>threshold)
btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((rtind,gtind,btind), axis=None))

R=data[rts][:,0]
G=data[rts][:,1]
B=data[rts][:,2]
MSI=x[rts]
366/2: %pylab
366/3: plt.plot(R,MSI)
366/4:
B=data[rts][:,2]
MSI=z[rts]
366/5: plt.plot(R,MSI)
366/6: plt.scatter(R,MSI)
366/7: plt.scatter(G,MSI)
366/8: plt.scatter(B,MSI)
366/9: plt.scatter(R,MSI)
366/10: plt.close
366/11: plt.close()
366/12: plt.clear()
366/13: plt.clear
366/14: plt.plot(G,MSI)
366/15: plt.scatter(G,MSI)
366/16: plt.scatter(R,MSI)
366/17: plt.scatter(B,MSI)
366/18: ls
366/19: pwd
366/20: plt.scatter(B,z)
366/21: plt.scatter(B,z[rts])
366/22: plt.scatter(B,z[rts])
366/23: plt.scatter(z)
366/24: plt.scatter(np.arange(z),z)
366/25: plt.scatter(np.linspace(z),z)
366/26: plt.scatter(np.linspace(0,z,len(z)),z)
366/27: plt.plot(z)
366/28: plt.scatter(z)
366/29: plt.scatter(z,MSI)
366/30: plt.scatter(x,z)
366/31: plt.scatter(y,z)
366/32: plt.scatter(x,z)
366/33: plt.scatter(y,z)
366/34: plt.scatter(x,z)
366/35: plt.plot(x,z)
366/36: plt.plot(y,z)
366/37: fig()
366/38: plt.fig()
366/39: fig=figure()
366/40: plt.scatter(x,z)
366/41: fig=figure()
366/42: plt.scatter(y,z)
366/43: plt.scatter(G,MSI)
366/44:
threshold = 2000
rtind=np.argwhere(R>threshold)
gtind=np.argwhere(G>threshold)
btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((rtind,gtind,btind), axis=None))

R=data[rts][:,0]
G=data[rts][:,1]
B=data[rts][:,2]
MSI=z[rts]
366/45: plt.scatter(G,MSI)
366/46: plt.scatter(R,MSI)
366/47: R.shape
366/48:
# Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])

data = np.c_[x, y, z]

#filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 2000
rtind=np.argwhere(R>threshold)
gtind=np.argwhere(G>threshold)
btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((rtind,gtind,btind), axis=None))

R=data[rts][:,0]
G=data[rts][:,1]
B=data[rts][:,2]
MSI=z[rts]
366/49:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])

data = np.c_[x, y, z]

#filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 2000
rtind=np.argwhere(R>threshold)
gtind=np.argwhere(G>threshold)
btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((rtind,gtind,btind), axis=None))

Rt=data[rts][:,0]
Gt=data[rts][:,1]
Bt=data[rts][:,2]
MSI=z[rts]
366/50: Rt
366/51: plt.scatter(Rt,MSI)
366/52: plt.scatter(Gt,MSI)
366/53: plt.scatter(Bt,MSI)
366/54: Gt
366/55: G
366/56:
# Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])

data = np.c_[x, y, z]

#filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 2000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSI=z[rts]
366/57: plt.scatter(B,MSI)
366/58: plt.scatter(Bt,MSI)
366/59: %pylab
367/1:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])

data = np.c_[x, y, z]

#filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 2000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSI=z[rts]
367/2: %pylab
367/3: plt.scatter(B,MSI)
367/4: plt.scatter(Bt,MSI)
367/5:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])

data = np.c_[x, y, z]

#filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 2000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSI=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

# regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod((x,y), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((x,x,y), axis=0),                               #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((y,y,x), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = scipy.linalg.lstsq(A, z)
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x, y, z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax.legend(loc='lower right')
plt.show()
367/6:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])

data = np.c_[x, y, z]

#filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 2000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

# regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod((x,y), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((x,x,y), axis=0),                               #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((y,y,x), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = scipy.linalg.lstsq(A, z)
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x, y, z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax.legend(loc='lower right')
plt.show()
367/7:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])

data = np.c_[x, y, z]

#filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 2000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

# regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                               #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,1],data[:,1],data[:,0]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = scipy.linalg.lstsq(A, z)
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x, y, z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax.legend(loc='lower right')
plt.show()
367/8:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])

data = np.c_[x, y, z]

#filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 2000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

# regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                               #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,1],data[:,1],data[:,0]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = scipy.linalg.lstsq(A, z)
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x, y, z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax.legend(loc='lower right')
plt.show()
367/9:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])

data = np.c_[x, y, z]

#filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 2000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

# regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                               #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,1],data[:,1],data[:,0]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = scipy.linalg.lstsq(A, MSIt)
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x, y, z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax.legend(loc='lower right')
plt.show()
367/10:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])

data = np.c_[x, y, z]

#filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 2000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Bt/Gt,Rt/Gt,MSIt]

# regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                               #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,1],data[:,1],data[:,0]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = scipy.linalg.lstsq(A, MSIt)
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x, y, z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax.legend(loc='lower right')
plt.show()
367/11:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
x = np.array(File['R/G'])
y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])

data = np.c_[x, y, z]

#filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 2000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

# regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                               #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,1],data[:,1],data[:,0]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = scipy.linalg.lstsq(A, MSIt)
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x, y, z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax.legend(loc='lower right')
plt.show()
367/12:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# Import plotly package
import plotly.graph_objs as go
import numpy as np
import pandas as pd

# Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])

#data = np.c_[x, y, z]

#filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 2000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

# regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 20), np.linspace(mn[1], mx[1], 20))
XX = X.flatten()
YY = Y.flatten()

#define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                               #order 0: C
        data[:, :2],                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                               #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,1],data[:,1],data[:,0]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = scipy.linalg.lstsq(A, MSIt)
print(C)


# evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

# plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x, y, z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax.legend(loc='lower right')
plt.show()
367/13:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 2000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 200), np.linspace(mn[1], mx[1], 200))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,1],data[:,1],data[:,0]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = scipy.linalg.lstsq(A, MSIt)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(x, y, z, c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(x,y,C)

Clin, _ = scipy.optimize.curve_fit(lin_func, z, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax.legend(loc='lower right')
plt.show()
367/14:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 2000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 30), np.linspace(mn[1], mx[1], 30))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = scipy.linalg.lstsq(A, MSIt)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(z, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(z, lin_func(z,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax.legend(loc='lower right')
plt.show()
367/15:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 2000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 30), np.linspace(mn[1], mx[1], 30))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = scipy.linalg.lstsq(A, MSIt)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3)


fig,ax = plt.subplots()
ax.scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax.legend(loc='lower right')
plt.show()
367/16:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 2000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 30), np.linspace(mn[1], mx[1], 30))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = scipy.linalg.lstsq(A, MSIt)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots()
ax.scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax.plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax.text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax.legend(loc='lower right')
plt.show()
367/17:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 2000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 30), np.linspace(mn[1], mx[1], 30))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = scipy.linalg.lstsq(A, MSIt)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots(1,2)
ax[0].scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax[0].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax[0].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[0].legend(loc='lower right')
ax[1].scatter(MSIt, msi_lan3-MSIt, label='Residues')
#ax[1].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
#ax[1].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[1].legend(loc='lower right')

plt.show()
367/18:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 2000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 30), np.linspace(mn[1], mx[1], 30))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = scipy.linalg.lstsq(A, MSIt)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots(2,1)
ax[0].scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax[0].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax[0].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[0].legend(loc='lower right')
ax[1].scatter(MSIt, msi_lan3-MSIt, label='Residues')
#ax[1].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
#ax[1].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[1].legend(loc='lower right')

plt.show()
367/19:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 2000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 30), np.linspace(mn[1], mx[1], 30))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = scipy.linalg.lstsq(A, MSIt)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots(1,2)
ax[0].scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax[0].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax[0].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[0].legend(loc='lower right')
ax[1].scatter(MSIt, msi_lan3-MSIt, label='Residues')
#ax[1].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
#ax[1].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[1].legend(loc='lower right')

plt.show()
367/20:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 5000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 30), np.linspace(mn[1], mx[1], 30))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = scipy.linalg.lstsq(A, MSIt)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots(1,2)
ax[0].scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax[0].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax[0].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[0].legend(loc='lower right')
ax[1].scatter(MSIt, msi_lan3-MSIt, label='Residues')
#ax[1].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
#ax[1].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[1].legend(loc='lower right')

plt.show()
367/21: MSIt<0
367/22: msi_lan3<0
367/23: msi[msi_lan3<0]
367/24: msi_lan3[msi_lan3<0]
367/25: np.argwhere(msi_lan3<0)
367/26: R[msi_lan3<0]
367/27: Rt[msi_lan3<0]
367/28: Gt[msi_lan3<0]
367/29: Bt[msi_lan3<0]
367/30: MSIt[msi_lan3<0]
367/31: plt.scatter(np.arange(len(MSIt)),MSIt)
367/32: plt.scatter(np.arange(len(MSIt)),MSIt)
367/33: plt.hist(MSIt)
367/34: plt.hist(MSIt)
367/35: plt.hist(msi_lan3)
367/36: plt.hist(z)
367/37: plt.hist(msi_lan3,alpha=0.5)
367/38:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 5000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 30), np.linspace(mn[1], mx[1], 30))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = np.linalg.lstsq(A, MSIt)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots(1,2)
ax[0].scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax[0].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax[0].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[0].legend(loc='lower right')
ax[1].scatter(MSIt, msi_lan3-MSIt, label='Residues')
#ax[1].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
#ax[1].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[1].legend(loc='lower right')

plt.show()
367/39: a=np.array([0,1,2,3])
367/40: a>0 and a<3
367/41: a>0 && a<3
367/42: a>0 & a<3
367/43: a[a>0 and a<3]
367/44: a[a if a>0 and a<3]
367/45: a[a if a>0 and if a<3]
367/46: np.argwhere(a>0 and a<3)
367/47: np.argwhere(a>0 & a<3)
367/48: np.argwhere(a>0 && a<3)
367/49: np.argwhere(a>0, a<3)
367/50: np.argwhere((a>0, a<3))
367/51: np.argwhere([a>0, a<3])
367/52: np.argwhere(0<a<3)
367/53: np.argwhere(0<a.any()<3)
367/54: as=np.argwhere(0<a.any()<3)
367/55: aa=np.argwhere(0<a.any()<3)
367/56: aa
367/57: aa.shape
367/58: aa[0]
367/59: aa[0][0]
367/60: aa[0,0]
367/61:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 10000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 30), np.linspace(mn[1], mx[1], 30))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = np.linalg.lstsq(A, MSIt)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots(1,2)
ax[0].scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax[0].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax[0].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[0].legend(loc='lower right')
ax[1].scatter(MSIt, msi_lan3-MSIt, label='Residues')
#ax[1].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
#ax[1].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[1].legend(loc='lower right')

plt.show()
367/62:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 10000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
Rtind=np.argwhere(R<R.max*0.8)
Btind=np.argwhere(B<B.max*0.8)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 30), np.linspace(mn[1], mx[1], 30))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = np.linalg.lstsq(A, MSIt)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots(1,2)
ax[0].scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax[0].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax[0].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[0].legend(loc='lower right')
ax[1].scatter(MSIt, msi_lan3-MSIt, label='Residues')
#ax[1].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
#ax[1].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[1].legend(loc='lower right')

plt.show()
367/63: R.max
367/64: R.max()
367/65:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 10000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
Rtind=np.argwhere(R<R.max()*0.8)
Btind=np.argwhere(B<B.max()*0.8)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 30), np.linspace(mn[1], mx[1], 30))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = np.linalg.lstsq(A, MSIt)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots(1,2)
ax[0].scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax[0].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax[0].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[0].legend(loc='lower right')
ax[1].scatter(MSIt, msi_lan3-MSIt, label='Residues')
#ax[1].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
#ax[1].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[1].legend(loc='lower right')

plt.show()
367/66:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 10000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
Rtind=np.argwhere(R<Rtind.max()*0.8)
Btind=np.argwhere(B<Btind.max()*0.8)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 30), np.linspace(mn[1], mx[1], 30))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = np.linalg.lstsq(A, MSIt)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots(1,2)
ax[0].scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax[0].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax[0].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[0].legend(loc='lower right')
ax[1].scatter(MSIt, msi_lan3-MSIt, label='Residues')
#ax[1].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
#ax[1].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[1].legend(loc='lower right')

plt.show()
367/67:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 5000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
Rtind=np.argwhere(R<Rtind.max()*0.8)
Btind=np.argwhere(B<Btind.max()*0.8)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 30), np.linspace(mn[1], mx[1], 30))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = np.linalg.lstsq(A, MSIt)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots(1,2)
ax[0].scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax[0].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax[0].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[0].legend(loc='lower right')
ax[1].scatter(MSIt, msi_lan3-MSIt, label='Residues')
#ax[1].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
#ax[1].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[1].legend(loc='lower right')

plt.show()
367/68: mn
367/69: mx
367/70: X
367/71: Y
367/72: Y.shape
367/73: y[0]
367/74: Y[0]
367/75: Y[0].shape
367/76: Y[10]
367/77: Y[:,10]
367/78: plt.imshow(Y)
367/79: plt.imshow(X)
367/80: plt.imshow(XX)
367/81: plt.imshow(Z)
367/82: Z.shape
367/83:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 5000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
Rtind=np.argwhere(R<Rtind.max()*0.8)
Btind=np.argwhere(B<Btind.max()*0.8)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 300), np.linspace(mn[1], mx[1], 300))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = np.linalg.lstsq(A, MSIt)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots(1,2)
ax[0].scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax[0].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax[0].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[0].legend(loc='lower right')
ax[1].scatter(MSIt, msi_lan3-MSIt, label='Residues')
#ax[1].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
#ax[1].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[1].legend(loc='lower right')

plt.show()
367/84:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 5000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
Rtind=np.argwhere(R<Rtind.max()*0.8)
Btind=np.argwhere(B<Btind.max()*0.8)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 300), np.linspace(mn[1], mx[1], 300))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, k, kk = np.linalg.lstsq(A, MSIt)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots(1,2)
ax[0].scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax[0].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax[0].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[0].legend(loc='lower right')
ax[1].scatter(MSIt, msi_lan3-MSIt, label='Residues')
#ax[1].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
#ax[1].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[1].legend(loc='lower right')

plt.show()
367/85: k
367/86: kk
367/87: kk.shape
367/88: C
367/89: MSIt.shape
367/90:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 5000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
Rtind=np.argwhere(R<Rtind.max()*0.8)
Btind=np.argwhere(B<Btind.max()*0.8)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 300), np.linspace(mn[1], mx[1], 300))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, k, kk = np.linalg.lstsq(A, MSIt)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],kk)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots(1,2)
ax[0].scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax[0].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax[0].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[0].legend(loc='lower right')
ax[1].scatter(MSIt, msi_lan3-MSIt, label='Residues')
#ax[1].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
#ax[1].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[1].legend(loc='lower right')

plt.show()
367/91: res
367/92:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 5000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
Rtind=np.argwhere(R<Rtind.max()*0.8)
Btind=np.argwhere(B<Btind.max()*0.8)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 300), np.linspace(mn[1], mx[1], 300))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = np.linalg.lstsq(A, MSIt, rcond=0.1)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots(1,2)
ax[0].scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax[0].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax[0].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[0].legend(loc='lower right')
ax[1].scatter(MSIt, msi_lan3-MSIt, label='Residues')
#ax[1].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
#ax[1].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[1].legend(loc='lower right')

plt.show()
367/93:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 4000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
Rtind=np.argwhere(R<Rtind.max()*0.7)
Btind=np.argwhere(B<Btind.max()*0.7)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 30), np.linspace(mn[1], mx[1], 30))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = np.linalg.lstsq(A, MSIt, rcond=0.1)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots(1,2)
ax[0].scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax[0].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax[0].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[0].legend(loc='lower right')
ax[1].scatter(MSIt, msi_lan3-MSIt, label='Residues')
#ax[1].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
#ax[1].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[1].legend(loc='lower right')

plt.show()
367/94:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 4000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
Rtind=np.argwhere(R<Rtind.max()*0.7)
Btind=np.argwhere(B<Btind.max()*0.7)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 30), np.linspace(mn[1], mx[1], 30))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = np.linalg.lstsq(A, MSIt, rcond=-1)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots(1,2)
ax[0].scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax[0].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax[0].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[0].legend(loc='lower right')
ax[1].scatter(MSIt, msi_lan3-MSIt, label='Residues')
#ax[1].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
#ax[1].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[1].legend(loc='lower right')

plt.show()
367/95: res
367/96:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 4000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
Rtind=np.argwhere(R<Rtind.max()*0.7)
Btind=np.argwhere(B<Btind.max()*0.7)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Rt/Gt,Bt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 30), np.linspace(mn[1], mx[1], 30))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = np.linalg.lstsq(A, MSIt, rcond=0.01)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots(1,2)
ax[0].scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax[0].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax[0].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[0].legend(loc='lower right')
ax[1].scatter(MSIt, msi_lan3-MSIt, label='Residues')
#ax[1].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
#ax[1].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[1].legend(loc='lower right')

plt.show()
367/97:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 4000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
Rtind=np.argwhere(R<Rtind.max()*0.7)
Btind=np.argwhere(B<Btind.max()*0.7)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Bt/Gt,Rt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 30), np.linspace(mn[1], mx[1], 30))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = np.linalg.lstsq(A, MSIt, rcond=0.01)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots(1,2)
ax[0].scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax[0].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax[0].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[0].legend(loc='lower right')
ax[1].scatter(MSIt, msi_lan3-MSIt, label='Residues')
#ax[1].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
#ax[1].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[1].legend(loc='lower right')

plt.show()
367/98: res
367/99: res
367/100: res[0]
367/101:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 4000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
Rtind=np.argwhere(R<Rtind.max()*0.7)
Btind=np.argwhere(B<Btind.max()*0.7)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Bt/Gt,Rt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 30), np.linspace(mn[1], mx[1], 30))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = np.linalg.lstsq(A, MSIt)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots(1,2)
ax[0].scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax[0].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax[0].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[0].legend(loc='lower right')
ax[1].scatter(MSIt, msi_lan3-MSIt, label='Residues')
#ax[1].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
#ax[1].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[1].legend(loc='lower right')

plt.show()
367/102:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 4000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
Rtind=np.argwhere(R<Rtind.max()*0.5)
Btind=np.argwhere(B<Btind.max()*0.5)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Bt/Gt,Rt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 30), np.linspace(mn[1], mx[1], 30))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = np.linalg.lstsq(A, MSIt)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots(1,2)
ax[0].scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax[0].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax[0].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[0].legend(loc='lower right')
ax[1].scatter(MSIt, msi_lan3-MSIt, label='Residues')
#ax[1].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
#ax[1].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[1].legend(loc='lower right')

plt.show()
367/103:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 2000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
Rtind=np.argwhere(R<Rtind.max()*0.5)
Btind=np.argwhere(B<Btind.max()*0.5)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Bt/Gt,Rt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 30), np.linspace(mn[1], mx[1], 30))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = np.linalg.lstsq(A, MSIt)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots(1,2)
ax[0].scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax[0].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax[0].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[0].legend(loc='lower right')
ax[1].scatter(MSIt, msi_lan3-MSIt, label='Residues')
#ax[1].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
#ax[1].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[1].legend(loc='lower right')

plt.show()
367/104:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 2000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
Rtind=np.argwhere(R<Rtind.max()*0.9)
Btind=np.argwhere(B<Btind.max()*0.9)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Bt/Gt,Rt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 30), np.linspace(mn[1], mx[1], 30))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = np.linalg.lstsq(A, MSIt)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots(1,2)
ax[0].scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax[0].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax[0].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[0].legend(loc='lower right')
ax[1].scatter(MSIt, msi_lan3-MSIt, label='Residues')
#ax[1].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
#ax[1].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[1].legend(loc='lower right')

plt.show()
367/105:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 2000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
Rtind=np.argwhere(R<Rtind.max()*0.9)
Btind=np.argwhere(B<Btind.max()*0.9)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Bt/Gt,Rt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 30), np.linspace(mn[1], mx[1], 30))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = np.linalg.lstsq(A, MSIt)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots(1,2)
ax[0].scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax[0].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax[0].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[0].legend(loc='lower right')
ax[1].scatter(MSIt, msi_lan3-MSIt, label='Residues')
#ax[1].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
#ax[1].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[1].legend(loc='lower right')

plt.show()
368/1:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 4000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
Rtind=np.argwhere(R<Rtind.max()*0.5)
Btind=np.argwhere(B<Btind.max()*0.5)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Bt/Gt,Rt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 30), np.linspace(mn[1], mx[1], 30))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = np.linalg.lstsq(A, MSIt)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots(1,2)
ax[0].scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax[0].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax[0].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[0].legend(loc='lower right')
ax[1].scatter(MSIt, msi_lan3-MSIt, label='Residues')
#ax[1].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
#ax[1].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[1].legend(loc='lower right')

plt.show()
368/2: %pylab
368/3:
import scipy.linalg
import scipy.optimize
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import plotly.graph_objs as go
import numpy as np
import pandas as pd

##Read file of data given by the LAN3
File = pd.read_csv("Final_used_Data.csv", sep=",")
# x = np.array(File['R/G'])
# y = np.array(File['B/G'])
z = np.array(File['MSI'])
R = np.array(File['R'])
G = np.array(File['G'])
B = np.array(File['B'])
#data = np.c_[x, y, z]

##filter values with minimum threshold (low G values give errors on MSI because of uncertainty)
threshold = 4000
Rtind=np.argwhere(R>threshold)
Gtind=np.argwhere(G>threshold)
Btind=np.argwhere(B>threshold)
Rtind=np.argwhere(R<Rtind.max()*0.5)
Btind=np.argwhere(B<Btind.max()*0.5)
rts=np.unique(np.concatenate((Rtind,Gtind,Btind), axis=None))

Rt=R[rts]
Gt=G[rts]
Bt=B[rts]
MSIt=z[rts]

data=np.c_[Bt/Gt,Rt/Gt,MSIt]

##regular grid covering the domain of the data
mn = np.min(data[:,:2], axis=0)
mx = np.max(data[:,:2], axis=0)
X, Y = np.meshgrid(np.linspace(mn[0], mx[0], 30), np.linspace(mn[1], mx[1], 30))
XX = X.flatten()
YY = Y.flatten()

##define order of the equation to fit. all members must be written by np.prod products
A = np.c_[np.ones(data.shape[0]),                                               #order 0: C
        data[:, :2],                                                            #order 1: x,y
        np.prod((data[:,0],data[:,1]), axis=0),data[:, :2] ** 2,                #order 2: x*y, x^2, y^2
        np.prod((data[:,0],data[:,0],data[:,1]), axis=0),                       #order 3: x^2*y, y^2*x, x^3, y^3
        np.prod((data[:,0],data[:,1],data[:,1]), axis=0),
        data[:, :2] ** 3]                                       
                                                


C, res, _, _ = np.linalg.lstsq(A, MSIt)
print(C)


##evaluate it on a grid
Z = np.dot(np.c_[np.ones(XX.shape),
                 XX, YY, 
                 XX * YY, XX ** 2, YY ** 2,
                 XX**2*YY, XX*YY**2, XX**3, YY**3], C).reshape(X.shape)

##plot points and fitted surface using Matplotlib
fig = plt.figure(figsize=(10, 10))
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1, alpha=0.2)
ax.scatter(data[:,0],data[:,1],data[:,2], c='r', s=50)
plt.xlabel('R/G')
plt.ylabel('B/G')
ax.set_zlabel('MSI')
plt.show()


def Msi_Lan3(x,y,coeff):
    return coeff[0]+coeff[1]*x+coeff[2]*y+coeff[3]*x*y+coeff[4]*x**2+coeff[5]*y**2+\
            coeff[6]*x**2*y+coeff[7]*x*y**2+coeff[8]*x**3+coeff[9]*y**2

def lin_func(x,a,b):
    return a*x+b

msi_lan3=Msi_Lan3(data[:,0],data[:,1],C)

Clin, _ = scipy.optimize.curve_fit(lin_func, MSIt, msi_lan3, p0=[1,0])


fig,ax = plt.subplots(1,2)
ax[0].scatter(MSIt, msi_lan3, label='lan3 MSI-3rd order')
ax[0].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
ax[0].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[0].legend(loc='lower right')
ax[1].scatter(MSIt, msi_lan3-MSIt, label='Residues')
#ax[1].plot(MSIt, lin_func(MSIt,Clin[0],Clin[1]), c='k', label='linear fit')
#ax[1].text(0, 0.5, 'm=ax+b \n a={:.2f} \n b={:.2f} \n threshold={}'.format(Clin[0],Clin[1], threshold), fontsize=20)
ax[1].legend(loc='lower right')

plt.show()
368/4: R
368/5: R.max
368/6: R.max()
368/7: B.max()
369/1: ls
369/2: pwd
369/3: ls
369/4: cd Street_Spectro/
369/5: ls
369/6: from glob import glob
369/7:
for fname in glob("*.csv"):
    wd,dat = np.loadtxt(fname,delimiter=",",skiprows=1).T
369/8: import pandas as pd
369/9:
for fname in glob("*.csv"):
    a = pd.read_csv(fname)
369/10:
for fname in glob("*.csv"):
    a = pd.read_csv(fname)
    plt.plot(a['Lambda'],a["Intensity"],'-')
369/11: %pylab
369/12:
for fname in glob("*.csv"):
    a = pd.read_csv(fname)
    plt.plot(a['Lambda'],a["Intensity"],'-')
369/13:
for fname in glob("*.csv")[:45]:
    a = pd.read_csv(fname)
    plt.plot(a['Lambda'],a["Intensity"],'-')
369/14:
for fname in sorted(glob("*.csv"))[:45]:
    a = pd.read_csv(fname)
    plt.plot(a['Lambda'],a["Intensity"],'-')
369/15: import re
369/16: re?
369/17: pd.read_csv("../equiv.csv")
369/18: pwd
369/19: ls
369/20: ls ..
369/21: pd.read_csv("../equiv.csv")
369/22: db = _
369/23: db['Rue']
369/24: _.to_numpy()
369/25: map(lambda s: s.replace(" ","_"), _)
369/26: list(_)
369/27: [ filter(lambda s: name in s, sorted(glob("*.csv")))[0]for name in _]
369/28: [ list(filter(lambda s: name in s, sorted(glob("*.csv"))))[0] for name in _]
369/29: [ list(filter(lambda s: name in s, sorted(glob("*.csv")))) for name in _]
369/30: sum(bool(l) for l in _)
369/31: _
369/32: _29
369/33: _
369/34: _.shape
369/35: [l[-1] for l in _ if l ]
369/36: db['Rue']
369/37: _34
369/38: _29
369/39: [ l[-1] if l else None for l in _ ]
369/40: [ pd.read_csv(s) if s is not None for s in _ ]
369/41: [ pd.read_csv(s) if s != None for s in _ ]
369/42: [ pd.read_csv(s) if s is not None else None for s in _ ]
369/43: spectrums = _
369/44: R = db['R'].to_numpy()
369/45: G = db['G'].to_numpy()
369/46: B = db['B'].to_numpy()
369/47: label = ' '.join(zip(R/G,B/G))
369/48: label = ' '.join(map(str,zip(R/G,B/G)))
369/49: label
369/50: labels = [ f"{r/g} {b/g}" for r,g,b in zip(R,G,B) ]
369/51: labels
369/52: labels = [ f"{r/g:02f} {b/g:02f}" for r,g,b in zip(R,G,B) ]
369/53: labels
369/54: labels = [ f"{r/g:02f} {b/g:02f}" for r,g,b in zip(R,G,B) ]
369/55: spectrums
369/56:
for spct,label in zip(spectrums,labels):
    if spct is not None:
        plt.plot(spct['Lambda'],spct['Intensity'],'-',label=label)
369/57: plt.legend()
369/58:
for spct,label in zip(spectrums,labels):
    if spct is not None:
        plt.figure()
        plt.plot(spct['Lambda'],spct['Intensity'],'-',label=label)
        plt.title(label)
   1: pwd
   2: ls
   3: cd Street_Spectro/absls
   4: cd Street_Spectro/
   5: ls
   6: pd.read_csv("11_rouge_14H23.csv")
   7: import pandas as pd
   8: %yptp.yion(
   9: %pylab
  10: plt.ion()
  11: import pandas as pd
  12: pd.read_csv("11_rouge_14H23.csv")
  13: plt.plot(_['Lambda'],_['Intensity'])
  14: pd.read_csv("18_rouge_14H45.csv")
  15: plt.plot(_['Lambda'],_['Intensity'])
  16: pd.read_csv("21_blanc_14H58.csv")
  17: plt.plot(_['Lambda'],_['Intensity'])
  18: import re
  19: glob("??_*.csv")
  20: from glob import glob
  21: glob("??_*.csv")
  22:
for fname in _:
    a = pd.read_csv(_)
    plt.plot(a['Lambda'],a['Intensity'])
  23: _
  24:
for fname in _:
    a = pd.read_csv(_)
    plt.plot(a['Lambda'],a['Intensity'])
  25:
for fname in _:
    a = pd.read_csv(fname)
    plt.plot(a['Lambda'],a['Intensity'])
  26: glob("??_*.csv")
  27:
for i,fname in enumerate(_):
    a = pd.read_csv(fname)
    plt.plot(a['Lambda'],a['Intensity']+i/20)
  28: _
  29:
for i,fname in enumerate(_):
    a = pd.read_csv(fname)
    plt.plot(a['Lambda'],a['Intensity']+i/100)
  30:
for i,fname in enumerate(_):
    a = pd.read_csv(fname)
    plt.plot(a['Lambda'],a['Intensity']/a['Intensity'].max()+i/100)
  31:
for i,fname in enumerate(_):
    a = pd.read_csv(fname)
    plt.plot(a['Lambda'],a['Intensity']/a['Intensity'].max()+i/10)
  32: _
  33: { (pd.read_csv(a)['Intensity']/pd.read_csv(a)['Intensity'].max()).mean() : a for a in _ }
  34: [[ (pd.read_csv(a)['Intensity']/pd.read_csv(a)['Intensity'].max()).mean() , a] for a in _ ]
  35: _
  36: np.array(_.items())[np.argsort(_.keys())]
  37: _.keys()
  38: keys = list(__.keys())
  39: items = list(__.items())
  40: keys
  41: items
  42: ___
  43: _38
  44: _39
  45: _40
  46: _37
  47: _36
  48: _35
  49: values = list(_.values())
  50: np.argsort(keys)
  51: values[_]
  52: np.array(values)[np.argsort(keys)]
  53: names = _
  54:
for i,fname in enumerate(names):
    a = pd.read_csv(fname)
    plt.plot(a['Lambda'],a['Intensity']/a['Intensity'].max()+i/10)
  55: db
  56: cd ..
  57: db = pd.read_csv("equiv.csv")
  58: t = db['Lieu'].to_numpy()
  59: RG = db['R/G'].to_numpy()
  60: BG = db['B/G'].to_numpy()
  61: MSI = db['MSI'].to_numpy()
  62: plt.scatter(BG[t=="ext"],MSI[t=="ext"])
  63: plt.scatter(BG[t=="ext"],MSI[t=="ext"])
  64: plt.scatter(BG,MSI,0.5)
  65: plt.scatter(BG,MSI,1)
  66: plt.scatter(BG,MSI,2)
  67: plt.scatter(BG,MSI,5)
  68: plt.scatter(BG,MSI,10)
  69: plt.scatter(BG,MSI,50)
  70: plt.scatter(BG,MSI,20)
  71: plt.cla()
  72: plt.scatter(BG[t=="ext"],MSI[t=="ext"])
  73: plt.scatter(BG,MSI,20)
  74: from mpl_toolkits.mplot3d import Axes3D
  75: ax = plt.figure().add_subplot(111,projection="3d")
  76: ax.scatter(BG[t=="ext"],RG[t=="ext"],MSI[t=="ext"])
  77: ax.set_xlabel("B/G"]
  78: ax.set_xlabel("B/G")
  79: ax.set_ylabel("R/G")
  80: ax.set_zlabel("MSI")
  81: plt.figure()
  82: plt.scatter(BG[t=="ext"],MSI[t=="ext"])
  83: plt.plot(MSI[t=="ext"]+.5,MSI[t=="ext"],'-')
  84: ls
  85: cd Street_Spectro/
  86: fnames = glob("[!_]+_[!_]+.csv")
  87: fnames
  88: fnames = glob("[^_]+_[^_]+.csv")
  89: fnamfneams
  90: es
  91: fnames
  92: fnames
  93: glob?
  94: fnames = glob("*.csv")
  95: fnames
  96: [ fname for fname in fnames if fname.count('_') == 1 ]
  97: plt.figure()
  98:
for i,fname in enumerate(__):
    plt.plot(pd.read_csv(fname)['Lambda'].to_numpy(),pd.read_csv(fname)['Intensity'].to_numpy()/pd.read_csv(fname)['Intensity'].to_numpy(),max()+i/10)
  99:
for i,fname in enumerate(__):
    plt.plot(pd.read_csv(fname)['Lambda'].to_numpy(),pd.read_csv(fname)['Intensity'].to_numpy()/pd.read_csv(fname)['Intensity'].to_numpy().max()+i/10)
 100:
for i,fname in enumerate(_98):
    a = pd.read_csv(fname)
    wl = a['Lambda'].to_numpy()
    I  = a['Intensity'].to_numpy()
    I /= I.max()
    plt.plot(wl,I+i/10)
 101:
for i,fname in enumerate(_96):
    a = pd.read_csv(fname)
    wl = a['Lambda'].to_numpy()
    I  = a['Intensity'].to_numpy()
    I /= I.max()
    plt.plot(wl,I+i/10)
 102: ls
 103: _96
 104: pd.read_csv(_[0])
 105:
for i,fname in enumerate(_96):
    a = pd.read_csv(fname)
    wl = a['Lambda'].to_numpy()
    I  = a['Intensity'].to_numpy()
    I /= np.nanmax(I)
    plt.plot(wl,I+i/10)
 106: _96[-7]
 107: 3_
 108: _
 109: _105
 110: _104
 111: _96
 112: sorted(_)
 113: plt.figure()
 114: plt.plot(pd.read_csv(_96[22])['Lambda'],pd.read_csv(_96[22])['Intensity'])
 115: plt.plot(pd.read_csv(_96[i])['Intensity'])
 116: i=23
 117: plt.plot(pd.read_csv(_96[i])['Intensity'])
 118: _96[23]
 119: plt.figure()
 120:
for i,fname in enumerate(_96):
    a = pd.read_csv(fname)
    wl = a['Lambda'].to_numpy()
    I  = a['Intensity'].to_numpy()
    plt.plot(wl,I+i/10)
 121: plt.cla()
 122:
for i,fname in enumerate(_96):
    a = pd.read_csv(fname)
    wl = a['Lambda'].to_numpy()
    I  = a['Intensity'].to_numpy()
    plt.plot(wl,I+i/100)
 123: plt.cla()
 124:
for i,fname in enumerate(_96):
    a = pd.read_csv(fname)
    wl = a['Lambda'].to_numpy()
    I  = a['Intensity'].to_numpy()
    plt.plot(wl,I+i/1000)
 125:
for i,fname in enumerate(_96):
    a = pd.read_csv(fname)
    wl = a['Lambda'].to_numpy()
    I  = a['Intensity'].to_numpy()
    plt.plot(wl,I+i/1000)
 126: plt.close('all')
 127: history
 128: history > alex_traitement.txt
 129: ls
 130: ls |grep alex
 131: np.save_txt(history, 'alex_traitement')
 132: np.savetxt(history, 'alex_traitement')
 133: a=history
 134: %history -g -f alex_traitement.txt
